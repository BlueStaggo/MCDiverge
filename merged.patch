--- net/minecraft/src/RenderList.java
+++ net/minecraft/src/RenderList.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.IntBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderList {
--- net/minecraft/src/GuiErrorScreen.java
+++ net/minecraft/src/GuiErrorScreen.java
@@ -7,13 +7,13 @@
 	public void initGui() {
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawGradientRect(0, 0, this.width, this.height, -12574688, -11530224);
-		this.drawCenteredString(this.fontRenderer, this.title, this.width / 2, 90, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.text, this.width / 2, 110, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.title, this.width / 2, 90, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.text, this.width / 2, 110, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 }
--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -9,48 +9,52 @@
 		this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(worldObj.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(itemStack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false)) {
+			if(worldObj.canBlockBePlacedAt(this.blockID, x, y, z, false)) {
 				Block var8 = Block.blocksList[this.blockID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.blockID)) {
-					Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+				if(worldObj.setBlockAndMetadataWithNotify(x, y, z, this.blockID, itemStack.itemMetadata)) {
+					Block.blocksList[this.blockID].onBlockPlaced(worldObj, x, y, z, side);
+					worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
+					--itemStack.stackSize;
 				}
 			}
 
 			return true;
 		}
+	}
+
+	public int getIconIndex(ItemStack itemStack) {
+		return Block.blocksList[blockID].getBlockTextureFromSideAndMetadata(2, itemStack.itemMetadata);
 	}
 }
--- net/minecraft/src/Packet31RelEntityMove.java
+++ net/minecraft/src/Packet31RelEntityMove.java
@@ -8,28 +8,28 @@
 	public Packet31RelEntityMove() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
+	public Packet31RelEntityMove(int entityID, byte xPosition, byte yPosition, byte zPosition) {
+		super(entityID);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
 	}
 
 	public int getPacketSize() {
 		return 7;
-	}
-
-	public Packet31RelEntityMove(int var1, byte var2, byte var3, byte var4) {
-		super(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
 	}
 }
--- net/minecraft/src/NBTTagLong.java
+++ net/minecraft/src/NBTTagLong.java
@@ -10,16 +10,16 @@
 	public NBTTagLong() {
 	}
 
-	public NBTTagLong(long var1) {
-		this.longValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeLong(this.longValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.longValue = var1.readLong();
+	public NBTTagLong(long value) {
+		this.longValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeLong(this.longValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.longValue = dataInput.readLong();
 	}
 
 	public byte getType() {
--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class GuiIngameMenu extends GuiScreen {
 	private int updateCounter2 = 0;
 	private int updateCounter = 0;
@@ -16,25 +18,25 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
 		}
 
-		if(var1.id == 1) {
+		if(button.id == 1) {
 			if(this.mc.isMultiplayerWorld()) {
 				this.mc.theWorld.sendQuittingDisconnectingPacket();
 			}
 
+			GuiScreen.setBgType(new Random().nextInt(4));
 			this.mc.changeWorld1((World)null);
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
-		if(var1.id == 4) {
+		if(button.id == 4) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 			this.mc.setIngameFocus();
 		}
-
 	}
 
 	public void updateScreen() {
@@ -42,17 +44,17 @@
 		++this.updateCounter;
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
 		boolean var4 = !this.mc.theWorld.saveWorld(this.updateCounter2++);
 		if(var4 || this.updateCounter < 20) {
-			float var5 = ((float)(this.updateCounter % 10) + var3) / 10.0F;
+			float var5 = ((float)(this.updateCounter % 10) + renderPartialTick) / 10.0F;
 			var5 = MathHelper.sin(var5 * (float)Math.PI * 2.0F) * 0.2F + 0.8F;
 			int var6 = (int)(255.0F * var5);
 			this.drawString(this.fontRenderer, "Saving level..", 8, this.height - 16, var6 << 16 | var6 << 8 | var6);
 		}
 
-		this.drawCenteredString(this.fontRenderer, "Game menu", this.width / 2, 40, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Game menu", this.width / 2, 40, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -10,124 +10,121 @@
 public class NBTTagCompound extends NBTBase {
 	private Map tagMap = new HashMap();
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		Iterator var2 = this.tagMap.values().iterator();
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		Iterator iterator2 = this.tagMap.values().iterator();
 
-		while(var2.hasNext()) {
-			NBTBase var3 = (NBTBase)var2.next();
-			NBTBase.writeNamedTag(var3, var1);
+		while(iterator2.hasNext()) {
+			NBTBase nBTBase3 = (NBTBase)iterator2.next();
+			NBTBase.writeNamedTag(nBTBase3, dataOutput);
 		}
 
-		var1.writeByte(0);
+		dataOutput.writeByte(0);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 		this.tagMap.clear();
 
-		while(true) {
-			NBTBase var2 = NBTBase.readNamedTag(var1);
-			if(var2.getType() == 0) {
-				return;
-			}
-
-			this.tagMap.put(var2.getKey(), var2);
+		NBTBase nBTBase2;
+		while((nBTBase2 = NBTBase.readNamedTag(dataInput)).getType() != 0) {
+			this.tagMap.put(nBTBase2.getKey(), nBTBase2);
 		}
+
 	}
 
 	public byte getType() {
 		return (byte)10;
 	}
 
-	public void setTag(String var1, NBTBase var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setByte(String var1, byte var2) {
-		this.tagMap.put(var1, (new NBTTagByte(var2)).setKey(var1));
-	}
-
-	public void setShort(String var1, short var2) {
-		this.tagMap.put(var1, (new NBTTagShort(var2)).setKey(var1));
-	}
-
-	public void setInteger(String var1, int var2) {
-		this.tagMap.put(var1, (new NBTTagInt(var2)).setKey(var1));
-	}
-
-	public void setLong(String var1, long var2) {
-		this.tagMap.put(var1, (new NBTTagLong(var2)).setKey(var1));
-	}
-
-	public void setFloat(String var1, float var2) {
-		this.tagMap.put(var1, (new NBTTagFloat(var2)).setKey(var1));
-	}
-
-	public void setDouble(String var1, double var2) {
-		this.tagMap.put(var1, (new NBTTagDouble(var2)).setKey(var1));
-	}
-
-	public void setString(String var1, String var2) {
-		this.tagMap.put(var1, (new NBTTagString(var2)).setKey(var1));
-	}
-
-	public void setByteArray(String var1, byte[] var2) {
-		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
-	}
-
-	public void setCompoundTag(String var1, NBTTagCompound var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setBoolean(String var1, boolean var2) {
-		this.setByte(var1, (byte)(var2 ? 1 : 0));
-	}
-
-	public boolean hasKey(String var1) {
-		return this.tagMap.containsKey(var1);
-	}
-
-	public byte getByte(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagByte)this.tagMap.get(var1)).byteValue;
-	}
-
-	public short getShort(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagShort)this.tagMap.get(var1)).shortValue;
-	}
-
-	public int getInteger(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagInt)this.tagMap.get(var1)).intValue;
-	}
-
-	public long getLong(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0L : ((NBTTagLong)this.tagMap.get(var1)).longValue;
-	}
-
-	public float getFloat(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0F : ((NBTTagFloat)this.tagMap.get(var1)).floatValue;
-	}
-
-	public double getDouble(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0D : ((NBTTagDouble)this.tagMap.get(var1)).doubleValue;
-	}
-
-	public String getString(String var1) {
-		return !this.tagMap.containsKey(var1) ? "" : ((NBTTagString)this.tagMap.get(var1)).stringValue;
-	}
-
-	public byte[] getByteArray(String var1) {
-		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
-	}
-
-	public NBTTagCompound getCompoundTag(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(var1);
-	}
-
-	public NBTTagList getTagList(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagList() : (NBTTagList)this.tagMap.get(var1);
-	}
-
-	public boolean getBoolean(String var1) {
-		return this.getByte(var1) != 0;
+	public void setTag(String name, NBTBase tag) {
+		this.tagMap.put(name, tag.setKey(name));
+	}
+
+	public void setByte(String name, byte value) {
+		this.tagMap.put(name, (new NBTTagByte(value)).setKey(name));
+	}
+
+	public void setShort(String name, short value) {
+		this.tagMap.put(name, (new NBTTagShort(value)).setKey(name));
+	}
+
+	public void setInteger(String name, int value) {
+		this.tagMap.put(name, (new NBTTagInt(value)).setKey(name));
+	}
+
+	public void setLong(String name, long value) {
+		this.tagMap.put(name, (new NBTTagLong(value)).setKey(name));
+	}
+
+	public void setFloat(String name, float value) {
+		this.tagMap.put(name, (new NBTTagFloat(value)).setKey(name));
+	}
+
+	public void setDouble(String name, double value) {
+		this.tagMap.put(name, (new NBTTagDouble(value)).setKey(name));
+	}
+
+	public void setString(String name, String value) {
+		this.tagMap.put(name, (new NBTTagString(value)).setKey(name));
+	}
+
+	public void setByteArray(String name, byte[] value) {
+		this.tagMap.put(name, (new NBTTagByteArray(value)).setKey(name));
+	}
+
+	public void setCompoundTag(String name, NBTTagCompound compoundTag) {
+		this.tagMap.put(name, compoundTag.setKey(name));
+	}
+
+	public void setBoolean(String name, boolean value) {
+		this.setByte(name, (byte)(value ? 1 : 0));
+	}
+
+	public boolean hasKey(String name) {
+		return this.tagMap.containsKey(name);
+	}
+
+	public byte getByte(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagByte)this.tagMap.get(name)).byteValue;
+	}
+
+	public short getShort(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagShort)this.tagMap.get(name)).shortValue;
+	}
+
+	public int getInteger(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagInt)this.tagMap.get(name)).intValue;
+	}
+
+	public long getLong(String name) {
+		return !this.tagMap.containsKey(name) ? 0L : ((NBTTagLong)this.tagMap.get(name)).longValue;
+	}
+
+	public float getFloat(String name) {
+		return !this.tagMap.containsKey(name) ? 0.0F : ((NBTTagFloat)this.tagMap.get(name)).floatValue;
+	}
+
+	public double getDouble(String name) {
+		return !this.tagMap.containsKey(name) ? 0.0D : ((NBTTagDouble)this.tagMap.get(name)).doubleValue;
+	}
+
+	public String getString(String name) {
+		return !this.tagMap.containsKey(name) ? "" : ((NBTTagString)this.tagMap.get(name)).stringValue;
+	}
+
+	public byte[] getByteArray(String name) {
+		return !this.tagMap.containsKey(name) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(name)).byteArray;
+	}
+
+	public NBTTagCompound getCompoundTag(String name) {
+		return !this.tagMap.containsKey(name) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(name);
+	}
+
+	public NBTTagList getTagList(String name) {
+		return !this.tagMap.containsKey(name) ? new NBTTagList() : (NBTTagList)this.tagMap.get(name);
+	}
+
+	public boolean getBoolean(String name) {
+		return this.getByte(name) != 0;
 	}
 
 	public String toString() {
--- net/minecraft/src/RecipesWeapons.java
+++ net/minecraft/src/RecipesWeapons.java
@@ -4,17 +4,20 @@
 	private String[][] recipePatterns = new String[][]{{"X", "X", "#"}};
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.swordWood, Item.swordStone, Item.swordSteel, Item.swordDiamond, Item.swordGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), this.recipePatterns[var4], '#', Item.stick, 'X', var3);
 			}
 		}
 
-		var1.addRecipe(new ItemStack(Item.bow, 1), new Object[]{" #X", "# X", " #X", Character.valueOf('X'), Item.silk, Character.valueOf('#'), Item.stick});
-		var1.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", Character.valueOf('Y'), Item.feather, Character.valueOf('X'), Item.flint, Character.valueOf('#'), Item.stick});
+		craftingManager.addRecipe(new ItemStack(Item.bow, 1), " #X", "# X", " #X", 'X', Item.silk, '#', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.arrow, 4), "X", "#", "Y", 'Y', Item.feather, 'X', Item.flint, '#', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffRuby, 1), "#", "o", "/", '#', Item.ruby, 'o', Item.ingotGold, '/', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffSapphire, 1), "#", "o", "/", '#', Item.sapphire, 'o', Item.ingotIron, '/', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffSparkle, 1), "#", "/", "/", '#', Item.starChunk, '/', Item.stick);
 	}
 }
--- net/minecraft/src/ThreadConnectToServer.java
+++ net/minecraft/src/ThreadConnectToServer.java
@@ -2,6 +2,7 @@
 
 import java.net.ConnectException;
 import java.net.UnknownHostException;
+
 import net.minecraft.client.Minecraft;
 
 class ThreadConnectToServer extends Thread {
@@ -10,11 +11,11 @@
 	final int port;
 	final GuiConnecting connectingGui;
 
-	ThreadConnectToServer(GuiConnecting var1, Minecraft var2, String var3, int var4) {
-		this.connectingGui = var1;
-		this.mc = var2;
-		this.ip = var3;
-		this.port = var4;
+	ThreadConnectToServer(GuiConnecting guiConnecting, Minecraft minecraft, String ip, int port) {
+		this.connectingGui = guiConnecting;
+		this.mc = minecraft;
+		this.ip = ip;
+		this.port = port;
 	}
 
 	public void run() {
@@ -25,25 +26,25 @@
 			}
 
 			GuiConnecting.getNetClientHandler(this.connectingGui).addToSendQueue(new Packet2Handshake(this.mc.session.username));
-		} catch (UnknownHostException var2) {
+		} catch (UnknownHostException unknownHostException2) {
 			if(GuiConnecting.isCancelled(this.connectingGui)) {
 				return;
 			}
 
 			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", "Unknown host \'" + this.ip + "\'"));
-		} catch (ConnectException var3) {
-			if(GuiConnecting.isCancelled(this.connectingGui)) {
-				return;
-			}
-
-			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", var3.getMessage()));
-		} catch (Exception var4) {
-			if(GuiConnecting.isCancelled(this.connectingGui)) {
-				return;
-			}
-
-			var4.printStackTrace();
-			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", var4.toString()));
+		} catch (ConnectException connectException3) {
+			if(GuiConnecting.isCancelled(this.connectingGui)) {
+				return;
+			}
+
+			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", connectException3.getMessage()));
+		} catch (Exception exception4) {
+			if(GuiConnecting.isCancelled(this.connectingGui)) {
+				return;
+			}
+
+			exception4.printStackTrace();
+			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", exception4.toString()));
 		}
 
 	}
--- net/minecraft/src/EntityReddustFX.java
+++ net/minecraft/src/EntityReddustFX.java
@@ -14,7 +14,7 @@
 		this.motionZ *= (double)0.1F;
 		this.particleRed = (float)(Math.random() * (double)0.3F) + 0.7F;
 		this.particleGreen = this.particleBlue = (float)(Math.random() * (double)0.1F);
-		this.particleScale *= 12.0F / 16.0F;
+		this.particleScale *= 0.75F;
 		this.particleScale *= var8;
 		this.reddustParticleScale = this.particleScale;
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
@@ -22,8 +22,8 @@
 		this.noClip = false;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge * 32.0F;
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float var8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge * 32.0F;
 		if(var8 < 0.0F) {
 			var8 = 0.0F;
 		}
@@ -33,7 +33,7 @@
 		}
 
 		this.particleScale = this.reddustParticleScale * var8;
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiTransparentButton.java
@@ -1,0 +1,34 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.FontRenderer;
+import net.minecraft.src.GuiButton;
+import org.lwjgl.opengl.GL11;
+
+public class GuiTransparentButton extends GuiButton {
+	public GuiTransparentButton(int var1, int var2, int var3, String var4) {
+		super(var1, var2, var3, var4);
+	}
+
+	public GuiTransparentButton(int var1, int var2, int var3, int var4, int var5, String var6) {
+		super(var1, var2, var3, var4, var5, var6);
+	}
+
+	public void drawButton(Minecraft minecraft, int mouseX, int mouseY) {
+		if(this.visible) {
+			FontRenderer fontRenderer4 = minecraft.fontRenderer;
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			boolean var5 = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
+			int var6 = this.getHoverState(var5);
+			this.mouseDragged(minecraft, mouseX, mouseY);
+			if(!this.enabled) {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, -6250336);
+			} else if(var5) {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, 16777120);
+			} else {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, 14737632);
+			}
+
+		}
+	}
+}
--- net/minecraft/src/ChunkProviderServer.java
+++ net/minecraft/src/ChunkProviderServer.java
@@ -17,18 +17,18 @@
 	private List loadedChunks = new ArrayList();
 	private WorldServer worldObj;
 
-	public ChunkProviderServer(WorldServer var1, IChunkLoader var2, IChunkProvider var3) {
-		this.chunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderServer(WorldServer worldServer, IChunkLoader chunkLoader, IChunkProvider chunkProvider) {
+		this.chunk = new Chunk(worldServer, new byte[32768], 0, 0);
 		this.chunk.isChunkRendered = true;
 		this.chunk.neverSave = true;
-		this.worldObj = var1;
-		this.serverChunkLoader = var2;
-		this.serverChunkProvider = var3;
+		this.worldObj = worldServer;
+		this.serverChunkLoader = chunkLoader;
+		this.serverChunkProvider = chunkProvider;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		return this.id2ChunkMap.containsKey(var3);
+	public boolean chunkExists(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		return this.id2ChunkMap.containsKey(chunkCoordinates3);
 	}
 
 	public void dropChunk(int var1, int var2) {
@@ -41,125 +41,125 @@
 
 	}
 
-	public Chunk loadChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		this.droppedChunksSet.remove(new ChunkCoordinates(var1, var2));
-		Chunk var4 = (Chunk)this.id2ChunkMap.get(var3);
-		if(var4 == null) {
-			var4 = this.loadAndSaveChunk(var1, var2);
-			if(var4 == null) {
+	public Chunk loadChunk(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		this.droppedChunksSet.remove(new ChunkCoordinates(x, z));
+		Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+		if(chunk4 == null) {
+			chunk4 = this.loadAndSaveChunk(x, z);
+			if(chunk4 == null) {
 				if(this.serverChunkProvider == null) {
-					var4 = this.chunk;
+					chunk4 = this.chunk;
 				} else {
-					var4 = this.serverChunkProvider.provideChunk(var1, var2);
+					chunk4 = this.serverChunkProvider.provideChunk(x, z);
 				}
 			}
 
-			this.id2ChunkMap.put(var3, var4);
-			this.loadedChunks.add(var4);
-			if(var4 != null) {
-				var4.onChunkLoad();
-			}
-
-			if(!var4.isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-				this.populate(this, var1, var2);
-			}
-
-			if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-				this.populate(this, var1 - 1, var2);
-			}
-
-			if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-				this.populate(this, var1, var2 - 1);
-			}
-
-			if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-				this.populate(this, var1 - 1, var2 - 1);
+			this.id2ChunkMap.put(chunkCoordinates3, chunk4);
+			this.loadedChunks.add(chunk4);
+			if(chunk4 != null) {
+				chunk4.onChunkLoad();
+			}
+
+			if(!chunk4.isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
+				this.populate(this, x, z);
+			}
+
+			if(this.chunkExists(x - 1, z) && !this.provideChunk(x - 1, z).isTerrainPopulated && this.chunkExists(x - 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x - 1, z)) {
+				this.populate(this, x - 1, z);
+			}
+
+			if(this.chunkExists(x, z - 1) && !this.provideChunk(x, z - 1).isTerrainPopulated && this.chunkExists(x + 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x + 1, z)) {
+				this.populate(this, x, z - 1);
+			}
+
+			if(this.chunkExists(x - 1, z - 1) && !this.provideChunk(x - 1, z - 1).isTerrainPopulated && this.chunkExists(x - 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x - 1, z)) {
+				this.populate(this, x - 1, z - 1);
 			}
 		}
 
-		return var4;
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		Chunk var4 = (Chunk)this.id2ChunkMap.get(var3);
-		return var4 == null ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(var1, var2) : this.chunk) : var4;
-	}
-
-	private Chunk loadAndSaveChunk(int var1, int var2) {
+		return chunk4;
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+		return chunk4 == null ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(x, z) : this.chunk) : chunk4;
+	}
+
+	private Chunk loadAndSaveChunk(int x, int z) {
 		if(this.serverChunkLoader == null) {
 			return null;
 		} else {
 			try {
-				Chunk var3 = this.serverChunkLoader.loadChunk(this.worldObj, var1, var2);
-				if(var3 != null) {
-					var3.lastSaveTime = this.worldObj.worldTime;
+				Chunk chunk3 = this.serverChunkLoader.loadChunk(this.worldObj, x, z);
+				if(chunk3 != null) {
+					chunk3.lastSaveTime = this.worldObj.worldTime;
 				}
 
-				return var3;
-			} catch (Exception var4) {
-				var4.printStackTrace();
+				return chunk3;
+			} catch (Exception exception4) {
+				exception4.printStackTrace();
 				return null;
 			}
 		}
 	}
 
-	private void saveExtraChunkData(Chunk var1) {
-		if(this.serverChunkLoader != null) {
-			try {
-				this.serverChunkLoader.saveExtraChunkData(this.worldObj, var1);
-			} catch (Exception var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	private void saveChunk(Chunk var1) {
-		if(this.serverChunkLoader != null) {
-			try {
-				var1.lastSaveTime = this.worldObj.worldTime;
-				this.serverChunkLoader.saveChunk(this.worldObj, var1);
-			} catch (IOException var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	public void populate(IChunkProvider var1, int var2, int var3) {
-		Chunk var4 = this.provideChunk(var2, var3);
-		if(!var4.isTerrainPopulated) {
-			var4.isTerrainPopulated = true;
+	private void saveExtraChunkData(Chunk chunk) {
+		if(this.serverChunkLoader != null) {
+			try {
+				this.serverChunkLoader.saveExtraChunkData(this.worldObj, chunk);
+			} catch (Exception exception3) {
+				exception3.printStackTrace();
+			}
+
+		}
+	}
+
+	private void saveChunk(Chunk chunk) {
+		if(this.serverChunkLoader != null) {
+			try {
+				chunk.lastSaveTime = this.worldObj.worldTime;
+				this.serverChunkLoader.saveChunk(this.worldObj, chunk);
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+
+		}
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		Chunk chunk4 = this.provideChunk(x, z);
+		if(!chunk4.isTerrainPopulated) {
+			chunk4.isTerrainPopulated = true;
 			if(this.serverChunkProvider != null) {
-				this.serverChunkProvider.populate(var1, var2, var3);
-				var4.setChunkModified();
+				this.serverChunkProvider.populate(chunkProvider, x, z);
+				chunk4.setChunkModified();
 			}
 		}
 
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean flag, IProgressUpdate progressUpdate) {
 		int var3 = 0;
 
 		for(int var4 = 0; var4 < this.loadedChunks.size(); ++var4) {
-			Chunk var5 = (Chunk)this.loadedChunks.get(var4);
-			if(var1 && !var5.neverSave) {
-				this.saveExtraChunkData(var5);
+			Chunk chunk5 = (Chunk)this.loadedChunks.get(var4);
+			if(flag && !chunk5.neverSave) {
+				this.saveExtraChunkData(chunk5);
 			}
 
-			if(var5.needsSaving(var1)) {
-				this.saveChunk(var5);
-				var5.isModified = false;
+			if(chunk5.needsSaving(flag)) {
+				this.saveChunk(chunk5);
+				chunk5.isModified = false;
 				++var3;
-				if(var3 == 2 && !var1) {
+				if(var3 == 2 && !flag) {
 					return false;
 				}
 			}
 		}
 
-		if(var1) {
+		if(flag) {
 			if(this.serverChunkLoader == null) {
 				return true;
 			}
@@ -174,14 +174,14 @@
 		if(!this.worldObj.levelSaving) {
 			for(int var1 = 0; var1 < 16; ++var1) {
 				if(!this.droppedChunksSet.isEmpty()) {
-					ChunkCoordinates var2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
-					Chunk var3 = this.provideChunk(var2.posX, var2.posZ);
-					var3.onChunkUnload();
-					this.saveChunk(var3);
-					this.saveExtraChunkData(var3);
-					this.droppedChunksSet.remove(var2);
-					this.id2ChunkMap.remove(var2);
-					this.loadedChunks.remove(var3);
+					ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
+					Chunk chunk3 = this.provideChunk(chunkCoordinates2.posX, chunkCoordinates2.posZ);
+					chunk3.onChunkUnload();
+					this.saveChunk(chunk3);
+					this.saveExtraChunkData(chunk3);
+					this.droppedChunksSet.remove(chunkCoordinates2);
+					this.id2ChunkMap.remove(chunkCoordinates2);
+					this.loadedChunks.remove(chunk3);
 				}
 			}
 
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -1,22 +1,84 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockLog extends Block {
-	protected BlockLog(int var1) {
-		super(var1, Material.wood);
+	private final List<Integer[]> leavesToUpdate = new ArrayList<>();
+
+	protected BlockLog(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 20;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.wood.blockID;
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : 20);
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata == 0 ? getBlockTextureFromSide(side)
+			: textureXY(6, 8 + metadata) + (side <= 1 ? 1 : 0);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? 21 : (side == 0 ? 21 : 20);
+	}
+
+	private boolean recursiveDestroy(World worldObj, int x, int y, int z, int metadata, EntityPlayer player, ItemStack currentItem) {
+		for (int rx = x - 1; rx <= x + 1; rx++) {
+			for (int ry = y; ry <= y + 1; ry++) {
+				for (int rz = z - 1; rz <= z + 1; rz++) {
+					if (worldObj.getBlockId(rx, ry, rz) == this.blockID
+						&& currentItem.itemDmg <= currentItem.getMaxDamage()
+						&& (rx != x || ry != y || rz != z)) {
+						currentItem.onDestroyBlock(this.blockID, rx, ry, rz);
+						if (currentItem.stackSize == 0) {
+							currentItem.onItemDestroyedByUse(player);
+							player.destroyCurrentEquippedItem();
+							return false;
+						}
+
+						this.dropBlockAsItem(worldObj, rx, ry, rz, metadata);
+						worldObj.setBlockWithNotify(rx, ry, rz, 0);
+						if (!this.recursiveDestroy(worldObj, rx, ry, rz, metadata, player, currentItem)) {
+							return false;
+						}
+					} else if (worldObj.getBlockId(rx, ry, rz) == Block.leaves.blockID) {
+						leavesToUpdate.add(new Integer[] {rx, ry, rz});
+					}
+				}
+			}
+		}
+		return true;
+	}
+
+	public void onBlockDestroyedByPlayer(World worldObj, int x, int y, int z, int metadata) {
+		EntityPlayer player = worldObj.getClosestPlayer(x, y, z, 10);
+		ItemStack currentItem = player.inventory.getCurrentItem();
+		if (currentItem == null) {
+			return;
+		}
+		Item heldItem = currentItem.getItem();
+		if (!(heldItem instanceof ItemTool
+			  && ((ItemTool) heldItem).effectiveAgainst(this)
+			  && player.isSneaking())) {
+			return;
+		}
+
+		recursiveDestroy(worldObj, x, y, z, metadata, player, currentItem);
+		for (Integer[] leaf : leavesToUpdate) {
+			Block.leaves.fall(worldObj, leaf[0], leaf[1], leaf[2]);
+		}
+		leavesToUpdate.clear();
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -8,12 +8,12 @@
 	private int health = 5;
 	public float hoverStart = (float)(Math.random() * Math.PI * 2.0D);
 
-	public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8) {
-		super(var1);
+	public EntityItem(World worldObj, double x, double y, double z, ItemStack item) {
+		super(worldObj);
 		this.setSize(0.25F, 0.25F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
-		this.item = var8;
+		this.setPosition(x, y, z);
+		this.item = item;
 		this.rotationYaw = (float)(Math.random() * 360.0D);
 		this.motionX = (double)((float)(Math.random() * (double)0.2F - (double)0.1F));
 		this.motionY = (double)0.2F;
@@ -49,7 +49,7 @@
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
 		float var1 = 0.98F;
 		if(this.onGround) {
-			var1 = 0.1F * 0.1F * 58.8F;
+			var1 = 0.58800006F;
 			int var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
 			if(var2 > 0) {
 				var1 = Block.blocksList[var2].slipperiness * 0.98F;
@@ -75,13 +75,13 @@
 		return this.worldObj.handleMaterialAcceleration(this.boundingBox, Material.water, this);
 	}
 
-	private boolean pushOutOfBlocks(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		double var10 = var1 - (double)var7;
-		double var12 = var3 - (double)var8;
-		double var14 = var5 - (double)var9;
+	private boolean pushOutOfBlocks(double x, double y, double z) {
+		int var7 = MathHelper.floor_double(x);
+		int var8 = MathHelper.floor_double(y);
+		int var9 = MathHelper.floor_double(z);
+		double var10 = x - (double)var7;
+		double var12 = y - (double)var8;
+		double var14 = z - (double)var9;
 		if(Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9)]) {
 			boolean var16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 - 1, var8, var9)];
 			boolean var17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 + 1, var8, var9)];
@@ -150,12 +150,12 @@
 		return false;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int damage) {
+		this.attackEntityFrom((Entity)null, damage);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		this.health -= var2;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		this.health -= damage;
 		if(this.health <= 0) {
 			this.setEntityDead();
 		}
@@ -163,28 +163,37 @@
 		return false;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)((byte)this.health));
-		var1.setShort("Age", (short)this.age);
-		var1.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health") & 255;
-		this.age = var1.getShort("Age");
-		NBTTagCompound var2 = var1.getCompoundTag("Item");
-		this.item = new ItemStack(var2);
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(!this.worldObj.multiplayerWorld) {
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setShort("Health", (short)((byte)this.health));
+		compoundTag.setShort("Age", (short)this.age);
+		compoundTag.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.health = compoundTag.getShort("Health") & 255;
+		this.age = compoundTag.getShort("Age");
+		NBTTagCompound nBTTagCompound2 = compoundTag.getCompoundTag("Item");
+		this.item = new ItemStack(nBTTagCompound2);
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.worldObj.canDoClientAction()) {
 			int var2 = this.item.stackSize;
-			if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
+			if(this.delayBeforeCanPickup == 0 && entityPlayer.inventory.addItemStackToInventory(this.item)) {
 				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-				var1.onItemPickup(this, var2);
+				entityPlayer.onItemPickup(this, var2);
 				this.setEntityDead();
 			}
-
 		}
+	}
+
+	public float getBrightness(float renderPartialTick) {
+		return this.item.itemID == Item.starChunk.shiftedIndex ? 1.0F : super.getBrightness(renderPartialTick);
+	}
+
+	public boolean isInRangeToRenderDist(double distance) {
+		double var3 = this.boundingBox.getAverageEdgeLength();
+		var3 *= 2048.0D * this.renderDistanceWeight;
+		return distance < var3 * var3;
 	}
 }
--- net/minecraft/src/ModelRenderer.java
+++ net/minecraft/src/ModelRenderer.java
@@ -46,28 +46,28 @@
 			var1 = var11;
 		}
 
-		PositionTexureVertex var20 = new PositionTexureVertex(var1, var2, var3, 0.0F, 0.0F);
-		PositionTexureVertex var12 = new PositionTexureVertex(var8, var2, var3, 0.0F, 8.0F);
-		PositionTexureVertex var13 = new PositionTexureVertex(var8, var9, var3, 8.0F, 8.0F);
-		PositionTexureVertex var14 = new PositionTexureVertex(var1, var9, var3, 8.0F, 0.0F);
-		PositionTexureVertex var15 = new PositionTexureVertex(var1, var2, var10, 0.0F, 0.0F);
-		PositionTexureVertex var16 = new PositionTexureVertex(var8, var2, var10, 0.0F, 8.0F);
-		PositionTexureVertex var17 = new PositionTexureVertex(var8, var9, var10, 8.0F, 8.0F);
-		PositionTexureVertex var18 = new PositionTexureVertex(var1, var9, var10, 8.0F, 0.0F);
-		this.corners[0] = var20;
-		this.corners[1] = var12;
-		this.corners[2] = var13;
-		this.corners[3] = var14;
-		this.corners[4] = var15;
-		this.corners[5] = var16;
-		this.corners[6] = var17;
-		this.corners[7] = var18;
-		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
-		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
-		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
-		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
-		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
-		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
+		PositionTexureVertex positionTexureVertex20 = new PositionTexureVertex(var1, var2, var3, 0.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex12 = new PositionTexureVertex(var8, var2, var3, 0.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex13 = new PositionTexureVertex(var8, var9, var3, 8.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex14 = new PositionTexureVertex(var1, var9, var3, 8.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex15 = new PositionTexureVertex(var1, var2, var10, 0.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex16 = new PositionTexureVertex(var8, var2, var10, 0.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex17 = new PositionTexureVertex(var8, var9, var10, 8.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex18 = new PositionTexureVertex(var1, var9, var10, 8.0F, 0.0F);
+		this.corners[0] = positionTexureVertex20;
+		this.corners[1] = positionTexureVertex12;
+		this.corners[2] = positionTexureVertex13;
+		this.corners[3] = positionTexureVertex14;
+		this.corners[4] = positionTexureVertex15;
+		this.corners[5] = positionTexureVertex16;
+		this.corners[6] = positionTexureVertex17;
+		this.corners[7] = positionTexureVertex18;
+		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex16, positionTexureVertex12, positionTexureVertex13, positionTexureVertex17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
+		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex20, positionTexureVertex15, positionTexureVertex18, positionTexureVertex14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
+		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex16, positionTexureVertex15, positionTexureVertex20, positionTexureVertex12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
+		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex13, positionTexureVertex14, positionTexureVertex18, positionTexureVertex17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
+		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex12, positionTexureVertex20, positionTexureVertex14, positionTexureVertex13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
+		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex15, positionTexureVertex16, positionTexureVertex17, positionTexureVertex18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
 		if(this.mirror) {
 			for(int var19 = 0; var19 < this.faces.length; ++var19) {
 				this.faces[var19].flipFace();
@@ -101,15 +101,15 @@
 					GL11.glPushMatrix();
 					GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
 					if(this.rotateAngleZ != 0.0F) {
-						GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+						GL11.glRotatef(this.rotateAngleZ * 57.295776F, 0.0F, 0.0F, 1.0F);
 					}
 
 					if(this.rotateAngleY != 0.0F) {
-						GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+						GL11.glRotatef(this.rotateAngleY * 57.295776F, 0.0F, 1.0F, 0.0F);
 					}
 
 					if(this.rotateAngleX != 0.0F) {
-						GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+						GL11.glRotatef(this.rotateAngleX * 57.295776F, 1.0F, 0.0F, 0.0F);
 					}
 
 					GL11.glCallList(this.displayList);
@@ -134,15 +134,15 @@
 				} else {
 					GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
 					if(this.rotateAngleZ != 0.0F) {
-						GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+						GL11.glRotatef(this.rotateAngleZ * 57.295776F, 0.0F, 0.0F, 1.0F);
 					}
 
 					if(this.rotateAngleY != 0.0F) {
-						GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+						GL11.glRotatef(this.rotateAngleY * 57.295776F, 0.0F, 1.0F, 0.0F);
 					}
 
 					if(this.rotateAngleX != 0.0F) {
-						GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+						GL11.glRotatef(this.rotateAngleX * 57.295776F, 1.0F, 0.0F, 0.0F);
 					}
 				}
 
@@ -153,10 +153,10 @@
 	private void compileDisplayList(float var1) {
 		this.displayList = GLAllocation.generateDisplayLists(1);
 		GL11.glNewList(this.displayList, GL11.GL_COMPILE);
-		Tessellator var2 = Tessellator.instance;
+		Tessellator tessellator2 = Tessellator.instance;
 
 		for(int var3 = 0; var3 < this.faces.length; ++var3) {
-			this.faces[var3].draw(var2, var1);
+			this.faces[var3].draw(tessellator2, var1);
 		}
 
 		GL11.glEndList();
--- net/minecraft/src/SlotInventory.java
+++ net/minecraft/src/SlotInventory.java
@@ -1,22 +1,28 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class SlotInventory extends Slot {
 	private final GuiContainer guiContainer;
 	public final int xDisplayPosition;
 	public final int yDisplayPosition;
 
-	public SlotInventory(GuiContainer var1, IInventory var2, int var3, int var4, int var5) {
-		super(var2, var3);
-		this.guiContainer = var1;
-		this.xDisplayPosition = var4;
-		this.yDisplayPosition = var5;
+	public SlotInventory(GuiContainer guiContainer, IInventory inventory, int slotIndex, int x, int y) {
+		super(inventory, slotIndex);
+		this.guiContainer = guiContainer;
+		this.xDisplayPosition = x;
+		this.yDisplayPosition = y;
 	}
 
-	public boolean getIsMouseOverSlot(int var1, int var2) {
+	public boolean getIsMouseOverSlot(int x, int y) {
 		int var3 = (this.guiContainer.width - this.guiContainer.xSize) / 2;
 		int var4 = (this.guiContainer.height - this.guiContainer.ySize) / 2;
-		var1 -= var3;
-		var2 -= var4;
-		return var1 >= this.xDisplayPosition - 1 && var1 < this.xDisplayPosition + 16 + 1 && var2 >= this.yDisplayPosition - 1 && var2 < this.yDisplayPosition + 16 + 1;
+		x -= var3;
+		y -= var4;
+		return x >= this.xDisplayPosition - 1 && x < this.xDisplayPosition + 16 + 1 && y >= this.yDisplayPosition - 1 && y < this.yDisplayPosition + 16 + 1;
+	}
+
+	public ItemTooltip getTooltip() {
+		return this.getStack().getTooltip();
 	}
 }
--- net/minecraft/src/ModelChicken.java
+++ net/minecraft/src/ModelChicken.java
@@ -51,13 +51,13 @@
 	}
 
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleX = -(var5 / (180.0F / (float)Math.PI));
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
+		this.head.rotateAngleX = -(var5 / 57.295776F);
+		this.head.rotateAngleY = var4 / 57.295776F;
 		this.bill.rotateAngleX = this.head.rotateAngleX;
 		this.bill.rotateAngleY = this.head.rotateAngleY;
 		this.chin.rotateAngleX = this.head.rotateAngleX;
 		this.chin.rotateAngleY = this.head.rotateAngleY;
-		this.body.rotateAngleX = (float)Math.PI * 0.5F;
+		this.body.rotateAngleX = (float)Math.PI / 2F;
 		this.rightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
 		this.leftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
 		this.rightWing.rotateAngleZ = var3;
--- net/minecraft/src/CanvasMojangLogo.java
+++ net/minecraft/src/CanvasMojangLogo.java
@@ -14,7 +14,7 @@
 	public CanvasMojangLogo() {
 		try {
 			this.logo = ImageIO.read(PanelCrashReport.class.getResource("/gui/logo.png"));
-		} catch (IOException var2) {
+		} catch (IOException iOException2) {
 		}
 
 		byte var1 = 100;
@@ -22,8 +22,8 @@
 		this.setMinimumSize(new Dimension(var1, var1));
 	}
 
-	public void paint(Graphics var1) {
-		super.paint(var1);
-		var1.drawImage(this.logo, this.getWidth() / 2 - this.logo.getWidth() / 2, 32, (ImageObserver)null);
+	public void paint(Graphics graphics) {
+		super.paint(graphics);
+		graphics.drawImage(this.logo, this.getWidth() / 2 - this.logo.getWidth() / 2, 32, (ImageObserver)null);
 	}
 }
--- net/minecraft/src/NetworkAcceptThread.java
+++ net/minecraft/src/NetworkAcceptThread.java
@@ -2,28 +2,29 @@
 
 import java.io.IOException;
 import java.net.Socket;
+
 import net.minecraft.server.MinecraftServer;
 
 class NetworkAcceptThread extends Thread {
 	final MinecraftServer minecraftServer;
 	final NetworkListenThread networkListenThread;
 
-	NetworkAcceptThread(NetworkListenThread var1, String var2, MinecraftServer var3) {
+	NetworkAcceptThread(NetworkListenThread thread, String var2, MinecraftServer minecraftServer) {
 		super(var2);
-		this.networkListenThread = var1;
-		this.minecraftServer = var3;
+		this.networkListenThread = thread;
+		this.minecraftServer = minecraftServer;
 	}
 
 	public void run() {
 		while(this.networkListenThread.isListening) {
 			try {
-				Socket var1 = NetworkListenThread.getServerSocket(this.networkListenThread).accept();
-				if(var1 != null) {
-					NetLoginHandler var2 = new NetLoginHandler(this.minecraftServer, var1, "Connection #" + NetworkListenThread.incrementConnections(this.networkListenThread));
-					NetworkListenThread.addPendingConnection(this.networkListenThread, var2);
+				Socket socket1 = NetworkListenThread.getServerSocket(this.networkListenThread).accept();
+				if(socket1 != null) {
+					NetLoginHandler netLoginHandler2 = new NetLoginHandler(this.minecraftServer, socket1, "Connection #" + NetworkListenThread.incrementConnections(this.networkListenThread));
+					NetworkListenThread.addPendingConnection(this.networkListenThread, netLoginHandler2);
 				}
-			} catch (IOException var3) {
-				var3.printStackTrace();
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
 			}
 		}
 
--- net/minecraft/src/NBTTagString.java
+++ net/minecraft/src/NBTTagString.java
@@ -10,19 +10,19 @@
 	public NBTTagString() {
 	}
 
-	public NBTTagString(String var1) {
-		this.stringValue = var1;
-		if(var1 == null) {
+	public NBTTagString(String value) {
+		this.stringValue = value;
+		if(value == null) {
 			throw new IllegalArgumentException("Empty string not allowed");
 		}
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeUTF(this.stringValue);
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeUTF(this.stringValue);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.stringValue = var1.readUTF();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.stringValue = dataInput.readUTF();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,13 +1,25 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay};
+	private static Block[] blocksEffectiveAgainst = new Block[] {
+	Block.grass,
+	Block.dirt,
+	Block.sand,
+	Block.gravel,
+	Block.snow,
+	Block.blockSnow,
+	Block.blockClay
+	};
 
-	public ItemSpade(int var1, int var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+	public ItemSpade(int id, int strength) {
+		super(id, 1, Math.abs(strength), blocksEffectiveAgainst);
+		if (strength < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.snow ? true : var1 == Block.blockSnow;
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.snow || block == Block.blockSnow;
 	}
 }
--- net/minecraft/src/SpawnerServer.java
+++ net/minecraft/src/SpawnerServer.java
@@ -3,8 +3,8 @@
 class SpawnerServer extends SpawnerAnimals {
 	final WorldServer worldServer;
 
-	SpawnerServer(WorldServer var1, int var2, Class var3, Class[] var4) {
-		super(var2, var3, var4);
+	SpawnerServer(WorldServer var1, int var2, Class class3, Class[] class4) {
+		super(var2, class3, class4);
 		this.worldServer = var1;
 	}
 
--- net/minecraft/src/ModelBoat.java
+++ net/minecraft/src/ModelBoat.java
@@ -23,9 +23,9 @@
 		this.boatSides[3].setRotationPoint(0.0F, (float)(0 + var4), (float)(-var3 / 2 + 1));
 		this.boatSides[4].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
 		this.boatSides[4].setRotationPoint(0.0F, (float)(0 + var4), (float)(var3 / 2 - 1));
-		this.boatSides[0].rotateAngleX = (float)Math.PI * 0.5F;
-		this.boatSides[1].rotateAngleY = (float)Math.PI * 3.0F / 2.0F;
-		this.boatSides[2].rotateAngleY = (float)Math.PI * 0.5F;
+		this.boatSides[0].rotateAngleX = (float)Math.PI / 2F;
+		this.boatSides[1].rotateAngleY = 4.712389F;
+		this.boatSides[2].rotateAngleY = (float)Math.PI / 2F;
 		this.boatSides[3].rotateAngleY = (float)Math.PI;
 	}
 
--- net/minecraft/src/GuiSlider.java
+++ net/minecraft/src/GuiSlider.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class GuiSlider extends GuiButton {
@@ -14,7 +15,7 @@
 		this.sliderValue = var6;
 	}
 
-	protected int getHoverState(boolean var1) {
+	protected int getHoverState(boolean mousePointerHovered) {
 		return 0;
 	}
 
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -1,17 +1,42 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemFood extends Item {
-	private int healAmount;
-
-	public ItemFood(int var1, int var2) {
-		super(var1);
-		this.healAmount = var2;
-		this.maxStackSize = 1;
-	}
-
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var3.heal(this.healAmount);
-		return var1;
+	private final int healAmount;
+	private final float energyAmount;
+
+	public ItemFood(int id, int healAmount) {
+		this(id, healAmount, 0.0F);
+	}
+
+	public ItemFood(int id, int healAmount, float energyAmount) {
+		super(id);
+		this.healAmount = healAmount;
+		this.energyAmount = energyAmount;
+		this.maxStackSize = 4;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		--itemStack.stackSize;
+		entityPlayer.healthRegen = Math.min(entityPlayer.healthRegen + this.healAmount, 20 - entityPlayer.health);
+		if (entityPlayer.energyBoost < this.energyAmount) {
+			entityPlayer.energyBoost = this.energyAmount;
+		}
+		return itemStack;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return this.energyAmount > 0.0D
+				? new Object[] {
+						"Heals " + healAmount / 2.0F + (healAmount == 2 ? " heart" : " hearts"),
+						ItemTooltip.INFO_COL,
+						"Gives an energy boost",
+						ItemTooltip.INFO_COL
+				}
+				: new Object[] {
+						"Heals " + healAmount / 2.0F + (healAmount == 2 ? " heart" : " hearts"),
+						ItemTooltip.INFO_COL
+				};
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockStepType.java
@@ -1,0 +1,23 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class BlockStepType {
+	public final int sideTexture;
+	public final int topTexture;
+
+	public BlockStepType(int texture) {
+		this(texture, texture);
+	}
+
+	public BlockStepType(int texture, boolean autoSide) {
+		this(autoSide ? texture - 1 : texture, texture);
+	}
+
+	public BlockStepType(int sideTexture, int topTexture) {
+		this.sideTexture = sideTexture;
+		this.topTexture = topTexture;
+	}
+
+	public int getTextureFromSide(int side) {
+		return side <= 1 ? topTexture : sideTexture;
+	}
+}
--- net/minecraft/src/Packet13PlayerLookMove.java
+++ net/minecraft/src/Packet13PlayerLookMove.java
@@ -10,36 +10,36 @@
 		this.moving = true;
 	}
 
-	public Packet13PlayerLookMove(double var1, double var3, double var5, double var7, float var9, float var10, boolean var11) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.stance = var5;
-		this.zPosition = var7;
-		this.yaw = var9;
-		this.pitch = var10;
-		this.onGround = var11;
+	public Packet13PlayerLookMove(double x, double minY, double y, double z, float yaw, float pitch, boolean onGround) {
+		this.xPosition = x;
+		this.yPosition = minY;
+		this.stance = y;
+		this.zPosition = z;
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.onGround = onGround;
 		this.rotating = true;
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
 import org.lwjgl.opengl.GL11;
 
 public class RenderBlocks {
@@ -8,91 +9,105 @@
 	private boolean flipTexture = false;
 	private boolean renderAllFaces = false;
 
-	public RenderBlocks(IBlockAccess var1) {
-		this.blockAccess = var1;
+	public RenderBlocks(IBlockAccess blockAccess) {
+		this.blockAccess = blockAccess;
 	}
 
 	public RenderBlocks() {
 	}
 
-	public void renderBlockUsingTexture(Block var1, int var2, int var3, int var4, int var5) {
+	public void renderBlockUsingTexture(Block block, int var2, int var3, int var4, int var5) {
 		this.overrideBlockTexture = var5;
-		this.renderBlockByRenderType(var1, var2, var3, var4);
+		this.renderBlockByRenderType(block, var2, var3, var4);
 		this.overrideBlockTexture = -1;
 	}
 
-	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.getRenderType();
-		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack(var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : false)))))))))))));
+	public boolean renderBlockByRenderType(Block block, int x, int y, int z) {
+		int var5 = block.getRenderType();
+		block.setBlockBoundsBasedOnState(this.blockAccess, x, y, z);
+		return var5 == 0 ? this.renderStandardBlock(block, x, y, z)
+				: (var5 == 4 ? this.renderBlockFluids(block, x, y, z)
+				: (var5 == 13 ? this.renderBlockCactus(block, x, y, z)
+				: (var5 == 1 ? this.renderBlockReed(block, x, y, z)
+				: (var5 == 6 ? this.renderBlockCrops(block, x, y, z)
+				: (var5 == 2 ? this.renderBlockTorch(block, x, y, z)
+				: (var5 == 3 ? this.renderBlockFire(block, x, y, z)
+				: (var5 == 5 ? this.renderBlockRedstoneWire(block, x, y, z)
+				: (var5 == 8 ? this.renderBlockLadder(block, x, y, z)
+				: (var5 == 7 ? this.renderBlockDoor(block, x, y, z)
+				: (var5 == 9 ? this.renderBlockMinecartTrack(block, x, y, z)
+				: (var5 == 10 ? this.renderBlockStairs(block, x, y, z)
+				: (var5 == 11 ? this.renderBlockFence(block, x, y, z)
+				: (var5 == 12 ? this.renderBlockLever(block, x, y, z)
+				: false)))))))))))));
 	}
 
-	public boolean renderBlockTorch(Block var1, int var2, int var3, int var4) {
-		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		Tessellator var6 = Tessellator.instance;
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		if(Block.lightValue[var1.blockID] > 0) {
+	public boolean renderBlockTorch(Block block, int x, int y, int z) {
+		int var5 = this.blockAccess.getBlockMetadata(x, y, z);
+		Tessellator tessellator6 = Tessellator.instance;
+		float var7 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		if(Block.lightValue[block.blockID] > 0) {
 			var7 = 1.0F;
 		}
 
-		var6.setColorOpaque_F(var7, var7, var7);
+		tessellator6.setColorOpaque_F(var7, var7, var7);
 		double var8 = (double)0.4F;
 		double var10 = 0.5D - var8;
 		double var12 = (double)0.2F;
 		if(var5 == 1) {
-			this.renderTorchAtAngle(var1, (double)var2 - var10, (double)var3 + var12, (double)var4, -var8, 0.0D);
+			this.renderTorchAtAngle(block, (double)x - var10, (double)y + var12, (double)z, -var8, 0.0D);
 		} else if(var5 == 2) {
-			this.renderTorchAtAngle(var1, (double)var2 + var10, (double)var3 + var12, (double)var4, var8, 0.0D);
+			this.renderTorchAtAngle(block, (double)x + var10, (double)y + var12, (double)z, var8, 0.0D);
 		} else if(var5 == 3) {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 - var10, 0.0D, -var8);
+			this.renderTorchAtAngle(block, (double)x, (double)y + var12, (double)z - var10, 0.0D, -var8);
 		} else if(var5 == 4) {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 + var10, 0.0D, var8);
+			this.renderTorchAtAngle(block, (double)x, (double)y + var12, (double)z + var10, 0.0D, var8);
 		} else {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3, (double)var4, 0.0D, 0.0D);
+			this.renderTorchAtAngle(block, (double)x, (double)y, (double)z, 0.0D, 0.0D);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockLever(Block var1, int var2, int var3, int var4) {
-		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
+	public boolean renderBlockLever(Block block, int x, int y, int z) {
+		int var5 = this.blockAccess.getBlockMetadata(x, y, z);
 		int var6 = var5 & 7;
 		boolean var7 = (var5 & 8) > 0;
-		Tessellator var8 = Tessellator.instance;
+		Tessellator tessellator8 = Tessellator.instance;
 		boolean var9 = this.overrideBlockTexture >= 0;
 		if(!var9) {
 			this.overrideBlockTexture = Block.cobblestone.blockIndexInTexture;
 		}
 
 		float var10 = 0.25F;
-		float var11 = 3.0F / 16.0F;
-		float var12 = 3.0F / 16.0F;
+		float var11 = 0.1875F;
+		float var12 = 0.1875F;
 		if(var6 == 5) {
-			var1.setBlockBounds(0.5F - var11, 0.0F, 0.5F - var10, 0.5F + var11, var12, 0.5F + var10);
+			block.setBlockBounds(0.5F - var11, 0.0F, 0.5F - var10, 0.5F + var11, var12, 0.5F + var10);
 		} else if(var6 == 6) {
-			var1.setBlockBounds(0.5F - var10, 0.0F, 0.5F - var11, 0.5F + var10, var12, 0.5F + var11);
+			block.setBlockBounds(0.5F - var10, 0.0F, 0.5F - var11, 0.5F + var10, var12, 0.5F + var11);
 		} else if(var6 == 4) {
-			var1.setBlockBounds(0.5F - var11, 0.5F - var10, 1.0F - var12, 0.5F + var11, 0.5F + var10, 1.0F);
+			block.setBlockBounds(0.5F - var11, 0.5F - var10, 1.0F - var12, 0.5F + var11, 0.5F + var10, 1.0F);
 		} else if(var6 == 3) {
-			var1.setBlockBounds(0.5F - var11, 0.5F - var10, 0.0F, 0.5F + var11, 0.5F + var10, var12);
+			block.setBlockBounds(0.5F - var11, 0.5F - var10, 0.0F, 0.5F + var11, 0.5F + var10, var12);
 		} else if(var6 == 2) {
-			var1.setBlockBounds(1.0F - var12, 0.5F - var10, 0.5F - var11, 1.0F, 0.5F + var10, 0.5F + var11);
+			block.setBlockBounds(1.0F - var12, 0.5F - var10, 0.5F - var11, 1.0F, 0.5F + var10, 0.5F + var11);
 		} else if(var6 == 1) {
-			var1.setBlockBounds(0.0F, 0.5F - var10, 0.5F - var11, var12, 0.5F + var10, 0.5F + var11);
+			block.setBlockBounds(0.0F, 0.5F - var10, 0.5F - var11, var12, 0.5F + var10, 0.5F + var11);
 		}
 
-		this.renderStandardBlock(var1, var2, var3, var4);
+		this.renderStandardBlock(block, x, y, z);
 		if(!var9) {
 			this.overrideBlockTexture = -1;
 		}
 
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		if(Block.lightValue[var1.blockID] > 0) {
+		float var13 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		if(Block.lightValue[block.blockID] > 0) {
 			var13 = 1.0F;
 		}
 
-		var8.setColorOpaque_F(var13, var13, var13);
-		int var14 = var1.getBlockTextureFromSide(0);
+		tessellator8.setColorOpaque_F(var13, var13, var13);
+		int var14 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
 			var14 = this.overrideBlockTexture;
 		}
@@ -103,65 +118,65 @@
 		float var18 = ((float)var15 + 15.99F) / 256.0F;
 		float var19 = (float)var16 / 256.0F;
 		float var20 = ((float)var16 + 15.99F) / 256.0F;
-		Vec3D[] var21 = new Vec3D[8];
-		float var22 = 1.0F / 16.0F;
-		float var23 = 1.0F / 16.0F;
-		float var24 = 10.0F / 16.0F;
-		var21[0] = Vec3D.createVector((double)(-var22), 0.0D, (double)(-var23));
-		var21[1] = Vec3D.createVector((double)var22, 0.0D, (double)(-var23));
-		var21[2] = Vec3D.createVector((double)var22, 0.0D, (double)var23);
-		var21[3] = Vec3D.createVector((double)(-var22), 0.0D, (double)var23);
-		var21[4] = Vec3D.createVector((double)(-var22), (double)var24, (double)(-var23));
-		var21[5] = Vec3D.createVector((double)var22, (double)var24, (double)(-var23));
-		var21[6] = Vec3D.createVector((double)var22, (double)var24, (double)var23);
-		var21[7] = Vec3D.createVector((double)(-var22), (double)var24, (double)var23);
+		Vec3D[] vec3D21 = new Vec3D[8];
+		float var22 = 0.0625F;
+		float var23 = 0.0625F;
+		float var24 = 0.625F;
+		vec3D21[0] = Vec3D.createVector((double)(-var22), 0.0D, (double)(-var23));
+		vec3D21[1] = Vec3D.createVector((double)var22, 0.0D, (double)(-var23));
+		vec3D21[2] = Vec3D.createVector((double)var22, 0.0D, (double)var23);
+		vec3D21[3] = Vec3D.createVector((double)(-var22), 0.0D, (double)var23);
+		vec3D21[4] = Vec3D.createVector((double)(-var22), (double)var24, (double)(-var23));
+		vec3D21[5] = Vec3D.createVector((double)var22, (double)var24, (double)(-var23));
+		vec3D21[6] = Vec3D.createVector((double)var22, (double)var24, (double)var23);
+		vec3D21[7] = Vec3D.createVector((double)(-var22), (double)var24, (double)var23);
 
 		for(int var25 = 0; var25 < 8; ++var25) {
 			if(var7) {
-				var21[var25].zCoord -= 1.0D / 16.0D;
-				var21[var25].rotateAroundX((float)Math.PI * 2.0F / 9.0F);
+				vec3D21[var25].zCoord -= 0.0625D;
+				vec3D21[var25].rotateAroundX((float)Math.PI / 4.5F);
 			} else {
-				var21[var25].zCoord += 1.0D / 16.0D;
-				var21[var25].rotateAroundX(-((float)Math.PI * 2.0F / 9.0F));
+				vec3D21[var25].zCoord += 0.0625D;
+				vec3D21[var25].rotateAroundX(-0.69813174F);
 			}
 
 			if(var6 == 6) {
-				var21[var25].rotateAroundY((float)Math.PI * 0.5F);
+				vec3D21[var25].rotateAroundY((float)Math.PI / 2F);
 			}
 
 			if(var6 < 5) {
-				var21[var25].yCoord -= 0.375D;
-				var21[var25].rotateAroundX((float)Math.PI * 0.5F);
+				vec3D21[var25].yCoord -= 0.375D;
+				vec3D21[var25].rotateAroundX((float)Math.PI / 2F);
 				if(var6 == 4) {
-					var21[var25].rotateAroundY(0.0F);
+					vec3D21[var25].rotateAroundY(0.0F);
 				}
 
 				if(var6 == 3) {
-					var21[var25].rotateAroundY((float)Math.PI);
+					vec3D21[var25].rotateAroundY((float)Math.PI);
 				}
 
 				if(var6 == 2) {
-					var21[var25].rotateAroundY((float)Math.PI * 0.5F);
+					vec3D21[var25].rotateAroundY((float)Math.PI / 2F);
 				}
 
 				if(var6 == 1) {
-					var21[var25].rotateAroundY((float)Math.PI * -0.5F);
+					vec3D21[var25].rotateAroundY(-1.5707964F);
 				}
 
-				var21[var25].xCoord += (double)var2 + 0.5D;
-				var21[var25].yCoord += (double)((float)var3 + 0.5F);
-				var21[var25].zCoord += (double)var4 + 0.5D;
+				vec3D21[var25].xCoord += (double)x + 0.5D;
+				vec3D21[var25].yCoord += (double)((float)y + 0.5F);
+				vec3D21[var25].zCoord += (double)z + 0.5D;
 			} else {
-				var21[var25].xCoord += (double)var2 + 0.5D;
-				var21[var25].yCoord += (double)((float)var3 + 2.0F / 16.0F);
-				var21[var25].zCoord += (double)var4 + 0.5D;
+				vec3D21[var25].xCoord += (double)x + 0.5D;
+				vec3D21[var25].yCoord += (double)((float)y + 0.125F);
+				vec3D21[var25].zCoord += (double)z + 0.5D;
 			}
 		}
 
-		Vec3D var30 = null;
-		Vec3D var26 = null;
-		Vec3D var27 = null;
-		Vec3D var28 = null;
+		Vec3D vec3D30 = null;
+		Vec3D vec3D26 = null;
+		Vec3D vec3D27 = null;
+		Vec3D vec3D28 = null;
 
 		for(int var29 = 0; var29 < 6; ++var29) {
 			if(var29 == 0) {
@@ -177,55 +192,55 @@
 			}
 
 			if(var29 == 0) {
-				var30 = var21[0];
-				var26 = var21[1];
-				var27 = var21[2];
-				var28 = var21[3];
+				vec3D30 = vec3D21[0];
+				vec3D26 = vec3D21[1];
+				vec3D27 = vec3D21[2];
+				vec3D28 = vec3D21[3];
 			} else if(var29 == 1) {
-				var30 = var21[7];
-				var26 = var21[6];
-				var27 = var21[5];
-				var28 = var21[4];
+				vec3D30 = vec3D21[7];
+				vec3D26 = vec3D21[6];
+				vec3D27 = vec3D21[5];
+				vec3D28 = vec3D21[4];
 			} else if(var29 == 2) {
-				var30 = var21[1];
-				var26 = var21[0];
-				var27 = var21[4];
-				var28 = var21[5];
+				vec3D30 = vec3D21[1];
+				vec3D26 = vec3D21[0];
+				vec3D27 = vec3D21[4];
+				vec3D28 = vec3D21[5];
 			} else if(var29 == 3) {
-				var30 = var21[2];
-				var26 = var21[1];
-				var27 = var21[5];
-				var28 = var21[6];
+				vec3D30 = vec3D21[2];
+				vec3D26 = vec3D21[1];
+				vec3D27 = vec3D21[5];
+				vec3D28 = vec3D21[6];
 			} else if(var29 == 4) {
-				var30 = var21[3];
-				var26 = var21[2];
-				var27 = var21[6];
-				var28 = var21[7];
+				vec3D30 = vec3D21[3];
+				vec3D26 = vec3D21[2];
+				vec3D27 = vec3D21[6];
+				vec3D28 = vec3D21[7];
 			} else if(var29 == 5) {
-				var30 = var21[0];
-				var26 = var21[3];
-				var27 = var21[7];
-				var28 = var21[4];
+				vec3D30 = vec3D21[0];
+				vec3D26 = vec3D21[3];
+				vec3D27 = vec3D21[7];
+				vec3D28 = vec3D21[4];
 			}
 
-			var8.addVertexWithUV(var30.xCoord, var30.yCoord, var30.zCoord, (double)var17, (double)var20);
-			var8.addVertexWithUV(var26.xCoord, var26.yCoord, var26.zCoord, (double)var18, (double)var20);
-			var8.addVertexWithUV(var27.xCoord, var27.yCoord, var27.zCoord, (double)var18, (double)var19);
-			var8.addVertexWithUV(var28.xCoord, var28.yCoord, var28.zCoord, (double)var17, (double)var19);
+			tessellator8.addVertexWithUV(vec3D30.xCoord, vec3D30.yCoord, vec3D30.zCoord, (double)var17, (double)var20);
+			tessellator8.addVertexWithUV(vec3D26.xCoord, vec3D26.yCoord, vec3D26.zCoord, (double)var18, (double)var20);
+			tessellator8.addVertexWithUV(vec3D27.xCoord, vec3D27.yCoord, vec3D27.zCoord, (double)var18, (double)var19);
+			tessellator8.addVertexWithUV(vec3D28.xCoord, vec3D28.yCoord, vec3D28.zCoord, (double)var17, (double)var19);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockFire(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSide(0);
+	public boolean renderBlockFire(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int var6 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
+		float var7 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
 		double var10 = (double)((float)var8 / 256.0F);
@@ -240,180 +255,180 @@
 		double var29;
 		double var31;
 		double var33;
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 - 1, var4)) {
+		if(!this.blockAccess.isBlockNormalCube(x, y - 1, z) && !Block.fire.canBlockCatchFire(this.blockAccess, x, y - 1, z)) {
 			float var37 = 0.2F;
-			float var20 = 1.0F / 16.0F;
-			if((var2 + var3 + var4 & 1) == 1) {
+			float var20 = 0.0625F;
+			if((x + y + z & 1) == 1) {
 				var10 = (double)((float)var8 / 256.0F);
 				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 				var14 = (double)((float)(var9 + 16) / 256.0F);
 				var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
 			}
 
-			if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
+			if((x / 2 + y / 2 + z / 2 & 1) == 1) {
 				var21 = var12;
 				var12 = var10;
 				var10 = var21;
 			}
 
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 - 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 + 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 - 1)) {
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 + 1)) {
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 + 1, var4)) {
-				var21 = (double)var2 + 0.5D + 0.5D;
-				var23 = (double)var2 + 0.5D - 0.5D;
-				var25 = (double)var4 + 0.5D + 0.5D;
-				var27 = (double)var4 + 0.5D - 0.5D;
-				var29 = (double)var2 + 0.5D - 0.5D;
-				var31 = (double)var2 + 0.5D + 0.5D;
-				var33 = (double)var4 + 0.5D - 0.5D;
-				double var35 = (double)var4 + 0.5D + 0.5D;
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x - 1, y, z)) {
+				tessellator5.addVertexWithUV((double)((float)x + var37), (double)((float)y + var18 + var20), (double)(z + 1), var12, var14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 1), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)x + var37), (double)((float)y + var18 + var20), (double)(z + 0), var10, var14);
+				tessellator5.addVertexWithUV((double)((float)x + var37), (double)((float)y + var18 + var20), (double)(z + 0), var10, var14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 1), var12, var16);
+				tessellator5.addVertexWithUV((double)((float)x + var37), (double)((float)y + var18 + var20), (double)(z + 1), var12, var14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x + 1, y, z)) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var37), (double)((float)y + var18 + var20), (double)(z + 0), var10, var14);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + var20), (double)(z + 1), var12, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var37), (double)((float)y + var18 + var20), (double)(z + 1), var12, var14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var37), (double)((float)y + var18 + var20), (double)(z + 1), var12, var14);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + var20), (double)(z + 1), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var37), (double)((float)y + var18 + var20), (double)(z + 0), var10, var14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y, z - 1)) {
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18 + var20), (double)((float)z + var37), var12, var14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 0), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18 + var20), (double)((float)z + var37), var10, var14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18 + var20), (double)((float)z + var37), var10, var14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + var20), (double)(z + 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 0), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18 + var20), (double)((float)z + var37), var12, var14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y, z + 1)) {
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18 + var20), (double)((float)(z + 1) - var37), var10, var14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + var20), (double)(z + 1 - 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 1 - 0), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18 + var20), (double)((float)(z + 1) - var37), var12, var14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18 + var20), (double)((float)(z + 1) - var37), var12, var14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + var20), (double)(z + 1 - 0), var12, var16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + var20), (double)(z + 1 - 0), var10, var16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18 + var20), (double)((float)(z + 1) - var37), var10, var14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y + 1, z)) {
+				var21 = (double)x + 0.5D + 0.5D;
+				var23 = (double)x + 0.5D - 0.5D;
+				var25 = (double)z + 0.5D + 0.5D;
+				var27 = (double)z + 0.5D - 0.5D;
+				var29 = (double)x + 0.5D - 0.5D;
+				var31 = (double)x + 0.5D + 0.5D;
+				var33 = (double)z + 0.5D - 0.5D;
+				double var35 = (double)z + 0.5D + 0.5D;
 				var10 = (double)((float)var8 / 256.0F);
 				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 				var14 = (double)((float)var9 / 256.0F);
 				var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-				++var3;
+				++y;
 				var18 = -0.2F;
-				if((var2 + var3 + var4 & 1) == 0) {
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
+				if((x + y + z & 1) == 0) {
+					tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 0), var12, var14);
+					tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 0), var12, var16);
+					tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 1), var10, var16);
+					tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 1), var10, var14);
 					var10 = (double)((float)var8 / 256.0F);
 					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 					var14 = (double)((float)(var9 + 16) / 256.0F);
 					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
+					tessellator5.addVertexWithUV(var31, (double)((float)y + var18), (double)(z + 1), var12, var14);
+					tessellator5.addVertexWithUV(var23, (double)(y + 0), (double)(z + 1), var12, var16);
+					tessellator5.addVertexWithUV(var23, (double)(y + 0), (double)(z + 0), var10, var16);
+					tessellator5.addVertexWithUV(var31, (double)((float)y + var18), (double)(z + 0), var10, var14);
 				} else {
-					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var35, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var27, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var27, var10, var16);
-					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var35, var10, var14);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var35, var12, var14);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var27, var12, var16);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var27, var10, var16);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var35, var10, var14);
 					var10 = (double)((float)var8 / 256.0F);
 					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 					var14 = (double)((float)(var9 + 16) / 256.0F);
 					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var33, var12, var14);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var25, var12, var16);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var25, var10, var16);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var33, var10, var14);
 				}
 			}
 		} else {
-			double var19 = (double)var2 + 0.5D + 0.2D;
-			var21 = (double)var2 + 0.5D - 0.2D;
-			var23 = (double)var4 + 0.5D + 0.2D;
-			var25 = (double)var4 + 0.5D - 0.2D;
-			var27 = (double)var2 + 0.5D - 0.3D;
-			var29 = (double)var2 + 0.5D + 0.3D;
-			var31 = (double)var4 + 0.5D - 0.3D;
-			var33 = (double)var4 + 0.5D + 0.3D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
+			double var19 = (double)x + 0.5D + 0.2D;
+			var21 = (double)x + 0.5D - 0.2D;
+			var23 = (double)z + 0.5D + 0.2D;
+			var25 = (double)z + 0.5D - 0.2D;
+			var27 = (double)x + 0.5D - 0.3D;
+			var29 = (double)x + 0.5D + 0.3D;
+			var31 = (double)z + 0.5D - 0.3D;
+			var33 = (double)z + 0.5D + 0.3D;
+			tessellator5.addVertexWithUV(var27, (double)((float)y + var18), (double)(z + 1), var12, var14);
+			tessellator5.addVertexWithUV(var19, (double)(y + 0), (double)(z + 1), var12, var16);
+			tessellator5.addVertexWithUV(var19, (double)(y + 0), (double)(z + 0), var10, var16);
+			tessellator5.addVertexWithUV(var27, (double)((float)y + var18), (double)(z + 0), var10, var14);
+			tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 0), var12, var14);
+			tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 0), var12, var16);
+			tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 1), var10, var16);
+			tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 1), var10, var14);
 			var10 = (double)((float)var8 / 256.0F);
 			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 			var14 = (double)((float)(var9 + 16) / 256.0F);
 			var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var19 = (double)var2 + 0.5D - 0.5D;
-			var21 = (double)var2 + 0.5D + 0.5D;
-			var23 = (double)var4 + 0.5D - 0.5D;
-			var25 = (double)var4 + 0.5D + 0.5D;
-			var27 = (double)var2 + 0.5D - 0.4D;
-			var29 = (double)var2 + 0.5D + 0.4D;
-			var31 = (double)var4 + 0.5D - 0.4D;
-			var33 = (double)var4 + 0.5D + 0.4D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var33, var12, var14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var25, var12, var16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var25, var10, var16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var33, var10, var14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var31, var12, var14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var23, var12, var16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var23, var10, var16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var31, var10, var14);
+			var19 = (double)x + 0.5D - 0.5D;
+			var21 = (double)x + 0.5D + 0.5D;
+			var23 = (double)z + 0.5D - 0.5D;
+			var25 = (double)z + 0.5D + 0.5D;
+			var27 = (double)x + 0.5D - 0.4D;
+			var29 = (double)x + 0.5D + 0.4D;
+			var31 = (double)z + 0.5D - 0.4D;
+			var33 = (double)z + 0.5D + 0.4D;
+			tessellator5.addVertexWithUV(var27, (double)((float)y + var18), (double)(z + 0), var10, var14);
+			tessellator5.addVertexWithUV(var19, (double)(y + 0), (double)(z + 0), var10, var16);
+			tessellator5.addVertexWithUV(var19, (double)(y + 0), (double)(z + 1), var12, var16);
+			tessellator5.addVertexWithUV(var27, (double)((float)y + var18), (double)(z + 1), var12, var14);
+			tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 1), var10, var14);
+			tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 1), var10, var16);
+			tessellator5.addVertexWithUV(var21, (double)(y + 0), (double)(z + 0), var12, var16);
+			tessellator5.addVertexWithUV(var29, (double)((float)y + var18), (double)(z + 0), var12, var14);
 			var10 = (double)((float)var8 / 256.0F);
 			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 			var14 = (double)((float)var9 / 256.0F);
 			var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var33, var10, var14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var25, var10, var16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var25, var12, var16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var33, var12, var14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var18), var31, var10, var14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), var23, var10, var16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), var23, var12, var16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var18), var31, var12, var14);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockRedstoneWire(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSideAndMetadata(1, this.blockAccess.getBlockMetadata(var2, var3, var4));
+	public boolean renderBlockRedstoneWire(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int var6 = block.getBlockTextureFromSideAndMetadata(1, this.blockAccess.getBlockMetadata(x, y, z));
 		if(this.overrideBlockTexture >= 0) {
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
+		float var7 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
 		double var10 = (double)((float)var8 / 256.0F);
@@ -421,34 +436,34 @@
 		double var14 = (double)((float)var9 / 256.0F);
 		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
 		float var18 = 0.0F;
-		float var19 = 1.0F / 32.0F;
-		boolean var20 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4);
-		boolean var21 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4);
-		boolean var22 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1);
-		boolean var23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 + 1) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 + 1);
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 + 1, var4)) {
+		float var19 = 0.03125F;
+		boolean var20 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y, z) || !this.blockAccess.isBlockNormalCube(x - 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y - 1, z);
+		boolean var21 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y, z) || !this.blockAccess.isBlockNormalCube(x + 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y - 1, z);
+		boolean var22 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y, z - 1) || !this.blockAccess.isBlockNormalCube(x, y, z - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y - 1, z - 1);
+		boolean var23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y, z + 1) || !this.blockAccess.isBlockNormalCube(x, y, z + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y - 1, z + 1);
+		if(!this.blockAccess.isBlockNormalCube(x, y + 1, z)) {
+			if(this.blockAccess.isBlockNormalCube(x - 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y + 1, z)) {
 				var20 = true;
 			}
 
-			if(this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 + 1, var4)) {
+			if(this.blockAccess.isBlockNormalCube(x + 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y + 1, z)) {
 				var21 = true;
 			}
 
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 - 1)) {
+			if(this.blockAccess.isBlockNormalCube(x, y, z - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y + 1, z - 1)) {
 				var22 = true;
 			}
 
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 + 1)) {
+			if(this.blockAccess.isBlockNormalCube(x, y, z + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y + 1, z + 1)) {
 				var23 = true;
 			}
 		}
 
-		float var24 = 5.0F / 16.0F;
-		float var25 = (float)(var2 + 0);
-		float var26 = (float)(var2 + 1);
-		float var27 = (float)(var4 + 0);
-		float var28 = (float)(var4 + 1);
+		float var24 = 0.3125F;
+		float var25 = (float)(x + 0);
+		float var26 = (float)(x + 1);
+		float var27 = (float)(z + 0);
+		float var28 = (float)(z + 1);
 		byte var29 = 0;
 		if((var20 || var21) && !var22 && !var23) {
 			var29 = 1;
@@ -500,121 +515,109 @@
 				}
 			}
 
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var28 + var18), var12, var16);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var27 - var18), var12, var14);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var27 - var18), var10, var14);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var28 + var18), var10, var16);
 		}
 
 		if(var29 == 1) {
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var28 + var18), var12, var16);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var27 - var18), var12, var14);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var27 - var18), var10, var14);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var28 + var18), var10, var16);
 		}
 
 		if(var29 == 2) {
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var16);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var14);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var28 + var18), var12, var16);
+			tessellator5.addVertexWithUV((double)(var26 + var18), (double)((float)y + var19), (double)(var27 - var18), var10, var16);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var27 - var18), var10, var14);
+			tessellator5.addVertexWithUV((double)(var25 - var18), (double)((float)y + var19), (double)(var28 + var18), var12, var14);
 		}
 
 		var10 = (double)((float)(var8 + 16) / 256.0F);
 		var12 = (double)(((float)(var8 + 16) + 15.99F) / 256.0F);
 		var14 = (double)((float)var9 / 256.0F);
 		var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && this.blockAccess.getBlockId(var2 - 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var14);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var14);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var16);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var16);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && this.blockAccess.getBlockId(var2 + 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var14);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 - 1) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var14);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 + 1) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var16);
+		if(!this.blockAccess.isBlockNormalCube(x, y + 1, z)) {
+			if(this.blockAccess.isBlockNormalCube(x - 1, y, z) && this.blockAccess.getBlockId(x - 1, y + 1, z) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)x + var19), (double)((float)(y + 1) + var18), (double)((float)(z + 1) + var18), var12, var14);
+				tessellator5.addVertexWithUV((double)((float)x + var19), (double)((float)(y + 0) - var18), (double)((float)(z + 1) + var18), var10, var14);
+				tessellator5.addVertexWithUV((double)((float)x + var19), (double)((float)(y + 0) - var18), (double)((float)(z + 0) - var18), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)x + var19), (double)((float)(y + 1) + var18), (double)((float)(z + 0) - var18), var12, var16);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x + 1, y, z) && this.blockAccess.getBlockId(x + 1, y + 1, z) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var19), (double)((float)(y + 0) - var18), (double)((float)(z + 1) + var18), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var19), (double)((float)(y + 1) + var18), (double)((float)(z + 1) + var18), var12, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var19), (double)((float)(y + 1) + var18), (double)((float)(z + 0) - var18), var12, var14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - var19), (double)((float)(y + 0) - var18), (double)((float)(z + 0) - var18), var10, var14);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z - 1) && this.blockAccess.getBlockId(x, y + 1, z - 1) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + var18), (double)((float)(y + 0) - var18), (double)((float)z + var19), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + var18), (double)((float)(y + 1) + var18), (double)((float)z + var19), var12, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - var18), (double)((float)(y + 1) + var18), (double)((float)z + var19), var12, var14);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - var18), (double)((float)(y + 0) - var18), (double)((float)z + var19), var10, var14);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z + 1) && this.blockAccess.getBlockId(x, y + 1, z + 1) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + var18), (double)((float)(y + 1) + var18), (double)((float)(z + 1) - var19), var12, var14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + var18), (double)((float)(y + 0) - var18), (double)((float)(z + 1) - var19), var10, var14);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - var18), (double)((float)(y + 0) - var18), (double)((float)(z + 1) - var19), var10, var16);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - var18), (double)((float)(y + 1) + var18), (double)((float)(z + 1) - var19), var12, var16);
 			}
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockMinecartTrack(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		int var7 = var1.getBlockTextureFromSideAndMetadata(0, var6);
+	public boolean renderBlockMinecartTrack(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int var6 = this.blockAccess.getBlockMetadata(x, y, z);
+		int var7 = block.getBlockTextureFromSideAndMetadata(0, var6);
 		if(this.overrideBlockTexture >= 0) {
 			var7 = this.overrideBlockTexture;
 		}
 
-		float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var8, var8, var8);
+		float var8 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var8, var8, var8);
 		int var9 = (var7 & 15) << 4;
 		int var10 = var7 & 240;
 		double var11 = (double)((float)var9 / 256.0F);
 		double var13 = (double)(((float)var9 + 15.99F) / 256.0F);
 		double var15 = (double)((float)var10 / 256.0F);
 		double var17 = (double)(((float)var10 + 15.99F) / 256.0F);
-		float var19 = 1.0F / 16.0F;
-		float var20 = (float)(var2 + 1);
-		float var21 = (float)(var2 + 1);
-		float var22 = (float)(var2 + 0);
-		float var23 = (float)(var2 + 0);
-		float var24 = (float)(var4 + 0);
-		float var25 = (float)(var4 + 1);
-		float var26 = (float)(var4 + 1);
-		float var27 = (float)(var4 + 0);
-		float var28 = (float)var3 + var19;
-		float var29 = (float)var3 + var19;
-		float var30 = (float)var3 + var19;
-		float var31 = (float)var3 + var19;
+		float var19 = 0.0625F;
+		float var20 = (float)(x + 1);
+		float var21 = (float)(x + 1);
+		float var22 = (float)(x + 0);
+		float var23 = (float)(x + 0);
+		float var24 = (float)(z + 0);
+		float var25 = (float)(z + 1);
+		float var26 = (float)(z + 1);
+		float var27 = (float)(z + 0);
+		float var28 = (float)y + var19;
+		float var29 = (float)y + var19;
+		float var30 = (float)y + var19;
+		float var31 = (float)y + var19;
 		if(var6 != 1 && var6 != 2 && var6 != 3 && var6 != 7) {
 			if(var6 == 8) {
-				var21 = (float)(var2 + 0);
-				var20 = var21;
-				var23 = (float)(var2 + 1);
-				var22 = var23;
-				var27 = (float)(var4 + 1);
-				var24 = var27;
-				var26 = (float)(var4 + 0);
-				var25 = var26;
+				var20 = var21 = (float)(x + 0);
+				var22 = var23 = (float)(x + 1);
+				var24 = var27 = (float)(z + 1);
+				var25 = var26 = (float)(z + 0);
 			} else if(var6 == 9) {
-				var23 = (float)(var2 + 0);
-				var20 = var23;
-				var22 = (float)(var2 + 1);
-				var21 = var22;
-				var25 = (float)(var4 + 0);
-				var24 = var25;
-				var27 = (float)(var4 + 1);
-				var26 = var27;
+				var20 = var23 = (float)(x + 0);
+				var21 = var22 = (float)(x + 1);
+				var24 = var25 = (float)(z + 0);
+				var26 = var27 = (float)(z + 1);
 			}
 		} else {
-			var23 = (float)(var2 + 1);
-			var20 = var23;
-			var22 = (float)(var2 + 0);
-			var21 = var22;
-			var25 = (float)(var4 + 1);
-			var24 = var25;
-			var27 = (float)(var4 + 0);
-			var26 = var27;
+			var20 = var23 = (float)(x + 1);
+			var21 = var22 = (float)(x + 0);
+			var24 = var25 = (float)(z + 1);
+			var26 = var27 = (float)(z + 0);
 		}
 
 		if(var6 != 2 && var6 != 4) {
@@ -627,85 +630,85 @@
 			++var31;
 		}
 
-		var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
-		var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-		var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-		var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-		var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-		var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-		var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-		var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
+		tessellator5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
+		tessellator5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
+		tessellator5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
+		tessellator5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
+		tessellator5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
+		tessellator5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
+		tessellator5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
+		tessellator5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
 		return true;
 	}
 
-	public boolean renderBlockLadder(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSide(0);
+	public boolean renderBlockLadder(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int var6 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
+		float var7 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
 		double var10 = (double)((float)var8 / 256.0F);
 		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 		double var14 = (double)((float)var9 / 256.0F);
 		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		int var18 = this.blockAccess.getBlockMetadata(var2, var3, var4);
+		int var18 = this.blockAccess.getBlockMetadata(x, y, z);
 		float var19 = 0.0F;
 		float var20 = 0.05F;
 		if(var18 == 5) {
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var10, var14);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var10, var16);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var12, var16);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var12, var14);
+			tessellator5.addVertexWithUV((double)((float)x + var20), (double)((float)(y + 1) + var19), (double)((float)(z + 1) + var19), var10, var14);
+			tessellator5.addVertexWithUV((double)((float)x + var20), (double)((float)(y + 0) - var19), (double)((float)(z + 1) + var19), var10, var16);
+			tessellator5.addVertexWithUV((double)((float)x + var20), (double)((float)(y + 0) - var19), (double)((float)(z + 0) - var19), var12, var16);
+			tessellator5.addVertexWithUV((double)((float)x + var20), (double)((float)(y + 1) + var19), (double)((float)(z + 0) - var19), var12, var14);
 		}
 
 		if(var18 == 4) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var12, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var10, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - var20), (double)((float)(y + 0) - var19), (double)((float)(z + 1) + var19), var12, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - var20), (double)((float)(y + 1) + var19), (double)((float)(z + 1) + var19), var12, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - var20), (double)((float)(y + 1) + var19), (double)((float)(z + 0) - var19), var10, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - var20), (double)((float)(y + 0) - var19), (double)((float)(z + 0) - var19), var10, var16);
 		}
 
 		if(var18 == 3) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var12, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var10, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + var19), (double)((float)(y + 0) - var19), (double)((float)z + var20), var12, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + var19), (double)((float)(y + 1) + var19), (double)((float)z + var20), var12, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - var19), (double)((float)(y + 1) + var19), (double)((float)z + var20), var10, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - var19), (double)((float)(y + 0) - var19), (double)((float)z + var20), var10, var16);
 		}
 
 		if(var18 == 2) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var10, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var12, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + var19), (double)((float)(y + 1) + var19), (double)((float)(z + 1) - var20), var10, var14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + var19), (double)((float)(y + 0) - var19), (double)((float)(z + 1) - var20), var10, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - var19), (double)((float)(y + 0) - var19), (double)((float)(z + 1) - var20), var12, var16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - var19), (double)((float)(y + 1) + var19), (double)((float)(z + 1) - var20), var12, var14);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockReed(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var6, var6, var6);
-		this.renderCrossedSquares(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)var3, (double)var4);
-		return true;
-	}
-
-	public boolean renderBlockCrops(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var6, var6, var6);
-		this.renderBlockCropsImpl(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)((float)var3 - 1.0F / 16.0F), (double)var4);
-		return true;
-	}
-
-	public void renderTorchAtAngle(Block var1, double var2, double var4, double var6, double var8, double var10) {
-		Tessellator var12 = Tessellator.instance;
-		int var13 = var1.getBlockTextureFromSide(0);
+	public boolean renderBlockReed(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		float var6 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var6, var6, var6);
+		this.renderCrossedSquares(block, this.blockAccess.getBlockMetadata(x, y, z), (double)x, (double)y, (double)z);
+		return true;
+	}
+
+	public boolean renderBlockCrops(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		float var6 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(var6, var6, var6);
+		this.renderBlockCropsImpl(block, this.blockAccess.getBlockMetadata(x, y, z), (double)x, (double)((float)y - 0.0625F), (double)z);
+		return true;
+	}
+
+	public void renderTorchAtAngle(Block block, double var2, double var4, double var6, double var8, double var10) {
+		Tessellator tessellator12 = Tessellator.instance;
+		int var13 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
 			var13 = this.overrideBlockTexture;
 		}
@@ -716,135 +719,135 @@
 		float var17 = ((float)var14 + 15.99F) / 256.0F;
 		float var18 = (float)var15 / 256.0F;
 		float var19 = ((float)var15 + 15.99F) / 256.0F;
-		double var20 = (double)var16 + 1.75D / 64.0D;
-		double var22 = (double)var18 + 6.0D / 256.0D;
-		double var24 = (double)var16 + 9.0D / 256.0D;
-		double var26 = (double)var18 + 1.0D / 32.0D;
+		double var20 = (double)var16 + 7.0D / 256D;
+		double var22 = (double)var18 + 6.0D / 256D;
+		double var24 = (double)var16 + 9.0D / 256D;
+		double var26 = (double)var18 + 8.0D / 256D;
 		var2 += 0.5D;
 		var6 += 0.5D;
 		double var28 = var2 - 0.5D;
 		double var30 = var2 + 0.5D;
 		double var32 = var6 - 0.5D;
 		double var34 = var6 + 0.5D;
-		double var36 = 1.0D / 16.0D;
+		double var36 = 0.0625D;
 		double var38 = 0.625D;
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var20, var22);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var20, var26);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var24, var26);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var24, var22);
-		var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var32, (double)var16, (double)var18);
-		var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var32 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var34 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var34, (double)var17, (double)var18);
-		var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var34, (double)var16, (double)var18);
-		var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var34 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var32 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var32, (double)var17, (double)var18);
-		var12.addVertexWithUV(var28, var4 + 1.0D, var6 + var36, (double)var16, (double)var18);
-		var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var30, var4 + 1.0D, var6 + var36, (double)var17, (double)var18);
-		var12.addVertexWithUV(var30, var4 + 1.0D, var6 - var36, (double)var16, (double)var18);
-		var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var28, var4 + 1.0D, var6 - var36, (double)var17, (double)var18);
-	}
-
-	public void renderCrossedSquares(Block var1, int var2, double var3, double var5, double var7) {
-		Tessellator var9 = Tessellator.instance;
-		int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-		if(this.overrideBlockTexture >= 0) {
-			var10 = this.overrideBlockTexture;
-		}
-
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-		double var21 = var3 + 0.5D - (double)0.45F;
-		double var23 = var3 + 0.5D + (double)0.45F;
-		double var25 = var7 + 0.5D - (double)0.45F;
-		double var27 = var7 + 0.5D + (double)0.45F;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-	}
-
-	public void renderBlockCropsImpl(Block var1, int var2, double var3, double var5, double var7) {
-		Tessellator var9 = Tessellator.instance;
-		int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-		if(this.overrideBlockTexture >= 0) {
-			var10 = this.overrideBlockTexture;
-		}
-
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-		double var21 = var3 + 0.5D - 0.25D;
-		double var23 = var3 + 0.5D + 0.25D;
-		double var25 = var7 + 0.5D - 0.5D;
-		double var27 = var7 + 0.5D + 0.5D;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-		var21 = var3 + 0.5D - 0.5D;
-		var23 = var3 + 0.5D + 0.5D;
-		var25 = var7 + 0.5D - 0.25D;
-		var27 = var7 + 0.5D + 0.25D;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-	}
-
-	public boolean renderBlockFluids(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		boolean var6 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1);
-		boolean var7 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0);
-		boolean[] var8 = new boolean[]{var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2), var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3), var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4), var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)};
+		tessellator12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var20, var22);
+		tessellator12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var20, var26);
+		tessellator12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var24, var26);
+		tessellator12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var24, var22);
+		tessellator12.addVertexWithUV(var2 - var36, var4 + 1.0D, var32, (double)var16, (double)var18);
+		tessellator12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var32 + var10, (double)var16, (double)var19);
+		tessellator12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var34 + var10, (double)var17, (double)var19);
+		tessellator12.addVertexWithUV(var2 - var36, var4 + 1.0D, var34, (double)var17, (double)var18);
+		tessellator12.addVertexWithUV(var2 + var36, var4 + 1.0D, var34, (double)var16, (double)var18);
+		tessellator12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var34 + var10, (double)var16, (double)var19);
+		tessellator12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var32 + var10, (double)var17, (double)var19);
+		tessellator12.addVertexWithUV(var2 + var36, var4 + 1.0D, var32, (double)var17, (double)var18);
+		tessellator12.addVertexWithUV(var28, var4 + 1.0D, var6 + var36, (double)var16, (double)var18);
+		tessellator12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var16, (double)var19);
+		tessellator12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var17, (double)var19);
+		tessellator12.addVertexWithUV(var30, var4 + 1.0D, var6 + var36, (double)var17, (double)var18);
+		tessellator12.addVertexWithUV(var30, var4 + 1.0D, var6 - var36, (double)var16, (double)var18);
+		tessellator12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var16, (double)var19);
+		tessellator12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var17, (double)var19);
+		tessellator12.addVertexWithUV(var28, var4 + 1.0D, var6 - var36, (double)var17, (double)var18);
+	}
+
+	public void renderCrossedSquares(Block block, int metadata, double x, double y, double z) {
+		Tessellator tessellator9 = Tessellator.instance;
+		int var10 = block.getBlockTextureFromSideAndMetadata(0, metadata);
+		if(this.overrideBlockTexture >= 0) {
+			var10 = this.overrideBlockTexture;
+		}
+
+		int var11 = (var10 & 15) << 4;
+		int var12 = var10 & 240;
+		double var13 = (double)((float)var11 / 256.0F);
+		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
+		double var17 = (double)((float)var12 / 256.0F);
+		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		double var21 = x + 0.5D - (double)0.45F;
+		double var23 = x + 0.5D + (double)0.45F;
+		double var25 = z + 0.5D - (double)0.45F;
+		double var27 = z + 0.5D + (double)0.45F;
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var15, var17);
+	}
+
+	public void renderBlockCropsImpl(Block block, int metadata, double x, double y, double z) {
+		Tessellator tessellator9 = Tessellator.instance;
+		int var10 = block.getBlockTextureFromSideAndMetadata(0, metadata);
+		if(this.overrideBlockTexture >= 0) {
+			var10 = this.overrideBlockTexture;
+		}
+
+		int var11 = (var10 & 15) << 4;
+		int var12 = var10 & 240;
+		double var13 = (double)((float)var11 / 256.0F);
+		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
+		double var17 = (double)((float)var12 / 256.0F);
+		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		double var21 = x + 0.5D - 0.25D;
+		double var23 = x + 0.5D + 0.25D;
+		double var25 = z + 0.5D - 0.5D;
+		double var27 = z + 0.5D + 0.5D;
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var15, var17);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var15, var17);
+		var21 = x + 0.5D - 0.5D;
+		var23 = x + 0.5D + 0.5D;
+		var25 = z + 0.5D - 0.25D;
+		var27 = z + 0.5D + 0.25D;
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var25, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var25, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var25, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var25, var15, var17);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var15, var17);
+		tessellator9.addVertexWithUV(var21, y + 1.0D, var27, var13, var17);
+		tessellator9.addVertexWithUV(var21, y + 0.0D, var27, var13, var19);
+		tessellator9.addVertexWithUV(var23, y + 0.0D, var27, var15, var19);
+		tessellator9.addVertexWithUV(var23, y + 1.0D, var27, var15, var17);
+	}
+
+	public boolean renderBlockFluids(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		boolean var6 = block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1);
+		boolean var7 = block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0);
+		boolean[] var8 = new boolean[]{block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2), block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3), block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4), block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)};
 		if(!var6 && !var7 && !var8[0] && !var8[1] && !var8[2] && !var8[3]) {
 			return false;
 		} else {
@@ -855,12 +858,12 @@
 			float var13 = 0.6F;
 			double var14 = 0.0D;
 			double var16 = 1.0D;
-			Material var18 = var1.material;
-			int var19 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-			float var20 = this.getFluidHeight(var2, var3, var4, var18);
-			float var21 = this.getFluidHeight(var2, var3, var4 + 1, var18);
-			float var22 = this.getFluidHeight(var2 + 1, var3, var4 + 1, var18);
-			float var23 = this.getFluidHeight(var2 + 1, var3, var4, var18);
+			Material material18 = block.material;
+			int var19 = this.blockAccess.getBlockMetadata(x, y, z);
+			float var20 = this.getFluidHeight(x, y, z, material18);
+			float var21 = this.getFluidHeight(x, y, z + 1, material18);
+			float var22 = this.getFluidHeight(x + 1, y, z + 1, material18);
+			float var23 = this.getFluidHeight(x + 1, y, z, material18);
 			int var24;
 			int var27;
 			float var32;
@@ -868,10 +871,10 @@
 			float var34;
 			if(this.renderAllFaces || var6) {
 				var9 = true;
-				var24 = var1.getBlockTextureFromSideAndMetadata(1, var19);
-				float var25 = (float)BlockFluid.getFlowDirection(this.blockAccess, var2, var3, var4, var18);
+				var24 = block.getBlockTextureFromSideAndMetadata(1, var19);
+				float var25 = (float)BlockFluid.getFlowDirection(this.blockAccess, x, y, z, material18);
 				if(var25 > -999.0F) {
-					var24 = var1.getBlockTextureFromSideAndMetadata(2, var19);
+					var24 = block.getBlockTextureFromSideAndMetadata(2, var19);
 				}
 
 				int var26 = (var24 & 15) << 4;
@@ -887,26 +890,26 @@
 
 				var32 = MathHelper.sin(var25) * 8.0F / 256.0F;
 				var33 = MathHelper.cos(var25) * 8.0F / 256.0F;
-				var34 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-				var5.setColorOpaque_F(var11 * var34, var11 * var34, var11 * var34);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var20), (double)(var4 + 0), var28 - (double)var33 - (double)var32, var30 - (double)var33 + (double)var32);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var21), (double)(var4 + 1), var28 - (double)var33 + (double)var32, var30 + (double)var33 + (double)var32);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var22), (double)(var4 + 1), var28 + (double)var33 + (double)var32, var30 + (double)var33 - (double)var32);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var23), (double)(var4 + 0), var28 + (double)var33 - (double)var32, var30 - (double)var33 - (double)var32);
+				var34 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+				tessellator5.setColorOpaque_F(var11 * var34, var11 * var34, var11 * var34);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var20), (double)(z + 0), var28 - (double)var33 - (double)var32, var30 - (double)var33 + (double)var32);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + var21), (double)(z + 1), var28 - (double)var33 + (double)var32, var30 + (double)var33 + (double)var32);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var22), (double)(z + 1), var28 + (double)var33 + (double)var32, var30 + (double)var33 - (double)var32);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + var23), (double)(z + 0), var28 + (double)var33 - (double)var32, var30 - (double)var33 - (double)var32);
 			}
 
 			if(this.renderAllFaces || var7) {
-				float var48 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-				var5.setColorOpaque_F(var10 * var48, var10 * var48, var10 * var48);
-				this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
+				float var48 = block.getBlockRenderBrightness(this.blockAccess, x, y - 1, z);
+				tessellator5.setColorOpaque_F(var10 * var48, var10 * var48, var10 * var48);
+				this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTextureFromSide(0));
 				var9 = true;
 			}
 
 			for(var24 = 0; var24 < 4; ++var24) {
-				int var49 = var2;
-				var27 = var4;
+				int var49 = x;
+				var27 = z;
 				if(var24 == 0) {
-					var27 = var4 - 1;
+					var27 = z - 1;
 				}
 
 				if(var24 == 1) {
@@ -914,14 +917,14 @@
 				}
 
 				if(var24 == 2) {
-					var49 = var2 - 1;
+					var49 = x - 1;
 				}
 
 				if(var24 == 3) {
 					++var49;
 				}
 
-				int var50 = var1.getBlockTextureFromSideAndMetadata(var24 + 2, var19);
+				int var50 = block.getBlockTextureFromSideAndMetadata(var24 + 2, var19);
 				int var29 = (var50 & 15) << 4;
 				int var51 = var50 & 240;
 				if(this.renderAllFaces || var8[var24]) {
@@ -931,31 +934,31 @@
 					if(var24 == 0) {
 						var31 = var20;
 						var32 = var23;
-						var33 = (float)var2;
-						var35 = (float)(var2 + 1);
-						var34 = (float)var4;
-						var36 = (float)var4;
+						var33 = (float)x;
+						var35 = (float)(x + 1);
+						var34 = (float)z;
+						var36 = (float)z;
 					} else if(var24 == 1) {
 						var31 = var22;
 						var32 = var21;
-						var33 = (float)(var2 + 1);
-						var35 = (float)var2;
-						var34 = (float)(var4 + 1);
-						var36 = (float)(var4 + 1);
+						var33 = (float)(x + 1);
+						var35 = (float)x;
+						var34 = (float)(z + 1);
+						var36 = (float)(z + 1);
 					} else if(var24 == 2) {
 						var31 = var21;
 						var32 = var20;
-						var33 = (float)var2;
-						var35 = (float)var2;
-						var34 = (float)(var4 + 1);
-						var36 = (float)var4;
+						var33 = (float)x;
+						var35 = (float)x;
+						var34 = (float)(z + 1);
+						var36 = (float)z;
 					} else {
 						var31 = var23;
 						var32 = var22;
-						var33 = (float)(var2 + 1);
-						var35 = (float)(var2 + 1);
-						var34 = (float)var4;
-						var36 = (float)(var4 + 1);
+						var33 = (float)(x + 1);
+						var35 = (float)(x + 1);
+						var34 = (float)z;
+						var36 = (float)(z + 1);
 					}
 
 					var9 = true;
@@ -964,46 +967,46 @@
 					double var41 = (double)(((float)var51 + (1.0F - var31) * 16.0F) / 256.0F);
 					double var43 = (double)(((float)var51 + (1.0F - var32) * 16.0F) / 256.0F);
 					double var45 = ((double)(var51 + 16) - 0.01D) / 256.0D;
-					float var47 = var1.getBlockBrightness(this.blockAccess, var49, var3, var27);
+					float var47 = block.getBlockRenderBrightness(this.blockAccess, var49, y, var27);
 					if(var24 < 2) {
 						var47 *= var12;
 					} else {
 						var47 *= var13;
 					}
 
-					var5.setColorOpaque_F(var11 * var47, var11 * var47, var11 * var47);
-					var5.addVertexWithUV((double)var33, (double)((float)var3 + var31), (double)var34, var37, var41);
-					var5.addVertexWithUV((double)var35, (double)((float)var3 + var32), (double)var36, var39, var43);
-					var5.addVertexWithUV((double)var35, (double)(var3 + 0), (double)var36, var39, var45);
-					var5.addVertexWithUV((double)var33, (double)(var3 + 0), (double)var34, var37, var45);
+					tessellator5.setColorOpaque_F(var11 * var47, var11 * var47, var11 * var47);
+					tessellator5.addVertexWithUV((double)var33, (double)((float)y + var31), (double)var34, var37, var41);
+					tessellator5.addVertexWithUV((double)var35, (double)((float)y + var32), (double)var36, var39, var43);
+					tessellator5.addVertexWithUV((double)var35, (double)(y + 0), (double)var36, var39, var45);
+					tessellator5.addVertexWithUV((double)var33, (double)(y + 0), (double)var34, var37, var45);
 				}
 			}
 
-			var1.minY = var14;
-			var1.maxY = var16;
+			block.minY = var14;
+			block.maxY = var16;
 			return var9;
 		}
 	}
 
-	private float getFluidHeight(int var1, int var2, int var3, Material var4) {
+	private float getFluidHeight(int x, int y, int z, Material material) {
 		int var5 = 0;
 		float var6 = 0.0F;
 
 		for(int var7 = 0; var7 < 4; ++var7) {
-			int var8 = var1 - (var7 & 1);
-			int var10 = var3 - (var7 >> 1 & 1);
-			if(this.blockAccess.getBlockMaterial(var8, var2 + 1, var10) == var4) {
+			int var8 = x - (var7 & 1);
+			int var10 = z - (var7 >> 1 & 1);
+			if(this.blockAccess.getBlockMaterial(var8, y + 1, var10) == material) {
 				return 1.0F;
 			}
 
-			Material var11 = this.blockAccess.getBlockMaterial(var8, var2, var10);
-			if(var11 != var4) {
-				if(!var11.isSolid()) {
+			Material material11 = this.blockAccess.getBlockMaterial(var8, y, var10);
+			if(material11 != material) {
+				if(!material11.isSolid()) {
 					++var6;
 					++var5;
 				}
 			} else {
-				int var12 = this.blockAccess.getBlockMetadata(var8, var2, var10);
+				int var12 = this.blockAccess.getBlockMetadata(var8, y, var10);
 				if(var12 >= 8 || var12 == 0) {
 					var6 += BlockFluid.getFluidHeightPercent(var12) * 10.0F;
 					var5 += 10;
@@ -1017,69 +1020,69 @@
 		return 1.0F - var6 / (float)var5;
 	}
 
-	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5) {
+	public void renderBlockFallingSand(Block block, World worldObj, int x, int y, int z, int m) {
 		float var6 = 0.5F;
 		float var7 = 1.0F;
 		float var8 = 0.8F;
 		float var9 = 0.6F;
-		Tessellator var10 = Tessellator.instance;
-		var10.startDrawingQuads();
-		float var11 = var1.getBlockBrightness(var2, var3, var4, var5);
-		float var12 = var1.getBlockBrightness(var2, var3, var4 - 1, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
-		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(0));
-		var12 = var1.getBlockBrightness(var2, var3, var4 + 1, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
-		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(1));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 - 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 + 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(3));
-		var12 = var1.getBlockBrightness(var2, var3 - 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(4));
-		var12 = var1.getBlockBrightness(var2, var3 + 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
-		var10.draw();
+		Tessellator tessellator10 = Tessellator.instance;
+		tessellator10.startDrawingQuads();
+		float var11 = block.getBlockRenderBrightness(worldObj, x, y, z);
+		float var12 = block.getBlockRenderBrightness(worldObj, x, y - 1, z);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
+		this.renderBottomFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(0, m));
+		var12 = block.getBlockRenderBrightness(worldObj, x, y + 1, z);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
+		this.renderTopFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(1, m));
+		var12 = block.getBlockRenderBrightness(worldObj, x, y, z - 1);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderEastFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(2, m));
+		var12 = block.getBlockRenderBrightness(worldObj, x, y, z + 1);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderWestFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(3, m));
+		var12 = block.getBlockRenderBrightness(worldObj, x - 1, y, z);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderNorthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(4, m));
+		var12 = block.getBlockRenderBrightness(worldObj, x + 1, y, z);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		tessellator10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderSouthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSideAndMetadata(5, m));
+		tessellator10.draw();
 	}
 
-	public boolean renderStandardBlock(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
+	public boolean renderStandardBlock(Block block, int x, int y, int z) {
+		int var5 = block.colorMultiplier(this.blockAccess, x, y, z);
 		float var6 = (float)(var5 >> 16 & 255) / 255.0F;
 		float var7 = (float)(var5 >> 8 & 255) / 255.0F;
 		float var8 = (float)(var5 & 255) / 255.0F;
-		return this.renderStandardBlockWithColorMultiplier(var1, var2, var3, var4, var6, var7, var8);
+		return this.renderStandardBlockWithColorMultiplier(block, x, y, z, var6, var7, var8);
 	}
 
-	public boolean renderStandardBlockWithColorMultiplier(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-		Tessellator var8 = Tessellator.instance;
+	public boolean renderStandardBlockWithColorMultiplier(Block block, int x, int y, int z, float var5, float var6, float var7) {
+		Tessellator tessellator8 = Tessellator.instance;
 		boolean var9 = false;
 		float var10 = 0.5F;
 		float var11 = 1.0F;
@@ -1097,83 +1100,83 @@
 		float var23 = var11 * var7;
 		float var24 = var12 * var7;
 		float var25 = var13 * var7;
-		float var26 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var26 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
 		float var27;
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-			var8.setColorOpaque_F(var14 * var27, var18 * var27, var22 * var27);
-			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var15 * var27, var19 * var27, var23 * var27);
-			this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-			if(var1.minZ > 0.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
-			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-			if(var1.maxZ < 1.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
-			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-			if(var1.minX > 0.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
-			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-			if(var1.maxX < 1.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
-			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x, y - 1, z);
+			tessellator8.setColorOpaque_F(var14 * var27, var18 * var27, var22 * var27);
+			this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x, y + 1, z);
+			if(block.maxY != 1.0D && !block.material.getIsLiquid()) {
+				var27 = var26;
+			}
+
+			tessellator8.setColorOpaque_F(var15 * var27, var19 * var27, var23 * var27);
+			this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x, y, z - 1);
+			if(block.minZ > 0.0D) {
+				var27 = var26;
+			}
+
+			tessellator8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
+			this.renderEastFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 2));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x, y, z + 1);
+			if(block.maxZ < 1.0D) {
+				var27 = var26;
+			}
+
+			tessellator8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
+			this.renderWestFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 3));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x - 1, y, z);
+			if(block.minX > 0.0D) {
+				var27 = var26;
+			}
+
+			tessellator8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
+			this.renderNorthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 4));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)) {
+			var27 = block.getBlockRenderBrightness(this.blockAccess, x + 1, y, z);
+			if(block.maxX < 1.0D) {
+				var27 = var26;
+			}
+
+			tessellator8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
+			this.renderSouthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 5));
 			var9 = true;
 		}
 
 		return var9;
 	}
 
-	public boolean renderBlockCactus(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
+	public boolean renderBlockCactus(Block blocki, int x, int y, int z) {
+		int var5 = blocki.colorMultiplier(this.blockAccess, x, y, z);
 		float var6 = (float)(var5 >> 16 & 255) / 255.0F;
 		float var7 = (float)(var5 >> 8 & 255) / 255.0F;
 		float var8 = (float)(var5 & 255) / 255.0F;
-		return this.renderBlockCactusImpl(var1, var2, var3, var4, var6, var7, var8);
+		return this.renderBlockCactusImpl(blocki, x, y, z, var6, var7, var8);
 	}
 
-	public boolean renderBlockCactusImpl(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-		Tessellator var8 = Tessellator.instance;
+	public boolean renderBlockCactusImpl(Block block, int x, int y, int z, float var5, float var6, float var7) {
+		Tessellator tessellator8 = Tessellator.instance;
 		boolean var9 = false;
 		float var10 = 0.5F;
 		float var11 = 1.0F;
@@ -1191,510 +1194,510 @@
 		float var23 = var11 * var7;
 		float var24 = var12 * var7;
 		float var25 = var13 * var7;
-		float var26 = 1.0F / 16.0F;
-		float var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var26 = 0.0625F;
+		float var27 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
 		float var28;
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-			var8.setColorOpaque_F(var14 * var28, var18 * var28, var22 * var28);
-			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var15 * var28, var19 * var28, var23 * var28);
-			this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-			if(var1.minZ > 0.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-			var8.setTranslationF(0.0F, 0.0F, var26);
-			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-			var8.setTranslationF(0.0F, 0.0F, -var26);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-			if(var1.maxZ < 1.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-			var8.setTranslationF(0.0F, 0.0F, -var26);
-			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			var8.setTranslationF(0.0F, 0.0F, var26);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-			if(var1.minX > 0.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-			var8.setTranslationF(var26, 0.0F, 0.0F);
-			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-			var8.setTranslationF(-var26, 0.0F, 0.0F);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-			if(var1.maxX < 1.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-			var8.setTranslationF(-var26, 0.0F, 0.0F);
-			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
-			var8.setTranslationF(var26, 0.0F, 0.0F);
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x, y - 1, z);
+			tessellator8.setColorOpaque_F(var14 * var28, var18 * var28, var22 * var28);
+			this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x, y + 1, z);
+			if(block.maxY != 1.0D && !block.material.getIsLiquid()) {
+				var28 = var27;
+			}
+
+			tessellator8.setColorOpaque_F(var15 * var28, var19 * var28, var23 * var28);
+			this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x, y, z - 1);
+			if(block.minZ > 0.0D) {
+				var28 = var27;
+			}
+
+			tessellator8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
+			tessellator8.setTranslationF(0.0F, 0.0F, var26);
+			this.renderEastFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 2));
+			tessellator8.setTranslationF(0.0F, 0.0F, -var26);
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x, y, z + 1);
+			if(block.maxZ < 1.0D) {
+				var28 = var27;
+			}
+
+			tessellator8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
+			tessellator8.setTranslationF(0.0F, 0.0F, -var26);
+			this.renderWestFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 3));
+			tessellator8.setTranslationF(0.0F, 0.0F, var26);
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x - 1, y, z);
+			if(block.minX > 0.0D) {
+				var28 = var27;
+			}
+
+			tessellator8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
+			tessellator8.setTranslationF(var26, 0.0F, 0.0F);
+			this.renderNorthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 4));
+			tessellator8.setTranslationF(-var26, 0.0F, 0.0F);
+			var9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)) {
+			var28 = block.getBlockRenderBrightness(this.blockAccess, x + 1, y, z);
+			if(block.maxX < 1.0D) {
+				var28 = var27;
+			}
+
+			tessellator8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
+			tessellator8.setTranslationF(-var26, 0.0F, 0.0F);
+			this.renderSouthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 5));
+			tessellator8.setTranslationF(var26, 0.0F, 0.0F);
 			var9 = true;
 		}
 
 		return var9;
 	}
 
-	public boolean renderBlockFence(Block var1, int var2, int var3, int var4) {
+	public boolean renderBlockFence(Block block, int x, int y, int z) {
 		boolean var5 = false;
-		float var6 = 6.0F / 16.0F;
-		float var7 = 10.0F / 16.0F;
-		var1.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
-		this.renderStandardBlock(var1, var2, var3, var4);
+		float var6 = 0.375F;
+		float var7 = 0.625F;
+		block.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
+		this.renderStandardBlock(block, x, y, z);
 		boolean var8 = false;
 		boolean var9 = false;
-		if(this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID) {
+		if(this.blockAccess.getBlockId(x - 1, y, z) == block.blockID || this.blockAccess.getBlockId(x + 1, y, z) == block.blockID) {
 			var8 = true;
 		}
 
-		if(this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID) {
+		if(this.blockAccess.getBlockId(x, y, z - 1) == block.blockID || this.blockAccess.getBlockId(x, y, z + 1) == block.blockID) {
 			var9 = true;
 		}
 
-		boolean var10 = this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID;
-		boolean var11 = this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID;
-		boolean var12 = this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID;
-		boolean var13 = this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID;
+		boolean var10 = this.blockAccess.getBlockId(x - 1, y, z) == block.blockID;
+		boolean var11 = this.blockAccess.getBlockId(x + 1, y, z) == block.blockID;
+		boolean var12 = this.blockAccess.getBlockId(x, y, z - 1) == block.blockID;
+		boolean var13 = this.blockAccess.getBlockId(x, y, z + 1) == block.blockID;
 		if(!var8 && !var9) {
 			var8 = true;
 		}
 
-		var6 = 7.0F / 16.0F;
-		var7 = 9.0F / 16.0F;
-		float var14 = 12.0F / 16.0F;
-		float var15 = 15.0F / 16.0F;
+		var6 = 0.4375F;
+		var7 = 0.5625F;
+		float var14 = 0.75F;
+		float var15 = 0.9375F;
 		float var16 = var10 ? 0.0F : var6;
 		float var17 = var11 ? 1.0F : var7;
 		float var18 = var12 ? 0.0F : var6;
 		float var19 = var13 ? 1.0F : var7;
 		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(var16, var14, var6, var17, var15, var7);
+			this.renderStandardBlock(block, x, y, z);
 		}
 
 		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(var6, var14, var18, var7, var15, var19);
+			this.renderStandardBlock(block, x, y, z);
 		}
 
-		var14 = 6.0F / 16.0F;
-		var15 = 9.0F / 16.0F;
+		var14 = 0.375F;
+		var15 = 0.5625F;
 		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(var16, var14, var6, var17, var15, var7);
+			this.renderStandardBlock(block, x, y, z);
 		}
 
 		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(var6, var14, var18, var7, var15, var19);
+			this.renderStandardBlock(block, x, y, z);
 		}
 
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		return var5;
 	}
 
-	public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
+	public boolean renderBlockStairs(Block block, int x, int y, int z) {
 		boolean var5 = false;
-		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
+		int var6 = this.blockAccess.getBlockMetadata(x, y, z) % 4;
 		if(var6 == 0) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
 		} else if(var6 == 1) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
 		} else if(var6 == 2) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
 		} else if(var6 == 3) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
 		}
 
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		return var5;
 	}
 
-	public boolean renderBlockDoor(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		BlockDoor var6 = (BlockDoor)var1;
+	public boolean renderBlockDoor(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		BlockDoor blockDoor6 = (BlockDoor)block;
 		boolean var7 = false;
 		float var8 = 0.5F;
 		float var9 = 1.0F;
 		float var10 = 0.8F;
 		float var11 = 0.6F;
-		float var12 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-		if(var6.minY > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var8 * var13, var8 * var13, var8 * var13);
-		this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-		if(var6.maxY < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
-		this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-		if(var6.minZ > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-		int var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-		if(var6.maxZ < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-		if(var6.minX > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-		if(var6.maxX < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var14);
+		float var12 = block.getBlockRenderBrightness(this.blockAccess, x, y, z);
+		float var13 = block.getBlockRenderBrightness(this.blockAccess, x, y - 1, z);
+		if(blockDoor6.minY > 0.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var8 * var13, var8 * var13, var8 * var13);
+		this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+		var7 = true;
+		var13 = block.getBlockRenderBrightness(this.blockAccess, x, y + 1, z);
+		if(blockDoor6.maxY < 1.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
+		this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+		var7 = true;
+		var13 = block.getBlockRenderBrightness(this.blockAccess, x, y, z - 1);
+		if(blockDoor6.minZ > 0.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
+		int var14 = block.getBlockTexture(this.blockAccess, x, y, z, 2);
+		if(var14 < 0) {
+			this.flipTexture = true;
+			var14 = -var14;
+		}
+
+		this.renderEastFace(block, (double)x, (double)y, (double)z, var14);
+		var7 = true;
+		this.flipTexture = false;
+		var13 = block.getBlockRenderBrightness(this.blockAccess, x, y, z + 1);
+		if(blockDoor6.maxZ < 1.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
+		var14 = block.getBlockTexture(this.blockAccess, x, y, z, 3);
+		if(var14 < 0) {
+			this.flipTexture = true;
+			var14 = -var14;
+		}
+
+		this.renderWestFace(block, (double)x, (double)y, (double)z, var14);
+		var7 = true;
+		this.flipTexture = false;
+		var13 = block.getBlockRenderBrightness(this.blockAccess, x - 1, y, z);
+		if(blockDoor6.minX > 0.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
+		var14 = block.getBlockTexture(this.blockAccess, x, y, z, 4);
+		if(var14 < 0) {
+			this.flipTexture = true;
+			var14 = -var14;
+		}
+
+		this.renderNorthFace(block, (double)x, (double)y, (double)z, var14);
+		var7 = true;
+		this.flipTexture = false;
+		var13 = block.getBlockRenderBrightness(this.blockAccess, x + 1, y, z);
+		if(blockDoor6.maxX < 1.0D) {
+			var13 = var12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			var13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
+		var14 = block.getBlockTexture(this.blockAccess, x, y, z, 5);
+		if(var14 < 0) {
+			this.flipTexture = true;
+			var14 = -var14;
+		}
+
+		this.renderSouthFace(block, (double)x, (double)y, (double)z, var14);
 		var7 = true;
 		this.flipTexture = false;
 		return var7;
 	}
 
-	public void renderBottomFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		double var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var22, var24, var26, var14, var16);
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-	}
-
-	public void renderTopFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		double var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-		var9.addVertexWithUV(var22, var24, var26, var14, var16);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-	}
-
-	public void renderEastFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var4 + var1.maxY;
-		double var28 = var6 + var1.minZ;
-		var9.addVertexWithUV(var20, var26, var28, var14, var16);
-		var9.addVertexWithUV(var22, var26, var28, var12, var16);
-		var9.addVertexWithUV(var22, var24, var28, var12, var18);
-		var9.addVertexWithUV(var20, var24, var28, var14, var18);
-	}
-
-	public void renderWestFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var4 + var1.maxY;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var26, var28, var12, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-		var9.addVertexWithUV(var22, var26, var28, var14, var16);
-	}
-
-	public void renderNorthFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var4 + var1.minY;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var24, var28, var14, var16);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var20, var22, var26, var12, var18);
-		var9.addVertexWithUV(var20, var22, var28, var14, var18);
-	}
-
-	public void renderSouthFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.maxX;
-		double var22 = var4 + var1.minY;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var22, var28, var12, var18);
-		var9.addVertexWithUV(var20, var22, var26, var14, var18);
-		var9.addVertexWithUV(var20, var24, var26, var14, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var16);
+	public void renderBottomFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minX * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minZ * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		double var20 = var2 + block.minX;
+		double var22 = var2 + block.maxX;
+		double var24 = var4 + block.minY;
+		double var26 = var6 + block.minZ;
+		double var28 = var6 + block.maxZ;
+		tessellator9.addVertexWithUV(var20, var24, var28, var12, var18);
+		tessellator9.addVertexWithUV(var20, var24, var26, var12, var16);
+		tessellator9.addVertexWithUV(var22, var24, var26, var14, var16);
+		tessellator9.addVertexWithUV(var22, var24, var28, var14, var18);
+	}
+
+	public void renderTopFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minX * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minZ * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		double var20 = var2 + block.minX;
+		double var22 = var2 + block.maxX;
+		double var24 = var4 + block.maxY;
+		double var26 = var6 + block.minZ;
+		double var28 = var6 + block.maxZ;
+		tessellator9.addVertexWithUV(var22, var24, var28, var14, var18);
+		tessellator9.addVertexWithUV(var22, var24, var26, var14, var16);
+		tessellator9.addVertexWithUV(var20, var24, var26, var12, var16);
+		tessellator9.addVertexWithUV(var20, var24, var28, var12, var18);
+	}
+
+	public void renderEastFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minX * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minY * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxY * 16.0D - 0.01D) / 256.0D;
+		double var20;
+		if(this.flipTexture) {
+			var20 = var12;
+			var12 = var14;
+			var14 = var20;
+		}
+
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		var20 = var2 + block.minX;
+		double var22 = var2 + block.maxX;
+		double var24 = var4 + block.minY;
+		double var26 = var4 + block.maxY;
+		double var28 = var6 + block.minZ;
+		tessellator9.addVertexWithUV(var20, var26, var28, var14, var16);
+		tessellator9.addVertexWithUV(var22, var26, var28, var12, var16);
+		tessellator9.addVertexWithUV(var22, var24, var28, var12, var18);
+		tessellator9.addVertexWithUV(var20, var24, var28, var14, var18);
+	}
+
+	public void renderWestFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minX * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minY * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxY * 16.0D - 0.01D) / 256.0D;
+		double var20;
+		if(this.flipTexture) {
+			var20 = var12;
+			var12 = var14;
+			var14 = var20;
+		}
+
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		var20 = var2 + block.minX;
+		double var22 = var2 + block.maxX;
+		double var24 = var4 + block.minY;
+		double var26 = var4 + block.maxY;
+		double var28 = var6 + block.maxZ;
+		tessellator9.addVertexWithUV(var20, var26, var28, var12, var16);
+		tessellator9.addVertexWithUV(var20, var24, var28, var12, var18);
+		tessellator9.addVertexWithUV(var22, var24, var28, var14, var18);
+		tessellator9.addVertexWithUV(var22, var26, var28, var14, var16);
+	}
+
+	public void renderNorthFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minZ * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minY * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxY * 16.0D - 0.01D) / 256.0D;
+		double var20;
+		if(this.flipTexture) {
+			var20 = var12;
+			var12 = var14;
+			var14 = var20;
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		var20 = var2 + block.minX;
+		double var22 = var4 + block.minY;
+		double var24 = var4 + block.maxY;
+		double var26 = var6 + block.minZ;
+		double var28 = var6 + block.maxZ;
+		tessellator9.addVertexWithUV(var20, var24, var28, var14, var16);
+		tessellator9.addVertexWithUV(var20, var24, var26, var12, var16);
+		tessellator9.addVertexWithUV(var20, var22, var26, var12, var18);
+		tessellator9.addVertexWithUV(var20, var22, var28, var14, var18);
+	}
+
+	public void renderSouthFace(Block block, double var2, double var4, double var6, int var8) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			var8 = this.overrideBlockTexture;
+		}
+
+		int var10 = (var8 & 15) << 4;
+		int var11 = var8 & 240;
+		double var12 = ((double)var10 + block.minZ * 16.0D) / 256.0D;
+		double var14 = ((double)var10 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		double var16 = ((double)var11 + block.minY * 16.0D) / 256.0D;
+		double var18 = ((double)var11 + block.maxY * 16.0D - 0.01D) / 256.0D;
+		double var20;
+		if(this.flipTexture) {
+			var20 = var12;
+			var12 = var14;
+			var14 = var20;
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+		}
+
+		var20 = var2 + block.maxX;
+		double var22 = var4 + block.minY;
+		double var24 = var4 + block.maxY;
+		double var26 = var6 + block.minZ;
+		double var28 = var6 + block.maxZ;
+		tessellator9.addVertexWithUV(var20, var22, var28, var12, var18);
+		tessellator9.addVertexWithUV(var20, var22, var26, var14, var18);
+		tessellator9.addVertexWithUV(var20, var24, var26, var14, var16);
+		tessellator9.addVertexWithUV(var20, var24, var28, var12, var16);
 	}
 
 	public void renderBlockAsItem(Block var1, float var2) {
 		int var3 = var1.getRenderType();
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		if(var3 == 0) {
 			var1.setBlockBoundsForItemRender();
 			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
@@ -1702,107 +1705,107 @@
 			float var6 = 1.0F;
 			float var7 = 0.8F;
 			float var8 = 0.6F;
-			var4.startDrawingQuads();
-			var4.setColorRGBA_F(var6, var6, var6, var2);
+			tessellator4.startDrawingQuads();
+			tessellator4.setColorRGBA_F(var6, var6, var6, var2);
 			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var4.setColorRGBA_F(var5, var5, var5, var2);
+			tessellator4.setColorRGBA_F(var5, var5, var5, var2);
 			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var4.setColorRGBA_F(var7, var7, var7, var2);
+			tessellator4.setColorRGBA_F(var7, var7, var7, var2);
 			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
 			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var4.setColorRGBA_F(var8, var8, var8, var2);
+			tessellator4.setColorRGBA_F(var8, var8, var8, var2);
 			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
 			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var4.draw();
+			tessellator4.draw();
 			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 		}
 
 	}
 
-	public void renderBlockOnInventory(Block var1) {
+	public void renderBlockOnInventory(Block var1, int metadata) {
 		byte var2 = -1;
-		Tessellator var3 = Tessellator.instance;
+		Tessellator tessellator3 = Tessellator.instance;
 		int var4 = var1.getRenderType();
 		if(var4 == 0) {
 			var1.setBlockBoundsForItemRender();
 			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, -1.0F);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, 1.0F);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(-1.0F, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(1.0F, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
+			tessellator3.draw();
 			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 		} else if(var4 == 1) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
 			this.renderCrossedSquares(var1, var2, -0.5D, -0.5D, -0.5D);
-			var3.draw();
+			tessellator3.draw();
 		} else if(var4 == 13) {
 			var1.setBlockBoundsForItemRender();
 			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			float var5 = 1.0F / 16.0F;
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, -1.0F);
-			var3.setTranslationF(0.0F, 0.0F, var5);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-			var3.setTranslationF(0.0F, 0.0F, -var5);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, 1.0F);
-			var3.setTranslationF(0.0F, 0.0F, -var5);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var3.setTranslationF(0.0F, 0.0F, var5);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(-1.0F, 0.0F, 0.0F);
-			var3.setTranslationF(var5, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-			var3.setTranslationF(-var5, 0.0F, 0.0F);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(1.0F, 0.0F, 0.0F);
-			var3.setTranslationF(-var5, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var3.setTranslationF(var5, 0.0F, 0.0F);
-			var3.draw();
+			float var5 = 0.0625F;
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+			tessellator3.setTranslationF(0.0F, 0.0F, var5);
+			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
+			tessellator3.setTranslationF(0.0F, 0.0F, -var5);
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+			tessellator3.setTranslationF(0.0F, 0.0F, -var5);
+			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
+			tessellator3.setTranslationF(0.0F, 0.0F, var5);
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+			tessellator3.setTranslationF(var5, 0.0F, 0.0F);
+			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
+			tessellator3.setTranslationF(-var5, 0.0F, 0.0F);
+			tessellator3.draw();
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+			tessellator3.setTranslationF(-var5, 0.0F, 0.0F);
+			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
+			tessellator3.setTranslationF(var5, 0.0F, 0.0F);
+			tessellator3.draw();
 			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 		} else if(var4 == 6) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
 			this.renderBlockCropsImpl(var1, var2, -0.5D, -0.5D, -0.5D);
-			var3.draw();
+			tessellator3.draw();
 		} else if(var4 == 2) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
 			this.renderTorchAtAngle(var1, -0.5D, -0.5D, -0.5D, 0.0D, 0.0D);
-			var3.draw();
+			tessellator3.draw();
 		} else {
 			int var7;
 			if(var4 == 10) {
@@ -1816,35 +1819,36 @@
 					}
 
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-					var3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
+					tessellator3.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
+				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			} else if(var4 == 11) {
 				for(var7 = 0; var7 < 4; ++var7) {
-					float var6 = 2.0F / 16.0F;
+					float var6 = 0.125F;
 					if(var7 == 0) {
 						var1.setBlockBounds(0.5F - var6, 0.0F, 0.0F, 0.5F + var6, 1.0F, var6 * 2.0F);
 					}
@@ -1853,7 +1857,7 @@
 						var1.setBlockBounds(0.5F - var6, 0.0F, 1.0F - var6 * 2.0F, 0.5F + var6, 1.0F, 1.0F);
 					}
 
-					var6 = 1.0F / 16.0F;
+					var6 = 0.0625F;
 					if(var7 == 2) {
 						var1.setBlockBounds(0.5F - var6, 1.0F - var6 * 3.0F, -var6 * 2.0F, 0.5F + var6, 1.0F - var6, 1.0F + var6 * 2.0F);
 					}
@@ -1863,30 +1867,30 @@
 					}
 
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-					var3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
+					tessellator3.draw();
+					tessellator3.startDrawingQuads();
+					tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
+					tessellator3.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
 
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -7,35 +7,35 @@
 	boolean[] isOptimalFlowDirection = new boolean[4];
 	int[] flowCost = new int[4];
 
-	protected BlockFlowing(int var1, Material var2) {
-		super(var1, var2);
-	}
-
-	private void updateFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID + 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.markBlockNeedsUpdate(var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
+	protected BlockFlowing(int var1, Material material2) {
+		super(var1, material2);
+	}
+
+	private void updateFlow(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		worldObj.setBlockAndMetadata(x, y, z, this.blockID + 1, var5);
+		worldObj.markBlocksDirty(x, y, z, x, y, z);
+		worldObj.markBlockNeedsUpdate(x, y, z);
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		int var6 = this.getFlowDecay(worldObj, x, y, z);
 		boolean var7 = true;
 		int var9;
 		if(var6 > 0) {
 			byte var8 = -100;
 			this.numAdjacentSources = 0;
-			int var11 = this.getSmallestFlowDecay(var1, var2 - 1, var3, var4, var8);
-			var11 = this.getSmallestFlowDecay(var1, var2 + 1, var3, var4, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 - 1, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 + 1, var11);
+			int var11 = this.getSmallestFlowDecay(worldObj, x - 1, y, z, var8);
+			var11 = this.getSmallestFlowDecay(worldObj, x + 1, y, z, var11);
+			var11 = this.getSmallestFlowDecay(worldObj, x, y, z - 1, var11);
+			var11 = this.getSmallestFlowDecay(worldObj, x, y, z + 1, var11);
 			var9 = var11 + this.fluidType;
 			if(var9 >= 8 || var11 < 0) {
 				var9 = -1;
 			}
 
-			if(this.getFlowDecay(var1, var2, var3 + 1, var4) >= 0) {
-				int var10 = this.getFlowDecay(var1, var2, var3 + 1, var4);
+			if(this.getFlowDecay(worldObj, x, y + 1, z) >= 0) {
+				int var10 = this.getFlowDecay(worldObj, x, y + 1, z);
 				if(var10 >= 8) {
 					var9 = var10;
 				} else {
@@ -44,14 +44,14 @@
 			}
 
 			if(this.numAdjacentSources >= 2 && this.material == Material.water) {
-				if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+				if(worldObj.isBlockNormalCube(x, y - 1, z)) {
 					var9 = 0;
-				} else if(var1.getBlockMaterial(var2, var3 - 1, var4) == this.material && var1.getBlockMetadata(var2, var3, var4) == 0) {
+				} else if(worldObj.getBlockMaterial(x, y - 1, z) == this.material && worldObj.getBlockMetadata(x, y, z) == 0) {
 					var9 = 0;
 				}
 			}
 
-			if(this.material == Material.lava && var6 < 8 && var9 < 8 && var9 > var6 && var5.nextInt(4) != 0) {
+			if(this.material == Material.lava && var6 < 8 && var9 < 8 && var9 > var6 && rand.nextInt(4) != 0) {
 				var9 = var6;
 				var7 = false;
 			}
@@ -59,27 +59,27 @@
 			if(var9 != var6) {
 				var6 = var9;
 				if(var9 < 0) {
-					var1.setBlockWithNotify(var2, var3, var4, 0);
+					worldObj.setBlockWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-					var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-					var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+					worldObj.setBlockMetadataWithNotify(x, y, z, var9);
+					worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
+					worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 				}
 			} else if(var7) {
-				this.updateFlow(var1, var2, var3, var4);
+				this.updateFlow(worldObj, x, y, z);
 			}
 		} else {
-			this.updateFlow(var1, var2, var3, var4);
+			this.updateFlow(worldObj, x, y, z);
 		}
 
-		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
+		if(this.liquidCanDisplaceBlock(worldObj, x, y - 1, z)) {
 			if(var6 >= 8) {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6);
+				worldObj.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, var6);
 			} else {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6 + 8);
+				worldObj.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, var6 + 8);
 			}
-		} else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(var1, var2, var3 - 1, var4))) {
-			boolean[] var12 = this.getOptimalFlowDirections(var1, var2, var3, var4);
+		} else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(worldObj, x, y - 1, z))) {
+			boolean[] var12 = this.getOptimalFlowDirections(worldObj, x, y, z);
 			var9 = var6 + this.fluidType;
 			if(var6 >= 8) {
 				var9 = 1;
@@ -90,49 +90,49 @@
 			}
 
 			if(var12[0]) {
-				this.flowIntoBlock(var1, var2 - 1, var3, var4, var9);
+				this.flowIntoBlock(worldObj, x - 1, y, z, var9);
 			}
 
 			if(var12[1]) {
-				this.flowIntoBlock(var1, var2 + 1, var3, var4, var9);
+				this.flowIntoBlock(worldObj, x + 1, y, z, var9);
 			}
 
 			if(var12[2]) {
-				this.flowIntoBlock(var1, var2, var3, var4 - 1, var9);
+				this.flowIntoBlock(worldObj, x, y, z - 1, var9);
 			}
 
 			if(var12[3]) {
-				this.flowIntoBlock(var1, var2, var3, var4 + 1, var9);
+				this.flowIntoBlock(worldObj, x, y, z + 1, var9);
 			}
 		}
 
 	}
 
-	private void flowIntoBlock(World var1, int var2, int var3, int var4, int var5) {
-		if(this.liquidCanDisplaceBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockId(var2, var3, var4);
+	private void flowIntoBlock(World worldObj, int x, int y, int z, int metadata) {
+		if(this.liquidCanDisplaceBlock(worldObj, x, y, z)) {
+			int var6 = worldObj.getBlockId(x, y, z);
 			if(var6 > 0) {
 				if(this.material == Material.lava) {
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
+					this.triggerLavaMixEffects(worldObj, x, y, z);
 				} else {
-					Block.blocksList[var6].dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+					Block.blocksList[var6].dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
 				}
 			}
 
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, var5);
+			worldObj.setBlockAndMetadataWithNotify(x, y, z, this.blockID, metadata);
 		}
 
 	}
 
-	private int calculateFlowCost(World var1, int var2, int var3, int var4, int var5, int var6) {
+	private int calculateFlowCost(World worldObj, int x, int y, int z, int var5, int var6) {
 		int var7 = 1000;
 
 		for(int var8 = 0; var8 < 4; ++var8) {
 			if((var8 != 0 || var6 != 1) && (var8 != 1 || var6 != 0) && (var8 != 2 || var6 != 3) && (var8 != 3 || var6 != 2)) {
-				int var9 = var2;
-				int var11 = var4;
+				int var9 = x;
+				int var11 = z;
 				if(var8 == 0) {
-					var9 = var2 - 1;
+					var9 = x - 1;
 				}
 
 				if(var8 == 1) {
@@ -140,20 +140,20 @@
 				}
 
 				if(var8 == 2) {
-					var11 = var4 - 1;
+					var11 = z - 1;
 				}
 
 				if(var8 == 3) {
 					++var11;
 				}
 
-				if(!this.blockBlocksFlow(var1, var9, var3, var11) && (var1.getBlockMaterial(var9, var3, var11) != this.material || var1.getBlockMetadata(var9, var3, var11) != 0)) {
-					if(!this.blockBlocksFlow(var1, var9, var3 - 1, var11)) {
+				if(!this.blockBlocksFlow(worldObj, var9, y, var11) && (worldObj.getBlockMaterial(var9, y, var11) != this.material || worldObj.getBlockMetadata(var9, y, var11) != 0)) {
+					if(!this.blockBlocksFlow(worldObj, var9, y - 1, var11)) {
 						return var5;
 					}
 
 					if(var5 < 4) {
-						int var12 = this.calculateFlowCost(var1, var9, var3, var11, var5 + 1, var8);
+						int var12 = this.calculateFlowCost(worldObj, var9, y, var11, var5 + 1, var8);
 						if(var12 < var7) {
 							var7 = var12;
 						}
@@ -165,15 +165,15 @@
 		return var7;
 	}
 
-	private boolean[] getOptimalFlowDirections(World var1, int var2, int var3, int var4) {
+	private boolean[] getOptimalFlowDirections(World worldObj, int x, int y, int z) {
 		int var5;
 		int var6;
 		for(var5 = 0; var5 < 4; ++var5) {
 			this.flowCost[var5] = 1000;
-			var6 = var2;
-			int var8 = var4;
+			var6 = x;
+			int var8 = z;
 			if(var5 == 0) {
-				var6 = var2 - 1;
+				var6 = x - 1;
 			}
 
 			if(var5 == 1) {
@@ -181,18 +181,18 @@
 			}
 
 			if(var5 == 2) {
-				var8 = var4 - 1;
+				var8 = z - 1;
 			}
 
 			if(var5 == 3) {
 				++var8;
 			}
 
-			if(!this.blockBlocksFlow(var1, var6, var3, var8) && (var1.getBlockMaterial(var6, var3, var8) != this.material || var1.getBlockMetadata(var6, var3, var8) != 0)) {
-				if(!this.blockBlocksFlow(var1, var6, var3 - 1, var8)) {
+			if(!this.blockBlocksFlow(worldObj, var6, y, var8) && (worldObj.getBlockMaterial(var6, y, var8) != this.material || worldObj.getBlockMetadata(var6, y, var8) != 0)) {
+				if(!this.blockBlocksFlow(worldObj, var6, y - 1, var8)) {
 					this.flowCost[var5] = 0;
 				} else {
-					this.flowCost[var5] = this.calculateFlowCost(var1, var6, var3, var8, 1, var5);
+					this.flowCost[var5] = this.calculateFlowCost(worldObj, var6, y, var8, 1, var5);
 				}
 			}
 		}
@@ -212,22 +212,22 @@
 		return this.isOptimalFlowDirection;
 	}
 
-	private boolean blockBlocksFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
+	private boolean blockBlocksFlow(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockId(x, y, z);
 		if(var5 != Block.doorWood.blockID && var5 != Block.doorSteel.blockID && var5 != Block.signStanding.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
 			if(var5 == 0) {
 				return false;
 			} else {
-				Material var6 = Block.blocksList[var5].material;
-				return var6.isSolid();
+				Material material6 = Block.blocksList[var5].material;
+				return material6.isSolid();
 			}
 		} else {
 			return true;
 		}
 	}
 
-	protected int getSmallestFlowDecay(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
+	protected int getSmallestFlowDecay(World worldObj, int x, int y, int z, int var5) {
+		int var6 = this.getFlowDecay(worldObj, x, y, z);
 		if(var6 < 0) {
 			return var5;
 		} else {
@@ -243,15 +243,15 @@
 		}
 	}
 
-	private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == this.material ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
+	private boolean liquidCanDisplaceBlock(World worldObj, int x, int y, int z) {
+		Material material5 = worldObj.getBlockMaterial(x, y, z);
+		return material5 == this.material ? false : (material5 == Material.lava ? false : !this.blockBlocksFlow(worldObj, x, y, z));
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		super.onBlockAdded(worldObj, x, y, z);
+		if(worldObj.getBlockId(x, y, z) == this.blockID) {
+			worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
 	}
--- net/minecraft/src/WorldBlockPositionType.java
+++ net/minecraft/src/WorldBlockPositionType.java
@@ -9,13 +9,13 @@
 	int metadata;
 	final WorldClient worldClient;
 
-	public WorldBlockPositionType(WorldClient var1, int var2, int var3, int var4, int var5, int var6) {
-		this.worldClient = var1;
-		this.posX = var2;
-		this.posY = var3;
-		this.posZ = var4;
+	public WorldBlockPositionType(WorldClient world, int x, int y, int z, int id, int metadata) {
+		this.worldClient = world;
+		this.posX = x;
+		this.posY = y;
+		this.posZ = z;
 		this.acceptCountdown = 80;
-		this.blockID = var5;
-		this.metadata = var6;
+		this.blockID = id;
+		this.metadata = metadata;
 	}
 }
--- net/minecraft/src/NetLoginHandler.java
+++ net/minecraft/src/NetLoginHandler.java
@@ -4,6 +4,8 @@
 import java.net.Socket;
 import java.util.Random;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet19WorldType;
 import net.minecraft.server.MinecraftServer;
 
 public class NetLoginHandler extends NetHandler {
@@ -17,9 +19,9 @@
 	private Packet1Login packet1login = null;
 	private String serverId = "";
 
-	public NetLoginHandler(MinecraftServer var1, Socket var2, String var3) throws IOException {
-		this.mcServer = var1;
-		this.netManager = new NetworkManager(var2, var3, this);
+	public NetLoginHandler(MinecraftServer minecraftServer, Socket socket, String threadName) throws IOException {
+		this.mcServer = minecraftServer;
+		this.netManager = new NetworkManager(socket, threadName, this);
 	}
 
 	public void tryLogin() throws IOException {
@@ -36,14 +38,14 @@
 
 	}
 
-	public void kickUser(String var1) {
-		logger.info("Disconnecting " + this.getUserAndIPString() + ": " + var1);
-		this.netManager.addToSendQueue(new Packet255KickDisconnect(var1));
+	public void kickUser(String playerName) {
+		logger.info("Disconnecting " + this.getUserAndIPString() + ": " + playerName);
+		this.netManager.addToSendQueue(new Packet255KickDisconnect(playerName));
 		this.netManager.serverShutdown();
 		this.finishedProcessing = true;
 	}
 
-	public void handleHandshake(Packet2Handshake var1) {
+	public void handleHandshake(Packet2Handshake packet) {
 		if(this.mcServer.onlineMode) {
 			this.serverId = Long.toHexString(rand.nextLong());
 			this.netManager.addToSendQueue(new Packet2Handshake(this.serverId));
@@ -53,43 +55,44 @@
 
 	}
 
-	public void handleLogin(Packet1Login var1) {
-		this.username = var1.username;
-		if(var1.protocolVersion != 2) {
+	public void handleLogin(Packet1Login packet) {
+		this.username = packet.username;
+		if(packet.protocolVersion != 85000001) {
 			this.kickUser("Outdated client!");
 		} else {
 			if(!this.mcServer.onlineMode) {
-				this.doLogin(var1);
+				this.doLogin(packet);
 			} else {
-				(new ThreadLoginVerifier(this, var1)).start();
+				(new ThreadLoginVerifier(this, packet)).start();
 			}
 
 		}
 	}
 
-	public void doLogin(Packet1Login var1) {
-		EntityPlayerMP var2 = this.mcServer.configManager.login(this, var1.username, var1.password);
+	public void doLogin(Packet1Login loginPacket) {
+		EntityPlayerMP var2 = this.mcServer.configManager.login(this, loginPacket.username, loginPacket.password);
 		if(var2 != null) {
 			logger.info(this.getUserAndIPString() + " logged in");
-			NetServerHandler var3 = new NetServerHandler(this.mcServer, this.netManager, var2);
-			var3.sendPacket(new Packet1Login("", "", 0));
-			var3.sendPacket(new Packet6SpawnPosition(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnY, this.mcServer.worldMngr.spawnZ));
+			NetServerHandler netServerHandler3 = new NetServerHandler(this.mcServer, this.netManager, var2);
+			netServerHandler3.sendPacket(new Packet1Login("", "", 0));
+			netServerHandler3.sendPacket(new Packet6SpawnPosition(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnY, this.mcServer.worldMngr.spawnZ));
+			netServerHandler3.sendPacket(new Packet19WorldType(this.mcServer.worldMngr.worldType, this.mcServer.worldMngr.creative));
 			this.mcServer.configManager.playerLoggedIn(var2);
-			var3.teleportTo(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
-			var3.sendInventoryPackets();
-			this.mcServer.networkServer.addPlayer(var3);
-			var3.sendPacket(new Packet4UpdateTime(this.mcServer.worldMngr.worldTime));
+			netServerHandler3.teleportTo(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+			netServerHandler3.sendInventoryPackets();
+			this.mcServer.networkServer.addPlayer(netServerHandler3);
+			netServerHandler3.sendPacket(new Packet4UpdateTime(this.mcServer.worldMngr.worldTime));
 		}
 
 		this.finishedProcessing = true;
 	}
 
-	public void handleErrorMessage(String var1) {
+	public void handleErrorMessage(String message) {
 		logger.info(this.getUserAndIPString() + " lost connection");
 		this.finishedProcessing = true;
 	}
 
-	public void registerPacket(Packet var1) {
+	public void registerPacket(Packet packet) {
 		this.kickUser("Protocol error");
 	}
 
@@ -97,11 +100,11 @@
 		return this.username != null ? this.username + " [" + this.netManager.getRemoteAddress().toString() + "]" : this.netManager.getRemoteAddress().toString();
 	}
 
-	static String getServerId(NetLoginHandler var0) {
-		return var0.serverId;
+	static String getServerId(NetLoginHandler loginHandler) {
+		return loginHandler.serverId;
 	}
 
-	static Packet1Login setLoginPacket(NetLoginHandler var0, Packet1Login var1) {
-		return var0.packet1login = var1;
+	static Packet1Login setLoginPacket(NetLoginHandler loginHandler, Packet1Login loginPacket) {
+		return loginHandler.packet1login = loginPacket;
 	}
 }
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -1,20 +1,20 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.SimplexOctaves;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
+import java.util.*;
 
 public class World implements IBlockAccess {
+	public final boolean birthday;
 	private List lightingToUpdate;
 	public List loadedEntityList;
 	private List unloadedEntityList;
@@ -22,7 +22,7 @@
 	private Set scheduledTickSet;
 	public List loadedTileEntityList;
 	public long worldTime;
-	public boolean snowCovered;
+	public WorldType worldType;
 	private long skyColor;
 	private long fogColor;
 	private long cloudColor;
@@ -51,24 +51,27 @@
 	public boolean worldChunkLoadOverride;
 	private ArrayList collidingBoundingBoxes;
 	private Set positionsToUpdate;
-	private int soundCounter;
+	public int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean multiplayerWorld;
+	public String displayName;
+	public boolean creative;
+	public int starfallChance;
 
-	public static NBTTagCompound getLevelData(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(!var3.exists()) {
+	public static NBTTagCompound getLevelData(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(!file3.exists()) {
 			return null;
 		} else {
-			File var4 = new File(var3, "level.dat");
-			if(var4.exists()) {
+			File file4 = new File(file3, "level.dat");
+			if(file4.exists()) {
 				try {
-					NBTTagCompound var5 = CompressedStreamTools.readCompressed(new FileInputStream(var4));
-					NBTTagCompound var6 = var5.getCompoundTag("Data");
-					return var6;
-				} catch (Exception var7) {
-					var7.printStackTrace();
+					NBTTagCompound nBTTagCompound5 = CompressedStreamTools.readCompressed(new FileInputStream(file4));
+					NBTTagCompound nBTTagCompound6 = nBTTagCompound5.getCompoundTag("Data");
+					return nBTTagCompound6;
+				} catch (Exception exception7) {
+					exception7.printStackTrace();
 				}
 			}
 
@@ -76,31 +79,31 @@
 		}
 	}
 
-	public static void deleteWorld(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(var3.exists()) {
-			deleteWorldFiles(var3.listFiles());
-			var3.delete();
+	public static void deleteWorld(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(file3.exists()) {
+			deleteWorldFiles(file3.listFiles());
+			file3.delete();
 		}
 	}
 
-	private static void deleteWorldFiles(File[] var0) {
-		for(int var1 = 0; var1 < var0.length; ++var1) {
-			if(var0[var1].isDirectory()) {
-				deleteWorldFiles(var0[var1].listFiles());
+	private static void deleteWorldFiles(File[] files) {
+		for(int var1 = 0; var1 < files.length; ++var1) {
+			if(files[var1].isDirectory()) {
+				deleteWorldFiles(files[var1].listFiles());
 			}
 
-			var0[var1].delete();
+			files[var1].delete();
 		}
 
 	}
 
-	public World(File var1, String var2) {
-		this(var1, var2, (new Random()).nextLong());
+	public World(File file, String name) {
+		this(file, name, (new Random()).nextLong(), null);
 	}
 
-	public World(String var1) {
+	public World(String name) {
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
@@ -108,7 +111,7 @@
 		this.scheduledTickSet = new HashSet();
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
-		this.snowCovered = false;
+		this.worldType = WorldType.NORMAL;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -129,12 +132,17 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var1;
+		this.levelName = name;
+		this.displayName = name;
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
 		this.calculateInitialSkylight();
+
+		Calendar calendar1 = Calendar.getInstance();
+		calendar1.setTime(new Date());
+		this.birthday = calendar1.get(Calendar.MONTH) == Calendar.NOVEMBER && calendar1.get(Calendar.DATE) == 8;
 	}
 
-	public World(File var1, String var2, long var3) {
+	public World(File file, String name, long seed, CreateWorldInfo info) {
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
@@ -142,7 +150,7 @@
 		this.scheduledTickSet = new HashSet();
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
-		this.snowCovered = false;
+		this.worldType = WorldType.NORMAL;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -163,51 +171,72 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var2;
-		var1.mkdirs();
-		this.saveDirectory = new File(var1, var2);
+		this.levelName = name;
+		this.displayName = name;
+		file.mkdirs();
+		this.saveDirectory = new File(file, name);
 		this.saveDirectory.mkdirs();
 
-		File var5;
+		Calendar calendar1 = Calendar.getInstance();
+		calendar1.setTime(new Date());
+		this.birthday = calendar1.get(Calendar.MONTH) == Calendar.NOVEMBER && calendar1.get(Calendar.DATE) == 8;
+
+		File file5;
 		try {
-			var5 = new File(this.saveDirectory, "session.lock");
-			DataOutputStream var6 = new DataOutputStream(new FileOutputStream(var5));
+			file5 = new File(this.saveDirectory, "session.lock");
+			DataOutputStream dataOutputStream6 = new DataOutputStream(new FileOutputStream(file5));
 
 			try {
-				var6.writeLong(this.lockTimestamp);
+				dataOutputStream6.writeLong(this.lockTimestamp);
 			} finally {
-				var6.close();
+				dataOutputStream6.close();
 			}
-		} catch (IOException var13) {
+		} catch (IOException iOException13) {
 			throw new RuntimeException("Failed to check session lock, aborting");
 		}
 
-		var5 = new File(this.saveDirectory, "level.dat");
-		this.isNewWorld = !var5.exists();
-		if(var5.exists()) {
-			try {
-				NBTTagCompound var14 = CompressedStreamTools.readCompressed(new FileInputStream(var5));
-				NBTTagCompound var7 = var14.getCompoundTag("Data");
-				this.randomSeed = var7.getLong("RandomSeed");
-				this.spawnX = var7.getInteger("SpawnX");
-				this.spawnY = var7.getInteger("SpawnY");
-				this.spawnZ = var7.getInteger("SpawnZ");
-				this.worldTime = var7.getLong("Time");
-				this.sizeOnDisk = var7.getLong("SizeOnDisk");
-				this.snowCovered = var7.getBoolean("SnowCovered");
-				if(var7.hasKey("Player")) {
-					this.nbtCompoundPlayer = var7.getCompoundTag("Player");
-				}
-			} catch (Exception var11) {
-				var11.printStackTrace();
-			}
-		} else {
-			this.snowCovered = this.rand.nextInt(4) == 0;
-		}
-
 		boolean var15 = false;
+
+		file5 = new File(this.saveDirectory, "level.dat");
+		this.isNewWorld = !file5.exists();
+		if(file5.exists()) {
+			try {
+				NBTTagCompound nBTTagCompound14 = CompressedStreamTools.readCompressed(new FileInputStream(file5));
+				NBTTagCompound nBTTagCompound7 = nBTTagCompound14.getCompoundTag("Data");
+				this.randomSeed = nBTTagCompound7.getLong("RandomSeed");
+				this.spawnX = nBTTagCompound7.getInteger("SpawnX");
+				this.spawnY = nBTTagCompound7.getInteger("SpawnY");
+				this.spawnZ = nBTTagCompound7.getInteger("SpawnZ");
+				this.worldTime = nBTTagCompound7.getLong("Time");
+				this.sizeOnDisk = nBTTagCompound7.getLong("SizeOnDisk");
+				this.worldType = nBTTagCompound7.getBoolean("SnowCovered") ? WorldType.WINTER
+						: nBTTagCompound7.hasKey("WorldType")
+								? WorldType.values()[nBTTagCompound7.getByte("WorldType")]
+								: WorldType.NORMAL;
+				this.displayName = nBTTagCompound7.getString("DisplayName");
+				this.creative = nBTTagCompound7.getBoolean("Creative");
+				this.starfallChance = nBTTagCompound7.getInteger("StarfallChance");
+				if(this.displayName.isEmpty()) {
+					this.displayName = name;
+				}
+				if(nBTTagCompound7.hasKey("Player")) {
+					this.nbtCompoundPlayer = nBTTagCompound7.getCompoundTag("Player");
+				}
+			} catch (Exception exception11) {
+				exception11.printStackTrace();
+			}
+		} else {
+//			this.snowCovered = this.rand.nextInt(4) == 0;
+			this.applyCreationInfo(info);
+			var15 = true;
+		}
+
+		this.skyColor = this.worldType.getSkyColor();
+		this.fogColor = this.worldType.getFogColor();
+		this.cloudColor = this.worldType.getCloudColor();
+
 		if(this.randomSeed == 0L) {
-			this.randomSeed = var3;
+			this.randomSeed = seed;
 			var15 = true;
 		}
 
@@ -227,8 +256,19 @@
 		this.calculateInitialSkylight();
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
+	public boolean canDoClientAction() {
+		return !this.multiplayerWorld;
+	}
+
+	public void setWorldType(WorldType worldType) {
+		this.worldType = worldType;
+		this.skyColor = worldType.getSkyColor();
+		this.fogColor = worldType.getFogColor();
+		this.cloudColor = worldType.getCloudColor();
+	}
+
+	protected IChunkProvider getChunkProvider(File file) {
+		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(file, true), new ChunkProviderGenerate(this, this.randomSeed));
 	}
 
 	public void setSpawnLocation() {
@@ -243,94 +283,100 @@
 
 	}
 
-	private boolean findSpawn(int var1, int var2) {
-		int var3 = this.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
+	private boolean findSpawn(int x, int z) {
+		int var3 = this.getFirstUncoveredBlock(x, z);
+		int var4 = this.getHeightValue(x, z);
+		return var3 == Block.sand.blockID
+				&& var4 > 50
+				&& var4 < 70;
 	}
 
-	private int getFirstUncoveredBlock(int var1, int var2) {
+	private int getFirstUncoveredBlock(int x, int z) {
 		int var3;
-		for(var3 = 63; this.getBlockId(var1, var3 + 1, var2) != 0; ++var3) {
+		for(var3 = 63; this.getBlockId(x, var3 + 1, z) != 0; ++var3) {
 		}
 
-		return this.getBlockId(var1, var3, var2);
+		return this.getBlockId(x, var3, z);
 	}
 
-	public void spawnPlayerWithLoadedChunks(EntityPlayer var1) {
+	public void spawnPlayerWithLoadedChunks(EntityPlayer entityPlayer) {
 		try {
 			if(this.nbtCompoundPlayer != null) {
-				var1.readFromNBT(this.nbtCompoundPlayer);
+				entityPlayer.readFromNBT(this.nbtCompoundPlayer);
 				this.nbtCompoundPlayer = null;
 			}
 
-			this.spawnEntityInWorld(var1);
-		} catch (Exception var3) {
-			var3.printStackTrace();
+			this.spawnEntityInWorld(entityPlayer);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
 	}
 
-	public void saveWorld(boolean var1, IProgressUpdate var2) {
+	public void saveWorld(boolean var1, IProgressUpdate iProgressUpdate2) {
 		if(this.chunkProvider.canSave()) {
-			if(var2 != null) {
-				var2.displayProgressMessage("Saving level");
+			if(iProgressUpdate2 != null) {
+				iProgressUpdate2.displayProgressMessage("Saving level");
 			}
 
 			this.saveLevel();
-			if(var2 != null) {
-				var2.displayLoadingString("Saving chunks");
+			if(iProgressUpdate2 != null) {
+				iProgressUpdate2.displayLoadingString("Saving chunks");
 			}
 
-			this.chunkProvider.saveChunks(var1, var2);
+			this.chunkProvider.saveChunks(var1, iProgressUpdate2);
 		}
 	}
 
 	private void saveLevel() {
 		this.checkSessionLock();
-		NBTTagCompound var1 = new NBTTagCompound();
-		var1.setLong("RandomSeed", this.randomSeed);
-		var1.setInteger("SpawnX", this.spawnX);
-		var1.setInteger("SpawnY", this.spawnY);
-		var1.setInteger("SpawnZ", this.spawnZ);
-		var1.setLong("Time", this.worldTime);
-		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setBoolean("SnowCovered", this.snowCovered);
-		var1.setLong("LastPlayed", System.currentTimeMillis());
+		NBTTagCompound nBTTagCompound1 = new NBTTagCompound();
+		nBTTagCompound1.setLong("RandomSeed", this.randomSeed);
+		nBTTagCompound1.setInteger("SpawnX", this.spawnX);
+		nBTTagCompound1.setInteger("SpawnY", this.spawnY);
+		nBTTagCompound1.setInteger("SpawnZ", this.spawnZ);
+		nBTTagCompound1.setLong("Time", this.worldTime);
+		nBTTagCompound1.setLong("SizeOnDisk", this.sizeOnDisk);
+		nBTTagCompound1.setByte("WorldType", (byte)this.worldType.ordinal());
+		nBTTagCompound1.setString("DisplayName", this.displayName);
+		nBTTagCompound1.setBoolean("Creative", this.creative);
+		nBTTagCompound1.setInteger("StarfallChance", this.starfallChance);
+		nBTTagCompound1.setLong("LastPlayed", System.currentTimeMillis());
 		EntityPlayer var2 = null;
 		if(this.playerEntities.size() > 0) {
 			var2 = (EntityPlayer)this.playerEntities.get(0);
 		}
 
-		NBTTagCompound var3;
+		NBTTagCompound nBTTagCompound3;
 		if(var2 != null) {
-			var3 = new NBTTagCompound();
-			var2.writeToNBT(var3);
-			var1.setCompoundTag("Player", var3);
+			nBTTagCompound3 = new NBTTagCompound();
+			var2.writeToNBT(nBTTagCompound3);
+			nBTTagCompound1.setCompoundTag("Player", nBTTagCompound3);
 		}
 
-		var3 = new NBTTagCompound();
-		var3.setTag("Data", var1);
+		nBTTagCompound3 = new NBTTagCompound();
+		nBTTagCompound3.setTag("Data", nBTTagCompound1);
 
 		try {
-			File var4 = new File(this.saveDirectory, "level.dat_new");
-			File var5 = new File(this.saveDirectory, "level.dat_old");
-			File var6 = new File(this.saveDirectory, "level.dat");
-			CompressedStreamTools.writeCompressed(var3, new FileOutputStream(var4));
-			if(var5.exists()) {
-				var5.delete();
-			}
-
-			var6.renameTo(var5);
-			if(var6.exists()) {
-				var6.delete();
-			}
-
-			var4.renameTo(var6);
-			if(var4.exists()) {
-				var4.delete();
-			}
-		} catch (Exception var7) {
-			var7.printStackTrace();
+			File file4 = new File(this.saveDirectory, "level.dat_new");
+			File file5 = new File(this.saveDirectory, "level.dat_old");
+			File file6 = new File(this.saveDirectory, "level.dat");
+			CompressedStreamTools.writeCompressed(nBTTagCompound3, new FileOutputStream(file4));
+			if(file5.exists()) {
+				file5.delete();
+			}
+
+			file6.renameTo(file5);
+			if(file6.exists()) {
+				file6.delete();
+			}
+
+			file4.renameTo(file6);
+			if(file4.exists()) {
+				file4.delete();
+			}
+		} catch (Exception exception7) {
+			exception7.printStackTrace();
 		}
 
 	}
@@ -347,25 +393,25 @@
 		}
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
-	}
-
-	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
-	}
-
-	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
-			var1 >>= 4;
-			var2 >>= 4;
-			var3 >>= 4;
-			var4 >>= 4;
-			var5 >>= 4;
-			var6 >>= 4;
-
-			for(int var7 = var1; var7 <= var4; ++var7) {
-				for(int var8 = var3; var8 <= var6; ++var8) {
+	public int getBlockId(int x, int y, int z) {
+		return x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000 ? (y < 0 ? 0 : (y >= 128 ? 0 : this.getChunkFromChunkCoords(x >> 4, z >> 4).getBlockID(x & 15, y, z & 15))) : 0;
+	}
+
+	public boolean blockExists(int x, int y, int z) {
+		return y >= 0 && y < 128 && this.chunkExists(x >> 4, z >> 4);
+	}
+
+	public boolean checkChunksExist(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(maxY >= 0 && minY < 128) {
+			minX >>= 4;
+			minY >>= 4;
+			minZ >>= 4;
+			maxX >>= 4;
+			maxY >>= 4;
+			maxZ >>= 4;
+
+			for(int var7 = minX; var7 <= maxX; ++var7) {
+				for(int var8 = minZ; var8 <= maxZ; ++var8) {
 					if(!this.chunkExists(var7, var8)) {
 						return false;
 					}
@@ -378,85 +424,85 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
-		return this.chunkProvider.chunkExists(var1, var2);
-	}
-
-	public Chunk getChunkFromBlockCoords(int var1, int var2) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-	}
-
-	public Chunk getChunkFromChunkCoords(int var1, int var2) {
-		return this.chunkProvider.provideChunk(var1, var2);
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
+	private boolean chunkExists(int xPos, int zPos) {
+		return this.chunkProvider.chunkExists(xPos, zPos);
+	}
+
+	public Chunk getChunkFromBlockCoords(int xPos, int zPos) {
+		return this.getChunkFromChunkCoords(xPos >> 4, zPos >> 4);
+	}
+
+	public Chunk getChunkFromChunkCoords(int xPos, int zPos) {
+		return this.chunkProvider.provideChunk(xPos, zPos);
+	}
+
+	public boolean setBlockAndMetadata(int x, int y, int z, int id, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk6 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk6.setBlockIDWithMetadata(x & 15, y, z & 15, id, metadata);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlock(int x, int y, int z, int id) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk5.setBlockID(x & 15, y, z & 15, id);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public Material getBlockMaterial(int x, int y, int z) {
+		int var4 = this.getBlockId(x, y, z);
 		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
 	}
 
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public int getBlockMetadata(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return 0;
 			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.getBlockMetadata(var1, var2, var3);
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.getBlockMetadata(x, y, z);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
-		this.setBlockMetadata(var1, var2, var3, var4);
+	public void setBlockMetadataWithNotify(int x, int y, int z, int metadata) {
+		this.setBlockMetadata(x, y, z, metadata);
 	}
 
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean setBlockMetadata(int x, int y, int z, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return false;
 			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				var5.setBlockMetadata(var1, var2, var3, var4);
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				chunk5.setBlockMetadata(x, y, z, metadata);
 				return true;
 			}
 		} else {
@@ -464,91 +510,92 @@
 		}
 	}
 
-	public boolean setBlockWithNotify(int var1, int var2, int var3, int var4) {
-		if(this.setBlock(var1, var2, var3, var4)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadataWithNotify(int var1, int var2, int var3, int var4, int var5) {
-		if(this.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
+	public boolean setBlockWithNotify(int x, int y, int z, int id) {
+		if(this.setBlock(x, y, z, id)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadataWithNotify(int x, int y, int z, int id, int metadata) {
+		if(this.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void markBlockNeedsUpdate(int x, int y, int z) {
 		for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-			((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
-		}
-
-	}
-
-	protected void notifyBlockChange(int var1, int var2, int var3, int var4) {
-		this.markBlockNeedsUpdate(var1, var2, var3);
-		this.notifyBlocksOfNeighborChange(var1, var2, var3, var4);
-	}
-
-	public void markBlocksDirtyVertical(int var1, int var2, int var3, int var4) {
-		if(var3 > var4) {
-			int var5 = var4;
-			var4 = var3;
-			var3 = var5;
-		}
-
-		this.markBlocksDirty(var1, var3, var2, var1, var4, var2);
-	}
-
-	public void markBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
+			((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(x, y, z);
+		}
+
+	}
+
+	protected void notifyBlockChange(int x, int y, int z, int id) {
+		this.markBlockNeedsUpdate(x, y, z);
+		this.notifyBlocksOfNeighborChange(x, y, z, id);
+	}
+
+	public void markBlocksDirtyVertical(int x, int z, int minY, int maxY) {
+		if(minY > maxY) {
+			int var5 = maxY;
+			maxY = minY;
+			minY = var5;
+		}
+
+		this.markBlocksDirty(x, minY, z, x, maxY, z);
+	}
+
+	public void markBlocksDirty(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
 		for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-			((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeNeedsUpdate(var1, var2, var3, var4, var5, var6);
+			((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeNeedsUpdate(minX, minY, minZ, maxX, maxY, maxZ);
 		}
 
 	}
 
-	public void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
-		this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1 + 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 - 1, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 + 1, var4);
+	public void notifyBlocksOfNeighborChange(int x, int y, int z, int id) {
+		this.notifyBlockOfNeighborChange(x - 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x + 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x, y - 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y + 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y, z - 1, id);
+		this.notifyBlockOfNeighborChange(x, y, z + 1, id);
 	}
 
-	private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
-		if(!this.editingBlocks && !this.multiplayerWorld) {
-			Block var5 = Block.blocksList[this.getBlockId(var1, var2, var3)];
+	private void notifyBlockOfNeighborChange(int x, int y, int z, int id) {
+		if(!this.editingBlocks && this.canDoClientAction()) {
+			Block var5 = Block.blocksList[this.getBlockId(x, y, z)];
 			if(var5 != null) {
-				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
+				var5.onNeighborBlockChange(this, x, y, z, id);
 			}
 
 		}
 	}
 
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).canBlockSeeTheSky(var1 & 15, var2, var3 & 15);
-	}
-
-	public int getBlockLightValue(int var1, int var2, int var3) {
-		return this.getBlockLightValue_do(var1, var2, var3, true);
-	}
-
-	public int getBlockLightValue_do(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4).canBlockSeeTheSky(x & 15, y, z & 15);
+	}
+
+	public int getBlockLightValue(int x, int y, int z) {
+		return this.getBlockLightValue_do(x, y, z, true);
+	}
+
+	public int getBlockLightValue_do(int x, int y, int z, boolean update) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
 			int var5;
-			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
-					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
-					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
-					int var9 = this.getBlockLightValue_do(var1, var2, var3 + 1, false);
-					int var10 = this.getBlockLightValue_do(var1, var2, var3 - 1, false);
+			if(update) {
+				var5 = this.getBlockId(x, y, z);
+				Block b = Block.blocksList[var5];
+				if((b instanceof BlockStep && !((BlockStep) b).blockType) || var5 == Block.tilledField.blockID) {
+					int var6 = this.getBlockLightValue_do(x, y + 1, z, false);
+					int var7 = this.getBlockLightValue_do(x + 1, y, z, false);
+					int var8 = this.getBlockLightValue_do(x - 1, y, z, false);
+					int var9 = this.getBlockLightValue_do(x, y, z + 1, false);
+					int var10 = this.getBlockLightValue_do(x, y, z - 1, false);
 					if(var7 > var6) {
 						var6 = var7;
 					}
@@ -569,9 +616,9 @@
 				}
 			}
 
-			if(var2 < 0) {
+			if(y < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				var5 = 15 - this.skylightSubtracted;
 				if(var5 < 0) {
 					var5 = 0;
@@ -579,93 +626,93 @@
 
 				return var5;
 			} else {
-				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var11.getBlockLightValue(var1, var2, var3, this.skylightSubtracted);
+				Chunk chunk11 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk11.getBlockLightValue(x, y, z, this.skylightSubtracted);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public boolean canExistingBlockSeeTheSky(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean canExistingBlockSeeTheSky(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return true;
-			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
+			} else if(!this.chunkExists(x >> 4, z >> 4)) {
 				return false;
 			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.canBlockSeeTheSky(var1, var2, var3);
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.canBlockSeeTheSky(x, y, z);
 			}
 		} else {
 			return false;
 		}
 	}
 
-	public int getHeightValue(int var1, int var2) {
-		if(var1 >= -32000000 && var2 >= -32000000 && var1 < 32000000 && var2 <= 32000000) {
-			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+	public int getHeightValue(int blockX, int blockZ) {
+		if(blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000) {
+			if(!this.chunkExists(blockX >> 4, blockZ >> 4)) {
 				return 0;
 			} else {
-				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-				return var3.getHeightValue(var1 & 15, var2 & 15);
+				Chunk chunk3 = this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4);
+				return chunk3.getHeightValue(blockX & 15, blockZ & 15);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void neighborLightPropagationChanged(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(this.blockExists(var2, var3, var4)) {
-			if(var1 == EnumSkyBlock.Sky) {
-				if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
-					var5 = 15;
+	public void neighborLightPropagationChanged(EnumSkyBlock skyBlock, int x, int y, int z, int lightValue) {
+		if(this.blockExists(x, y, z)) {
+			if(skyBlock == EnumSkyBlock.Sky) {
+				if(this.canExistingBlockSeeTheSky(x, y, z)) {
+					lightValue = 15;
 				}
-			} else if(var1 == EnumSkyBlock.Block) {
-				int var6 = this.getBlockId(var2, var3, var4);
-				if(Block.lightValue[var6] > var5) {
-					var5 = Block.lightValue[var6];
+			} else if(skyBlock == EnumSkyBlock.Block) {
+				int var6 = this.getBlockId(x, y, z);
+				if(Block.lightValue[var6] > lightValue) {
+					lightValue = Block.lightValue[var6];
 				}
 			}
 
-			if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
-				this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
+			if(this.getSavedLightValue(skyBlock, x, y, z) != lightValue) {
+				this.scheduleLightingUpdate(skyBlock, x, y, z, x, y, z);
 			}
 
 		}
 	}
 
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			int var5 = var2 >> 4;
-			int var6 = var4 >> 4;
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int x, int y, int z) {
+		if(y >= 0 && y < 128 && x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			int var5 = x >> 4;
+			int var6 = z >> 4;
 			if(!this.chunkExists(var5, var6)) {
 				return 0;
 			} else {
-				Chunk var7 = this.getChunkFromChunkCoords(var5, var6);
-				return var7.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
+				Chunk chunk7 = this.getChunkFromChunkCoords(var5, var6);
+				return chunk7.getSavedLightValue(skyBlock, x & 15, y, z & 15);
 			}
 		} else {
-			return var1.defaultLightValue;
+			return skyBlock.defaultLightValue;
 		}
 	}
 
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
+	public void setLightValue(EnumSkyBlock skyBlock, int x, int y, int z, int lightValue) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y >= 0) {
+				if(y < 128) {
+					if(this.chunkExists(x >> 4, z >> 4)) {
+						Chunk chunk6 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+						chunk6.setLightValue(skyBlock, x & 15, y, z & 15, lightValue);
 
 						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
+							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(x, y, z);
 						}
 
 					}
@@ -674,31 +721,31 @@
 		}
 	}
 
-	public float getBrightness(int var1, int var2, int var3) {
-		return lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
+	public float getBrightness(int x, int y, int z) {
+		return lightBrightnessTable[this.getBlockLightValue(x, y, z)];
 	}
 
 	public boolean isDaytime() {
 		return this.skylightSubtracted < 4;
 	}
 
-	public MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
-		return this.rayTraceBlocks_do(var1, var2, false);
+	public MovingObjectPosition rayTraceBlocks(Vec3D vec3D1, Vec3D vec3D2) {
+		return this.rayTraceBlocks_do(vec3D1, vec3D2, false);
 	}
 
-	public MovingObjectPosition rayTraceBlocks_do(Vec3D var1, Vec3D var2, boolean var3) {
-		if(!Double.isNaN(var1.xCoord) && !Double.isNaN(var1.yCoord) && !Double.isNaN(var1.zCoord)) {
-			if(!Double.isNaN(var2.xCoord) && !Double.isNaN(var2.yCoord) && !Double.isNaN(var2.zCoord)) {
-				int var4 = MathHelper.floor_double(var2.xCoord);
-				int var5 = MathHelper.floor_double(var2.yCoord);
-				int var6 = MathHelper.floor_double(var2.zCoord);
-				int var7 = MathHelper.floor_double(var1.xCoord);
-				int var8 = MathHelper.floor_double(var1.yCoord);
-				int var9 = MathHelper.floor_double(var1.zCoord);
+	public MovingObjectPosition rayTraceBlocks_do(Vec3D vec3D1, Vec3D vec3D2, boolean var3) {
+		if(!Double.isNaN(vec3D1.xCoord) && !Double.isNaN(vec3D1.yCoord) && !Double.isNaN(vec3D1.zCoord)) {
+			if(!Double.isNaN(vec3D2.xCoord) && !Double.isNaN(vec3D2.yCoord) && !Double.isNaN(vec3D2.zCoord)) {
+				int var4 = MathHelper.floor_double(vec3D2.xCoord);
+				int var5 = MathHelper.floor_double(vec3D2.yCoord);
+				int var6 = MathHelper.floor_double(vec3D2.zCoord);
+				int var7 = MathHelper.floor_double(vec3D1.xCoord);
+				int var8 = MathHelper.floor_double(vec3D1.yCoord);
+				int var9 = MathHelper.floor_double(vec3D1.zCoord);
 				int var10 = 20;
 
 				while(var10-- >= 0) {
-					if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
+					if(Double.isNaN(vec3D1.xCoord) || Double.isNaN(vec3D1.yCoord) || Double.isNaN(vec3D1.zCoord)) {
 						return null;
 					}
 
@@ -736,19 +783,19 @@
 					double var17 = 999.0D;
 					double var19 = 999.0D;
 					double var21 = 999.0D;
-					double var23 = var2.xCoord - var1.xCoord;
-					double var25 = var2.yCoord - var1.yCoord;
-					double var27 = var2.zCoord - var1.zCoord;
+					double var23 = vec3D2.xCoord - vec3D1.xCoord;
+					double var25 = vec3D2.yCoord - vec3D1.yCoord;
+					double var27 = vec3D2.zCoord - vec3D1.zCoord;
 					if(var11 != 999.0D) {
-						var17 = (var11 - var1.xCoord) / var23;
+						var17 = (var11 - vec3D1.xCoord) / var23;
 					}
 
 					if(var13 != 999.0D) {
-						var19 = (var13 - var1.yCoord) / var25;
+						var19 = (var13 - vec3D1.yCoord) / var25;
 					}
 
 					if(var15 != 999.0D) {
-						var21 = (var15 - var1.zCoord) / var27;
+						var21 = (var15 - vec3D1.zCoord) / var27;
 					}
 
 					boolean var29 = false;
@@ -760,9 +807,9 @@
 							var35 = 5;
 						}
 
-						var1.xCoord = var11;
-						var1.yCoord += var25 * var17;
-						var1.zCoord += var27 * var17;
+						vec3D1.xCoord = var11;
+						vec3D1.yCoord += var25 * var17;
+						vec3D1.zCoord += var27 * var17;
 					} else if(var19 < var21) {
 						if(var5 > var8) {
 							var35 = 0;
@@ -770,9 +817,9 @@
 							var35 = 1;
 						}
 
-						var1.xCoord += var23 * var19;
-						var1.yCoord = var13;
-						var1.zCoord += var27 * var19;
+						vec3D1.xCoord += var23 * var19;
+						vec3D1.yCoord = var13;
+						vec3D1.zCoord += var27 * var19;
 					} else {
 						if(var6 > var9) {
 							var35 = 2;
@@ -780,37 +827,37 @@
 							var35 = 3;
 						}
 
-						var1.xCoord += var23 * var21;
-						var1.yCoord += var25 * var21;
-						var1.zCoord = var15;
+						vec3D1.xCoord += var23 * var21;
+						vec3D1.yCoord += var25 * var21;
+						vec3D1.zCoord = var15;
 					}
 
-					Vec3D var30 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
-					var7 = (int)(var30.xCoord = (double)MathHelper.floor_double(var1.xCoord));
+					Vec3D vec3D30 = Vec3D.createVector(vec3D1.xCoord, vec3D1.yCoord, vec3D1.zCoord);
+					var7 = (int)(vec3D30.xCoord = (double)MathHelper.floor_double(vec3D1.xCoord));
 					if(var35 == 5) {
 						--var7;
-						++var30.xCoord;
+						++vec3D30.xCoord;
 					}
 
-					var8 = (int)(var30.yCoord = (double)MathHelper.floor_double(var1.yCoord));
+					var8 = (int)(vec3D30.yCoord = (double)MathHelper.floor_double(vec3D1.yCoord));
 					if(var35 == 1) {
 						--var8;
-						++var30.yCoord;
+						++vec3D30.yCoord;
 					}
 
-					var9 = (int)(var30.zCoord = (double)MathHelper.floor_double(var1.zCoord));
+					var9 = (int)(vec3D30.zCoord = (double)MathHelper.floor_double(vec3D1.zCoord));
 					if(var35 == 3) {
 						--var9;
-						++var30.zCoord;
+						++vec3D30.zCoord;
 					}
 
 					int var31 = this.getBlockId(var7, var8, var9);
 					int var32 = this.getBlockMetadata(var7, var8, var9);
 					Block var33 = Block.blocksList[var31];
 					if(var31 > 0 && var33.canCollideCheck(var32, var3)) {
-						MovingObjectPosition var34 = var33.collisionRayTrace(this, var7, var8, var9, var1, var2);
-						if(var34 != null) {
-							return var34;
+						MovingObjectPosition movingObjectPosition34 = var33.collisionRayTrace(this, var7, var8, var9, vec3D1, vec3D2);
+						if(movingObjectPosition34 != null) {
+							return movingObjectPosition34;
 						}
 					}
 				}
@@ -824,96 +871,96 @@
 		}
 	}
 
-	public void playSoundAtEntity(Entity var1, String var2, float var3, float var4) {
+	public void playSoundAtEntity(Entity entity, String sound, float volume, float pitch) {
 		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
+			((IWorldAccess)this.worldAccesses.get(var5)).playSound(sound, entity.posX, entity.posY - (double)entity.yOffset, entity.posZ, volume, pitch);
 		}
 
 	}
 
-	public void playSoundEffect(double var1, double var3, double var5, String var7, float var8, float var9) {
+	public void playSoundEffect(double posX, double posY, double posZ, String sound, float volume, float pitch) {
 		for(int var10 = 0; var10 < this.worldAccesses.size(); ++var10) {
-			((IWorldAccess)this.worldAccesses.get(var10)).playSound(var7, var1, var3, var5, var8, var9);
+			((IWorldAccess)this.worldAccesses.get(var10)).playSound(sound, posX, posY, posZ, volume, pitch);
 		}
 
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
+	public void playRecord(String record, int x, int y, int z, String author) {
 		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
+			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(record, x, y, z, author);
 		}
 
 	}
 
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
+	public void spawnParticle(String particle, double posX, double posY, double posZ, double motionX, double motionY, double motionZ) {
 		for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
-			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
+			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(particle, posX, posY, posZ, motionX, motionY, motionZ);
 		}
 
 	}
 
-	public boolean spawnEntityInWorld(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
+	public boolean spawnEntityInWorld(Entity entity) {
+		int var2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int var3 = MathHelper.floor_double(entity.posZ / 16.0D);
 		boolean var4 = false;
-		if(var1 instanceof EntityPlayer) {
+		if(entity instanceof EntityPlayer) {
 			var4 = true;
 		}
 
 		if(!var4 && !this.chunkExists(var2, var3)) {
 			return false;
 		} else {
-			if(var1 instanceof EntityPlayer) {
-				this.playerEntities.add((EntityPlayer)var1);
+			if(entity instanceof EntityPlayer) {
+				this.playerEntities.add((EntityPlayer)entity);
 				System.out.println("Player count: " + this.playerEntities.size());
 			}
 
-			this.getChunkFromChunkCoords(var2, var3).addEntity(var1);
-			this.loadedEntityList.add(var1);
-			this.obtainEntitySkin(var1);
+			this.getChunkFromChunkCoords(var2, var3).addEntity(entity);
+			this.loadedEntityList.add(entity);
+			this.obtainEntitySkin(entity);
 			return true;
 		}
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
-		}
-
-	}
-
-	public void setEntityDead(Entity var1) {
-		var1.setEntityDead();
-		if(var1 instanceof EntityPlayer) {
-			this.playerEntities.remove((EntityPlayer)var1);
+	protected void obtainEntitySkin(Entity entity) {
+		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
+			((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(entity);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
+			((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(entity);
+		}
+
+	}
+
+	public void setEntityDead(Entity entity) {
+		entity.setEntityDead();
+		if(entity instanceof EntityPlayer) {
+			this.playerEntities.remove((EntityPlayer)entity);
 			System.out.println("Player count: " + this.playerEntities.size());
 		}
 
 	}
 
-	public void addWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.add(var1);
-	}
-
-	public void removeWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.remove(var1);
-	}
-
-	public List getCollidingBoundingBoxes(Entity var1, AxisAlignedBB var2) {
+	public void addWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.add(worldAccess);
+	}
+
+	public void removeWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.remove(worldAccess);
+	}
+
+	public List getCollidingBoundingBoxes(Entity entity, AxisAlignedBB aabb) {
 		this.collidingBoundingBoxes.clear();
-		int var3 = MathHelper.floor_double(var2.minX);
-		int var4 = MathHelper.floor_double(var2.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var2.minY);
-		int var6 = MathHelper.floor_double(var2.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var2.minZ);
-		int var8 = MathHelper.floor_double(var2.maxZ + 1.0D);
+		int var3 = MathHelper.floor_double(aabb.minX);
+		int var4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var5 = MathHelper.floor_double(aabb.minY);
+		int var6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var7 = MathHelper.floor_double(aabb.minZ);
+		int var8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
 		for(int var9 = var3; var9 < var4; ++var9) {
 			for(int var10 = var7; var10 < var8; ++var10) {
@@ -921,7 +968,7 @@
 					for(int var11 = var5 - 1; var11 < var6; ++var11) {
 						Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
 						if(var12 != null) {
-							var12.getCollidingBoundingBoxes(this, var9, var11, var10, var2, this.collidingBoundingBoxes);
+							var12.getCollidingBoundingBoxes(this, var9, var11, var10, aabb, this.collidingBoundingBoxes);
 						}
 					}
 				}
@@ -929,25 +976,25 @@
 		}
 
 		double var14 = 0.25D;
-		List var15 = this.getEntitiesWithinAABBExcludingEntity(var1, var2.expand(var14, var14, var14));
+		List list15 = this.getEntitiesWithinAABBExcludingEntity(entity, aabb.expand(var14, var14, var14));
 
-		for(int var16 = 0; var16 < var15.size(); ++var16) {
-			AxisAlignedBB var13 = ((Entity)var15.get(var16)).getBoundingBox();
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+		for(int var16 = 0; var16 < list15.size(); ++var16) {
+			AxisAlignedBB axisAlignedBB13 = ((Entity)list15.get(var16)).getBoundingBox();
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 
-			var13 = var1.getCollisionBox((Entity)var15.get(var16));
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+			axisAlignedBB13 = entity.getCollisionBox((Entity)list15.get(var16));
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 		}
 
 		return this.collidingBoundingBoxes;
 	}
 
-	public int calculateSkylightSubtracted(float var1) {
-		float var2 = this.getCelestialAngle(var1);
+	public int calculateSkylightSubtracted(float renderPartialTick) {
+		float var2 = this.getCelestialAngle(renderPartialTick);
 		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
@@ -960,8 +1007,8 @@
 		return (int)(var3 * 11.0F);
 	}
 
-	public Vec3D getSkyColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
+	public Vec3D getSkyColor(float renderPartialTick) {
+		float var2 = this.getCelestialAngle(renderPartialTick);
 		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
@@ -980,9 +1027,9 @@
 		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
 	}
 
-	public float getCelestialAngle(float var1) {
+	public float getCelestialAngle(float renderPartialTick) {
 		int var2 = (int)(this.worldTime % 24000L);
-		float var3 = ((float)var2 + var1) / 24000.0F - 0.25F;
+		float var3 = ((float)var2 + renderPartialTick) / 24000.0F - 0.25F;
 		if(var3 < 0.0F) {
 			++var3;
 		}
@@ -997,8 +1044,8 @@
 		return var3;
 	}
 
-	public Vec3D getCloudColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
+	public Vec3D getCloudColor(float renderPartialTick) {
+		float var2 = this.getCelestialAngle(renderPartialTick);
 		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
@@ -1017,8 +1064,8 @@
 		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
 	}
 
-	public Vec3D getFogColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
+	public Vec3D getFogColor(float renderPartialTick) {
+		float var2 = this.getCelestialAngle(renderPartialTick);
 		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
@@ -1037,13 +1084,13 @@
 		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
 	}
 
-	public int getTopSolidOrLiquidBlock(int var1, int var2) {
-		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
+	public int getTopSolidOrLiquidBlock(int x, int z) {
+		Chunk chunk3 = this.getChunkFromBlockCoords(x, z);
 		int var4 = 127;
-		var1 &= 15;
+		x &= 15;
 
-		for(var2 &= 15; var4 > 0; --var4) {
-			int var5 = var3.getBlockID(var1, var4, var2);
+		for(z &= 15; var4 > 0; --var4) {
+			int var5 = chunk3.getBlockID(x, var4, z);
 			if(var5 != 0 && (Block.blocksList[var5].material.getIsSolid() || Block.blocksList[var5].material.getIsLiquid())) {
 				return var4 + 1;
 			}
@@ -1052,13 +1099,13 @@
 		return -1;
 	}
 
-	public int getPrecipitationHeight(int var1, int var2) {
-		return this.getChunkFromBlockCoords(var1, var2).getHeightValue(var1 & 15, var2 & 15);
+	public int getPrecipitationHeight(int x, int z) {
+		return this.getChunkFromBlockCoords(x, z).getHeightValue(x & 15, z & 15);
 	}
 
-	public float getStarBrightness(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 12.0F / 16.0F);
+	public float getStarBrightness(float renderPartialTick) {
+		float var2 = this.getCelestialAngle(renderPartialTick);
+		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.75F);
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
 		}
@@ -1070,17 +1117,17 @@
 		return var3 * var3 * 0.5F;
 	}
 
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
-		NextTickListEntry var5 = new NextTickListEntry(var1, var2, var3, var4);
+	public void scheduleBlockUpdate(int x, int y, int z, int id) {
+		NextTickListEntry nextTickListEntry5 = new NextTickListEntry(x, y, z, id);
 		byte var6 = 8;
-		if(this.checkChunksExist(var1 - var6, var2 - var6, var3 - var6, var1 + var6, var2 + var6, var3 + var6)) {
-			if(var4 > 0) {
-				var5.setScheduledTime((long)Block.blocksList[var4].tickRate() + this.worldTime);
+		if(this.checkChunksExist(x - var6, y - var6, z - var6, x + var6, y + var6, z + var6)) {
+			if(id > 0) {
+				nextTickListEntry5.setScheduledTime((long)Block.blocksList[id].tickRate() + this.worldTime);
 			}
 
-			if(!this.scheduledTickSet.contains(var5)) {
-				this.scheduledTickSet.add(var5);
-				this.scheduledTickTreeSet.add(var5);
+			if(!this.scheduledTickSet.contains(nextTickListEntry5)) {
+				this.scheduledTickSet.add(nextTickListEntry5);
+				this.scheduledTickTreeSet.add(nextTickListEntry5);
 			}
 		}
 
@@ -1136,82 +1183,82 @@
 		}
 
 		for(var1 = 0; var1 < this.loadedTileEntityList.size(); ++var1) {
-			TileEntity var5 = (TileEntity)this.loadedTileEntityList.get(var1);
-			var5.updateEntity();
+			TileEntity tileEntity5 = (TileEntity)this.loadedTileEntityList.get(var1);
+			tileEntity5.updateEntity();
 		}
 
 	}
 
-	protected void updateEntity(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX);
-		int var3 = MathHelper.floor_double(var1.posZ);
+	protected void updateEntity(Entity entity) {
+		int var2 = MathHelper.floor_double(entity.posX);
+		int var3 = MathHelper.floor_double(entity.posZ);
 		byte var4 = 16;
 		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 128, var3 + var4)) {
-			var1.lastTickPosX = var1.posX;
-			var1.lastTickPosY = var1.posY;
-			var1.lastTickPosZ = var1.posZ;
-			var1.prevRotationYaw = var1.rotationYaw;
-			var1.prevRotationPitch = var1.rotationPitch;
-			if(var1.ridingEntity != null) {
-				var1.updateRidden();
+			entity.lastTickPosX = entity.posX;
+			entity.lastTickPosY = entity.posY;
+			entity.lastTickPosZ = entity.posZ;
+			entity.prevRotationYaw = entity.rotationYaw;
+			entity.prevRotationPitch = entity.rotationPitch;
+			if(entity.ridingEntity != null) {
+				entity.updateRidden();
 			} else {
-				var1.onUpdate();
+				entity.onUpdate();
 			}
 
-			int var5 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var6 = MathHelper.floor_double(var1.posY / 16.0D);
-			int var7 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(!var1.addedToChunk || var1.chunkCoordX != var5 || var1.chunkCoordY != var6 || var1.chunkCoordZ != var7) {
-				if(var1.addedToChunk && this.chunkExists(var1.chunkCoordX, var1.chunkCoordZ)) {
-					this.getChunkFromChunkCoords(var1.chunkCoordX, var1.chunkCoordZ).removeEntityAtIndex(var1, var1.chunkCoordY);
+			int var5 = MathHelper.floor_double(entity.posX / 16.0D);
+			int var6 = MathHelper.floor_double(entity.posY / 16.0D);
+			int var7 = MathHelper.floor_double(entity.posZ / 16.0D);
+			if(!entity.addedToChunk || entity.chunkCoordX != var5 || entity.chunkCoordY != var6 || entity.chunkCoordZ != var7) {
+				if(entity.addedToChunk && this.chunkExists(entity.chunkCoordX, entity.chunkCoordZ)) {
+					this.getChunkFromChunkCoords(entity.chunkCoordX, entity.chunkCoordZ).removeEntityAtIndex(entity, entity.chunkCoordY);
 				}
 
 				if(this.chunkExists(var5, var7)) {
-					this.getChunkFromChunkCoords(var5, var7).addEntity(var1);
+					this.getChunkFromChunkCoords(var5, var7).addEntity(entity);
 				} else {
-					var1.addedToChunk = false;
+					entity.addedToChunk = false;
 					System.out.println("Removing entity because it\'s not in a chunk!!");
-					var1.setEntityDead();
+					entity.setEntityDead();
 				}
 			}
 
-			if(var1.riddenByEntity != null) {
-				if(!var1.riddenByEntity.isDead && var1.riddenByEntity.ridingEntity == var1) {
-					this.updateEntity(var1.riddenByEntity);
+			if(entity.riddenByEntity != null) {
+				if(!entity.riddenByEntity.isDead && entity.riddenByEntity.ridingEntity == entity) {
+					this.updateEntity(entity.riddenByEntity);
 				} else {
-					var1.riddenByEntity.ridingEntity = null;
-					var1.riddenByEntity = null;
+					entity.riddenByEntity.ridingEntity = null;
+					entity.riddenByEntity = null;
 				}
 			}
 
-			if(Double.isNaN(var1.posX) || Double.isInfinite(var1.posX)) {
-				var1.posX = var1.lastTickPosX;
-			}
-
-			if(Double.isNaN(var1.posY) || Double.isInfinite(var1.posY)) {
-				var1.posY = var1.lastTickPosY;
-			}
-
-			if(Double.isNaN(var1.posZ) || Double.isInfinite(var1.posZ)) {
-				var1.posZ = var1.lastTickPosZ;
-			}
-
-			if(Double.isNaN((double)var1.rotationPitch) || Double.isInfinite((double)var1.rotationPitch)) {
-				var1.rotationPitch = var1.prevRotationPitch;
-			}
-
-			if(Double.isNaN((double)var1.rotationYaw) || Double.isInfinite((double)var1.rotationYaw)) {
-				var1.rotationYaw = var1.prevRotationYaw;
+			if(Double.isNaN(entity.posX) || Double.isInfinite(entity.posX)) {
+				entity.posX = entity.lastTickPosX;
+			}
+
+			if(Double.isNaN(entity.posY) || Double.isInfinite(entity.posY)) {
+				entity.posY = entity.lastTickPosY;
+			}
+
+			if(Double.isNaN(entity.posZ) || Double.isInfinite(entity.posZ)) {
+				entity.posZ = entity.lastTickPosZ;
+			}
+
+			if(Double.isNaN((double)entity.rotationPitch) || Double.isInfinite((double)entity.rotationPitch)) {
+				entity.rotationPitch = entity.prevRotationPitch;
+			}
+
+			if(Double.isNaN((double)entity.rotationYaw) || Double.isInfinite((double)entity.rotationYaw)) {
+				entity.rotationYaw = entity.prevRotationYaw;
 			}
 
 		}
 	}
 
-	public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-		List var2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+	public boolean checkIfAABBIsClear(AxisAlignedBB aabb) {
+		List list2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, aabb);
 
-		for(int var3 = 0; var3 < var2.size(); ++var3) {
-			Entity var4 = (Entity)var2.get(var3);
+		for(int var3 = 0; var3 < list2.size(); ++var3) {
+			Entity var4 = (Entity)list2.get(var3);
 			if(!var4.isDead && var4.preventEntitySpawning) {
 				return false;
 			}
@@ -1220,22 +1267,22 @@
 		return true;
 	}
 
-	public boolean getIsAnyLiquid(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		if(var1.minX < 0.0D) {
+	public boolean getIsAnyLiquid(AxisAlignedBB aabb) {
+		int var2 = MathHelper.floor_double(aabb.minX);
+		int var3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var4 = MathHelper.floor_double(aabb.minY);
+		int var5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var6 = MathHelper.floor_double(aabb.minZ);
+		int var7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+		if(aabb.minX < 0.0D) {
 			--var2;
 		}
 
-		if(var1.minY < 0.0D) {
+		if(aabb.minY < 0.0D) {
 			--var4;
 		}
 
-		if(var1.minZ < 0.0D) {
+		if(aabb.minZ < 0.0D) {
 			--var6;
 		}
 
@@ -1253,13 +1300,13 @@
 		return false;
 	}
 
-	public boolean isBoundingBoxBurning(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
+	public boolean isBoundingBoxBurning(AxisAlignedBB aabb) {
+		int var2 = MathHelper.floor_double(aabb.minX);
+		int var3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var4 = MathHelper.floor_double(aabb.minY);
+		int var5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var6 = MathHelper.floor_double(aabb.minZ);
+		int var7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
 		for(int var8 = var2; var8 < var3; ++var8) {
 			for(int var9 = var4; var9 < var5; ++var9) {
@@ -1275,55 +1322,55 @@
 		return false;
 	}
 
-	public boolean handleMaterialAcceleration(AxisAlignedBB var1, Material var2, Entity var3) {
-		int var4 = MathHelper.floor_double(var1.minX);
-		int var5 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minY);
-		int var7 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var8 = MathHelper.floor_double(var1.minZ);
-		int var9 = MathHelper.floor_double(var1.maxZ + 1.0D);
+	public boolean handleMaterialAcceleration(AxisAlignedBB aabb, Material material, Entity entity) {
+		int var4 = MathHelper.floor_double(aabb.minX);
+		int var5 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var6 = MathHelper.floor_double(aabb.minY);
+		int var7 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var8 = MathHelper.floor_double(aabb.minZ);
+		int var9 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 		boolean var10 = false;
-		Vec3D var11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+		Vec3D vec3D11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
 
 		for(int var12 = var4; var12 < var5; ++var12) {
 			for(int var13 = var6; var13 < var7; ++var13) {
 				for(int var14 = var8; var14 < var9; ++var14) {
 					Block var15 = Block.blocksList[this.getBlockId(var12, var13, var14)];
-					if(var15 != null && var15.material == var2) {
+					if(var15 != null && var15.material == material) {
 						double var16 = (double)((float)(var13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(var12, var13, var14)));
 						if((double)var7 >= var16) {
 							var10 = true;
-							var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
+							var15.velocityToAddToEntity(this, var12, var13, var14, entity, vec3D11);
 						}
 					}
 				}
 			}
 		}
 
-		if(var11.lengthVector() > 0.0D) {
-			var11 = var11.normalize();
+		if(vec3D11.lengthVector() > 0.0D) {
+			vec3D11 = vec3D11.normalize();
 			double var18 = 0.004D;
-			var3.motionX += var11.xCoord * var18;
-			var3.motionY += var11.yCoord * var18;
-			var3.motionZ += var11.zCoord * var18;
+			entity.motionX += vec3D11.xCoord * var18;
+			entity.motionY += vec3D11.yCoord * var18;
+			entity.motionZ += vec3D11.zCoord * var18;
 		}
 
 		return var10;
 	}
 
-	public boolean isMaterialInBB(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
+	public boolean isMaterialInBB(AxisAlignedBB aabb, Material material) {
+		int var3 = MathHelper.floor_double(aabb.minX);
+		int var4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var5 = MathHelper.floor_double(aabb.minY);
+		int var6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var7 = MathHelper.floor_double(aabb.minZ);
+		int var8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
 		for(int var9 = var3; var9 < var4; ++var9) {
 			for(int var10 = var5; var10 < var6; ++var10) {
 				for(int var11 = var7; var11 < var8; ++var11) {
 					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
+					if(var12 != null && var12.material == material) {
 						return true;
 					}
 				}
@@ -1333,26 +1380,26 @@
 		return false;
 	}
 
-	public boolean isAABBInMaterial(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
+	public boolean isAABBInMaterial(AxisAlignedBB aabb, Material material) {
+		int var3 = MathHelper.floor_double(aabb.minX);
+		int var4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int var5 = MathHelper.floor_double(aabb.minY);
+		int var6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int var7 = MathHelper.floor_double(aabb.minZ);
+		int var8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
 		for(int var9 = var3; var9 < var4; ++var9) {
 			for(int var10 = var5; var10 < var6; ++var10) {
 				for(int var11 = var7; var11 < var8; ++var11) {
 					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
+					if(var12 != null && var12.material == material) {
 						int var13 = this.getBlockMetadata(var9, var10, var11);
 						double var14 = (double)(var10 + 1);
 						if(var13 < 8) {
 							var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
 						}
 
-						if(var14 >= var1.minY) {
+						if(var14 >= aabb.minY) {
 							return true;
 						}
 					}
@@ -1367,20 +1414,20 @@
 		(new Explosion()).doExplosion(this, var1, var2, var4, var6, var8);
 	}
 
-	public float getBlockDensity(Vec3D var1, AxisAlignedBB var2) {
-		double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
-		double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
-		double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
+	public float getBlockDensity(Vec3D vector, AxisAlignedBB aabb) {
+		double var3 = 1.0D / ((aabb.maxX - aabb.minX) * 2.0D + 1.0D);
+		double var5 = 1.0D / ((aabb.maxY - aabb.minY) * 2.0D + 1.0D);
+		double var7 = 1.0D / ((aabb.maxZ - aabb.minZ) * 2.0D + 1.0D);
 		int var9 = 0;
 		int var10 = 0;
 
 		for(float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3)) {
 			for(float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5)) {
 				for(float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7)) {
-					double var14 = var2.minX + (var2.maxX - var2.minX) * (double)var11;
-					double var16 = var2.minY + (var2.maxY - var2.minY) * (double)var12;
-					double var18 = var2.minZ + (var2.maxZ - var2.minZ) * (double)var13;
-					if(this.rayTraceBlocks(Vec3D.createVector(var14, var16, var18), var1) == null) {
+					double var14 = aabb.minX + (aabb.maxX - aabb.minX) * (double)var11;
+					double var16 = aabb.minY + (aabb.maxY - aabb.minY) * (double)var12;
+					double var18 = aabb.minZ + (aabb.maxZ - aabb.minZ) * (double)var13;
+					if(this.rayTraceBlocks(Vec3D.createVector(var14, var16, var18), vector) == null) {
 						++var9;
 					}
 
@@ -1392,39 +1439,39 @@
 		return (float)var9 / (float)var10;
 	}
 
-	public void extinguishFire(int var1, int var2, int var3, int var4) {
-		if(var4 == 0) {
-			--var2;
-		}
-
-		if(var4 == 1) {
-			++var2;
-		}
-
-		if(var4 == 2) {
-			--var3;
-		}
-
-		if(var4 == 3) {
-			++var3;
-		}
-
-		if(var4 == 4) {
-			--var1;
-		}
-
-		if(var4 == 5) {
-			++var1;
-		}
-
-		if(this.getBlockId(var1, var2, var3) == Block.fire.blockID) {
-			this.playSoundEffect((double)((float)var1 + 0.5F), (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
-			this.setBlockWithNotify(var1, var2, var3, 0);
+	public void extinguishFire(int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		if(this.getBlockId(x, y, z) == Block.fire.blockID) {
+			this.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
+			this.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public Entity createDebugPlayer(Class var1) {
+	public Entity createDebugPlayer(Class playerClass) {
 		return null;
 	}
 
@@ -1432,34 +1479,34 @@
 		return "All: " + this.loadedEntityList.size();
 	}
 
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		return var4 != null ? var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15) : null;
-	}
-
-	public void setBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var5 != null) {
-			var5.setChunkBlockTileEntity(var1 & 15, var2, var3 & 15, var4);
-		}
-
-	}
-
-	public void removeBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var4 != null) {
-			var4.removeChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
-	}
-
-	public void saveWorldIndirectly(IProgressUpdate var1) {
-		this.saveWorld(true, var1);
+	public TileEntity getBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		return chunk4 != null ? chunk4.getChunkBlockTileEntity(x & 15, y, z & 15) : null;
+	}
+
+	public void setBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk5 != null) {
+			chunk5.setChunkBlockTileEntity(x & 15, y, z & 15, tileEntity);
+		}
+
+	}
+
+	public void removeBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk4 != null) {
+			chunk4.removeChunkBlockTileEntity(x & 15, y, z & 15);
+		}
+
+	}
+
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block var4 = Block.blocksList[this.getBlockId(x, y, z)];
+		return var4 != null && var4.isOpaqueCube();
+	}
+
+	public void saveWorldIndirectly(IProgressUpdate iProgressUpdate1) {
+		this.saveWorld(true, iProgressUpdate1);
 	}
 
 	public boolean updatingLighting() {
@@ -1477,35 +1524,35 @@
 		return false;
 	}
 
-	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.scheduleLightingUpdate_do(var1, var2, var3, var4, var5, var6, var7, true);
+	public void scheduleLightingUpdate(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.scheduleLightingUpdate_do(skyBlock, minX, minY, minZ, maxX, maxY, maxZ, true);
 	}
 
-	public void scheduleLightingUpdate_do(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8) {
-		int var9 = (var5 + var2) / 2;
-		int var10 = (var7 + var4) / 2;
+	public void scheduleLightingUpdate_do(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ, boolean update) {
+		int var9 = (maxX + minX) / 2;
+		int var10 = (maxZ + minZ) / 2;
 		if(this.blockExists(var9, 64, var10)) {
 			int var11 = this.lightingToUpdate.size();
-			if(var8) {
+			if(update) {
 				int var12 = 4;
 				if(var12 > var11) {
 					var12 = var11;
 				}
 
 				for(int var13 = 0; var13 < var12; ++var13) {
-					MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-					if(var14.skyBlock == var1 && var14.getLightUpdated(var2, var3, var4, var5, var6, var7)) {
+					MetadataChunkBlock metadataChunkBlock14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
+					if(metadataChunkBlock14.skyBlock == skyBlock && metadataChunkBlock14.getLightUpdated(minX, minY, minZ, maxX, maxY, maxZ)) {
 						return;
 					}
 				}
 			}
 
-			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-			if(this.lightingToUpdate.size() > 100000) {
-				while(this.lightingToUpdate.size() > '\uc350') {
-					this.updatingLighting();
-				}
-			}
+			this.lightingToUpdate.add(new MetadataChunkBlock(skyBlock, minX, minY, minZ, maxX, maxY, maxZ));
+//			if(this.lightingToUpdate.size() > 100000) {
+//				while(this.lightingToUpdate.size() > 50000) {
+//					this.updatingLighting();
+//				}
+//			}
 
 		}
 	}
@@ -1534,6 +1581,7 @@
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
 
+		this.miscUpdates();
 		this.tickUpdates(false);
 		this.updateBlocksAndPlayCaveSounds();
 	}
@@ -1547,6 +1595,7 @@
 		int var7;
 		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
 			EntityPlayer var2 = (EntityPlayer)this.playerEntities.get(var1);
+
 			var3 = MathHelper.floor_double(var2.posX / 16.0D);
 			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
 			byte var5 = 9;
@@ -1562,13 +1611,13 @@
 			--this.soundCounter;
 		}
 
-		Iterator var12 = this.positionsToUpdate.iterator();
+		Iterator iterator12 = this.positionsToUpdate.iterator();
 
-		while(var12.hasNext()) {
-			ChunkCoordIntPair var13 = (ChunkCoordIntPair)var12.next();
-			var3 = var13.chunkXPos * 16;
-			var4 = var13.chunkZPos * 16;
-			Chunk var14 = this.getChunkFromChunkCoords(var13.chunkXPos, var13.chunkZPos);
+		while(iterator12.hasNext()) {
+			ChunkCoordIntPair chunkCoordIntPair13 = (ChunkCoordIntPair)iterator12.next();
+			var3 = chunkCoordIntPair13.chunkXPos * 16;
+			var4 = chunkCoordIntPair13.chunkZPos * 16;
+			Chunk chunk14 = this.getChunkFromChunkCoords(chunkCoordIntPair13.chunkXPos, chunkCoordIntPair13.chunkZPos);
 			int var8;
 			int var9;
 			int var10;
@@ -1578,7 +1627,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = var6 >> 16 & 127;
-				var10 = var14.getBlockID(var7, var9, var8);
+				var10 = chunk14.getBlockID(var7, var9, var8);
 				var7 += var3;
 				var8 += var4;
 				if(var10 == 0 && this.getBlockLightValue(var7, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var7, var9, var8) <= 0) {
@@ -1590,19 +1639,19 @@
 				}
 			}
 
-			if(this.snowCovered && this.rand.nextInt(4) == 0) {
+			if(this.worldType == WorldType.WINTER && this.rand.nextInt(4) == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
 				var6 = this.updateLCG >> 2;
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
-					var10 = var14.getBlockID(var7, var9 - 1, var8);
-					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
+				if(var9 >= 0 && var9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+					var10 = chunk14.getBlockID(var7, var9 - 1, var8);
+					if(chunk14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
 						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
 					}
 
-					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
+					if(var10 == Block.waterStill.blockID && chunk14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
 						this.setBlockWithNotify(var7 + var3, var9 - 1, var8 + var4, Block.ice.blockID);
 					}
 				}
@@ -1614,7 +1663,7 @@
 				var8 = var7 & 15;
 				var9 = var7 >> 8 & 15;
 				var10 = var7 >> 16 & 127;
-				byte var15 = var14.blocks[var8 << 11 | var9 << 7 | var10];
+				byte var15 = chunk14.blocks[var8 << 11 | var9 << 7 | var10];
 				if(Block.tickOnLoad[var15]) {
 					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
 				}
@@ -1633,18 +1682,18 @@
 			}
 
 			for(int var3 = 0; var3 < var2; ++var3) {
-				NextTickListEntry var4 = (NextTickListEntry)this.scheduledTickTreeSet.first();
-				if(!var1 && var4.scheduledTime > this.worldTime) {
+				NextTickListEntry nextTickListEntry4 = (NextTickListEntry)this.scheduledTickTreeSet.first();
+				if(!var1 && nextTickListEntry4.scheduledTime > this.worldTime) {
 					break;
 				}
 
-				this.scheduledTickTreeSet.remove(var4);
-				this.scheduledTickSet.remove(var4);
+				this.scheduledTickTreeSet.remove(nextTickListEntry4);
+				this.scheduledTickSet.remove(nextTickListEntry4);
 				byte var5 = 8;
-				if(this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5)) {
-					int var6 = this.getBlockId(var4.xCoord, var4.yCoord, var4.zCoord);
-					if(var6 == var4.blockID && var6 > 0) {
-						Block.blocksList[var6].updateTick(this, var4.xCoord, var4.yCoord, var4.zCoord, this.rand);
+				if(this.checkChunksExist(nextTickListEntry4.xCoord - var5, nextTickListEntry4.yCoord - var5, nextTickListEntry4.zCoord - var5, nextTickListEntry4.xCoord + var5, nextTickListEntry4.yCoord + var5, nextTickListEntry4.zCoord + var5)) {
+					int var6 = this.getBlockId(nextTickListEntry4.xCoord, nextTickListEntry4.yCoord, nextTickListEntry4.zCoord);
+					if(var6 == nextTickListEntry4.blockID && var6 > 0) {
+						Block.blocksList[var6].updateTick(this, nextTickListEntry4.xCoord, nextTickListEntry4.yCoord, nextTickListEntry4.zCoord, this.rand);
 					}
 				}
 			}
@@ -1653,14 +1702,14 @@
 		}
 	}
 
-	public void randomDisplayUpdates(int var1, int var2, int var3) {
+	public void randomDisplayUpdates(int posX, int posY, int posZ) {
 		byte var4 = 16;
 		Random var5 = new Random();
 
 		for(int var6 = 0; var6 < 1000; ++var6) {
-			int var7 = var1 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var8 = var2 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var9 = var3 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
+			int var7 = posX + this.rand.nextInt(var4) - this.rand.nextInt(var4);
+			int var8 = posY + this.rand.nextInt(var4) - this.rand.nextInt(var4);
+			int var9 = posZ + this.rand.nextInt(var4) - this.rand.nextInt(var4);
 			int var10 = this.getBlockId(var7, var8, var9);
 			if(var10 > 0) {
 				Block.blocksList[var10].randomDisplayTick(this, var7, var8, var9, var5);
@@ -1669,17 +1718,17 @@
 
 	}
 
-	public List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+	public List getEntitiesWithinAABBExcludingEntity(Entity entity, AxisAlignedBB aabb) {
 		this.entitiesWithinAABBExcludingEntity.clear();
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
+		int var3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int var4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int var5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int var6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
 
 		for(int var7 = var3; var7 <= var4; ++var7) {
 			for(int var8 = var5; var8 <= var6; ++var8) {
 				if(this.chunkExists(var7, var8)) {
-					this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(var1, var2, this.entitiesWithinAABBExcludingEntity);
+					this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(entity, aabb, this.entitiesWithinAABBExcludingEntity);
 				}
 			}
 		}
@@ -1687,45 +1736,45 @@
 		return this.entitiesWithinAABBExcludingEntity;
 	}
 
-	public List getEntitiesWithinAABB(Class var1, AxisAlignedBB var2) {
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-		ArrayList var7 = new ArrayList();
+	public List getEntitiesWithinAABB(Class entityClass, AxisAlignedBB aabb) {
+		int var3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int var4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int var5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int var6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
+		ArrayList arrayList7 = new ArrayList();
 
 		for(int var8 = var3; var8 <= var4; ++var8) {
 			for(int var9 = var5; var9 <= var6; ++var9) {
 				if(this.chunkExists(var8, var9)) {
-					this.getChunkFromChunkCoords(var8, var9).getEntitiesOfTypeWithinAAAB(var1, var2, var7);
+					this.getChunkFromChunkCoords(var8, var9).getEntitiesOfTypeWithinAAAB(entityClass, aabb, arrayList7);
 				}
 			}
 		}
 
-		return var7;
+		return arrayList7;
 	}
 
 	public List getLoadedEntityList() {
 		return this.loadedEntityList;
 	}
 
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
-		if(this.blockExists(var1, var2, var3)) {
-			this.getChunkFromBlockCoords(var1, var3).setChunkModified();
+	public void updateTileEntityChunkAndDoNothing(int x, int y, int z, TileEntity tileEntity) {
+		if(this.blockExists(x, y, z)) {
+			this.getChunkFromBlockCoords(x, z).setChunkModified();
 		}
 
 		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).doNothingWithTileEntity(var1, var2, var3, var4);
+			((IWorldAccess)this.worldAccesses.get(var5)).doNothingWithTileEntity(x, y, z, tileEntity);
 		}
 
 	}
 
-	public int countEntities(Class var1) {
+	public int countEntities(Class entityClass) {
 		int var2 = 0;
 
 		for(int var3 = 0; var3 < this.loadedEntityList.size(); ++var3) {
 			Entity var4 = (Entity)this.loadedEntityList.get(var3);
-			if(var1.isAssignableFrom(var4.getClass())) {
+			if(entityClass.isAssignableFrom(var4.getClass())) {
 				++var2;
 			}
 		}
@@ -1733,17 +1782,17 @@
 		return var2;
 	}
 
-	public void addLoadedEntities(List var1) {
-		this.loadedEntityList.addAll(var1);
+	public void addLoadedEntities(List list) {
+		this.loadedEntityList.addAll(list);
 
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.obtainEntitySkin((Entity)var1.get(var2));
+		for(int var2 = 0; var2 < list.size(); ++var2) {
+			this.obtainEntitySkin((Entity)list.get(var2));
 		}
 
 	}
 
-	public void unloadEntities(List var1) {
-		this.unloadedEntityList.addAll(var1);
+	public void unloadEntities(List list) {
+		this.unloadedEntityList.addAll(list);
 	}
 
 	public void dropOldChunks() {
@@ -1752,16 +1801,16 @@
 
 	}
 
-	public boolean canBlockBePlacedAt(int var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = this.getBlockId(var2, var3, var4);
+	public boolean canBlockBePlacedAt(int id, int x, int y, int z, boolean ignoreBB) {
+		int var6 = this.getBlockId(x, y, z);
 		Block var7 = Block.blocksList[var6];
-		Block var8 = Block.blocksList[var1];
-		AxisAlignedBB var9 = var8.getCollisionBoundingBoxFromPool(this, var2, var3, var4);
-		if(var5) {
-			var9 = null;
+		Block var8 = Block.blocksList[id];
+		AxisAlignedBB axisAlignedBB9 = var8.getCollisionBoundingBoxFromPool(this, x, y, z);
+		if(ignoreBB) {
+			axisAlignedBB9 = null;
 		}
 
-		return var9 != null && !this.checkIfAABBIsClear(var9) ? false : (var7 != Block.waterMoving && var7 != Block.waterStill && var7 != Block.lavaMoving && var7 != Block.lavaStill && var7 != Block.fire && var7 != Block.snow ? var1 > 0 && var7 == null && var8.canPlaceBlockAt(this, var2, var3, var4) : true);
+		return axisAlignedBB9 != null && !this.checkIfAABBIsClear(axisAlignedBB9) ? false : (var7 != Block.waterMoving && var7 != Block.waterStill && var7 != Block.lavaMoving && var7 != Block.lavaStill && var7 != Block.fire && var7 != Block.snow ? id > 0 && var7 == null && var8.canPlaceBlockAt(this, x, y, z) : true);
 	}
 
 	public PathEntity getPathToEntity(Entity var1, Entity var2, float var3) {
@@ -1775,14 +1824,14 @@
 		int var11 = var4 + var7;
 		int var12 = var5 + var7;
 		int var13 = var6 + var7;
-		ChunkCache var14 = new ChunkCache(this, var8, var9, var10, var11, var12, var13);
-		return (new Pathfinder(var14)).createEntityPathTo(var1, var2, var3);
+		ChunkCache chunkCache14 = new ChunkCache(this, var8, var9, var10, var11, var12, var13);
+		return (new Pathfinder(chunkCache14)).createEntityPathTo(var1, var2, var3);
 	}
 
-	public PathEntity getEntityPathToXYZ(Entity var1, int var2, int var3, int var4, float var5) {
-		int var6 = MathHelper.floor_double(var1.posX);
-		int var7 = MathHelper.floor_double(var1.posY);
-		int var8 = MathHelper.floor_double(var1.posZ);
+	public PathEntity getEntityPathToXYZ(Entity entity, int var2, int var3, int var4, float var5) {
+		int var6 = MathHelper.floor_double(entity.posX);
+		int var7 = MathHelper.floor_double(entity.posY);
+		int var8 = MathHelper.floor_double(entity.posZ);
 		int var9 = (int)(var5 + 8.0F);
 		int var10 = var6 - var9;
 		int var11 = var7 - var9;
@@ -1790,44 +1839,44 @@
 		int var13 = var6 + var9;
 		int var14 = var7 + var9;
 		int var15 = var8 + var9;
-		ChunkCache var16 = new ChunkCache(this, var10, var11, var12, var13, var14, var15);
-		return (new Pathfinder(var16)).createEntityPathTo(var1, var2, var3, var4, var5);
-	}
-
-	public boolean isBlockProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		return var5 == 0 ? false : Block.blocksList[var5].isIndirectlyPoweringTo(this, var1, var2, var3, var4);
-	}
-
-	public boolean isBlockGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public boolean isBlockIndirectlyProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		if(this.isBlockNormalCube(var1, var2, var3)) {
-			return this.isBlockGettingPowered(var1, var2, var3);
+		ChunkCache chunkCache16 = new ChunkCache(this, var10, var11, var12, var13, var14, var15);
+		return (new Pathfinder(chunkCache16)).createEntityPathTo(entity, var2, var3, var4, var5);
+	}
+
+	public boolean isBlockProvidingPowerTo(int x, int y, int z, int side) {
+		int var5 = this.getBlockId(x, y, z);
+		return var5 == 0 ? false : Block.blocksList[var5].isIndirectlyPoweringTo(this, x, y, z, side);
+	}
+
+	public boolean isBlockGettingPowered(int x, int y, int z) {
+		return this.isBlockProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public boolean isBlockIndirectlyProvidingPowerTo(int x, int y, int z, int side) {
+		if(this.isBlockNormalCube(x, y, z)) {
+			return this.isBlockGettingPowered(x, y, z);
 		} else {
-			int var5 = this.getBlockId(var1, var2, var3);
-			return var5 == 0 ? false : Block.blocksList[var5].isPoweringTo(this, var1, var2, var3, var4);
+			int var5 = this.getBlockId(x, y, z);
+			return var5 == 0 ? false : Block.blocksList[var5].isPoweringTo(this, x, y, z, side);
 		}
 	}
 
-	public boolean isBlockIndirectlyGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockIndirectlyProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public EntityPlayer getClosestPlayerToEntity(Entity var1, double var2) {
-		return this.getClosestPlayer(var1.posX, var1.posY, var1.posZ, var2);
-	}
-
-	public EntityPlayer getClosestPlayer(double var1, double var3, double var5, double var7) {
+	public boolean isBlockIndirectlyGettingPowered(int x, int y, int z) {
+		return this.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public EntityPlayer getClosestPlayerToEntity(Entity entity, double distance) {
+		return this.getClosestPlayer(entity.posX, entity.posY, entity.posZ, distance);
+	}
+
+	public EntityPlayer getClosestPlayer(double posX, double posY, double posZ, double distance) {
 		double var9 = -1.0D;
 		EntityPlayer var11 = null;
 
 		for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
 			EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-			double var14 = var13.getDistanceSq(var1, var3, var5);
-			if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
+			double var14 = var13.getDistanceSq(posX, posY, posZ);
+			if((distance < 0.0D || var14 < distance * distance) && (var9 == -1.0D || var14 < var9)) {
 				var9 = var14;
 				var11 = var13;
 			}
@@ -1836,91 +1885,45 @@
 		return var11;
 	}
 
-	public byte[] getChunkData(int var1, int var2, int var3, int var4, int var5, int var6) {
-		byte[] var7 = new byte[var4 * var5 * var6 * 5 / 2];
-		int var8 = var1 >> 4;
-		int var9 = var3 >> 4;
-		int var10 = var1 + var4 - 1 >> 4;
-		int var11 = var3 + var6 - 1 >> 4;
-		int var12 = 0;
-		int var13 = var2;
-		int var14 = var2 + var5;
-		if(var2 < 0) {
-			var13 = 0;
-		}
-
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
-		for(int var15 = var8; var15 <= var10; ++var15) {
-			int var16 = var1 - var15 * 16;
-			int var17 = var1 + var4 - var15 * 16;
-			if(var16 < 0) {
-				var16 = 0;
-			}
-
-			if(var17 > 16) {
-				var17 = 16;
-			}
-
-			for(int var18 = var9; var18 <= var11; ++var18) {
-				int var19 = var3 - var18 * 16;
-				int var20 = var3 + var6 - var18 * 16;
-				if(var19 < 0) {
-					var19 = 0;
-				}
-
-				if(var20 > 16) {
-					var20 = 16;
-				}
-
-				var12 = this.getChunkFromChunkCoords(var15, var18).getChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
-			}
-		}
-
-		return var7;
-	}
-
-	public void setChunkData(int var1, int var2, int var3, int var4, int var5, int var6, byte[] var7) {
-		int var8 = var1 >> 4;
-		int var9 = var3 >> 4;
-		int var10 = var1 + var4 - 1 >> 4;
-		int var11 = var3 + var6 - 1 >> 4;
-		int var12 = 0;
-		int var13 = var2;
-		int var14 = var2 + var5;
-		if(var2 < 0) {
-			var13 = 0;
-		}
-
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
-		for(int var15 = var8; var15 <= var10; ++var15) {
-			int var16 = var1 - var15 * 16;
-			int var17 = var1 + var4 - var15 * 16;
-			if(var16 < 0) {
-				var16 = 0;
-			}
-
-			if(var17 > 16) {
-				var17 = 16;
-			}
-
-			for(int var18 = var9; var18 <= var11; ++var18) {
-				int var19 = var3 - var18 * 16;
-				int var20 = var3 + var6 - var18 * 16;
-				if(var19 < 0) {
-					var19 = 0;
-				}
-
-				if(var20 > 16) {
-					var20 = 16;
-				}
-
-				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
+	public void setChunkData(int minX, int minY, int minZ, int maxX, int maxY, int maxZ, byte[] blocks) {
+		int var8 = minX >> 4;
+		int var9 = minZ >> 4;
+		int var10 = minX + maxX - 1 >> 4;
+		int var11 = minZ + maxZ - 1 >> 4;
+		int var12 = 0;
+		int var13 = minY;
+		int var14 = minY + maxY;
+		if(minY < 0) {
+			var13 = 0;
+		}
+
+		if(var14 > 128) {
+			var14 = 128;
+		}
+
+		for(int var15 = var8; var15 <= var10; ++var15) {
+			int var16 = minX - var15 * 16;
+			int var17 = minX + maxX - var15 * 16;
+			if(var16 < 0) {
+				var16 = 0;
+			}
+
+			if(var17 > 16) {
+				var17 = 16;
+			}
+
+			for(int var18 = var9; var18 <= var11; ++var18) {
+				int var19 = minZ - var18 * 16;
+				int var20 = minZ + maxZ - var18 * 16;
+				if(var19 < 0) {
+					var19 = 0;
+				}
+
+				if(var20 > 16) {
+					var20 = 16;
+				}
+
+				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(blocks, var16, var13, var19, var17, var14, var20, var12);
 				this.markBlocksDirty(var15 * 16 + var16, var13, var18 * 16 + var19, var15 * 16 + var17, var14, var18 * 16 + var20);
 			}
 		}
@@ -1930,31 +1933,77 @@
 	public void sendQuittingDisconnectingPacket() {
 	}
 
+	public byte[] getChunkData(int var1, int var2, int var3, int x, int y, int z) {
+		byte[] var7 = new byte[x * y * z * 5 / 2];
+		int var8 = var1 >> 4;
+		int var9 = var3 >> 4;
+		int var10 = var1 + x - 1 >> 4;
+		int var11 = var3 + z - 1 >> 4;
+		int var12 = 0;
+		int var13 = var2;
+		int var14 = var2 + y;
+		if(var2 < 0) {
+			var13 = 0;
+		}
+
+		if(var14 > 128) {
+			var14 = 128;
+		}
+
+		for(int var15 = var8; var15 <= var10; ++var15) {
+			int var16 = var1 - var15 * 16;
+			int var17 = var1 + x - var15 * 16;
+			if(var16 < 0) {
+				var16 = 0;
+			}
+
+			if(var17 > 16) {
+				var17 = 16;
+			}
+
+			for(int var18 = var9; var18 <= var11; ++var18) {
+				int var19 = var3 - var18 * 16;
+				int var20 = var3 + z - var18 * 16;
+				if(var19 < 0) {
+					var19 = 0;
+				}
+
+				if(var20 > 16) {
+					var20 = 16;
+				}
+
+				var12 = this.getChunkFromChunkCoords(var15, var18).getChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
+			}
+		}
+
+		return var7;
+	}
+
 	public void checkSessionLock() {
 		try {
-			File var1 = new File(this.saveDirectory, "session.lock");
-			DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
+			File file1 = new File(this.saveDirectory, "session.lock");
+			DataInputStream dataInputStream2 = new DataInputStream(new FileInputStream(file1));
 
 			try {
-				if(var2.readLong() != this.lockTimestamp) {
+				if(dataInputStream2.readLong() != this.lockTimestamp) {
 					throw new MinecraftException("The save is being accessed from another location, aborting");
 				}
 			} finally {
-				var2.close();
+				dataInputStream2.close();
 			}
 
-		} catch (IOException var7) {
+		} catch (IOException iOException7) {
 			throw new MinecraftException("Failed to check session lock, aborting");
 		}
 	}
 
-	public void setWorldTime(long var1) {
-		this.worldTime = var1;
+	public void setWorldTime(long time) {
+		this.worldTime = time;
 	}
 
-	public void joinEntityInSurroundings(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
+	public void joinEntityInSurroundings(Entity entity) {
+		int var2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int var3 = MathHelper.floor_double(entity.posZ / 16.0D);
 		byte var4 = 2;
 
 		for(int var5 = var2 - var4; var5 <= var2 + var4; ++var5) {
@@ -1963,11 +2012,99 @@
 			}
 		}
 
-		if(!this.loadedEntityList.contains(var1)) {
+		if(!this.loadedEntityList.contains(entity)) {
 			System.out.println("REINSERTING PLAYER!");
-			this.loadedEntityList.add(var1);
-		}
-
+			this.loadedEntityList.add(entity);
+		}
+
+	}
+
+	public void applyCreationInfo(CreateWorldInfo info) {
+		this.displayName = info.name;
+		this.randomSeed = info.seed;
+		this.worldType = info.worldType;
+		this.creative = info.creative;
+	}
+
+	public boolean hasSolidCeiling(int x, int y, int z) {
+		for (; y < 128; y++) {
+			if (this.getBlockMaterial(x, y, z).isSolid()) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	public void miscUpdates() {
+		if (this.worldTime % 24000 >= 13000 && this.worldTime % 24000 < 23000) {
+			for (EntityPlayer player : (List<EntityPlayer>)this.playerEntities) {
+				if (rand.nextInt(this.starfallChance) != 0) continue;
+
+				EntityItem star = new EntityItem(
+						this,
+						player.posX + (rand.nextDouble() * 512.0 - 256.0),
+						200,
+						player.posZ + (rand.nextDouble() * 512.0 - 256.0),
+						new ItemStack(Item.starChunk)
+				);
+				this.spawnEntityInWorld(star);
+				star.age = 6000 - (23000 - ((int) this.worldTime % 24000));
+			}
+		} else if (this.worldTime % 24000 < 13000) {
+			this.starfallChance = rand.nextInt(750) + 250;
+		}
+	}
+
+	public void sendTrackedEntityStatusUpdatePacket(Entity var1, byte var2) {
+	}
+
+	public void removePlayer(Entity var1) {
+		var1.setEntityDead();
+		if(var1 instanceof EntityPlayer) {
+			this.playerEntities.remove((EntityPlayer)var1);
+		}
+
+		int var2 = var1.chunkCoordX;
+		int var3 = var1.chunkCoordZ;
+		if(var1.addedToChunk && this.chunkExists(var2, var3)) {
+			this.getChunkFromChunkCoords(var2, var3).removeEntity(var1);
+		}
+
+		this.loadedEntityList.remove(var1);
+		this.releaseEntitySkin(var1);
+	}
+
+	public Biome getBiome(int x, int z) {
+		if (this.worldType == WorldType.CLASSIC) {
+			return Biome.PLAINS;
+		}
+		if (this.worldType == WorldType.WINTER) {
+			return Biome.TUNDRA;
+		}
+
+		double biomeSize = 250000.0D;
+		float biomeBlend = 0.005F;
+
+		float temperature = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(this.randomSeed,
+				x / biomeSize, z / biomeSize, 1000, 8) / 256 * 1.2F + 0.6F
+				+ (this.rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+				0.0F, 1.0F);
+		float humidity = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(this.randomSeed,
+				x / biomeSize, z / biomeSize, -1000, 8) / 256 * 1.2F + 0.6F
+				+ (this.rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+				0.0F, 1.0F);
+
+		if (this.worldType == WorldType.ARID) {
+			temperature = 1.0F;
+			humidity *= 0.35F;
+		}
+
+		if (this.worldType == WorldType.TROPICAL) {
+			temperature = temperature / 3.0F + 0.66F;
+			humidity = humidity / 3.0F + 0.66F;
+		}
+
+		return Biome.getBiome(temperature, humidity);
 	}
 
 	static {
@@ -1977,6 +2114,5 @@
 			float var2 = 1.0F - (float)var1 / 15.0F;
 			lightBrightnessTable[var1] = (1.0F - var2) / (var2 * 3.0F + 1.0F) * (1.0F - var0) + var0;
 		}
-
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/InventoryReadonly.java
@@ -1,0 +1,170 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.*;
+
+import net.minecraft.src.*;
+import org.lwjgl.input.Keyboard;
+
+public class InventoryReadonly implements IInventory {
+	private final ItemStack[] items;
+	private final boolean pickable;
+	public final Map<Integer, String> labels;
+	public boolean pickOne;
+
+	public InventoryReadonly(ItemStack[] items) {
+		this(items, false, null);
+	}
+
+	public InventoryReadonly(ItemStack[] items, boolean pickable) {
+		this(items, pickable, null);
+	}
+
+	public InventoryReadonly(ItemStack[] items, boolean pickable, Map<Integer, String> labels) {
+		this.items = items;
+		this.pickable = pickable;
+		this.labels = labels;
+	}
+
+	public String getLabel(int row) {
+		return labels != null ? labels.get(row) : null;
+	}
+
+	public static InventoryReadonly generateCreativeInventory(boolean debug) {
+		List<ItemStack> items = new ArrayList<>();
+		for (int i = 0; i < Item.itemsList.length; i++) {
+			if (i < 256) {
+				if (Block.blocksList[i] == null) {
+					continue;
+				}
+				for (int m : Block.blocksList[i].availableMetadata()) {
+					ItemStack stack = new ItemStack(i, 1).withMetadata(m);
+					if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+						items.add(stack);
+					}
+				}
+			} else {
+				if (Item.itemsList[i] == null) {
+					continue;
+				}
+				for (int m : Item.itemsList[i].availableMetadata()) {
+					ItemStack stack = new ItemStack(i, 1).withMetadata(m);
+					if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+						items.add(stack);
+					}
+				}
+			}
+		}
+		ItemStack[] itemArray = new ItemStack[items.size()];
+		items.toArray(itemArray);
+		return new InventoryReadonly(itemArray, true);
+	}
+
+	public static InventoryReadonly getCreativeInventory() {
+		try {
+			List<String> ids = new ArrayList<>();
+			BufferedReader reader = new BufferedReader(
+					new InputStreamReader(
+							Objects.requireNonNull(InventoryReadonly.class.getResourceAsStream("/gui/creative_items.txt"))));
+
+			String line;
+			while ((line = reader.readLine()) != null) {
+				if (!line.matches("\\s*#.*") && !line.isEmpty()) {
+					if (line.startsWith(": ")) {
+						ids.add(line);
+					} else {
+						ids.addAll(Arrays.asList(line.trim().split("#")[0].split("\\s+")));
+					}
+				}
+			}
+
+			List<ItemStack> items = new ArrayList<>();
+			Map<Integer, String> labels = new HashMap<>();
+			for (String id : ids) {
+				if (id.startsWith(": ")) {
+					labels.put(items.size() / 8, id.substring(2));
+					continue;
+				}
+
+				if (id.equals("/br") && (items.size() % 8) == 0) {
+					continue;
+				}
+
+				if (id.equals("/br") || id.equals("/n")) {
+					int emptyItems = 8 - (items.size() % 8);
+
+					for (int i = 0; i < emptyItems; i++) {
+						items.add(null);
+					}
+					continue;
+				}
+
+				String[] idSplit = id.split("-");
+
+				boolean isItem = idSplit[0].startsWith("i");
+				if (isItem) {
+					idSplit[0] = idSplit[0].substring(1);
+				}
+
+				int itemID = Integer.parseInt(idSplit[0]);
+				int itemMetadata = idSplit.length >= 2 ? Integer.parseInt(idSplit[1]) : 0;
+				if (isItem) {
+					itemID += 256;
+				}
+
+				if (itemID <= 0 || itemMetadata < 0) {
+					items.add(null);
+					continue;
+				}
+
+				ItemStack item = new ItemStack(itemID, 1).withMetadata(itemMetadata);
+				items.add(item);
+			}
+
+			ItemStack[] itemArray = new ItemStack[items.size()];
+			items.toArray(itemArray);
+
+			return new InventoryReadonly(itemArray, true, labels);
+		} catch (Exception e) {
+			System.out.println("Could not get creative inventory!");
+			e.printStackTrace();
+			System.out.println("Generating creative inventory instead...");
+			return generateCreativeInventory(false);
+		}
+	}
+
+	public int getSizeInventory() {
+		return items.length;
+	}
+
+	public ItemStack getStackInSlot(int var1) {
+		return var1 < items.length
+			? items[var1] == null
+				? null
+				: items[var1].copy()
+			: null;
+	}
+
+	public ItemStack decrStackSize(int var1, int var2) {
+		return this.pickable
+				? new ItemStack(items[var1].itemID,
+						this.pickOne && !Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 1 : items[var1].getMaxStackSize(),
+						items[var1].itemDmg).withMetadata(items[var1].itemMetadata)
+				: null;
+	}
+
+	public void setInventorySlotContents(int var1, ItemStack var2) {
+	}
+
+	public String getInvName() {
+		return "Readonly Inventory";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void onInventoryChanged() {
+	}
+}
--- net/minecraft/src/RenderArrow.java
+++ net/minecraft/src/RenderArrow.java
@@ -4,13 +4,13 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderArrow extends Render {
-	public void renderArrow(EntityArrow var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderArrow(EntityArrow entityArrow1, double var2, double var4, double var6, float var8, float var9) {
 		this.loadTexture("/item/arrows.png");
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var9 - 90.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9, 0.0F, 0.0F, 1.0F);
-		Tessellator var10 = Tessellator.instance;
+		GL11.glRotatef(entityArrow1.prevRotationYaw + (entityArrow1.rotationYaw - entityArrow1.prevRotationYaw) * var9 - 90.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(entityArrow1.prevRotationPitch + (entityArrow1.rotationPitch - entityArrow1.prevRotationPitch) * var9, 0.0F, 0.0F, 1.0F);
+		Tessellator tessellator10 = Tessellator.instance;
 		byte var11 = 0;
 		float var12 = 0.0F;
 		float var13 = 0.5F;
@@ -22,7 +22,7 @@
 		float var19 = (float)(10 + var11 * 10) / 32.0F;
 		float var20 = 0.05625F;
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		float var21 = (float)var1.arrowShake - var9;
+		float var21 = (float)entityArrow1.arrowShake - var9;
 		if(var21 > 0.0F) {
 			float var22 = -MathHelper.sin(var21 * 3.0F) * var21;
 			GL11.glRotatef(var22, 0.0F, 0.0F, 1.0F);
@@ -32,29 +32,29 @@
 		GL11.glScalef(var20, var20, var20);
 		GL11.glTranslatef(-4.0F, 0.0F, 0.0F);
 		GL11.glNormal3f(var20, 0.0F, 0.0F);
-		var10.startDrawingQuads();
-		var10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var18);
-		var10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var18);
-		var10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var19);
-		var10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var19);
-		var10.draw();
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var18);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var18);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var19);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var19);
+		tessellator10.draw();
 		GL11.glNormal3f(-var20, 0.0F, 0.0F);
-		var10.startDrawingQuads();
-		var10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var18);
-		var10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var18);
-		var10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var19);
-		var10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var19);
-		var10.draw();
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var18);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var18);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var19);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var19);
+		tessellator10.draw();
 
 		for(int var23 = 0; var23 < 4; ++var23) {
 			GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glNormal3f(0.0F, 0.0F, var20);
-			var10.startDrawingQuads();
-			var10.addVertexWithUV(-8.0D, -2.0D, 0.0D, (double)var12, (double)var14);
-			var10.addVertexWithUV(8.0D, -2.0D, 0.0D, (double)var13, (double)var14);
-			var10.addVertexWithUV(8.0D, 2.0D, 0.0D, (double)var13, (double)var15);
-			var10.addVertexWithUV(-8.0D, 2.0D, 0.0D, (double)var12, (double)var15);
-			var10.draw();
+			tessellator10.startDrawingQuads();
+			tessellator10.addVertexWithUV(-8.0D, -2.0D, 0.0D, (double)var12, (double)var14);
+			tessellator10.addVertexWithUV(8.0D, -2.0D, 0.0D, (double)var13, (double)var14);
+			tessellator10.addVertexWithUV(8.0D, 2.0D, 0.0D, (double)var13, (double)var15);
+			tessellator10.addVertexWithUV(-8.0D, 2.0D, 0.0D, (double)var12, (double)var15);
+			tessellator10.draw();
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
--- net/minecraft/src/TerrainTextureManager.java
+++ net/minecraft/src/TerrainTextureManager.java
@@ -16,9 +16,9 @@
 
 	public TerrainTextureManager() {
 		try {
-			BufferedImage var1 = ImageIO.read(TerrainTextureManager.class.getResource("/terrain.png"));
+			BufferedImage bufferedImage1 = ImageIO.read(TerrainTextureManager.class.getResource("/terrain.png"));
 			int[] var2 = new int[65536];
-			var1.getRGB(0, 0, 256, 256, var2, 0, 256);
+			bufferedImage1.getRGB(0, 0, 256, 256, var2, 0, 256);
 
 			for(int var3 = 0; var3 < 256; ++var3) {
 				int var4 = 0;
@@ -49,8 +49,8 @@
 					this.texCols[var3 * 3 + 2] = (float)(var6 / var9);
 				}
 			}
-		} catch (IOException var14) {
-			var14.printStackTrace();
+		} catch (IOException iOException14) {
+			iOException14.printStackTrace();
 		}
 
 		for(int var15 = 0; var15 < 256; ++var15) {
@@ -63,22 +63,22 @@
 
 	}
 
-	public void render(IsoImageBuffer var1) {
-		World var2 = var1.level;
+	public void render(IsoImageBuffer isoImageBuffer1) {
+		World var2 = isoImageBuffer1.level;
 		if(var2 == null) {
-			var1.noContent = true;
-			var1.rendered = true;
+			isoImageBuffer1.noContent = true;
+			isoImageBuffer1.rendered = true;
 		} else {
-			int var3 = var1.x * 16;
-			int var4 = var1.y * 16;
+			int var3 = isoImageBuffer1.x * 16;
+			int var4 = isoImageBuffer1.y * 16;
 			int var5 = var3 + 16;
 			int var6 = var4 + 16;
-			Chunk var7 = var2.getChunkFromChunkCoords(var1.x, var1.y);
-			if(var7.isChunkRendered) {
-				var1.noContent = true;
-				var1.rendered = true;
+			Chunk chunk7 = var2.getChunkFromChunkCoords(isoImageBuffer1.x, isoImageBuffer1.y);
+			if(chunk7.isChunkRendered) {
+				isoImageBuffer1.noContent = true;
+				isoImageBuffer1.rendered = true;
 			} else {
-				var1.noContent = false;
+				isoImageBuffer1.noContent = false;
 				Arrays.fill(this.zBuf, 0);
 				Arrays.fill(this.waterBuf, 0);
 				Arrays.fill(this.yBuf, 160);
@@ -138,14 +138,14 @@
 										var20 = (var2.getBrightness(var9, var14 + 1, var8) * 0.8F + 0.2F) * var17;
 										if(var12 >= 0 && this.zBuf[var18] <= var14) {
 											this.zBuf[var18] = var14;
-											this.pixels[var18] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var20) << 16 | (int)(this.texCols[var19 * 3 + 1] * var20) << 8 | (int)(this.texCols[var19 * 3 + 2] * var20);
+											this.pixels[var18] = 0xFF000000 | (int)(this.texCols[var19 * 3 + 0] * var20) << 16 | (int)(this.texCols[var19 * 3 + 1] * var20) << 8 | (int)(this.texCols[var19 * 3 + 2] * var20);
 										}
 
 										if(var12 < 31) {
 											var22 = var20 * 0.9F;
 											if(this.zBuf[var18 + 1] <= var14) {
 												this.zBuf[var18 + 1] = var14;
-												this.pixels[var18 + 1] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var22) << 16 | (int)(this.texCols[var19 * 3 + 1] * var22) << 8 | (int)(this.texCols[var19 * 3 + 2] * var22);
+												this.pixels[var18 + 1] = 0xFF000000 | (int)(this.texCols[var19 * 3 + 0] * var22) << 16 | (int)(this.texCols[var19 * 3 + 1] * var22) << 8 | (int)(this.texCols[var19 * 3 + 2] * var22);
 											}
 										}
 									}
@@ -161,7 +161,7 @@
 											var23 = var20 * var17 * 0.6F;
 											if(this.zBuf[var18] <= var14 - 1) {
 												this.zBuf[var18] = var14 - 1;
-												this.pixels[var18] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var23) << 16 | (int)(this.texCols[var19 * 3 + 1] * var23) << 8 | (int)(this.texCols[var19 * 3 + 2] * var23);
+												this.pixels[var18] = 0xFF000000 | (int)(this.texCols[var19 * 3 + 0] * var23) << 16 | (int)(this.texCols[var19 * 3 + 1] * var23) << 8 | (int)(this.texCols[var19 * 3 + 2] * var23);
 											}
 										}
 
@@ -169,7 +169,7 @@
 											var23 = var22 * 0.9F * var17 * 0.4F;
 											if(this.zBuf[var18 + 1] <= var14 - 1) {
 												this.zBuf[var18 + 1] = var14 - 1;
-												this.pixels[var18 + 1] = -16777216 | (int)(this.texCols[var21 * 3 + 0] * var23) << 16 | (int)(this.texCols[var21 * 3 + 1] * var23) << 8 | (int)(this.texCols[var21 * 3 + 2] * var23);
+												this.pixels[var18 + 1] = 0xFF000000 | (int)(this.texCols[var21 * 3 + 0] * var23) << 16 | (int)(this.texCols[var21 * 3 + 1] * var23) << 8 | (int)(this.texCols[var21 * 3 + 2] * var23);
 											}
 										}
 									}
@@ -180,12 +180,12 @@
 				}
 
 				this.postProcess();
-				if(var1.image == null) {
-					var1.image = new BufferedImage(32, 160, 2);
+				if(isoImageBuffer1.image == null) {
+					isoImageBuffer1.image = new BufferedImage(32, 160, 2);
 				}
 
-				var1.image.setRGB(0, 0, 32, 160, this.pixels, 0, 32);
-				var1.rendered = true;
+				isoImageBuffer1.image.setRGB(0, 0, 32, 160, this.pixels, 0, 32);
+				isoImageBuffer1.rendered = true;
 			}
 		}
 	}
@@ -204,7 +204,7 @@
 					if(var4 < 128) {
 						this.pixels[var3] = Integer.MIN_VALUE + this.waterBr[var3] * 2;
 					} else {
-						this.pixels[var3] |= -16777216;
+						this.pixels[var3] |= 0xFF000000;
 					}
 				}
 			}
--- net/minecraft/src/TextureCompassFX.java
+++ net/minecraft/src/TextureCompassFX.java
@@ -3,6 +3,7 @@
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import javax.imageio.ImageIO;
+
 import net.minecraft.client.Minecraft;
 
 public class TextureCompassFX extends TextureFX {
@@ -19,12 +20,12 @@
 		this.tileImage = 1;
 
 		try {
-			BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
+			BufferedImage bufferedImage2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
 			int var3 = this.iconIndex % 16 * 16;
 			int var4 = this.iconIndex / 16 * 16;
-			var2.getRGB(var3, var4, 16, 16, this.compassIconImageData, 0, 16);
-		} catch (IOException var5) {
-			var5.printStackTrace();
+			bufferedImage2.getRGB(var3, var4, 16, 16, this.compassIconImageData, 0, 16);
+		} catch (IOException iOException5) {
+			iOException5.printStackTrace();
 		}
 
 	}
@@ -59,11 +60,11 @@
 			var20 = (double)(this.mc.thePlayer.rotationYaw - 90.0F) * Math.PI / 180.0D - Math.atan2(var22, var21);
 		}
 
-		for(var21 = var20 - this.currentAngle; var21 < -Math.PI; var21 += Math.PI * 2.0D) {
+		for(var21 = var20 - this.currentAngle; var21 < -3.141592653589793D; var21 += Math.PI * 2D) {
 		}
 
 		while(var21 >= Math.PI) {
-			var21 -= Math.PI * 2.0D;
+			var21 -= Math.PI * 2D;
 		}
 
 		if(var21 < -1.0D) {
@@ -87,7 +88,7 @@
 		int var13;
 		int var14;
 		int var15;
-		short var16;
+		short s16;
 		int var17;
 		int var18;
 		int var19;
@@ -98,7 +99,7 @@
 			var13 = 100;
 			var14 = 100;
 			var15 = 100;
-			var16 = 255;
+			s16 = 255;
 			if(this.anaglyphEnabled) {
 				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
 				var18 = (var13 * 30 + var14 * 70) / 100;
@@ -111,7 +112,7 @@
 			this.imageData[var12 * 4 + 0] = (byte)var13;
 			this.imageData[var12 * 4 + 1] = (byte)var14;
 			this.imageData[var12 * 4 + 2] = (byte)var15;
-			this.imageData[var12 * 4 + 3] = (byte)var16;
+			this.imageData[var12 * 4 + 3] = (byte)s16;
 		}
 
 		for(var9 = -8; var9 <= 16; ++var9) {
@@ -121,7 +122,7 @@
 			var13 = var9 >= 0 ? 255 : 100;
 			var14 = var9 >= 0 ? 20 : 100;
 			var15 = var9 >= 0 ? 20 : 100;
-			var16 = 255;
+			s16 = 255;
 			if(this.anaglyphEnabled) {
 				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
 				var18 = (var13 * 30 + var14 * 70) / 100;
@@ -134,7 +135,7 @@
 			this.imageData[var12 * 4 + 0] = (byte)var13;
 			this.imageData[var12 * 4 + 1] = (byte)var14;
 			this.imageData[var12 * 4 + 2] = (byte)var15;
-			this.imageData[var12 * 4 + 3] = (byte)var16;
+			this.imageData[var12 * 4 + 3] = (byte)s16;
 		}
 
 	}
--- net/minecraft/src/RecipesFood.java
+++ net/minecraft/src/RecipesFood.java
@@ -1,8 +1,9 @@
 package net.minecraft.src;
 
 public class RecipesFood {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomBrown, Character.valueOf('Y'), Block.mushroomRed, Character.valueOf('#'), Item.bowlEmpty});
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomRed, Character.valueOf('Y'), Block.mushroomBrown, Character.valueOf('#'), Item.bowlEmpty});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), "Y", "X", "#", 'X', Block.mushroomBrown, 'Y', Block.mushroomRed, '#', Item.bowlEmpty);
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), "Y", "X", "#", 'X', Block.mushroomRed, 'Y', Block.mushroomBrown, '#', Item.bowlEmpty);
+		craftingManager.addRecipe(new ItemStack(Item.cookie), "X#X", 'X', Item.sugar, '#', Item.wheat);
 	}
 }
--- net/minecraft/src/ItemSign.java
+++ net/minecraft/src/ItemSign.java
@@ -7,43 +7,43 @@
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+		} else if(!worldObj.getBlockMaterial(x, y, z).isSolid()) {
 			return false;
 		} else {
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
-			}
-
-			if(!Block.signStanding.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
+			}
+
+			if(!Block.signStanding.canPlaceBlockAt(worldObj, x, y, z)) {
 				return false;
 			} else {
-				if(var7 == 1) {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signStanding.blockID, MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
+				if(side == 1) {
+					worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.signStanding.blockID, MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
 				} else {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signWall.blockID, var7);
+					worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.signWall.blockID, side);
 				}
 
-				--var1.stackSize;
-				var2.displayGUIEditSign((TileEntitySign)var3.getBlockTileEntity(var4, var5, var6));
+				--itemStack.stackSize;
+				entityPlayer.displayGUIEditSign((TileEntitySign)worldObj.getBlockTileEntity(x, y, z));
 				return true;
 			}
 		}
--- net/minecraft/src/BlockLeavesBase.java
+++ net/minecraft/src/BlockLeavesBase.java
@@ -3,17 +3,17 @@
 public class BlockLeavesBase extends Block {
 	protected boolean graphicsLevel;
 
-	protected BlockLeavesBase(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.graphicsLevel = var4;
+	protected BlockLeavesBase(int id, int tex, Material material, boolean graphicsLevel) {
+		super(id, tex, material);
+		this.graphicsLevel = graphicsLevel;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int var6 = blockAccess.getBlockId(x, y, z);
+		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- net/minecraft/src/EntityPig.java
+++ net/minecraft/src/EntityPig.java
@@ -7,17 +7,16 @@
 		super(var1);
 		this.texture = "/mob/pig.png";
 		this.setSize(0.9F, 0.9F);
-		this.saddled = false;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Saddle", this.saddled);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.saddled = var1.getBoolean("Saddle");
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setBoolean("Saddle", this.saddled);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		this.saddled = compoundTag.getBoolean("Saddle");
 	}
 
 	protected String getLivingSound() {
@@ -32,9 +31,9 @@
 		return "mob.pigdeath";
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		if(this.saddled) {
-			var1.mountEntity(this);
+			entityPlayer.mountEntity(this);
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/RenderSnowball.java
+++ net/minecraft/src/RenderSnowball.java
@@ -4,14 +4,14 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderSnowball extends Render {
-	public void doRenderSnowball(EntitySnowball var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderSnowball(EntitySnowball entitySnowball1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glScalef(0.5F, 0.5F, 0.5F);
-		int var10 = Item.snowball.getIconIndex((ItemStack)null);
+		int var10 = entitySnowball1.iconIndex;
 		this.loadTexture("/gui/items.png");
-		Tessellator var11 = Tessellator.instance;
+		Tessellator tessellator11 = Tessellator.instance;
 		float var12 = (float)(var10 % 16 * 16 + 0) / 256.0F;
 		float var13 = (float)(var10 % 16 * 16 + 16) / 256.0F;
 		float var14 = (float)(var10 / 16 * 16 + 0) / 256.0F;
@@ -21,13 +21,13 @@
 		float var18 = 0.25F;
 		GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
 		GL11.glRotatef(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
-		var11.startDrawingQuads();
-		var11.setNormal(0.0F, 1.0F, 0.0F);
-		var11.addVertexWithUV((double)(0.0F - var17), (double)(0.0F - var18), 0.0D, (double)var12, (double)var15);
-		var11.addVertexWithUV((double)(var16 - var17), (double)(0.0F - var18), 0.0D, (double)var13, (double)var15);
-		var11.addVertexWithUV((double)(var16 - var17), (double)(1.0F - var18), 0.0D, (double)var13, (double)var14);
-		var11.addVertexWithUV((double)(0.0F - var17), (double)(1.0F - var18), 0.0D, (double)var12, (double)var14);
-		var11.draw();
+		tessellator11.startDrawingQuads();
+		tessellator11.setNormal(0.0F, 1.0F, 0.0F);
+		tessellator11.addVertexWithUV((double)(0.0F - var17), (double)(0.0F - var18), 0.0D, (double)var12, (double)var15);
+		tessellator11.addVertexWithUV((double)(var16 - var17), (double)(0.0F - var18), 0.0D, (double)var13, (double)var15);
+		tessellator11.addVertexWithUV((double)(var16 - var17), (double)(1.0F - var18), 0.0D, (double)var13, (double)var14);
+		tessellator11.addVertexWithUV((double)(0.0F - var17), (double)(1.0F - var18), 0.0D, (double)var12, (double)var14);
+		tessellator11.draw();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		GL11.glPopMatrix();
 	}
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -3,13 +3,13 @@
 import java.util.Random;
 
 public class BlockSnow extends Block {
-	protected BlockSnow(int var1, int var2) {
-		super(var1, var2, Material.snow);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockSnow(int id, int tex) {
+		super(id, tex, Material.snow);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -21,55 +21,55 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 != 0 && Block.blocksList[var5].isOpaqueCube() ? var1.getBlockMaterial(var2, var3 - 1, var4).getIsSolid() : false;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.canSnowStay(var1, var2, var3, var4);
-	}
-
-	private boolean canSnowStay(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int var5 = world.getBlockId(x, y - 1, z);
+		return var5 != 0 && Block.blocksList[var5].isOpaqueCube() ? world.getBlockMaterial(x, y - 1, z).getIsSolid() : false;
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		this.canSnowStay(worldObj, x, y, z);
+	}
+
+	private boolean canSnowStay(World worldObj, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
+	public void harvestBlock(World worldObj, int x, int y, int z, int metadata) {
 		int var6 = Item.snowball.shiftedIndex;
 		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
-		var1.setBlockWithNotify(var2, var3, var4, 0);
+		double var8 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+		double var10 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+		double var12 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(worldObj, (double)x + var8, (double)y + var10, (double)z + var12, new ItemStack(var6));
+		entityItem14.delayBeforeCanPickup = 10;
+		worldObj.spawnEntityInWorld(entityItem14);
+		worldObj.setBlockWithNotify(x, y, z, 0);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.snowball.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == 1 ? true : (var6 == this.material ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5));
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return side == 1 ? true : (material6 == this.material ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side));
 	}
 }
--- net/minecraft/src/ClippingHelperImplementation.java
+++ net/minecraft/src/ClippingHelperImplementation.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class ClippingHelperImplementation extends ClippingHelper {
--- net/minecraft/src/RenderBoat.java
+++ net/minecraft/src/RenderBoat.java
@@ -10,27 +10,27 @@
 		this.modelBoat = new ModelBoat();
 	}
 
-	public void renderBoat(EntityBoat var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderBoat(EntityBoat entityBoat1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glRotatef(180.0F - var8, 0.0F, 1.0F, 0.0F);
-		float var10 = (float)var1.timeSinceHit - var9;
-		float var11 = (float)var1.damageTaken - var9;
+		float var10 = (float)entityBoat1.timeSinceHit - var9;
+		float var11 = (float)entityBoat1.damageTaken - var9;
 		if(var11 < 0.0F) {
 			var11 = 0.0F;
 		}
 
 		if(var10 > 0.0F) {
-			GL11.glRotatef(MathHelper.sin(var10) * var10 * var11 / 10.0F * (float)var1.forwardDirection, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(MathHelper.sin(var10) * var10 * var11 / 10.0F * (float)entityBoat1.forwardDirection, 1.0F, 0.0F, 0.0F);
 		}
 
 		this.loadTexture("/terrain.png");
-		float var12 = 12.0F / 16.0F;
+		float var12 = 0.75F;
 		GL11.glScalef(var12, var12, var12);
 		GL11.glScalef(1.0F / var12, 1.0F / var12, 1.0F / var12);
 		this.loadTexture("/item/boat.png");
 		GL11.glScalef(-1.0F, -1.0F, 1.0F);
-		this.modelBoat.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 1.0F / 16.0F);
+		this.modelBoat.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
 		GL11.glPopMatrix();
 	}
 
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -3,12 +3,15 @@
 import java.nio.FloatBuffer;
 import java.util.List;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.WorldType;
 import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
-import org.lwjgl.opengl.NVFogDistance;
 import org.lwjgl.util.glu.GLU;
 
 public class EntityRenderer {
@@ -28,9 +31,9 @@
 	private float prevFogColor;
 	private float fogColor;
 
-	public EntityRenderer(Minecraft var1) {
-		this.mc = var1;
-		this.itemRenderer = new ItemRenderer(var1);
+	public EntityRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
+		this.itemRenderer = new ItemRenderer(minecraft);
 	}
 
 	public void updateRenderer() {
@@ -47,18 +50,19 @@
 
 	}
 
-	public void getMouseOver(float var1) {
+	public void getMouseOver(float renderPartialTick) {
 		if(this.mc.thePlayer != null) {
 			double var2 = (double)this.mc.playerController.getBlockReachDistance();
-			this.mc.objectMouseOver = this.mc.thePlayer.rayTrace(var2, var1);
+			this.mc.objectMouseOver = this.mc.thePlayer.rayTrace(var2, renderPartialTick);
 			double var4 = var2;
-			Vec3D var6 = this.mc.thePlayer.getPosition(var1);
+			Vec3D vec3D6 = this.mc.thePlayer.getPosition(renderPartialTick);
 			if(this.mc.objectMouseOver != null) {
-				var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
+				var4 = this.mc.objectMouseOver.hitVec.distanceTo(vec3D6);
 			}
 
 			if(this.mc.playerController instanceof PlayerControllerCreative) {
 				var2 = 32.0D;
+				var4 = 32.0D;
 			} else {
 				if(var4 > 3.0D) {
 					var4 = 3.0D;
@@ -67,20 +71,20 @@
 				var2 = var4;
 			}
 
-			Vec3D var7 = this.mc.thePlayer.getLook(var1);
-			Vec3D var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
+			Vec3D vec3D7 = this.mc.thePlayer.getLook(renderPartialTick);
+			Vec3D vec3D8 = vec3D6.addVector(vec3D7.xCoord * var2, vec3D7.yCoord * var2, vec3D7.zCoord * var2);
 			this.pointedEntity = null;
-			List var9 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.thePlayer, this.mc.thePlayer.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2));
+			List list9 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.thePlayer, this.mc.thePlayer.boundingBox.addCoord(vec3D7.xCoord * var2, vec3D7.yCoord * var2, vec3D7.zCoord * var2));
 			double var10 = 0.0D;
 
-			for(int var12 = 0; var12 < var9.size(); ++var12) {
-				Entity var13 = (Entity)var9.get(var12);
+			for(int var12 = 0; var12 < list9.size(); ++var12) {
+				Entity var13 = (Entity)list9.get(var12);
 				if(var13.canBeCollidedWith()) {
 					float var14 = 0.1F;
-					AxisAlignedBB var15 = var13.boundingBox.expand((double)var14, (double)var14, (double)var14);
-					MovingObjectPosition var16 = var15.calculateIntercept(var6, var8);
-					if(var16 != null) {
-						double var17 = var6.distanceTo(var16.hitVec);
+					AxisAlignedBB axisAlignedBB15 = var13.boundingBox.expand((double)var14, (double)var14, (double)var14);
+					MovingObjectPosition movingObjectPosition16 = axisAlignedBB15.calculateIntercept(vec3D6, vec3D8);
+					if(movingObjectPosition16 != null) {
+						double var17 = vec3D6.distanceTo(movingObjectPosition16.hitVec);
 						if(var17 < var10 || var10 == 0.0D) {
 							this.pointedEntity = var13;
 							var10 = var17;
@@ -96,27 +100,40 @@
 		}
 	}
 
-	private float getFOVModifier(float var1) {
+	private float fov = 0.0F;
+
+	private float getFOVModifier(float renderPartialTick) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
-		float var3 = 70.0F;
-		if(var2.isInsideOfMaterial(Material.water)) {
-			var3 = 60.0F;
-		}
-
-		if(var2.health <= 0) {
-			float var4 = (float)var2.deathTime + var1;
-			var3 /= (1.0F - 500.0F / (var4 + 500.0F)) * 2.0F + 1.0F;
-		}
-
-		return var3;
+		float var3 = this.mc.options.fov;
+
+		if (Keyboard.isKeyDown(this.mc.options.keyBindZoom.keyCode)) {
+			var3 = 30.0F;
+		}
+
+		if (var2.isInsideOfMaterial(Material.water)) {
+			var3 *= 0.85F;
+		}
+
+		if (var2.health <= 0) {
+			float var4 = (float)var2.deathTime + renderPartialTick;
+			var3 /= ((1.0F - 500.0F / (var4 + 500.0F)) * 2.0F) * this.mc.options.fovEffects + 1.0F;
+		}
+
+		if (var2.isRunning()) {
+			var3 *= 1.0F + 0.05F * this.mc.options.fovEffects;
+		}
+		var3 *= 1.0F + var2.energyBoost * this.mc.options.fovEffects;
+
+		fov = MathHelper.lerp(fov, var3, (float) (1 - Math.pow(0.5D, renderPartialTick)));
+		return fov;
 	}
 
-	private void hurtCameraEffect(float var1) {
+	private void hurtCameraEffect(float renderPartialTick) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
-		float var3 = (float)var2.hurtTime - var1;
+		float var3 = (float)var2.hurtTime - renderPartialTick;
 		float var4;
 		if(var2.health <= 0) {
-			var4 = (float)var2.deathTime + var1;
+			var4 = (float)var2.deathTime + renderPartialTick;
 			GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
 		}
 
@@ -130,13 +147,13 @@
 		}
 	}
 
-	private void setupViewBobbing(float var1) {
+	private void setupViewBobbing(float renderPartialTick) {
 		if(!this.mc.options.thirdPersonView) {
 			EntityPlayerSP var2 = this.mc.thePlayer;
 			float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
-			float var4 = var2.distanceWalkedModified + var3 * var1;
-			float var5 = var2.prevCameraYaw + (var2.cameraYaw - var2.prevCameraYaw) * var1;
-			float var6 = var2.prevCameraPitch + (var2.cameraPitch - var2.prevCameraPitch) * var1;
+			float var4 = var2.distanceWalkedModified + var3 * renderPartialTick;
+			float var5 = var2.prevCameraYaw + (var2.cameraYaw - var2.prevCameraYaw) * renderPartialTick;
+			float var6 = var2.prevCameraPitch + (var2.cameraPitch - var2.prevCameraPitch) * renderPartialTick;
 			GL11.glTranslatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 0.5F, -Math.abs(MathHelper.cos(var4 * (float)Math.PI) * var5), 0.0F);
 			GL11.glRotatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 3.0F, 0.0F, 0.0F, 1.0F);
 			GL11.glRotatef(Math.abs(MathHelper.cos(var4 * (float)Math.PI + 0.2F) * var5) * 5.0F, 1.0F, 0.0F, 0.0F);
@@ -144,11 +161,11 @@
 		}
 	}
 
-	private void orientCamera(float var1) {
+	private void orientCamera(float renderPartialTick) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
-		double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var1;
-		double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var1;
-		double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var1;
+		double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)renderPartialTick;
+		double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)renderPartialTick;
+		double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)renderPartialTick;
 		if(this.mc.options.thirdPersonView) {
 			double var9 = 4.0D;
 			float var11 = var2.rotationYaw;
@@ -164,9 +181,9 @@
 				var20 *= 0.1F;
 				var21 *= 0.1F;
 				var22 *= 0.1F;
-				MovingObjectPosition var23 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var3 + (double)var20, var5 + (double)var21, var7 + (double)var22), Vec3D.createVector(var3 - var13 + (double)var20 + (double)var22, var5 - var17 + (double)var21, var7 - var15 + (double)var22));
-				if(var23 != null) {
-					double var24 = var23.hitVec.distanceTo(Vec3D.createVector(var3, var5, var7));
+				MovingObjectPosition movingObjectPosition23 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var3 + (double)var20, var5 + (double)var21, var7 + (double)var22), Vec3D.createVector(var3 - var13 + (double)var20 + (double)var22, var5 - var17 + (double)var21, var7 - var15 + (double)var22));
+				if(movingObjectPosition23 != null) {
+					double var24 = movingObjectPosition23.hitVec.distanceTo(Vec3D.createVector(var3, var5, var7));
 					if(var24 < var9) {
 						var9 = var24;
 					}
@@ -182,11 +199,11 @@
 			GL11.glTranslatef(0.0F, 0.0F, -0.1F);
 		}
 
-		GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-		GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * var1 + 180.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * renderPartialTick, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * renderPartialTick + 180.0F, 0.0F, 1.0F, 0.0F);
 	}
 
-	private void setupCameraTransform(float var1, int var2) {
+	private void setupCameraTransform(float renderPartialTick, int var2) {
 		this.farPlaneDistance = (float)(256 >> this.mc.options.renderDistance);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
@@ -195,50 +212,50 @@
 			GL11.glTranslatef((float)(-(var2 * 2 - 1)) * var3, 0.0F, 0.0F);
 		}
 
-		GLU.gluPerspective(this.getFOVModifier(var1), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance);
+		GLU.gluPerspective(this.getFOVModifier(renderPartialTick), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glLoadIdentity();
 		if(this.mc.options.anaglyph) {
 			GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
 		}
 
-		this.hurtCameraEffect(var1);
+		this.hurtCameraEffect(renderPartialTick);
 		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
+			this.setupViewBobbing(renderPartialTick);
 		}
 
-		this.orientCamera(var1);
+		this.orientCamera(renderPartialTick);
 	}
 
-	private void renderHand(float var1, int var2) {
+	private void renderHand(float renderPartialTick, int var2) {
 		GL11.glLoadIdentity();
 		if(this.mc.options.anaglyph) {
 			GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
 		}
 
 		GL11.glPushMatrix();
-		this.hurtCameraEffect(var1);
+		this.hurtCameraEffect(renderPartialTick);
 		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
+			this.setupViewBobbing(renderPartialTick);
 		}
 
 		if(!this.mc.options.thirdPersonView) {
-			this.itemRenderer.renderItemInFirstPerson(var1);
+			this.itemRenderer.renderItemInFirstPerson(renderPartialTick);
 		}
 
 		GL11.glPopMatrix();
 		if(!this.mc.options.thirdPersonView) {
-			this.itemRenderer.renderOverlays(var1);
-			this.hurtCameraEffect(var1);
+			this.itemRenderer.renderOverlays(renderPartialTick);
+			this.hurtCameraEffect(renderPartialTick);
 		}
 
 		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
+			this.setupViewBobbing(renderPartialTick);
 		}
 
 	}
 
-	public void updateCameraAndRender(float var1) {
+	public void updateCameraAndRender(float renderPartialTick) {
 		if(!Display.isActive()) {
 			if(System.currentTimeMillis() - this.prevFrameTime > 500L) {
 				this.mc.displayInGameMenu();
@@ -262,18 +279,18 @@
 		}
 
 		if(!this.mc.skipRenderWorld) {
-			ScaledResolution var7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-			int var8 = var7.getScaledWidth();
-			int var9 = var7.getScaledHeight();
+			ScaledResolution scaledResolution7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			int var8 = scaledResolution7.getScaledWidth();
+			int var9 = scaledResolution7.getScaledHeight();
 			int var10 = Mouse.getX() * var8 / this.mc.displayWidth;
 			int var11 = var9 - Mouse.getY() * var9 / this.mc.displayHeight - 1;
 			if(this.mc.theWorld != null) {
-				this.renderWorld(var1);
-				this.mc.ingameGUI.renderGameOverlay(var1, this.mc.currentScreen != null, var10, var11);
+				this.renderWorld(renderPartialTick);
+				this.mc.ingameGUI.renderGameOverlay(renderPartialTick, this.mc.currentScreen != null, var10, var11);
 			} else {
 				GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
 				GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 				GL11.glMatrixMode(GL11.GL_PROJECTION);
 				GL11.glLoadIdentity();
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
@@ -283,20 +300,20 @@
 
 			if(this.mc.currentScreen != null) {
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-				this.mc.currentScreen.drawScreen(var10, var11, var1);
+				this.mc.currentScreen.drawScreen(var10, var11, renderPartialTick);
 			}
 
 		}
 	}
 
-	public void renderWorld(float var1) {
-		this.getMouseOver(var1);
+	public void renderWorld(float renderPartialTick) {
+		this.getMouseOver(renderPartialTick);
 		EntityPlayerSP var2 = this.mc.thePlayer;
 		RenderGlobal var3 = this.mc.renderGlobal;
-		EffectRenderer var4 = this.mc.effectRenderer;
-		double var5 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
-		double var7 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
-		double var9 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
+		EffectRenderer effectRenderer4 = this.mc.effectRenderer;
+		double var5 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)renderPartialTick;
+		double var7 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)renderPartialTick;
+		double var9 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)renderPartialTick;
 
 		for(int var11 = 0; var11 < 2; ++var11) {
 			if(this.mc.options.anaglyph) {
@@ -308,37 +325,37 @@
 			}
 
 			GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-			this.updateFogColor(var1);
-			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+			this.updateFogColor(renderPartialTick);
+			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 			GL11.glEnable(GL11.GL_CULL_FACE);
-			this.setupCameraTransform(var1, var11);
+			this.setupCameraTransform(renderPartialTick, var11);
 			ClippingHelperImplementation.getInstance();
 			if(this.mc.options.renderDistance < 2) {
 				this.setupFog(-1);
-				var3.renderSky(var1);
+				var3.renderSky(renderPartialTick);
 			}
 
 			GL11.glEnable(GL11.GL_FOG);
 			this.setupFog(1);
-			Frustum var12 = new Frustum();
-			var12.setPosition(var5, var7, var9);
-			this.mc.renderGlobal.clipRenderersByFrustum(var12, var1);
+			Frustum frustum12 = new Frustum();
+			frustum12.setPosition(var5, var7, var9);
+			this.mc.renderGlobal.clipRenderersByFrustum(frustum12, renderPartialTick);
 			this.mc.renderGlobal.updateRenderers(var2, false);
 			this.setupFog(0);
 			GL11.glEnable(GL11.GL_FOG);
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
 			RenderHelper.disableStandardItemLighting();
-			var3.sortAndRender(var2, 0, (double)var1);
+			var3.sortAndRender(var2, 0, (double)renderPartialTick);
 			RenderHelper.enableStandardItemLighting();
-			var3.renderEntities(var2.getPosition(var1), var12, var1);
-			var4.renderLitParticles(var2, var1);
+			var3.renderEntities(var2.getPosition(renderPartialTick), frustum12, renderPartialTick);
+			effectRenderer4.renderLitParticles(var2, renderPartialTick);
 			RenderHelper.disableStandardItemLighting();
 			this.setupFog(0);
-			var4.renderParticles(var2, var1);
-			if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water)) {
+			effectRenderer4.renderParticles(var2, renderPartialTick);
+			if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water) && this.mc.showHud) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
-				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
+				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), renderPartialTick);
+				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), renderPartialTick);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 			}
 
@@ -349,7 +366,7 @@
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
 			if(this.mc.options.fancyGraphics) {
 				GL11.glColorMask(false, false, false, false);
-				int var13 = var3.sortAndRender(var2, 1, (double)var1);
+				int var13 = var3.sortAndRender(var2, 1, (double)renderPartialTick);
 				GL11.glColorMask(true, true, true, true);
 				if(this.mc.options.anaglyph) {
 					if(var11 == 0) {
@@ -360,37 +377,40 @@
 				}
 
 				if(var13 > 0) {
-					var3.renderAllRenderLists(1, (double)var1);
+					var3.renderAllRenderLists(1, (double)renderPartialTick);
 				}
 			} else {
-				var3.sortAndRender(var2, 1, (double)var1);
+				var3.sortAndRender(var2, 1, (double)renderPartialTick);
 			}
 
 			GL11.glDepthMask(true);
 			GL11.glEnable(GL11.GL_CULL_FACE);
 			GL11.glDisable(GL11.GL_BLEND);
-			if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water)) {
+			if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water) && this.mc.showHud) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
-				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
+				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), renderPartialTick);
+				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), renderPartialTick);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 			}
 
 			GL11.glDisable(GL11.GL_FOG);
-			if(this.mc.theWorld.snowCovered) {
-				this.renderSnow(var1);
+			if(this.mc.theWorld.worldType == WorldType.WINTER) {
+				this.renderSnow(renderPartialTick);
 			}
 
 			if(this.pointedEntity != null) {
+				;
 			}
 
 			this.setupFog(0);
 			GL11.glEnable(GL11.GL_FOG);
-			var3.renderClouds(var1);
+			var3.renderClouds(renderPartialTick);
 			GL11.glDisable(GL11.GL_FOG);
 			this.setupFog(1);
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-			this.renderHand(var1, var11);
+			if(this.mc.showHud) {
+				this.renderHand(renderPartialTick, var11);
+			}
 			if(!this.mc.options.anaglyph) {
 				return;
 			}
@@ -425,21 +445,21 @@
 		}
 	}
 
-	private void renderSnow(float var1) {
+	private void renderSnow(float renderPartialTick) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
 		World var3 = this.mc.theWorld;
 		int var4 = MathHelper.floor_double(var2.posX);
 		int var5 = MathHelper.floor_double(var2.posY);
 		int var6 = MathHelper.floor_double(var2.posZ);
-		Tessellator var7 = Tessellator.instance;
+		Tessellator tessellator7 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_CULL_FACE);
 		GL11.glNormal3f(0.0F, 1.0F, 0.0F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/snow.png"));
-		double var8 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
-		double var10 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
-		double var12 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
+		double var8 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)renderPartialTick;
+		double var10 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)renderPartialTick;
+		double var12 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)renderPartialTick;
 		byte var14 = 5;
 		if(this.mc.options.fancyGraphics) {
 			var14 = 10;
@@ -465,27 +485,27 @@
 				float var20 = 2.0F;
 				if(var18 != var19) {
 					this.random.setSeed((long)(var15 * var15 * 3121 + var15 * 45238971 + var16 * var16 * 418711 + var16 * 13761));
-					float var21 = (float)this.rendererUpdateCount + var1;
-					float var22 = ((float)(this.rendererUpdateCount & 511) + var1) / 512.0F;
+					float var21 = (float)this.rendererUpdateCount + renderPartialTick;
+					float var22 = ((float)(this.rendererUpdateCount & 511) + renderPartialTick) / 512.0F;
 					float var23 = this.random.nextFloat() + var21 * 0.01F * (float)this.random.nextGaussian();
 					float var24 = this.random.nextFloat() + var21 * (float)this.random.nextGaussian() * 0.001F;
 					double var25 = (double)((float)var15 + 0.5F) - var2.posX;
 					double var27 = (double)((float)var16 + 0.5F) - var2.posZ;
 					float var29 = MathHelper.sqrt_double(var25 * var25 + var27 * var27) / (float)var14;
-					var7.startDrawingQuads();
+					tessellator7.startDrawingQuads();
 					float var30 = var3.getBrightness(var15, 128, var16);
 					GL11.glColor4f(var30, var30, var30, (1.0F - var29 * var29) * 0.7F);
-					var7.setTranslationD(-var8 * 1.0D, -var10 * 1.0D, -var12 * 1.0D);
-					var7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.setTranslationD(0.0D, 0.0D, 0.0D);
-					var7.draw();
+					tessellator7.setTranslationD(-var8 * 1.0D, -var10 * 1.0D, -var12 * 1.0D);
+					tessellator7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
+					tessellator7.setTranslationD(0.0D, 0.0D, 0.0D);
+					tessellator7.draw();
 				}
 			}
 		}
@@ -495,9 +515,9 @@
 	}
 
 	public void setupOverlayRendering() {
-		ScaledResolution var1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int var2 = scaledResolution1.getScaledWidth();
+		int var3 = scaledResolution1.getScaledHeight();
 		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
@@ -507,19 +527,19 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 	}
 
-	private void updateFogColor(float var1) {
+	private void updateFogColor(float renderPartialTick) {
 		World var2 = this.mc.theWorld;
 		EntityPlayerSP var3 = this.mc.thePlayer;
 		float var4 = 1.0F / (float)(4 - this.mc.options.renderDistance);
 		var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
-		Vec3D var5 = var2.getSkyColor(var1);
-		float var6 = (float)var5.xCoord;
-		float var7 = (float)var5.yCoord;
-		float var8 = (float)var5.zCoord;
-		Vec3D var9 = var2.getFogColor(var1);
-		this.fogColorRed = (float)var9.xCoord;
-		this.fogColorGreen = (float)var9.yCoord;
-		this.fogColorBlue = (float)var9.zCoord;
+		Vec3D vec3D5 = var2.getSkyColor(renderPartialTick);
+		float var6 = (float)vec3D5.xCoord;
+		float var7 = (float)vec3D5.yCoord;
+		float var8 = (float)vec3D5.zCoord;
+		Vec3D vec3D9 = var2.getFogColor(renderPartialTick);
+		this.fogColorRed = (float)vec3D9.xCoord;
+		this.fogColorGreen = (float)vec3D9.yCoord;
+		this.fogColorBlue = (float)vec3D9.zCoord;
 		this.fogColorRed += (var6 - this.fogColorRed) * var4;
 		this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
 		this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
@@ -533,7 +553,7 @@
 			this.fogColorBlue = 0.0F;
 		}
 
-		float var10 = this.prevFogColor + (this.fogColor - this.prevFogColor) * var1;
+		float var10 = this.prevFogColor + (this.fogColor - this.prevFogColor) * renderPartialTick;
 		this.fogColorRed *= var10;
 		this.fogColorGreen *= var10;
 		this.fogColorBlue *= var10;
@@ -592,7 +612,7 @@
 			}
 
 			if(GLContext.getCapabilities().GL_NV_fog_distance) {
-				GL11.glFogi(NVFogDistance.GL_FOG_DISTANCE_MODE_NV, NVFogDistance.GL_EYE_RADIAL_NV);
+				GL11.glFogi(34138, 34139);
 			}
 		}
 
@@ -600,9 +620,9 @@
 		GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
 	}
 
-	private FloatBuffer setFogColorBuffer(float var1, float var2, float var3, float var4) {
+	private FloatBuffer setFogColorBuffer(float r, float g, float b, float a) {
 		this.fogColorBuffer.clear();
-		this.fogColorBuffer.put(var1).put(var2).put(var3).put(var4);
+		this.fogColorBuffer.put(r).put(g).put(b).put(a);
 		this.fogColorBuffer.flip();
 		return this.fogColorBuffer;
 	}
--- net/minecraft/src/NBTTagList.java
+++ net/minecraft/src/NBTTagList.java
@@ -10,31 +10,31 @@
 	private List tagList = new ArrayList();
 	private byte tagType;
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 		if(this.tagList.size() > 0) {
 			this.tagType = ((NBTBase)this.tagList.get(0)).getType();
 		} else {
 			this.tagType = 1;
 		}
 
-		var1.writeByte(this.tagType);
-		var1.writeInt(this.tagList.size());
+		dataOutput.writeByte(this.tagType);
+		dataOutput.writeInt(this.tagList.size());
 
 		for(int var2 = 0; var2 < this.tagList.size(); ++var2) {
-			((NBTBase)this.tagList.get(var2)).writeTagContents(var1);
+			((NBTBase)this.tagList.get(var2)).writeTagContents(dataOutput);
 		}
 
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.tagType = var1.readByte();
-		int var2 = var1.readInt();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.tagType = dataInput.readByte();
+		int var2 = dataInput.readInt();
 		this.tagList = new ArrayList();
 
 		for(int var3 = 0; var3 < var2; ++var3) {
-			NBTBase var4 = NBTBase.createTagOfType(this.tagType);
-			var4.readTagContents(var1);
-			this.tagList.add(var4);
+			NBTBase nBTBase4 = NBTBase.createTagOfType(this.tagType);
+			nBTBase4.readTagContents(dataInput);
+			this.tagList.add(nBTBase4);
 		}
 
 	}
@@ -47,13 +47,13 @@
 		return "" + this.tagList.size() + " entries of type " + NBTBase.getTagName(this.tagType);
 	}
 
-	public void setTag(NBTBase var1) {
-		this.tagType = var1.getType();
-		this.tagList.add(var1);
+	public void setTag(NBTBase tag) {
+		this.tagType = tag.getType();
+		this.tagList.add(tag);
 	}
 
-	public NBTBase tagAt(int var1) {
-		return (NBTBase)this.tagList.get(var1);
+	public NBTBase tagAt(int index) {
+		return (NBTBase)this.tagList.get(index);
 	}
 
 	public int tagCount() {
--- net/minecraft/src/Packet32EntityLook.java
+++ net/minecraft/src/Packet32EntityLook.java
@@ -9,26 +9,26 @@
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public Packet32EntityLook(int entityID, byte yaw, byte pitch) {
+		super(entityID);
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.rotating = true;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
 		return 6;
-	}
-
-	public Packet32EntityLook(int var1, byte var2, byte var3) {
-		super(var1);
-		this.yaw = var2;
-		this.pitch = var3;
-		this.rotating = true;
 	}
 }
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -1,17 +1,51 @@
 package net.minecraft.src;
 
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockOre extends Block {
-	public BlockOre(int var1, int var2) {
-		super(var1, var2, Material.rock);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
-	}
-
-	public int quantityDropped(Random var1) {
-		return 1;
+	private final int altTex;
+	private final int dropId;
+	private final int dropExtra;
+
+	public BlockOre(int id, int tex, int altTex) {
+		this(id, tex, altTex, id, 0);
+	}
+
+	public BlockOre(int id, int tex, int altTex, int dropId) {
+		this(id, tex, altTex, dropId, 0);
+	}
+
+	public BlockOre(int id, int tex, int altTex, int dropId, int dropExtra) {
+		super(id, tex, Material.rock);
+		this.altTex = altTex;
+		this.dropId = dropId;
+		this.dropExtra = dropExtra;
+	}
+
+	public int idDropped(int metadata, Random rand) {
+		return this.dropId;
+	}
+
+	public int quantityDropped(Random rand) {
+		return rand.nextInt(this.dropExtra + 1) + 1;
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return this.dropId == this.blockID ? metadata : 0;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata == 0 ? blockIndexInTexture : altTex + (metadata - 1) * 16;
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		if (version < Chunk.CHUNK_VERSION_0_2 && metadata == 1) {
+			chunk.setBlockMetadata(x, y, z, 2);
+		}
 	}
 }
--- net/minecraft/src/KeyBinding.java
+++ net/minecraft/src/KeyBinding.java
@@ -4,8 +4,8 @@
 	public String keyDescription;
 	public int keyCode;
 
-	public KeyBinding(String var1, int var2) {
-		this.keyDescription = var1;
-		this.keyCode = var2;
+	public KeyBinding(String name, int key) {
+		this.keyDescription = name;
+		this.keyCode = key;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockRefabricator.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class BlockRefabricator extends BlockContainer {
+	public BlockRefabricator(int id) {
+		super(id, Material.iron);
+		this.blockIndexInTexture = textureXY(8, 1);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? textureXY(15, 6) : side == 0 ? textureXY(8, 3) : textureXY(15, 7);
+	}
+
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityRefabricator tileEntityRefabricator = (TileEntityRefabricator)worldObj.getBlockTileEntity(x, y, z);
+		entityPlayer.displayGUIRefabricator(tileEntityRefabricator);
+		return true;
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityRefabricator();
+	}
+}
--- net/minecraft/src/PlayerControllerCreative.java
+++ net/minecraft/src/PlayerControllerCreative.java
@@ -8,9 +8,9 @@
 		this.isInTestMode = true;
 	}
 
-	public void onRespawn(EntityPlayer var1) {
+	public void onRespawn(EntityPlayer entityPlayer) {
 		for(int var2 = 0; var2 < 9; ++var2) {
-			if(var1.inventory.mainInventory[var2] == null) {
+			if(entityPlayer.inventory.mainInventory[var2] == null) {
 				this.mc.thePlayer.inventory.mainInventory[var2] = new ItemStack(((Block)Session.registeredBlocksList.get(var2)).blockID);
 			} else {
 				this.mc.thePlayer.inventory.mainInventory[var2].stackSize = 1;
@@ -23,8 +23,8 @@
 		return false;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/BlockLever.java
+++ net/minecraft/src/BlockLever.java
@@ -1,11 +1,11 @@
 package net.minecraft.src;
 
 public class BlockLever extends Block {
-	protected BlockLever(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockLever(int id, int tex) {
+		super(id, tex, Material.circuits);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -21,98 +21,98 @@
 		return 12;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
 	}
 
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void onBlockPlaced(World worldObj, int x, int y, int z, int metadata) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		int var7 = var6 & 8;
 		var6 &= 7;
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = 5 + var1.rand.nextInt(2);
+		if(metadata == 1 && worldObj.isBlockNormalCube(x, y - 1, z)) {
+			var6 = 5 + worldObj.rand.nextInt(2);
 		}
 
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+		if(metadata == 2 && worldObj.isBlockNormalCube(x, y, z + 1)) {
 			var6 = 4;
 		}
 
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+		if(metadata == 3 && worldObj.isBlockNormalCube(x, y, z - 1)) {
 			var6 = 3;
 		}
 
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+		if(metadata == 4 && worldObj.isBlockNormalCube(x + 1, y, z)) {
 			var6 = 2;
 		}
 
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+		if(metadata == 5 && worldObj.isBlockNormalCube(x - 1, y, z)) {
 			var6 = 1;
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var6 + var7);
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5 + var1.rand.nextInt(2));
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(worldObj.isBlockNormalCube(x - 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(worldObj.isBlockNormalCube(x + 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(worldObj.isBlockNormalCube(x, y, z - 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(worldObj.isBlockNormalCube(x, y, z + 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(worldObj.isBlockNormalCube(x, y - 1, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 5 + worldObj.rand.nextInt(2));
 		}
 
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
+		this.checkIfAttachedToBlock(worldObj, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(this.checkIfAttachedToBlock(worldObj, x, y, z)) {
+			int var6 = worldObj.getBlockMetadata(x, y, z) & 7;
 			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
+			if(!worldObj.isBlockNormalCube(x - 1, y, z) && var6 == 1) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x + 1, y, z) && var6 == 2) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z - 1) && var6 == 3) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z + 1) && var6 == 4) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y - 1, z) && var6 == 5) {
 				var7 = true;
 			}
 
 			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	private boolean checkIfAttachedToBlock(World worldObj, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-		float var6 = 3.0F / 16.0F;
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int var5 = blockAccess.getBlockMetadata(x, y, z) & 7;
+		float var6 = 0.1875F;
 		if(var5 == 1) {
 			this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
 		} else if(var5 == 2) {
@@ -128,65 +128,65 @@
 
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
+	public void onBlockClicked(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(worldObj, x, y, z, entityPlayer);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		int var7 = var6 & 7;
 		int var8 = 8 - (var6 & 8);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
-		var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var7 + var8);
+		worldObj.markBlocksDirty(x, y, z, x, y, z);
+		worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
+		worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 		if(var7 == 1) {
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
 		} else if(var7 == 2) {
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
 		} else if(var7 == 3) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
 		} else if(var7 == 4) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 		} else {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 		}
 
 		return true;
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
 		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 			int var6 = var5 & 7;
 			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
 			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
 			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
 			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		super.onBlockRemoval(worldObj, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if((var6 & 8) == 0) {
 			return false;
 		} else {
 			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+			return var7 == 5 && side == 1 ? true : (var7 == 4 && side == 2 ? true : (var7 == 3 && side == 3 ? true : (var7 == 2 && side == 4 ? true : var7 == 1 && side == 5)));
 		}
 	}
 
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -18,11 +18,11 @@
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityArrow(World var1, EntityLiving var2) {
-		super(var1);
-		this.shootingEntity = var2;
+	public EntityArrow(World world, EntityLiving entityLiving) {
+		super(world);
+		this.shootingEntity = entityLiving;
 		this.setSize(0.5F, 0.5F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+		this.setLocationAndAngles(entityLiving.posX, entityLiving.posY, entityLiving.posZ, entityLiving.rotationYaw, entityLiving.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.posY -= (double)0.1F;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -34,23 +34,23 @@
 		this.setArrowHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
 	}
 
-	public void setArrowHeading(double var1, double var3, double var5, float var7, float var8) {
-		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+	public void setArrowHeading(double moveX, double moveY, double moveZ, float arrowSpeed, float arrowSpread) {
+		float var9 = MathHelper.sqrt_double(moveX * moveX + moveY * moveY + moveZ * moveZ);
+		moveX /= (double)var9;
+		moveY /= (double)var9;
+		moveZ /= (double)var9;
+		moveX += this.rand.nextGaussian() * (double)0.0075F * (double)arrowSpread;
+		moveY += this.rand.nextGaussian() * (double)0.0075F * (double)arrowSpread;
+		moveZ += this.rand.nextGaussian() * (double)0.0075F * (double)arrowSpread;
+		moveX *= (double)arrowSpeed;
+		moveY *= (double)arrowSpeed;
+		moveZ *= (double)arrowSpeed;
+		this.motionX = moveX;
+		this.motionY = moveY;
+		this.motionZ = moveZ;
+		float var10 = MathHelper.sqrt_double(moveX * moveX + moveZ * moveZ);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(moveX, moveZ) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(moveY, (double)var10) * 180.0D / (double)(float)Math.PI);
 		this.ticksInGround = 0;
 	}
 
@@ -81,28 +81,28 @@
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
 		}
 
 		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
 		double var6 = 0.0D;
 
 		float var10;
-		for(int var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
+		for(int var8 = 0; var8 < list5.size(); ++var8) {
+			Entity var9 = (Entity)list5.get(var8);
 			if(var9.canBeCollidedWith() && (var9 != this.shootingEntity || this.ticksInAir >= 5)) {
 				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
+				AxisAlignedBB axisAlignedBB11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double var13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
 					if(var13 < var6 || var6 == 0.0D) {
 						var4 = var9;
 						var6 = var13;
@@ -112,31 +112,31 @@
 		}
 
 		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+			movingObjectPosition3 = new MovingObjectPosition(var4);
 		}
 
 		float var16;
-		if(var3 != null) {
-			if(var3.entityHit != null) {
-				if(var3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null) {
+				if(movingObjectPosition3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
 					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 					this.setEntityDead();
 				} else {
-					this.motionX *= (double)-0.1F;
-					this.motionY *= (double)-0.1F;
-					this.motionZ *= (double)-0.1F;
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
 					this.rotationYaw += 180.0F;
 					this.prevRotationYaw += 180.0F;
 					this.ticksInAir = 0;
 				}
 			} else {
-				this.xTile = var3.blockX;
-				this.yTile = var3.blockY;
-				this.zTile = var3.blockZ;
+				this.xTile = movingObjectPosition3.blockX;
+				this.yTile = movingObjectPosition3.blockY;
+				this.zTile = movingObjectPosition3.blockZ;
 				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-				this.motionX = (double)((float)(var3.hitVec.xCoord - this.posX));
-				this.motionY = (double)((float)(var3.hitVec.yCoord - this.posY));
-				this.motionZ = (double)((float)(var3.hitVec.zCoord - this.posZ));
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
 				var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
 				this.posX -= this.motionX / (double)var16 * (double)0.05F;
 				this.posY -= this.motionY / (double)var16 * (double)0.05F;
@@ -151,9 +151,9 @@
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
 		var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
 		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
@@ -188,28 +188,28 @@
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.arrowShake);
-		var1.setByte("inGround", (byte)(this.inData ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.arrowShake = var1.getByte("shake") & 255;
-		this.inData = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inData && this.shootingEntity == var1 && this.arrowShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setShort("xTile", (short)this.xTile);
+		compoundTag.setShort("yTile", (short)this.yTile);
+		compoundTag.setShort("zTile", (short)this.zTile);
+		compoundTag.setByte("inTile", (byte)this.inTile);
+		compoundTag.setByte("shake", (byte)this.arrowShake);
+		compoundTag.setByte("inGround", (byte)(this.inData ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.xTile = compoundTag.getShort("xTile");
+		this.yTile = compoundTag.getShort("yTile");
+		this.zTile = compoundTag.getShort("zTile");
+		this.inTile = compoundTag.getByte("inTile") & 255;
+		this.arrowShake = compoundTag.getByte("shake") & 255;
+		this.inData = compoundTag.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inData && this.shootingEntity == entityPlayer && this.arrowShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+			entityPlayer.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemStaff.java
@@ -1,0 +1,42 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemStaff extends ItemMagic {
+	public final int staffDamage;
+	public final int burn;
+	public final float pierce;
+
+	public ItemStaff(int var1, float var2, int var3, int maxDmg) {
+		this(var1, var2, var3, maxDmg, 0, 1.0F);
+	}
+
+	public ItemStaff(int var1, float var2, int var3, int maxDmg, int burn, float pierce) {
+		super(var1, var2);
+		this.maxStackSize = 1;
+		this.maxDamage = maxDmg;
+		this.staffDamage = var3;
+		this.burn = burn;
+		this.pierce = pierce;
+		this.bFull3D = true;
+	}
+
+	public ItemStack onMagicItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		var2.playSoundAtEntity(var3, "diverge.wand", 1.0F, rand.nextFloat() * 0.2F + 0.9F);
+		var2.spawnEntityInWorld(new EntitySnowball(var2, var3, this.iconIndex + 16, this.staffDamage, this.burn, this.pierce));
+		var1.damageItem(1);
+
+		return var1;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				this.staffDamage + " attack damage",
+				ItemTooltip.INFO_COL,
+				"Uses " + this.useMana + " points of mana",
+				ItemTooltip.INFO_COL,
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
+	}
+}
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -3,51 +3,59 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import java.util.ArrayList;
+import java.util.Optional;
+
 public class GuiInventory extends GuiContainer {
 	private CraftingInventoryPlayerCB craftingInventory;
 	private float xSize_lo;
 	private float ySize_lo;
+	private int mouseX;
+	private int mouseY;
 
-	public GuiInventory(IInventory var1, ItemStack[] var2) {
+	public GuiInventory(IInventory iInventory1, ItemStack[] var2) {
 		this.allowUserInput = true;
 		this.craftingInventory = new CraftingInventoryPlayerCB(var2);
-		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 144, 36));
+		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 144, 27));
 
 		int var3;
 		int var4;
 		for(var3 = 0; var3 < 2; ++var3) {
 			for(var4 = 0; var4 < 2; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
+				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 17 + var3 * 18));
 			}
 		}
 
 		for(var3 = 0; var3 < 4; ++var3) {
-			this.inventorySlots.add(new SlotArmor(this, this, var1, var1.getSizeInventory() - 1 - var3, 8, 8 + var3 * 18, var3));
+			this.inventorySlots.add(new SlotArmor(this, this, iInventory1, iInventory1.getSizeInventory() - 1 - var3, 8, 8 + var3 * 18, var3));
 		}
+		this.inventorySlots.add(new SlotArmor(this, this, iInventory1, iInventory1.getSizeInventory() - 5, 80, 62, 4));
 
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 9; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+				this.inventorySlots.add(new SlotInventory(this, iInventory1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
 			}
 		}
 
 		for(var3 = 0; var3 < 9; ++var3) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var3, 8 + var3 * 18, 142));
+			this.inventorySlots.add(new SlotInventory(this, iInventory1, var3, 8 + var3 * 18, 142));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
-	}
-
-	public void drawScreen(int var1, int var2, float var3) {
-		super.drawScreen(var1, var2, var3);
-		this.xSize_lo = (float)var1;
-		this.ySize_lo = (float)var2;
-	}
-
-	protected void drawGuiContainerBackgroundLayer(float var1) {
+		this.fontRenderer.drawString("Crafting", 86, 7, 4210752);
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+		this.xSize_lo = (float)mouseX;
+		this.ySize_lo = (float)mouseY;
+		this.mouseX = mouseX;
+		this.mouseY = mouseY;
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
 		int var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
@@ -81,5 +89,15 @@
 		GL11.glPopMatrix();
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+	}
+
+	protected void keyTyped(char c1, int var2) {
+		super.keyTyped(c1, var2);
+		if (var2 == this.mc.options.keyBindRecipeGuide.keyCode) {
+			Optional<SlotInventory> hoverSlot = ((ArrayList<SlotInventory>)this.inventorySlots).stream()
+					.filter(slot -> (slot).getIsMouseOverSlot(mouseX, mouseY))
+					.findFirst();
+			hoverSlot.ifPresent(slotInventory -> mc.thePlayer.displayGUIRecipeGuide(slotInventory.getStack()));
+		}
 	}
 }
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -1,6 +1,10 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.WorldGenMahoganyTrees;
+import io.github.bluestaggo.mcdiverge.WorldGenSpruceTrees;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockSapling extends BlockFlower {
 	protected BlockSapling(int var1, int var2) {
@@ -9,24 +13,59 @@
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(5) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 15) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		super.updateTick(worldObj, x, y, z, rand);
+		if(worldObj.getBlockLightValue(x, y + 1, z) >= 9 && rand.nextInt(30) == 0) {
+			int type = worldObj.getBlockMetadata(x, y, z);
+
+			if ((type & 8) == 0) {
+				worldObj.setBlockMetadataWithNotify(x, y, z, type | 8);
 			} else {
-				var1.setBlock(var2, var3, var4, 0);
-				Object var7 = new WorldGenTrees();
-				if(var5.nextInt(10) == 0) {
-					var7 = new WorldGenBigTree();
+				type &= 3;
+				worldObj.setBlock(x, y, z, 0);
+				WorldGenerator gen = getTreeGenerator(type);
+				if(rand.nextInt(10) == 0) {
+					gen = getBigTreeGenerator(type);
 				}
 
-				if(!((WorldGenerator)var7).generate(var1, var5, var2, var3, var4)) {
-					var1.setBlock(var2, var3, var4, this.blockID);
+				if(!gen.generate(worldObj, rand, x, y, z)) {
+					worldObj.setBlockAndMetadata(x, y, z, this.blockID, type);
 				}
 			}
 		}
-
+	}
+
+	private static WorldGenerator getTreeGenerator(int metadata) {
+		switch (metadata) {
+			default: return new WorldGenTrees();
+			case 1: return new WorldGenSpruceTrees();
+			case 2: return new WorldGenTrees().withAltForm(2, 10).withScale(2, 2, 2);
+			case 3: return new WorldGenMahoganyTrees();
+		}
+	}
+
+	private static WorldGenerator getBigTreeGenerator(int metadata) {
+		switch (metadata) {
+			default: return new WorldGenBigTree();
+			case 1: return new WorldGenSpruceTrees().makeBig().withScale(3, 2, 2);
+			case 2: return new WorldGenBigTree().withAltForm(2, 10);
+			case 3: return new WorldGenMahoganyTrees().withScale(5, 8, 6);
+		}
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return (metadata % 8) == 0 ? this.blockIndexInTexture : textureXY(11, 8 + (metadata % 8));
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata % 8;
+	}
+
+	public int tickRate() {
+		return 1;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/Packet3Chat.java
+++ net/minecraft/src/Packet3Chat.java
@@ -10,20 +10,20 @@
 	public Packet3Chat() {
 	}
 
-	public Packet3Chat(String var1) {
-		this.message = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.message = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.message);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleChat(this);
+	public Packet3Chat(String msg) {
+		this.message = msg;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.message = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.message);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleChat(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/WorldGenDungeons.java
+++ net/minecraft/src/WorldGenDungeons.java
@@ -3,47 +3,92 @@
 import java.util.Random;
 
 public class WorldGenDungeons extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		byte var6 = 3;
-		int var7 = var2.nextInt(2) + 2;
-		int var8 = var2.nextInt(2) + 2;
+	private static final int[] floorMaterials = {
+			Block.cobblestone.blockID,
+			Block.cobblestoneMossy.blockID,
+			Block.stoneBricks.blockID,
+			Block.polishedStone.blockID
+	};
+	private static final int[] wallMaterials = {
+			Block.cobblestone.blockID,
+			Block.stoneBricks.blockID
+	};
+	private boolean pickedCharm = false;
+
+	public boolean generate(World var1, Random var2, int spawnX, int spawnY, int spawnZ) {
+		this.pickedCharm = false;
+
+		// Variables
+		byte height = 3;
+		int width = var2.nextInt(4) + 2;
+		int depth = var2.nextInt(4) + 2;
 		int var9 = 0;
 
-		int var10;
-		int var11;
-		int var12;
-		for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-			for(var11 = var4 - 1; var11 <= var4 + var6 + 1; ++var11) {
-				for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-					Material var13 = var1.getBlockMaterial(var10, var11, var12);
-					if(var11 == var4 - 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if(var11 == var4 + var6 + 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if((var10 == var3 - var7 - 1 || var10 == var3 + var7 + 1 || var12 == var5 - var8 - 1 || var12 == var5 + var8 + 1) && var11 == var4 && var1.getBlockId(var10, var11, var12) == 0 && var1.getBlockId(var10, var11 + 1, var12) == 0) {
-						++var9;
+		int x;
+		int y;
+		int z;
+
+		int floor = floorMaterials[var2.nextInt(floorMaterials.length)];
+		int wall = wallMaterials[var2.nextInt(wallMaterials.length)];
+		int metadata = -1;
+
+		// Check for space
+		for(x = spawnX - width - 1; x <= spawnX + width + 1; ++x) {
+			for(y = spawnY - 1; y <= spawnY + height + 1; ++y) {
+				for(z = spawnZ - depth - 1; z <= spawnZ + depth + 1; ++z) {
+					Material material13 = var1.getBlockMaterial(x, y, z);
+					if(y == spawnY - 1 && !material13.isSolid()) {
+//						return false;
+					}
+
+					if(y == spawnY + height + 1 && !material13.isSolid()) {
+//						return false;
+					}
+
+					if(
+						(x == spawnX - width - 1
+						 || x == spawnX + width + 1
+						 || z == spawnZ - depth - 1
+						 || z == spawnZ + depth + 1)
+						&& y == spawnY && var1.getBlockId(x, y, z) == 0
+						&& var1.getBlockId(x, y + 1, z) == 0) {
+						++var9; // Suitable entrance found
+					}
+
+					if(var1.getBlockId(x, y, z) == Block.stone.blockID && metadata == -1) {
+						metadata = var1.getBlockMetadata(x, y, z);
 					}
 				}
 			}
+		}
+
+		if (metadata == -1) {
+			metadata = 0;
 		}
 
 		if(var9 >= 1 && var9 <= 5) {
-			for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-				for(var11 = var4 + var6; var11 >= var4 - 1; --var11) {
-					for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-						if(var10 != var3 - var7 - 1 && var11 != var4 - 1 && var12 != var5 - var8 - 1 && var10 != var3 + var7 + 1 && var11 != var4 + var6 + 1 && var12 != var5 + var8 + 1) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var11 >= 0 && !var1.getBlockMaterial(var10, var11 - 1, var12).isSolid()) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var1.getBlockMaterial(var10, var11, var12).isSolid()) {
-							if(var11 == var4 - 1 && var2.nextInt(4) != 0) {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestoneMossy.blockID);
+			// Walls + floor
+			for(x = spawnX - width - 1; x <= spawnX + width + 1; ++x) {
+				for(y = spawnY + height; y >= spawnY - 1; --y) {
+					for(z = spawnZ - depth - 1; z <= spawnZ + depth + 1; ++z) {
+						if(x != spawnX - width - 1
+						   && y != spawnY - 1
+						   && z != spawnZ - depth - 1
+						   && x != spawnX + width + 1
+						   && y != spawnY + height + 1
+						   && z != spawnZ + depth + 1) {
+							var1.setBlockWithNotify(x, y, z, 0);
+						} else if(y >= 0 && !var1.getBlockMaterial(x, y - 1, z).isSolid()) {
+							var1.setBlockWithNotify(x, y, z, 0);
+						} else if(var1.getBlockMaterial(x, y, z).isSolid()
+								  || y == spawnY + height + 1
+								  || y == spawnY - 1) {
+							if(y == spawnY - 1 || y == spawnY + height) {
+								var1.setBlockWithNotify(x, y, z, floor);
+								var1.setBlockMetadataWithNotify(x, y, z, metadata);
 							} else {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestone.blockID);
+								var1.setBlockWithNotify(x, y, z, wall);
+								var1.setBlockMetadataWithNotify(x, y, z, metadata);
 							}
 						}
 					}
@@ -51,41 +96,41 @@
 			}
 
 			label110:
-			for(var10 = 0; var10 < 2; ++var10) {
-				for(var11 = 0; var11 < 3; ++var11) {
-					var12 = var3 + var2.nextInt(var7 * 2 + 1) - var7;
-					int var14 = var5 + var2.nextInt(var8 * 2 + 1) - var8;
-					if(var1.getBlockId(var12, var4, var14) == 0) {
+			for(x = 0; x < 4; ++x) {
+				for(y = 0; y < 4; ++y) {
+					z = spawnX + var2.nextInt(width * 2 + 1) - width;
+					int var14 = spawnZ + var2.nextInt(depth * 2 + 1) - depth;
+					if(var1.getBlockId(z, spawnY, var14) == 0) {
 						int var15 = 0;
-						if(var1.getBlockMaterial(var12 - 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12 + 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 - 1).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 + 1).isSolid()) {
+						if(var1.getBlockMaterial(z - 1, spawnY, var14).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z + 1, spawnY, var14).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z, spawnY, var14 - 1).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z, spawnY, var14 + 1).isSolid()) {
 							++var15;
 						}
 
 						if(var15 == 1) {
-							var1.setBlockWithNotify(var12, var4, var14, Block.chest.blockID);
-							TileEntityChest var16 = (TileEntityChest)var1.getBlockTileEntity(var12, var4, var14);
+							var1.setBlockWithNotify(z, spawnY, var14, Block.chest.blockID);
+							TileEntityChest tileEntityChest16 = (TileEntityChest)var1.getBlockTileEntity(z, spawnY, var14);
 							int var17 = 0;
 
 							while(true) {
-								if(var17 >= 8) {
+								if(var17 >= 16) {
 									continue label110;
 								}
 
 								ItemStack var18 = this.pickCheckLootItem(var2);
 								if(var18 != null) {
-									var16.setInventorySlotContents(var2.nextInt(var16.getSizeInventory()), var18);
+									tileEntityChest16.setInventorySlotContents(var2.nextInt(tileEntityChest16.getSizeInventory()), var18);
 								}
 
 								++var17;
@@ -95,22 +140,69 @@
 				}
 			}
 
-			var1.setBlockWithNotify(var3, var4, var5, Block.mobSpawner.blockID);
-			TileEntityMobSpawner var19 = (TileEntityMobSpawner)var1.getBlockTileEntity(var3, var4, var5);
-			var19.mobID = this.pickMobSpawner(var2);
+			int spawners = var2.nextInt(2) + 1;
+			int spx;
+			int spz;
+			for (int spi = 0; spi < spawners; spi++) {
+				do {
+					spx = spawnX + var2.nextInt(width * 2 + 1) - width;
+					spz = spawnZ + var2.nextInt(depth * 2 + 1) - depth;
+				} while (var1.getBlockId(spx, spawnY, spz) == Block.chest.blockID);
+				var1.setBlockWithNotify(spx, spawnY, spz, Block.mobSpawner.blockID);
+				TileEntityMobSpawner tileEntityMobSpawner19 = (TileEntityMobSpawner)var1.getBlockTileEntity(spx, spawnY, spz);
+				tileEntityMobSpawner19.mobID = this.pickMobSpawner(var2);
+			}
 			return true;
 		} else {
 			return false;
 		}
 	}
 
+	private static final Item[] charms = new Item[] {
+			Item.wardingRing,
+			Item.repairKit,
+			Item.slimeShoes
+	};
+
 	private ItemStack pickCheckLootItem(Random var1) {
-		int var2 = var1.nextInt(11);
-		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(2)]) : null)))))))));
+		int var2 = var1.nextInt(13);
+		switch (var2) {
+			case 0: return new ItemStack(Item.silk);
+			case 1: return new ItemStack(Item.ingotIron, var1.nextInt(3) + 1);
+			case 2: return new ItemStack(Item.bread);
+			case 3: return new ItemStack(Item.wheat, var1.nextInt(3) + 1);
+			case 4: return new ItemStack(Item.gunpowder, var1.nextInt(3) + 1);
+			case 5: return new ItemStack(Item.arrow, var1.nextInt(3) + 1);
+		}
+		if (var2 == 6 && var1.nextInt(5) == 0) {
+			return new ItemStack(Item.bucketEmpty);
+		}
+		if (var2 == 7 && var1.nextInt(100) == 0) {
+			return new ItemStack(Item.appleGold);
+		}
+		if (var2 == 8 && var1.nextInt(2) == 0) {
+			return new ItemStack(Item.redstone, var1.nextInt(3) + 1);
+		}
+		if (var2 == 9 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(6)]);
+		}
+		if (var2 == 10 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.diamond, var1.nextInt(3) + 1);
+		}
+		if (var2 == 11 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.saddle);
+		}
+		if (var2 == 12 && !this.pickedCharm && var1.nextInt(5) == 0) {
+			return new ItemStack(charms[var1.nextInt(charms.length)]);
+		}
+		return null;
 	}
 
 	private String pickMobSpawner(Random var1) {
-		int var2 = var1.nextInt(4);
-		return var2 == 0 ? "Skeleton" : (var2 == 1 ? "Zombie" : (var2 == 2 ? "Zombie" : (var2 == 3 ? "Spider" : "")));
+		int var2 = var1.nextInt(5);
+		return var2 == 0 ? "Skeleton"
+				: (var2 == 1 || var2 == 2 ? "Zombie"
+				: (var2 == 3 ? "Spider"
+				: (var2 == 4 ? "Phantom" : "")));
 	}
 }
--- net/minecraft/src/GLAllocation.java
+++ net/minecraft/src/GLAllocation.java
@@ -6,6 +6,7 @@
 import java.nio.IntBuffer;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 
 public class GLAllocation {
@@ -14,16 +15,16 @@
 
 	public static synchronized int generateDisplayLists(int var0) {
 		int var1 = GL11.glGenLists(var0);
-		displayLists.add(Integer.valueOf(var1));
-		displayLists.add(Integer.valueOf(var0));
+		displayLists.add(var1);
+		displayLists.add(var0);
 		return var1;
 	}
 
-	public static synchronized void generateTextureNames(IntBuffer var0) {
-		GL11.glGenTextures(var0);
+	public static synchronized void generateTextureNames(IntBuffer intBuffer0) {
+		GL11.glGenTextures(intBuffer0);
 
-		for(int var1 = var0.position(); var1 < var0.limit(); ++var1) {
-			textureNames.add(Integer.valueOf(var0.get(var1)));
+		for(int var1 = intBuffer0.position(); var1 < intBuffer0.limit(); ++var1) {
+			textureNames.add(intBuffer0.get(var1));
 		}
 
 	}
@@ -33,23 +34,23 @@
 			GL11.glDeleteLists(((Integer)displayLists.get(var0)).intValue(), ((Integer)displayLists.get(var0 + 1)).intValue());
 		}
 
-		IntBuffer var2 = createDirectIntBuffer(textureNames.size());
-		var2.flip();
-		GL11.glDeleteTextures(var2);
+		IntBuffer intBuffer2 = createDirectIntBuffer(textureNames.size());
+		intBuffer2.flip();
+		GL11.glDeleteTextures(intBuffer2);
 
 		for(int var1 = 0; var1 < textureNames.size(); ++var1) {
-			var2.put(((Integer)textureNames.get(var1)).intValue());
+			intBuffer2.put(((Integer)textureNames.get(var1)).intValue());
 		}
 
-		var2.flip();
-		GL11.glDeleteTextures(var2);
+		intBuffer2.flip();
+		GL11.glDeleteTextures(intBuffer2);
 		displayLists.clear();
 		textureNames.clear();
 	}
 
 	public static synchronized ByteBuffer createDirectByteBuffer(int var0) {
-		ByteBuffer var1 = ByteBuffer.allocateDirect(var0).order(ByteOrder.nativeOrder());
-		return var1;
+		ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(var0).order(ByteOrder.nativeOrder());
+		return byteBuffer1;
 	}
 
 	public static IntBuffer createDirectIntBuffer(int var0) {
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,46 +1,77 @@
 package net.minecraft.src;
 
 import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.GuiCredits;
+import io.github.bluestaggo.mcdiverge.WorldType;
+import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
 public class GuiMainMenu extends GuiScreen {
 	private static final Random rand = new Random();
-	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "};
+	private static final Block[] titleBlocks = {
+			Block.stone,
+			Block.cobblestone,
+			Block.bedrock,
+			Block.wood,
+			Block.planks,
+			Block.obsidian,
+			Block.cobblestoneMossy,
+			Block.dirt,
+			Block.gravel,
+			Block.blockClay
+	};
+	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***",
+											" ** ** * **  * *   *   * * * * *    * ",
+											" * * * * * * * **  *   **  *** **   * ",
+											" *   * * *  ** *   *   * * * * *    * ",
+											" *   * * *   * *** *** * * * * *    * "};
 	private LogoEffectRandomizer[][] logoEffects;
-	private float updateCounter = 0.0F;
 	private String splashString = "missingno";
+	private Block drawBlock;
 
 	public GuiMainMenu() {
+		if (rand.nextDouble() <= 0.0001F) {
+			logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***",
+										   " ** ** * **  * *   *   * * * * *    * ",
+										   " * * * * * * * *   *** **  *** **   * ",
+										   " *   * * *  ** *   *   * * * * *    * ",
+										   " *   * * *   * *** *** * * * * *    * "};
+		}
+
 		try {
-			ArrayList var1 = new ArrayList();
-			BufferedReader var2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")));
+			ArrayList arrayList1 = new ArrayList();
+			BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")));
 			String var3 = "";
 
-			while(true) {
-				var3 = var2.readLine();
-				if(var3 == null) {
-					this.splashString = (String)var1.get(rand.nextInt(var1.size()));
-					break;
-				}
-
+			while((var3 = bufferedReader2.readLine()) != null) {
 				var3 = var3.trim();
 				if(var3.length() > 0) {
-					var1.add(var3);
+					arrayList1.add(var3);
 				}
 			}
-		} catch (Exception var4) {
+
+			this.splashString = (String)arrayList1.get(rand.nextInt(arrayList1.size()));
+			this.drawBlock = titleBlocks[rand.nextInt(titleBlocks.length)];
+		} catch (Exception exception4) {
 		}
 
 	}
 
 	public void updateScreen() {
-		++this.updateCounter;
+		this.mc.sndManager.tickMusic();
+		this.mc.sndManager.playRandomTitleMusicIfReady();
+
 		if(this.logoEffects != null) {
 			for(int var1 = 0; var1 < this.logoEffects.length; ++var1) {
 				for(int var2 = 0; var2 < this.logoEffects[var1].length; ++var2) {
@@ -51,78 +82,109 @@
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
-		Calendar var1 = Calendar.getInstance();
-		var1.setTime(new Date());
-		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
-			this.splashString = "Happy birthday, ez!";
-		} else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
-			this.splashString = "Happy birthday, Notch!";
-		} else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
-			this.splashString = "Merry X-mas!";
-		} else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
-			this.splashString = "Happy new year!";
+		this.mc.sndManager.stopBackgroundMusic();
+
+		if(rand.nextInt(2) == 0) {
+			Calendar calendar1 = Calendar.getInstance();
+			calendar1.setTime(new Date());
+
+			if(calendar1.get(Calendar.MONTH) == Calendar.NOVEMBER && calendar1.get(Calendar.DATE) == 9) {
+				this.splashString = "Happy birthday, ez!";
+			} else if(calendar1.get(Calendar.MONTH) == Calendar.JUNE && calendar1.get(Calendar.DATE) == 1) {
+				this.splashString = "Happy birthday, Notch!";
+			} else if(calendar1.get(Calendar.MONTH) == Calendar.DECEMBER && (calendar1.get(Calendar.DATE) == 24 || calendar1.get(Calendar.DATE) == 25)) {
+				this.splashString = "Merry X-mas!";
+			} else if(calendar1.get(Calendar.MONTH) == Calendar.JANUARY && calendar1.get(Calendar.DATE) == 1) {
+				this.splashString = "Happy new year!";
+			} else if(calendar1.get(Calendar.MONTH) == Calendar.MAY && calendar1.get(Calendar.DATE) == 17) {
+				this.splashString = "Happy birthday, Minecraft!";
+			}
 		}
 
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Singleplayer"));
 		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer"));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Play tutorial level"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Options..."));
-		((GuiButton)this.controlList.get(2)).enabled = false;
-		if(this.mc.session == null) {
+		this.controlList.add(new GuiButton(3, 10, this.height - 30, 60, 20, "Credits"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 132, "Options..."));
+		if (this.mc.options.creativeDebug) {
+			this.controlList.add(new GuiButton(4, 10, this.height - 54, 60, 20, "Biome map"));
+		}
+		if (this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
 
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
-		}
-
-		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiSelectWorld(this));
-		}
-
-		if(var1.id == 2) {
-			this.mc.displayGuiScreen(new GuiMultiplayer(this));
-		}
-
-	}
-
-	public void drawScreen(int var1, int var2, float var3) {
+		File file3 = Minecraft.getMinecraftDir();
+		World.deleteWorld(file3, "World-1");
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		switch (button.id) {
+			case 0:
+				this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
+				break;
+
+			case 1:
+				this.mc.displayGuiScreen(new GuiSelectWorld(this));
+				break;
+
+			case 2:
+				this.mc.displayGuiScreen(new GuiMultiplayer(this));
+				break;
+
+			case 3:
+				this.mc.displayGuiScreen(new GuiCredits(this));
+				break;
+
+			case 4:
+				try {
+					Biome.generateBiomeMap();
+					Biome.generateWorldBiomeMap();
+				} catch (IOException e) {
+					// Don't care
+				}
+				break;
+		}
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		Tessellator var4 = Tessellator.instance;
-		this.drawLogo(var3);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
+		this.drawString(this.fontRenderer, Minecraft.version, 2, 2, 0xFF7F7F7F);
+		Tessellator tessellator4 = Tessellator.instance;
+		this.drawLogo(renderPartialTick);
+//		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
-		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
-		GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-		float var5 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-		var5 = var5 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
-		GL11.glScalef(var5, var5, var5);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		GL11.glPushMatrix();
+		GL11.glScalef(3.0F, 3.0F, 3.0F);
+		this.drawCenteredString(this.fontRenderer, "DIVERGE", this.width / 2 / 3, 80 / 3, 0xFF00FFFF);
+		GL11.glPopMatrix();
+		GL11.glPushMatrix();
+		GL11.glTranslatef((float)(this.width / 2), (float)(this.height / 4 + 124), 0.0F);
+		float var5 = MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F);
+		float var6 = (1.8F - MathHelper.abs(var5) * 0.1F) * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
+		float var7 = var5 * 2.5F;
+		GL11.glScalef(var6, var6, var6);
+		GL11.glRotatef(var7, 0.0F, 0.0F, 1.0F);
 		this.drawCenteredString(this.fontRenderer, this.splashString, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		String var6 = "Copyright Mojang Specifications. Do not distribute.";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
-		long var7 = Runtime.getRuntime().maxMemory();
+		String var6x = "Copyright Mojang Specifications. Do not distribute.";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, this.height - 10, 0xFFFFFF);
+		long var7x = Runtime.getRuntime().maxMemory();
 		long var9 = Runtime.getRuntime().totalMemory();
 		long var11 = Runtime.getRuntime().freeMemory();
-		long var13 = var7 - var11;
-		var6 = "Free memory: " + var13 * 100L / var7 + "% of " + var7 / 1024L / 1024L + "MB";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 2, 8421504);
-		var6 = "Allocated memory: " + var9 * 100L / var7 + "% (" + var9 / 1024L / 1024L + "MB)";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 12, 8421504);
-		super.drawScreen(var1, var2, var3);
+		long var13 = var7x - var11;
+		var6x = "Free memory: " + var13 * 100L / var7x + "% of " + var7x / 1024L / 1024L + "MB";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, 2, 8421504);
+		var6x = "Allocated memory: " + var9 * 100L / var7x + "% (" + var9 / 1024L / 1024L + "MB)";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, 12, 8421504);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
-	private void drawLogo(float var1) {
+	private void drawLogo(float renderPartialTick) {
 		int var3;
 		if(this.logoEffects == null) {
 			this.logoEffects = new LogoEffectRandomizer[this.logoBlockLayers[0].length()][this.logoBlockLayers.length];
@@ -137,8 +199,8 @@
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
-		ScaledResolution var14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		var3 = 120 * var14.scaleFactor;
+		ScaledResolution scaledResolution14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		var3 = 120 * scaledResolution14.scaleFactor;
 		GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)var3, 0.05F, 100.0F);
 		GL11.glViewport(0, this.mc.displayHeight - var3, this.mc.displayWidth, var3);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
@@ -178,18 +240,17 @@
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/black.png"));
 			}
 
-			RenderBlocks var5 = new RenderBlocks();
+			RenderBlocks renderBlocks5 = new RenderBlocks();
 
 			for(int var6 = 0; var6 < this.logoBlockLayers.length; ++var6) {
 				for(int var7 = 0; var7 < this.logoBlockLayers[var6].length(); ++var7) {
-					char var8 = this.logoBlockLayers[var6].charAt(var7);
-					if(var8 != 32) {
+					char c8 = this.logoBlockLayers[var6].charAt(var7);
+					if(c8 != 32) {
 						GL11.glPushMatrix();
-						LogoEffectRandomizer var9 = this.logoEffects[var7][var6];
-						float var10 = (float)(var9.prevHeight + (var9.height - var9.prevHeight) * (double)var1);
+						LogoEffectRandomizer logoEffectRandomizer9 = this.logoEffects[var7][var6];
+						float var10 = (float)(logoEffectRandomizer9.prevHeight + (logoEffectRandomizer9.height - logoEffectRandomizer9.prevHeight) * (double)renderPartialTick);
 						float var11 = 1.0F;
 						float var12 = 1.0F;
-						float var13 = 0.0F;
 						if(var4 == 0) {
 							var11 = var10 * 0.04F + 1.0F;
 							var12 = 1.0F / var11;
@@ -198,8 +259,7 @@
 
 						GL11.glTranslatef((float)var7, (float)var6, var10);
 						GL11.glScalef(var11, var11, var11);
-						GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-						var5.renderBlockAsItem(Block.stone, var12);
+						renderBlocks5.renderBlockAsItem(this.drawBlock, var12);
 						GL11.glPopMatrix();
 					}
 				}
--- net/minecraft/src/Packet255KickDisconnect.java
+++ net/minecraft/src/Packet255KickDisconnect.java
@@ -10,20 +10,20 @@
 	public Packet255KickDisconnect() {
 	}
 
-	public Packet255KickDisconnect(String var1) {
-		this.reason = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.reason = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.reason);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleKickDisconnect(this);
+	public Packet255KickDisconnect(String reason) {
+		this.reason = reason;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.reason = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.reason);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleKickDisconnect(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -6,60 +6,61 @@
 	private Chunk[][] chunkArray;
 	private World worldObj;
 
-	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.worldObj = var1;
-		this.chunkX = var2 >> 4;
-		this.chunkZ = var4 >> 4;
-		int var8 = var5 >> 4;
-		int var9 = var7 >> 4;
+	public ChunkCache(World worldObj, int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.worldObj = worldObj;
+		this.chunkX = minX >> 4;
+		this.chunkZ = minZ >> 4;
+		int var8 = maxX >> 4;
+		int var9 = maxZ >> 4;
 		this.chunkArray = new Chunk[var8 - this.chunkX + 1][var9 - this.chunkZ + 1];
 
 		for(int var10 = this.chunkX; var10 <= var8; ++var10) {
 			for(int var11 = this.chunkZ; var11 <= var9; ++var11) {
-				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = var1.getChunkFromChunkCoords(var10, var11);
+				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = worldObj.getChunkFromChunkCoords(var10, var11);
 			}
 		}
 
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		if(var2 < 0) {
+	public int getBlockId(int x, int y, int z) {
+		if(y < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(y >= 128) {
 			return 0;
 		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockID(var1 & 15, var2, var3 & 15);
+			int var4 = (x >> 4) - this.chunkX;
+			int var5 = (z >> 4) - this.chunkZ;
+			return this.chunkArray[var4][var5].getBlockID(x & 15, y, z & 15);
 		}
 	}
 
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		int var4 = (var1 >> 4) - this.chunkX;
-		int var5 = (var3 >> 4) - this.chunkZ;
-		return this.chunkArray[var4][var5].getChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-	}
-
-	public float getBrightness(int var1, int var2, int var3) {
-		return World.lightBrightnessTable[this.getLightValue(var1, var2, var3)];
-	}
-
-	public int getLightValue(int var1, int var2, int var3) {
-		return this.getLightValueExt(var1, var2, var3, true);
-	}
-
-	public int getLightValueExt(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
+	public TileEntity getBlockTileEntity(int x, int y, int z) {
+		int var4 = (x >> 4) - this.chunkX;
+		int var5 = (z >> 4) - this.chunkZ;
+		return this.chunkArray[var4][var5].getChunkBlockTileEntity(x & 15, y, z & 15);
+	}
+
+	public float getBrightness(int x, int y, int z) {
+		return World.lightBrightnessTable[this.getLightValue(x, y, z)];
+	}
+
+	public int getLightValue(int x, int y, int z) {
+		return this.getLightValueExt(x, y, z, true);
+	}
+
+	public int getLightValueExt(int x, int y, int z, boolean var4) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
 			int var5;
 			int var6;
 			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					var6 = this.getLightValueExt(var1, var2 + 1, var3, false);
-					int var7 = this.getLightValueExt(var1 + 1, var2, var3, false);
-					int var8 = this.getLightValueExt(var1 - 1, var2, var3, false);
-					int var9 = this.getLightValueExt(var1, var2, var3 + 1, false);
-					int var10 = this.getLightValueExt(var1, var2, var3 - 1, false);
+				var5 = this.getBlockId(x, y, z);
+				Block b = Block.blocksList[var5];
+				if((b instanceof BlockStep && !((BlockStep) b).blockType) || var5 == Block.tilledField.blockID) {
+					var6 = this.getLightValueExt(x, y + 1, z, false);
+					int var7 = this.getLightValueExt(x + 1, y, z, false);
+					int var8 = this.getLightValueExt(x - 1, y, z, false);
+					int var9 = this.getLightValueExt(x, y, z + 1, false);
+					int var10 = this.getLightValueExt(x, y, z - 1, false);
 					if(var7 > var6) {
 						var6 = var7;
 					}
@@ -80,9 +81,9 @@
 				}
 			}
 
-			if(var2 < 0) {
+			if(y < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				var5 = 15 - this.worldObj.skylightSubtracted;
 				if(var5 < 0) {
 					var5 = 0;
@@ -90,34 +91,34 @@
 
 				return var5;
 			} else {
-				var5 = (var1 >> 4) - this.chunkX;
-				var6 = (var3 >> 4) - this.chunkZ;
-				return this.chunkArray[var5][var6].getBlockLightValue(var1 & 15, var2, var3 & 15, this.worldObj.skylightSubtracted);
+				var5 = (x >> 4) - this.chunkX;
+				var6 = (z >> 4) - this.chunkZ;
+				return this.chunkArray[var5][var6].getBlockLightValue(x & 15, y, z & 15, this.worldObj.skylightSubtracted);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var2 < 0) {
+	public int getBlockMetadata(int x, int y, int z) {
+		if(y < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(y >= 128) {
 			return 0;
 		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockMetadata(var1 & 15, var2, var3 & 15);
+			int var4 = (x >> 4) - this.chunkX;
+			int var5 = (z >> 4) - this.chunkZ;
+			return this.chunkArray[var4][var5].getBlockMetadata(x & 15, y, z & 15);
 		}
 	}
 
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
+	public Material getBlockMaterial(int x, int y, int z) {
+		int var4 = this.getBlockId(x, y, z);
 		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
 	}
 
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block var4 = Block.blocksList[this.getBlockId(x, y, z)];
 		return var4 == null ? false : var4.isOpaqueCube();
 	}
 }
--- net/minecraft/src/Packet1Login.java
+++ net/minecraft/src/Packet1Login.java
@@ -12,26 +12,26 @@
 	public Packet1Login() {
 	}
 
-	public Packet1Login(String var1, String var2, int var3) {
-		this.username = var1;
-		this.password = var2;
-		this.protocolVersion = var3;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.protocolVersion = var1.readInt();
-		this.username = var1.readUTF();
-		this.password = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.protocolVersion);
-		var1.writeUTF(this.username);
-		var1.writeUTF(this.password);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleLogin(this);
+	public Packet1Login(String username, String mppass, int protocolVer) {
+		this.username = username;
+		this.password = mppass;
+		this.protocolVersion = protocolVer;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.protocolVersion = dataInputStream.readInt();
+		this.username = dataInputStream.readUTF();
+		this.password = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.protocolVersion);
+		dataOutputStream.writeUTF(this.username);
+		dataOutputStream.writeUTF(this.password);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleLogin(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/PlayerNBTManager.java
+++ net/minecraft/src/PlayerNBTManager.java
@@ -9,40 +9,40 @@
 	public static Logger logger = Logger.getLogger("Minecraft");
 	private File playerNBT;
 
-	public PlayerNBTManager(File var1) {
-		this.playerNBT = var1;
-		var1.mkdir();
+	public PlayerNBTManager(File playerNBT) {
+		this.playerNBT = playerNBT;
+		playerNBT.mkdir();
 	}
 
-	public void writePlayerNBT(EntityPlayerMP var1) {
+	public void writePlayerNBT(EntityPlayerMP entityPlayerMP) {
 		try {
-			NBTTagCompound var2 = new NBTTagCompound();
-			var1.writeToNBT(var2);
-			File var3 = new File(this.playerNBT, "_tmp_.dat");
-			File var4 = new File(this.playerNBT, var1.username + ".dat");
-			CompressedStreamTools.writeCompressed(var2, new FileOutputStream(var3));
-			if(var4.exists()) {
-				var4.delete();
+			NBTTagCompound nBTTagCompound2 = new NBTTagCompound();
+			entityPlayerMP.writeToNBT(nBTTagCompound2);
+			File file3 = new File(this.playerNBT, "_tmp_.dat");
+			File file4 = new File(this.playerNBT, entityPlayerMP.username + ".dat");
+			CompressedStreamTools.writeCompressed(nBTTagCompound2, new FileOutputStream(file3));
+			if(file4.exists()) {
+				file4.delete();
 			}
 
-			var3.renameTo(var4);
-		} catch (Exception var5) {
-			logger.warning("Failed to save player data for " + var1.username);
+			file3.renameTo(file4);
+		} catch (Exception exception5) {
+			logger.warning("Failed to save player data for " + entityPlayerMP.username);
 		}
 
 	}
 
-	public void readPlayerNBT(EntityPlayerMP var1) {
+	public void readPlayerNBT(EntityPlayerMP entityPlayerMP) {
 		try {
-			File var2 = new File(this.playerNBT, var1.username + ".dat");
-			if(var2.exists()) {
-				NBTTagCompound var3 = CompressedStreamTools.readCompressed(new FileInputStream(var2));
-				if(var3 != null) {
-					var1.readFromNBT(var3);
+			File file2 = new File(this.playerNBT, entityPlayerMP.username + ".dat");
+			if(file2.exists()) {
+				NBTTagCompound nBTTagCompound3 = CompressedStreamTools.readCompressed(new FileInputStream(file2));
+				if(nBTTagCompound3 != null) {
+					entityPlayerMP.readFromNBT(nBTTagCompound3);
 				}
 			}
-		} catch (Exception var4) {
-			logger.warning("Failed to load player data for " + var1.username);
+		} catch (Exception exception4) {
+			logger.warning("Failed to load player data for " + entityPlayerMP.username);
 		}
 
 	}
--- net/minecraft/src/WorldRenderer.java
+++ net/minecraft/src/WorldRenderer.java
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 
 public class WorldRenderer {
@@ -39,9 +40,9 @@
 	public List tileEntityRenderers = new ArrayList();
 	private List tileEntities;
 
-	public WorldRenderer(World var1, List var2, int var3, int var4, int var5, int var6, int var7) {
+	public WorldRenderer(World var1, List list2, int var3, int var4, int var5, int var6, int var7) {
 		this.worldObj = var1;
-		this.tileEntities = var2;
+		this.tileEntities = list2;
 		this.sizeWidth = this.sizeHeight = this.sizeDepth = var6;
 		this.rendererRadius = MathHelper.sqrt_float((float)(this.sizeWidth * this.sizeWidth + this.sizeHeight * this.sizeHeight + this.sizeDepth * this.sizeDepth)) / 2.0F;
 		this.glRenderList = var7;
@@ -93,12 +94,12 @@
 			}
 
 			Chunk.isLit = false;
-			HashSet var21 = new HashSet();
-			var21.addAll(this.tileEntityRenderers);
+			HashSet hashSet21 = new HashSet();
+			hashSet21.addAll(this.tileEntityRenderers);
 			this.tileEntityRenderers.clear();
 			byte var8 = 1;
-			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
-			RenderBlocks var10 = new RenderBlocks(var9);
+			ChunkCache chunkCache9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
+			RenderBlocks renderBlocks10 = new RenderBlocks(chunkCache9);
 
 			for(int var11 = 0; var11 < 2; ++var11) {
 				boolean var12 = false;
@@ -108,7 +109,7 @@
 				for(int var15 = var2; var15 < var5; ++var15) {
 					for(int var16 = var3; var16 < var6; ++var16) {
 						for(int var17 = var1; var17 < var4; ++var17) {
-							int var18 = var9.getBlockId(var17, var15, var16);
+							int var18 = chunkCache9.getBlockId(var17, var15, var16);
 							if(var18 > 0) {
 								if(!var14) {
 									var14 = true;
@@ -124,9 +125,9 @@
 								}
 
 								if(var11 == 0 && Block.isBlockContainer[var18]) {
-									TileEntity var23 = var9.getBlockTileEntity(var17, var15, var16);
-									if(TileEntityRenderer.instance.hasSpecialRenderer(var23)) {
-										this.tileEntityRenderers.add(var23);
+									TileEntity tileEntity23 = chunkCache9.getBlockTileEntity(var17, var15, var16);
+									if(TileEntityRenderer.instance.hasSpecialRenderer(tileEntity23)) {
+										this.tileEntityRenderers.add(tileEntity23);
 									}
 								}
 
@@ -135,7 +136,7 @@
 								if(var20 != var11) {
 									var12 = true;
 								} else if(var20 == var11) {
-									var13 |= var10.renderBlockByRenderType(var24, var17, var15, var16);
+									var13 |= renderBlocks10.renderBlockByRenderType(var24, var17, var15, var16);
 								}
 							}
 						}
@@ -160,21 +161,21 @@
 				}
 			}
 
-			HashSet var22 = new HashSet();
-			var22.addAll(this.tileEntityRenderers);
-			var22.removeAll(var21);
-			this.tileEntities.addAll(var22);
-			var21.removeAll(this.tileEntityRenderers);
-			this.tileEntities.removeAll(var21);
+			HashSet hashSet22 = new HashSet();
+			hashSet22.addAll(this.tileEntityRenderers);
+			hashSet22.removeAll(hashSet21);
+			this.tileEntities.addAll(hashSet22);
+			hashSet21.removeAll(this.tileEntityRenderers);
+			this.tileEntities.removeAll(hashSet21);
 			this.isChunkLit = Chunk.isLit;
 			this.isInitialized = true;
 		}
 	}
 
-	public float distanceToEntitySquared(Entity var1) {
-		float var2 = (float)(var1.posX - (double)this.posXPlus);
-		float var3 = (float)(var1.posY - (double)this.posYPlus);
-		float var4 = (float)(var1.posZ - (double)this.posZPlus);
+	public float distanceToEntitySquared(Entity entity) {
+		float var2 = (float)(entity.posX - (double)this.posXPlus);
+		float var3 = (float)(entity.posY - (double)this.posYPlus);
+		float var4 = (float)(entity.posZ - (double)this.posZPlus);
 		return var2 * var2 + var3 * var3 + var4 * var4;
 	}
 
@@ -196,8 +197,8 @@
 		return !this.isInFrustum ? -1 : (!this.skipRenderPass[var1] ? this.glRenderList + var1 : -1);
 	}
 
-	public void updateInFrustum(ICamera var1) {
-		this.isInFrustum = var1.isBoundingBoxInFrustum(this.rendererBoundingBox);
+	public void updateInFrustum(ICamera iCamera1) {
+		this.isInFrustum = iCamera1.isBoundingBoxInFrustum(this.rendererBoundingBox);
 	}
 
 	public void callOcclusionQueryList() {
--- net/minecraft/src/GuiMultiplayer.java
+++ net/minecraft/src/GuiMultiplayer.java
@@ -5,8 +5,8 @@
 	private int updateCounter = 0;
 	private String ipText = "";
 
-	public GuiMultiplayer(GuiScreen var1) {
-		this.parentScreen = var1;
+	public GuiMultiplayer(GuiScreen guiScreen1) {
+		this.parentScreen = guiScreen1;
 	}
 
 	public void updateScreen() {
@@ -20,11 +20,11 @@
 		((GuiButton)this.controlList.get(0)).enabled = false;
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 1) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 1) {
 				this.mc.displayGuiScreen(this.parentScreen);
-			} else if(var1.id == 0) {
+			} else if(button.id == 0) {
 				String[] var2 = this.ipText.split(":");
 				this.mc.displayGuiScreen(new GuiConnecting(this.mc, var2[0], var2.length > 1 ? Integer.parseInt(var2[1]) : 25565));
 			}
@@ -32,8 +32,8 @@
 		}
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var1 == 22) {
+	protected void keyTyped(char character, int key) {
+		if(character == 22) {
 			String var3 = GuiScreen.getClipboardString();
 			if(var3 == null) {
 				var3 = "";
@@ -49,34 +49,34 @@
 			}
 		}
 
-		if(var1 == 13) {
+		if(character == 13) {
 			this.actionPerformed((GuiButton)this.controlList.get(0));
 		}
 
-		if(var2 == 14 && this.ipText.length() > 0) {
+		if(key == 14 && this.ipText.length() > 0) {
 			this.ipText = this.ipText.substring(0, this.ipText.length() - 1);
 		}
 
-		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.ipText.length() < 32) {
-			this.ipText = this.ipText + var1;
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.ipText.length() < 32) {
+			this.ipText = this.ipText + character;
 		}
 
 		((GuiButton)this.controlList.get(0)).enabled = this.ipText.length() > 0;
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, "Play Multiplayer", this.width / 2, this.height / 4 - 60 + 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Play Multiplayer", this.width / 2, this.height / 4 - 60 + 20, 0xFFFFFF);
 		this.drawString(this.fontRenderer, "Minecraft Multiplayer is currently not finished, but there", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
 		this.drawString(this.fontRenderer, "is some buggy early testing going on.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 9, 10526880);
 		this.drawString(this.fontRenderer, "Enter the IP of a server to connect to it:", this.width / 2 - 140, this.height / 4 - 60 + 60 + 36, 10526880);
 		int var4 = this.width / 2 - 100;
 		int var5 = this.height / 4 - 10 + 50 + 18;
-		short var6 = 200;
+		short s6 = 200;
 		byte var7 = 20;
-		this.drawRect(var4 - 1, var5 - 1, var4 + var6 + 1, var5 + var7 + 1, -6250336);
-		this.drawRect(var4, var5, var4 + var6, var5 + var7, -16777216);
+		this.drawRect(var4 - 1, var5 - 1, var4 + s6 + 1, var5 + var7 + 1, -6250336);
+		this.drawRect(var4, var5, var4 + s6, var5 + var7, 0xFF000000);
 		this.drawString(this.fontRenderer, this.ipText + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), var4 + 4, var5 + (var7 - 8) / 2, 14737632);
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/IWorldAccess.java
+++ net/minecraft/src/IWorldAccess.java
@@ -15,7 +15,7 @@
 
 	void updateAllRenderers();
 
-	void playRecord(String var1, int var2, int var3, int var4);
+	void playRecord(String var1, int var2, int var3, int var4, String author);
 
-	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4);
+	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity tileEntity4);
 }
--- net/minecraft/src/GuiConnectFailed.java
+++ net/minecraft/src/GuiConnectFailed.java
@@ -4,15 +4,15 @@
 	private String message;
 	private String description;
 
-	public GuiConnectFailed(String var1, String var2) {
-		this.message = var1;
-		this.description = var2;
+	public GuiConnectFailed(String msg, String desc) {
+		this.message = msg;
+		this.description = desc;
 	}
 
 	public void updateScreen() {
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -20,17 +20,17 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Back to title screen"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.message, this.width / 2, this.height / 2 - 50, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.description, this.width / 2, this.height / 2 - 10, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.message, this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.description, this.width / 2, this.height / 2 - 10, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/RenderSlime.java
+++ net/minecraft/src/RenderSlime.java
@@ -10,7 +10,7 @@
 		this.modelSlime = var2;
 	}
 
-	protected boolean renderSlimePassModel(EntitySlime var1, int var2) {
+	protected boolean renderSlimePassModel(EntitySlime entitySlime1, int var2) {
 		if(var2 == 0) {
 			this.setRenderPassModel(this.modelSlime);
 			GL11.glEnable(GL11.GL_NORMALIZE);
@@ -27,10 +27,10 @@
 		}
 	}
 
-	protected void squishSlime(EntitySlime var1, float var2) {
-		float var3 = (var1.prevSquishFactor + (var1.squishFactor - var1.prevSquishFactor) * var2) / ((float)var1.size * 0.5F + 1.0F);
+	protected void squishSlime(EntitySlime entitySlime1, float var2) {
+		float var3 = (entitySlime1.prevSquishFactor + (entitySlime1.squishFactor - entitySlime1.prevSquishFactor) * var2) / ((float)entitySlime1.size * 0.5F + 1.0F);
 		float var4 = 1.0F / (var3 + 1.0F);
-		float var5 = (float)var1.size;
+		float var5 = (float)entitySlime1.size;
 		GL11.glScalef(var4 * var5, 1.0F / var4 * var5, var4 * var5);
 	}
 
--- net/minecraft/src/MouseHelper.java
+++ net/minecraft/src/MouseHelper.java
@@ -2,6 +2,7 @@
 
 import java.awt.Component;
 import java.nio.IntBuffer;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Cursor;
 import org.lwjgl.input.Mouse;
@@ -13,17 +14,17 @@
 	public int deltaY;
 	private int mouseInt = 10;
 
-	public MouseHelper(Component var1) {
-		this.windowComponent = var1;
-		IntBuffer var2 = GLAllocation.createDirectIntBuffer(1);
-		var2.put(0);
-		var2.flip();
-		IntBuffer var3 = GLAllocation.createDirectIntBuffer(1024);
+	public MouseHelper(Component component) {
+		this.windowComponent = component;
+		IntBuffer intBuffer2 = GLAllocation.createDirectIntBuffer(1);
+		intBuffer2.put(0);
+		intBuffer2.flip();
+		IntBuffer intBuffer3 = GLAllocation.createDirectIntBuffer(1024);
 
 		try {
-			this.cursor = new Cursor(32, 32, 16, 16, 1, var3, var2);
-		} catch (LWJGLException var5) {
-			var5.printStackTrace();
+			this.cursor = new Cursor(32, 32, 16, 16, 1, intBuffer3, intBuffer2);
+		} catch (LWJGLException lWJGLException5) {
+			lWJGLException5.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/BlockMinecartTrack.java
+++ net/minecraft/src/BlockMinecartTrack.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockMinecartTrack extends Block {
-	protected BlockMinecartTrack(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockMinecartTrack(int id, int tex) {
+		super(id, tex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -16,23 +16,23 @@
 		return false;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+	public MovingObjectPosition collisionRayTrace(World worldObj, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.collisionRayTrace(worldObj, x, y, z, vector1, vector2);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int var5 = blockAccess.getBlockMetadata(x, y, z);
 		if(var5 >= 2 && var5 <= 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 10.0F / 16.0F, 1.0F);
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
 		} else {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		}
 
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
 	}
 
 	public boolean renderAsNormalBlock() {
@@ -43,52 +43,52 @@
 		return 9;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 15);
-		this.refreshTrackShape(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		worldObj.setBlockMetadataWithNotify(x, y, z, 15);
+		this.refreshTrackShape(worldObj, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		boolean var7 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 2 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+		if(!worldObj.isBlockNormalCube(x, y - 1, z)) {
+			var7 = true;
+		}
+
+		if(var6 == 2 && !worldObj.isBlockNormalCube(x + 1, y, z)) {
+			var7 = true;
+		}
+
+		if(var6 == 3 && !worldObj.isBlockNormalCube(x - 1, y, z)) {
+			var7 = true;
+		}
+
+		if(var6 == 4 && !worldObj.isBlockNormalCube(x, y, z - 1)) {
+			var7 = true;
+		}
+
+		if(var6 == 5 && !worldObj.isBlockNormalCube(x, y, z + 1)) {
 			var7 = true;
 		}
 
 		if(var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else if(var5 > 0 && Block.blocksList[var5].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, var1, var2, var3, var4)) == 3) {
-			this.refreshTrackShape(var1, var2, var3, var4);
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
+		} else if(id > 0 && Block.blocksList[id].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, worldObj, x, y, z)) == 3) {
+			this.refreshTrackShape(worldObj, x, y, z);
 		}
 
 	}
 
-	private void refreshTrackShape(World var1, int var2, int var3, int var4) {
-		(new MinecartTrackLogic(this, var1, var2, var3, var4)).place(var1.isBlockIndirectlyGettingPowered(var2, var3, var4));
+	private void refreshTrackShape(World worldObj, int x, int y, int z) {
+		(new MinecartTrackLogic(this, worldObj, x, y, z)).place(worldObj.isBlockIndirectlyGettingPowered(x, y, z));
 	}
 }
--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -3,6 +3,11 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+import io.github.bluestaggo.mcdiverge.ModelFox;
+import io.github.bluestaggo.mcdiverge.RenderPhantom;
 import org.lwjgl.opengl.GL11;
 
 public class RenderManager {
@@ -23,16 +28,22 @@
 	public double viewerPosY;
 	public double viewerPosZ;
 
+	public static void refresh() {
+		instance = new RenderManager();
+	}
+
 	private RenderManager() {
 		this.entityRenderMap.put(EntitySpider.class, new RenderSpider());
 		this.entityRenderMap.put(EntityPig.class, new RenderPig(new ModelPig(), new ModelPig(0.5F), 0.7F));
 		this.entityRenderMap.put(EntitySheep.class, new RenderSheep(new ModelSheep(), new ModelSheepFur(), 0.7F));
 		this.entityRenderMap.put(EntityCow.class, new RenderCow(new ModelCow(), 0.7F));
 		this.entityRenderMap.put(EntityChicken.class, new RenderChicken(new ModelChicken(), 0.3F));
+		this.entityRenderMap.put(EntityFox.class, new RenderLiving(new ModelFox(), 0.4F));
 		this.entityRenderMap.put(EntityCreeper.class, new RenderCreeper());
 		this.entityRenderMap.put(EntitySkeleton.class, new RenderLiving(new ModelSkeleton(), 0.5F));
 		this.entityRenderMap.put(EntityZombie.class, new RenderLiving(new ModelZombie(), 0.5F));
 		this.entityRenderMap.put(EntitySlime.class, new RenderSlime(new ModelSlime(16), new ModelSlime(0), 0.25F));
+		this.entityRenderMap.put(EntityPhantom.class, new RenderPhantom(new ModelBiped(), 0.5F));
 		this.entityRenderMap.put(EntityPlayer.class, new RenderPlayer());
 		this.entityRenderMap.put(EntityGiantZombie.class, new RenderGiantZombie(new ModelZombie(), 0.5F, 6.0F));
 		this.entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
@@ -45,69 +56,69 @@
 		this.entityRenderMap.put(EntityFallingSand.class, new RenderFallingSand());
 		this.entityRenderMap.put(EntityMinecart.class, new RenderMinecart());
 		this.entityRenderMap.put(EntityBoat.class, new RenderBoat());
-		Iterator var1 = this.entityRenderMap.values().iterator();
+		Iterator iterator1 = this.entityRenderMap.values().iterator();
 
-		while(var1.hasNext()) {
-			Render var2 = (Render)var1.next();
+		while(iterator1.hasNext()) {
+			Render var2 = (Render)iterator1.next();
 			var2.setRenderManager(this);
 		}
 
 	}
 
-	public Render getEntityClassRenderObject(Class var1) {
-		Render var2 = (Render)this.entityRenderMap.get(var1);
-		if(var2 == null && var1 != Entity.class) {
-			var2 = this.getEntityClassRenderObject(var1.getSuperclass());
-			this.entityRenderMap.put(var1, var2);
+	public Render getEntityClassRenderObject(Class entityClass) {
+		Render var2 = (Render)this.entityRenderMap.get(entityClass);
+		if(var2 == null && entityClass != Entity.class) {
+			var2 = this.getEntityClassRenderObject(entityClass.getSuperclass());
+			this.entityRenderMap.put(entityClass, var2);
 		}
 
 		return var2;
 	}
 
-	public Render getEntityRenderObject(Entity var1) {
-		return this.getEntityClassRenderObject(var1.getClass());
-	}
-
-	public void cacheActiveRenderInfo(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, GameSettings var5, float var6) {
-		this.worldObj = var1;
-		this.renderEngine = var2;
-		this.options = var5;
-		this.player = var4;
-		this.fontRenderer = var3;
-		this.playerViewY = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var6;
-		this.playerViewX = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var6;
-		this.viewerPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var6;
-		this.viewerPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var6;
-		this.viewerPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var6;
-	}
-
-	public void renderEntity(Entity var1, float var2) {
-		double var3 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var2;
-		double var5 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var2;
-		double var7 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var2;
-		float var9 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-		float var10 = var1.getBrightness(var2);
+	public Render getEntityRenderObject(Entity entity) {
+		return this.getEntityClassRenderObject(entity.getClass());
+	}
+
+	public void cacheActiveRenderInfo(World world, RenderEngine renderEngine, FontRenderer fontRenderer, EntityPlayer entityPlayer, GameSettings gameSettings, float renderPartialTick) {
+		this.worldObj = world;
+		this.renderEngine = renderEngine;
+		this.options = gameSettings;
+		this.player = entityPlayer;
+		this.fontRenderer = fontRenderer;
+		this.playerViewY = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * renderPartialTick;
+		this.playerViewX = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * renderPartialTick;
+		this.viewerPosX = entityPlayer.lastTickPosX + (entityPlayer.posX - entityPlayer.lastTickPosX) * (double)renderPartialTick;
+		this.viewerPosY = entityPlayer.lastTickPosY + (entityPlayer.posY - entityPlayer.lastTickPosY) * (double)renderPartialTick;
+		this.viewerPosZ = entityPlayer.lastTickPosZ + (entityPlayer.posZ - entityPlayer.lastTickPosZ) * (double)renderPartialTick;
+	}
+
+	public void renderEntity(Entity entity, float renderPartialTick) {
+		double var3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)renderPartialTick;
+		double var5 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)renderPartialTick;
+		double var7 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)renderPartialTick;
+		float var9 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * renderPartialTick;
+		float var10 = entity.getBrightness(renderPartialTick);
 		GL11.glColor3f(var10, var10, var10);
-		this.renderEntityWithPosYaw(var1, var3 - renderPosX, var5 - renderPosY, var7 - renderPosZ, var9, var2);
+		this.renderEntityWithPosYaw(entity, var3 - renderPosX, var5 - renderPosY, var7 - renderPosZ, var9, renderPartialTick);
 	}
 
-	public void renderEntityWithPosYaw(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		Render var10 = this.getEntityRenderObject(var1);
+	public void renderEntityWithPosYaw(Entity entity, double x, double y, double z, float yaw, float pitch) {
+		Render var10 = this.getEntityRenderObject(entity);
 		if(var10 != null) {
-			var10.doRender(var1, var2, var4, var6, var8, var9);
-			var10.doRenderShadowAndFire(var1, var2, var4, var6, var8, var9);
+			var10.doRender(entity, x, y, z, yaw, pitch);
+			var10.doRenderShadowAndFire(entity, x, y, z, yaw, pitch);
 		}
 
 	}
 
-	public void set(World var1) {
-		this.worldObj = var1;
+	public void set(World world) {
+		this.worldObj = world;
 	}
 
-	public double getDistanceToCamera(double var1, double var3, double var5) {
-		double var7 = var1 - this.viewerPosX;
-		double var9 = var3 - this.viewerPosY;
-		double var11 = var5 - this.viewerPosZ;
+	public double getDistanceToCamera(double x, double y, double z) {
+		double var7 = x - this.viewerPosX;
+		double var9 = y - this.viewerPosY;
+		double var11 = z - this.viewerPosZ;
 		return var7 * var7 + var9 * var9 + var11 * var11;
 	}
 
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -26,34 +26,32 @@
 			}
 		}
 
-		if(this.hasAttacked || this.entityToAttack == null || this.pathToEntity != null && this.rand.nextInt(20) != 0) {
-			if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
-				boolean var21 = false;
-				int var3 = -1;
-				int var4 = -1;
-				int var5 = -1;
-				float var6 = -99999.0F;
-
-				for(int var7 = 0; var7 < 10; ++var7) {
-					int var8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
-					int var9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
-					int var10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
-					float var11 = this.getBlockPathWeight(var8, var9, var10);
-					if(var11 > var6) {
-						var6 = var11;
-						var3 = var8;
-						var4 = var9;
-						var5 = var10;
-						var21 = true;
-					}
-				}
-
-				if(var21) {
-					this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var3, var4, var5, 10.0F);
-				}
-			}
-		} else {
+		if(!this.hasAttacked && this.entityToAttack != null && (this.pathToEntity == null || this.rand.nextInt(20) == 0)) {
 			this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
+		} else if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
+			boolean var21 = false;
+			int var3 = -1;
+			int var4 = -1;
+			int var5 = -1;
+			float var6 = -99999.0F;
+
+			for(int var7 = 0; var7 < 10; ++var7) {
+				int var8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
+				int var9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
+				int var10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
+				float var11 = this.getBlockPathWeight(var8, var9, var10);
+				if(var11 > var6) {
+					var6 = var11;
+					var3 = var8;
+					var4 = var9;
+					var5 = var10;
+					var21 = true;
+				}
+			}
+
+			if(var21) {
+				this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var3, var4, var5, 10.0F);
+			}
 		}
 
 		int var22 = MathHelper.floor_double(this.boundingBox.minY);
@@ -61,25 +59,25 @@
 		boolean var24 = this.handleLavaMovement();
 		this.rotationPitch = 0.0F;
 		if(this.pathToEntity != null && this.rand.nextInt(100) != 0) {
-			Vec3D var25 = this.pathToEntity.getPosition(this);
+			Vec3D vec3D25 = this.pathToEntity.getPosition(this);
 			double var26 = (double)(this.width * 2.0F);
 
-			while(var25 != null && var25.squareDistanceTo(this.posX, var25.yCoord, this.posZ) < var26 * var26) {
+			while(vec3D25 != null && vec3D25.squareDistanceTo(this.posX, vec3D25.yCoord, this.posZ) < var26 * var26) {
 				this.pathToEntity.incrementPathIndex();
 				if(this.pathToEntity.isFinished()) {
-					var25 = null;
+					vec3D25 = null;
 					this.pathToEntity = null;
 				} else {
-					var25 = this.pathToEntity.getPosition(this);
+					vec3D25 = this.pathToEntity.getPosition(this);
 				}
 			}
 
 			this.isJumping = false;
-			if(var25 != null) {
-				double var27 = var25.xCoord - this.posX;
-				double var28 = var25.zCoord - this.posZ;
-				double var12 = var25.yCoord - (double)var22;
-				float var14 = (float)(Math.atan2(var28, var27) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			if(vec3D25 != null) {
+				double var27 = vec3D25.xCoord - this.posX;
+				double var28 = vec3D25.zCoord - this.posZ;
+				double var12 = vec3D25.yCoord - (double)var22;
+				float var14 = (float)(Math.atan2(var28, var27) * 180.0D / (double)(float)Math.PI) - 90.0F;
 				float var15 = var14 - this.rotationYaw;
 
 				for(this.moveForward = this.moveSpeed; var15 < -180.0F; var15 += 360.0F) {
@@ -102,7 +100,7 @@
 					double var16 = this.entityToAttack.posX - this.posX;
 					double var18 = this.entityToAttack.posZ - this.posZ;
 					float var20 = this.rotationYaw;
-					this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+					this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)(float)Math.PI) - 90.0F;
 					var15 = (var20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
 					this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
 					this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
@@ -131,10 +129,10 @@
 		}
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
+	protected void attackEntity(Entity entity, float distance) {
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
+	protected float getBlockPathWeight(int x, int y, int z) {
 		return 0.0F;
 	}
 
--- net/minecraft/src/GuiConnecting.java
+++ net/minecraft/src/GuiConnecting.java
@@ -18,7 +18,7 @@
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -26,8 +26,8 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.cancelled = true;
 			if(this.clientHandler != null) {
 				this.clientHandler.disconnect();
@@ -38,28 +38,28 @@
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
 		if(this.clientHandler == null) {
-			this.drawCenteredString(this.fontRenderer, "Connecting to the server...", this.width / 2, this.height / 2 - 50, 16777215);
-			this.drawCenteredString(this.fontRenderer, "", this.width / 2, this.height / 2 - 10, 16777215);
+			this.drawCenteredString(this.fontRenderer, "Connecting to the server...", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "", this.width / 2, this.height / 2 - 10, 0xFFFFFF);
 		} else {
-			this.drawCenteredString(this.fontRenderer, "Logging in...", this.width / 2, this.height / 2 - 50, 16777215);
-			this.drawCenteredString(this.fontRenderer, this.clientHandler.loginProgress, this.width / 2, this.height / 2 - 10, 16777215);
+			this.drawCenteredString(this.fontRenderer, "Logging in...", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, this.clientHandler.loginProgress, this.width / 2, this.height / 2 - 10, 0xFFFFFF);
 		}
 
-		super.drawScreen(var1, var2, var3);
-	}
-
-	static NetClientHandler setNetClientHandler(GuiConnecting var0, NetClientHandler var1) {
-		return var0.clientHandler = var1;
-	}
-
-	static boolean isCancelled(GuiConnecting var0) {
-		return var0.cancelled;
-	}
-
-	static NetClientHandler getNetClientHandler(GuiConnecting var0) {
-		return var0.clientHandler;
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	static NetClientHandler setNetClientHandler(GuiConnecting guiConnecting0, NetClientHandler netClientHandler1) {
+		return guiConnecting0.clientHandler = netClientHandler1;
+	}
+
+	static boolean isCancelled(GuiConnecting guiConnecting0) {
+		return guiConnecting0.cancelled;
+	}
+
+	static NetClientHandler getNetClientHandler(GuiConnecting guiConnecting0) {
+		return guiConnecting0.clientHandler;
 	}
 }
--- net/minecraft/src/UnexpectedThrowable.java
+++ net/minecraft/src/UnexpectedThrowable.java
@@ -4,8 +4,8 @@
 	public final String description;
 	public final Throwable exception;
 
-	public UnexpectedThrowable(String var1, Throwable var2) {
-		this.description = var1;
-		this.exception = var2;
+	public UnexpectedThrowable(String desc, Throwable throwable) {
+		this.description = desc;
+		this.exception = throwable;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RenderPhantom.java
@@ -1,0 +1,23 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityLiving;
+import net.minecraft.src.ModelBase;
+import net.minecraft.src.RenderLiving;
+import org.lwjgl.opengl.GL11;
+
+public class RenderPhantom extends RenderLiving {
+	public RenderPhantom(ModelBase var1, float var2) {
+		super(var1, var2);
+	}
+
+	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
+
+		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_LIGHTING);
+	}
+}
--- net/minecraft/src/CanvasIsomPreview.java
+++ net/minecraft/src/CanvasIsomPreview.java
@@ -41,33 +41,33 @@
 		return this.dataFolder;
 	}
 
-	public File getWorkingDirectory(String var1) {
+	public File getWorkingDirectory(String name) {
 		String var2 = System.getProperty("user.home", ".");
-		File var3;
-		switch(OSMapIsom.osValues[getPlatform().ordinal()]) {
+		File file3;
+		switch(CanvasIsomPreview.SyntheticClass_1.$SwitchMap$net$minecraft$src$EnumOSIsom[getPlatform().ordinal()]) {
 		case 1:
 		case 2:
-			var3 = new File(var2, '.' + var1 + '/');
+			file3 = new File(var2, '.' + name + '/');
 			break;
 		case 3:
 			String var4 = System.getenv("APPDATA");
 			if(var4 != null) {
-				var3 = new File(var4, "." + var1 + '/');
+				file3 = new File(var4, "." + name + '/');
 			} else {
-				var3 = new File(var2, '.' + var1 + '/');
+				file3 = new File(var2, '.' + name + '/');
 			}
 			break;
 		case 4:
-			var3 = new File(var2, "Library/Application Support/" + var1);
+			file3 = new File(var2, "Library/Application Support/" + name);
 			break;
 		default:
-			var3 = new File(var2, var1 + '/');
+			file3 = new File(var2, name + '/');
 		}
 
-		if(!var3.exists() && !var3.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var3);
+		if(!file3.exists() && !file3.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file3);
 		} else {
-			return var3;
+			return file3;
 		}
 	}
 
@@ -91,12 +91,12 @@
 		this.setBackground(Color.red);
 	}
 
-	public void loadLevel(String var1) {
+	public void loadLevel(String levelName) {
 		this.translateX = this.translateY = 0;
-		this.level = new WorldIso(this, new File(this.dataFolder, "saves"), var1);
+		this.level = new WorldIso(this, new File(this.dataFolder, "saves"), levelName);
 		this.level.skylightSubtracted = 0;
-		List var2 = this.zonesToRender;
-		synchronized(var2) {
+		List list2 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
 			this.zonesToRender.clear();
 
 			for(int var3 = 0; var3 < 64; ++var3) {
@@ -108,10 +108,10 @@
 		}
 	}
 
-	private void setBrightness(int var1) {
-		List var2 = this.zonesToRender;
-		synchronized(var2) {
-			this.level.skylightSubtracted = var1;
+	private void setBrightness(int brightness) {
+		List list2 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
+			this.level.skylightSubtracted = brightness;
 			this.zonesToRender.clear();
 
 			for(int var3 = 0; var3 < 64; ++var3) {
@@ -136,130 +136,130 @@
 		this.running = false;
 	}
 
-	private IsoImageBuffer getZone(int var1, int var2) {
-		int var3 = var1 & 63;
-		int var4 = var2 & 63;
-		IsoImageBuffer var5 = this.zoneMap[var3][var4];
-		if(var5.x == var1 && var5.y == var2) {
-			return var5;
+	private IsoImageBuffer getZone(int x, int z) {
+		int var3 = x & 63;
+		int var4 = z & 63;
+		IsoImageBuffer isoImageBuffer5 = this.zoneMap[var3][var4];
+		if(isoImageBuffer5.x == x && isoImageBuffer5.y == z) {
+			return isoImageBuffer5;
 		} else {
-			List var6 = this.zonesToRender;
-			synchronized(var6) {
-				this.zonesToRender.remove(var5);
+			List list6 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
+				this.zonesToRender.remove(isoImageBuffer5);
 			}
 
-			var5.init(var1, var2);
-			return var5;
+			isoImageBuffer5.init(x, z);
+			return isoImageBuffer5;
 		}
 	}
 
 	public void run() {
-		TerrainTextureManager var1 = new TerrainTextureManager();
+		TerrainTextureManager terrainTextureManager1 = new TerrainTextureManager();
 
 		while(this.running) {
-			IsoImageBuffer var2 = null;
-			List var3 = this.zonesToRender;
-			synchronized(var3) {
+			IsoImageBuffer isoImageBuffer2 = null;
+			List list3 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
 				if(this.zonesToRender.size() > 0) {
-					var2 = (IsoImageBuffer)this.zonesToRender.remove(0);
+					isoImageBuffer2 = (IsoImageBuffer)this.zonesToRender.remove(0);
 				}
 			}
 
-			if(var2 != null) {
-				if(this.currentRender - var2.lastVisible < 2) {
-					var1.render(var2);
+			if(isoImageBuffer2 != null) {
+				if(this.currentRender - isoImageBuffer2.lastVisible < 2) {
+					terrainTextureManager1.render(isoImageBuffer2);
 					this.repaint();
 				} else {
-					var2.addedToRenderQueue = false;
+					isoImageBuffer2.addedToRenderQueue = false;
 				}
 			}
 
 			try {
 				Thread.sleep(2L);
-			} catch (InterruptedException var5) {
-				var5.printStackTrace();
+			} catch (InterruptedException interruptedException5) {
+				interruptedException5.printStackTrace();
 			}
 		}
 
 	}
 
-	public void update(Graphics var1) {
+	public void update(Graphics graphics) {
 	}
 
-	public void paint(Graphics var1) {
+	public void paint(Graphics graphics) {
 	}
 
 	public void render() {
-		BufferStrategy var1 = this.getBufferStrategy();
-		if(var1 == null) {
+		BufferStrategy bufferStrategy1 = this.getBufferStrategy();
+		if(bufferStrategy1 == null) {
 			this.createBufferStrategy(2);
 		} else {
-			this.render((Graphics2D)var1.getDrawGraphics());
-			var1.show();
+			this.render((Graphics2D)bufferStrategy1.getDrawGraphics());
+			bufferStrategy1.show();
 		}
 	}
 
-	public void render(Graphics2D var1) {
+	public void render(Graphics2D graphics2D) {
 		++this.currentRender;
-		AffineTransform var2 = var1.getTransform();
-		var1.setClip(0, 0, this.getWidth(), this.getHeight());
-		var1.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
-		var1.translate(this.getWidth() / 2, this.getHeight() / 2);
-		var1.scale((double)this.zoomLevel, (double)this.zoomLevel);
-		var1.translate(this.translateX, this.translateY);
+		AffineTransform affineTransform2 = graphics2D.getTransform();
+		graphics2D.setClip(0, 0, this.getWidth(), this.getHeight());
+		graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
+		graphics2D.translate(this.getWidth() / 2, this.getHeight() / 2);
+		graphics2D.scale((double)this.zoomLevel, (double)this.zoomLevel);
+		graphics2D.translate(this.translateX, this.translateY);
 		if(this.level != null) {
-			var1.translate(-(this.level.spawnX + this.level.spawnZ), -(-this.level.spawnX + this.level.spawnZ) + 64);
+			graphics2D.translate(-(this.level.spawnX + this.level.spawnZ), -(-this.level.spawnX + this.level.spawnZ) + 64);
 		}
 
-		Rectangle var3 = var1.getClipBounds();
-		var1.setColor(new Color(-15724512));
-		var1.fillRect(var3.x, var3.y, var3.width, var3.height);
+		Rectangle rectangle3 = graphics2D.getClipBounds();
+		graphics2D.setColor(new Color(-15724512));
+		graphics2D.fillRect(rectangle3.x, rectangle3.y, rectangle3.width, rectangle3.height);
 		byte var4 = 16;
 		byte var5 = 3;
-		int var6 = var3.x / var4 / 2 - 2 - var5;
-		int var7 = (var3.x + var3.width) / var4 / 2 + 1 + var5;
-		int var8 = var3.y / var4 - 1 - var5 * 2;
-		int var9 = (var3.y + var3.height + 16 + 128) / var4 + 1 + var5 * 2;
+		int var6 = rectangle3.x / var4 / 2 - 2 - var5;
+		int var7 = (rectangle3.x + rectangle3.width) / var4 / 2 + 1 + var5;
+		int var8 = rectangle3.y / var4 - 1 - var5 * 2;
+		int var9 = (rectangle3.y + rectangle3.height + 16 + 128) / var4 + 1 + var5 * 2;
 
 		int var10;
 		for(var10 = var8; var10 <= var9; ++var10) {
 			for(int var11 = var6; var11 <= var7; ++var11) {
 				int var12 = var11 - (var10 >> 1);
 				int var13 = var11 + (var10 + 1 >> 1);
-				IsoImageBuffer var14 = this.getZone(var12, var13);
-				var14.lastVisible = this.currentRender;
-				if(!var14.rendered) {
-					if(!var14.addedToRenderQueue) {
-						var14.addedToRenderQueue = true;
-						this.zonesToRender.add(var14);
+				IsoImageBuffer isoImageBuffer14 = this.getZone(var12, var13);
+				isoImageBuffer14.lastVisible = this.currentRender;
+				if(!isoImageBuffer14.rendered) {
+					if(!isoImageBuffer14.addedToRenderQueue) {
+						isoImageBuffer14.addedToRenderQueue = true;
+						this.zonesToRender.add(isoImageBuffer14);
 					}
 				} else {
-					var14.addedToRenderQueue = false;
-					if(!var14.noContent) {
+					isoImageBuffer14.addedToRenderQueue = false;
+					if(!isoImageBuffer14.noContent) {
 						int var15 = var11 * var4 * 2 + (var10 & 1) * var4;
 						int var16 = var10 * var4 - 128 - 16;
-						var1.drawImage(var14.image, var15, var16, (ImageObserver)null);
+						graphics2D.drawImage(isoImageBuffer14.image, var15, var16, (ImageObserver)null);
 					}
 				}
 			}
 		}
 
 		if(this.displayHelpText) {
-			var1.setTransform(var2);
+			graphics2D.setTransform(affineTransform2);
 			var10 = this.getHeight() - 32 - 4;
-			var1.setColor(new Color(Integer.MIN_VALUE, true));
-			var1.fillRect(4, this.getHeight() - 32 - 4, this.getWidth() - 8, 32);
-			var1.setColor(Color.WHITE);
+			graphics2D.setColor(new Color(Integer.MIN_VALUE, true));
+			graphics2D.fillRect(4, this.getHeight() - 32 - 4, this.getWidth() - 8, 32);
+			graphics2D.setColor(Color.WHITE);
 			String var17 = "F1 - F5: load levels   |   0-9: Set time of day   |   Space: return to spawn   |   Double click: zoom   |   Escape: hide this text";
-			var1.drawString(var17, this.getWidth() / 2 - var1.getFontMetrics().stringWidth(var17) / 2, var10 + 20);
+			graphics2D.drawString(var17, this.getWidth() / 2 - graphics2D.getFontMetrics().stringWidth(var17) / 2, var10 + 20);
 		}
 
-		var1.dispose();
+		graphics2D.dispose();
 	}
 
-	public void mouseDragged(MouseEvent var1) {
-		int var2 = var1.getX() / this.zoomLevel;
-		int var3 = var1.getY() / this.zoomLevel;
+	public void mouseDragged(MouseEvent mouseEvent) {
+		int var2 = mouseEvent.getX() / this.zoomLevel;
+		int var3 = mouseEvent.getY() / this.zoomLevel;
 		this.translateX += var2 - this.xPosition;
 		this.translateY += var3 - this.yPosition;
 		this.xPosition = var2;
@@ -267,112 +267,139 @@
 		this.repaint();
 	}
 
-	public void mouseMoved(MouseEvent var1) {
+	public void mouseMoved(MouseEvent mouseEvent) {
 	}
 
-	public void mouseClicked(MouseEvent var1) {
-		if(var1.getClickCount() == 2) {
+	public void mouseClicked(MouseEvent mouseEvent) {
+		if(mouseEvent.getClickCount() == 2) {
 			this.zoomLevel = 3 - this.zoomLevel;
 			this.repaint();
 		}
 
 	}
 
-	public void mouseEntered(MouseEvent var1) {
-	}
-
-	public void mouseExited(MouseEvent var1) {
-	}
-
-	public void mousePressed(MouseEvent var1) {
-		int var2 = var1.getX() / this.zoomLevel;
-		int var3 = var1.getY() / this.zoomLevel;
+	public void mouseEntered(MouseEvent mouseEvent) {
+	}
+
+	public void mouseExited(MouseEvent mouseEvent) {
+	}
+
+	public void mousePressed(MouseEvent mouseEvent) {
+		int var2 = mouseEvent.getX() / this.zoomLevel;
+		int var3 = mouseEvent.getY() / this.zoomLevel;
 		this.xPosition = var2;
 		this.yPosition = var3;
 	}
 
-	public void mouseReleased(MouseEvent var1) {
+	public void mouseReleased(MouseEvent mouseEvent) {
 	}
 
-	public void keyPressed(KeyEvent var1) {
-		if(var1.getKeyCode() == 48) {
+	public void keyPressed(KeyEvent keyEvent) {
+		if(keyEvent.getKeyCode() == 48) {
 			this.setBrightness(11);
 		}
 
-		if(var1.getKeyCode() == 49) {
+		if(keyEvent.getKeyCode() == 49) {
 			this.setBrightness(10);
 		}
 
-		if(var1.getKeyCode() == 50) {
+		if(keyEvent.getKeyCode() == 50) {
 			this.setBrightness(9);
 		}
 
-		if(var1.getKeyCode() == 51) {
+		if(keyEvent.getKeyCode() == 51) {
 			this.setBrightness(7);
 		}
 
-		if(var1.getKeyCode() == 52) {
+		if(keyEvent.getKeyCode() == 52) {
 			this.setBrightness(6);
 		}
 
-		if(var1.getKeyCode() == 53) {
+		if(keyEvent.getKeyCode() == 53) {
 			this.setBrightness(5);
 		}
 
-		if(var1.getKeyCode() == 54) {
+		if(keyEvent.getKeyCode() == 54) {
 			this.setBrightness(3);
 		}
 
-		if(var1.getKeyCode() == 55) {
+		if(keyEvent.getKeyCode() == 55) {
 			this.setBrightness(2);
 		}
 
-		if(var1.getKeyCode() == 56) {
+		if(keyEvent.getKeyCode() == 56) {
 			this.setBrightness(1);
 		}
 
-		if(var1.getKeyCode() == 57) {
+		if(keyEvent.getKeyCode() == 57) {
 			this.setBrightness(0);
 		}
 
-		if(var1.getKeyCode() == 112) {
+		if(keyEvent.getKeyCode() == 112) {
 			this.loadLevel("World1");
 		}
 
-		if(var1.getKeyCode() == 113) {
+		if(keyEvent.getKeyCode() == 113) {
 			this.loadLevel("World2");
 		}
 
-		if(var1.getKeyCode() == 114) {
+		if(keyEvent.getKeyCode() == 114) {
 			this.loadLevel("World3");
 		}
 
-		if(var1.getKeyCode() == 115) {
+		if(keyEvent.getKeyCode() == 115) {
 			this.loadLevel("World4");
 		}
 
-		if(var1.getKeyCode() == 116) {
+		if(keyEvent.getKeyCode() == 116) {
 			this.loadLevel("World5");
 		}
 
-		if(var1.getKeyCode() == 32) {
+		if(keyEvent.getKeyCode() == 32) {
 			this.translateX = this.translateY = 0;
 		}
 
-		if(var1.getKeyCode() == 27) {
+		if(keyEvent.getKeyCode() == 27) {
 			this.displayHelpText = !this.displayHelpText;
 		}
 
 		this.repaint();
 	}
 
-	public void keyReleased(KeyEvent var1) {
-	}
-
-	public void keyTyped(KeyEvent var1) {
-	}
-
-	static boolean isRunning(CanvasIsomPreview var0) {
-		return var0.running;
+	public void keyReleased(KeyEvent keyEvent) {
+	}
+
+	public void keyTyped(KeyEvent keyEvent) {
+	}
+
+	static boolean isRunning(CanvasIsomPreview canvasIsomPreview0) {
+		return canvasIsomPreview0.running;
+	}
+
+	static final class SyntheticClass_1 {
+		static final int[] $SwitchMap$net$minecraft$src$EnumOSIsom = new int[EnumOSIsom.values().length];
+
+		static {
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.linux.ordinal()] = 1;
+			} catch (NoSuchFieldError noSuchFieldError4) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.solaris.ordinal()] = 2;
+			} catch (NoSuchFieldError noSuchFieldError3) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.windows.ordinal()] = 3;
+			} catch (NoSuchFieldError noSuchFieldError2) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.macos.ordinal()] = 4;
+			} catch (NoSuchFieldError noSuchFieldError1) {
+			}
+
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet8UpdateHealth.java
@@ -1,0 +1,35 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet8UpdateHealth extends Packet {
+	public int healthMP;
+
+	public Packet8UpdateHealth() {
+	}
+
+	public Packet8UpdateHealth(int var1) {
+		this.healthMP = var1;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.healthMP = dataInputStream1.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeShort(this.healthMP);
+	}
+
+	public void processPacket(NetHandler netHandler1) {
+		netHandler1.handleHealth(this);
+	}
+
+	public int getPacketSize() {
+		return 2;
+	}
+}
--- net/minecraft/src/Packet10Flying.java
+++ net/minecraft/src/Packet10Flying.java
@@ -18,20 +18,20 @@
 	public Packet10Flying() {
 	}
 
-	public Packet10Flying(boolean var1) {
-		this.onGround = var1;
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleFlying(this);
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.onGround = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.onGround ? 1 : 0);
+	public Packet10Flying(boolean onGround) {
+		this.onGround = onGround;
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleFlying(this);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.onGround = dataInputStream.read() != 0;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.onGround ? 1 : 0);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockTorch.java
+++ net/minecraft/src/BlockTorch.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockTorch extends Block {
-	protected BlockTorch(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockTorch(int id, int tex) {
+		super(id, tex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -24,103 +24,103 @@
 		return 2;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
 	}
 
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+	public void onBlockPlaced(World worldObj, int x, int y, int z, int metadata) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
+		if(metadata == 1 && worldObj.isBlockNormalCube(x, y - 1, z)) {
 			var6 = 5;
 		}
 
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+		if(metadata == 2 && worldObj.isBlockNormalCube(x, y, z + 1)) {
 			var6 = 4;
 		}
 
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+		if(metadata == 3 && worldObj.isBlockNormalCube(x, y, z - 1)) {
 			var6 = 3;
 		}
 
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+		if(metadata == 4 && worldObj.isBlockNormalCube(x + 1, y, z)) {
 			var6 = 2;
 		}
 
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+		if(metadata == 5 && worldObj.isBlockNormalCube(x - 1, y, z)) {
 			var6 = 1;
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			this.onBlockAdded(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5);
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var6);
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		super.updateTick(worldObj, x, y, z, rand);
+		if(worldObj.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(worldObj, x, y, z);
+		}
+
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(worldObj.isBlockNormalCube(x - 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(worldObj.isBlockNormalCube(x + 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(worldObj.isBlockNormalCube(x, y, z - 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(worldObj.isBlockNormalCube(x, y, z + 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(worldObj.isBlockNormalCube(x, y - 1, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 5);
+		}
+
+		this.checkIfAttachedToBlock(worldObj, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(this.checkIfAttachedToBlock(worldObj, x, y, z)) {
+			int var6 = worldObj.getBlockMetadata(x, y, z);
 			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
+			if(!worldObj.isBlockNormalCube(x - 1, y, z) && var6 == 1) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x + 1, y, z) && var6 == 2) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z - 1) && var6 == 3) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z + 1) && var6 == 4) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y - 1, z) && var6 == 5) {
 				var7 = true;
 			}
 
 			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	private boolean checkIfAttachedToBlock(World worldObj, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4) & 7;
+	public MovingObjectPosition collisionRayTrace(World worldObj, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		int var7 = worldObj.getBlockMetadata(x, y, z) & 7;
 		float var8 = 0.15F;
 		if(var7 == 1) {
 			this.setBlockBounds(0.0F, 0.2F, 0.5F - var8, var8 * 2.0F, 0.8F, 0.5F + var8);
@@ -135,31 +135,31 @@
 			this.setBlockBounds(0.5F - var8, 0.0F, 0.5F - var8, 0.5F + var8, 0.6F, 0.5F + var8);
 		}
 
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+		return super.collisionRayTrace(worldObj, x, y, z, vector1, vector2);
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		double var7 = (double)((float)var2 + 0.5F);
-		double var9 = (double)((float)var3 + 0.7F);
-		double var11 = (double)((float)var4 + 0.5F);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
+		double var7 = (double)((float)x + 0.5F);
+		double var9 = (double)((float)y + 0.7F);
+		double var11 = (double)((float)z + 0.5F);
 		double var13 = (double)0.22F;
 		double var15 = (double)0.27F;
 		if(var6 == 1) {
-			var1.spawnParticle("smoke", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
 		} else if(var6 == 2) {
-			var1.spawnParticle("smoke", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
 		} else if(var6 == 3) {
-			var1.spawnParticle("smoke", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
 		} else if(var6 == 4) {
-			var1.spawnParticle("smoke", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
 		} else {
-			var1.spawnParticle("smoke", var7, var9, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", var7, var9, var11, 0.0D, 0.0D, 0.0D);
 		}
 
 	}
--- net/minecraft/src/MinecraftImpl.java
+++ net/minecraft/src/MinecraftImpl.java
@@ -3,20 +3,25 @@
 import java.awt.Canvas;
 import java.awt.Component;
 import java.awt.Frame;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.MinecraftApplet;
 
 public final class MinecraftImpl extends Minecraft {
 	final Frame mcFrame;
 
-	public MinecraftImpl(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6, Frame var7) {
-		super(var1, var2, var3, var4, var5, var6);
-		this.mcFrame = var7;
-	}
-
-	public void displayUnexpectedThrowable(UnexpectedThrowable var1) {
+	public MinecraftImpl(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen, Frame frame) {
+		super(component, canvas, mcApplet, width, height, fullscreen);
+		this.mcFrame = frame;
+	}
+
+	public boolean isClient() {
+		return true;
+	}
+
+	public void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable) {
 		this.mcFrame.removeAll();
-		this.mcFrame.add(new PanelCrashReport(var1), "Center");
+		this.mcFrame.add(new PanelCrashReport(unexpectedThrowable), "Center");
 		this.mcFrame.validate();
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemEquipable.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class ItemEquipable extends Item {
+	public final int armorType;
+
+	public ItemEquipable(int var1, int var2) {
+		this(var1, var2, 0);
+	}
+
+	public ItemEquipable(int var1, int var2, int var3) {
+		super(var1);
+		this.maxStackSize = 1;
+		this.armorType = var2;
+		this.maxDamage = var3;
+	}
+}
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -3,102 +3,109 @@
 import java.util.Random;
 
 public class BlockRedstoneOre extends Block {
-	private boolean glowing;
+	private final boolean glowing;
+	private final int altTex;
 
-	public BlockRedstoneOre(int var1, int var2, boolean var3) {
-		super(var1, var2, Material.rock);
-		if(var3) {
+	public BlockRedstoneOre(int id, int tex, int altTex, boolean glowing) {
+		super(id, tex, Material.rock);
+		this.altTex = altTex;
+		if(glowing) {
 			this.setTickOnLoad(true);
 		}
 
-		this.glowing = var3;
+		this.glowing = glowing;
 	}
 
 	public int tickRate() {
 		return 30;
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		return super.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	private void glow(World var1, int var2, int var3, int var4) {
-		this.sparkle(var1, var2, var3, var4);
+	public void onBlockClicked(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(worldObj, x, y, z);
+		super.onBlockClicked(worldObj, x, y, z, entityPlayer);
+	}
+
+	public void onEntityWalking(World worldObj, int x, int y, int z, Entity entity) {
+		this.glow(worldObj, x, y, z);
+		super.onEntityWalking(worldObj, x, y, z, entity);
+	}
+
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(worldObj, x, y, z);
+		return super.blockActivated(worldObj, x, y, z, entityPlayer);
+	}
+
+	private void glow(World worldObj, int x, int y, int z) {
+		this.sparkle(worldObj, x, y, z);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			int metadata = worldObj.getBlockMetadata(x, y, z);
+			worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.oreRedstoneGlowing.blockID, metadata);
 		}
 
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			int metadata = worldObj.getBlockMetadata(x, y, z);
+			worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.oreRedstone.blockID, metadata);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
-		return 4 + var1.nextInt(2);
+	public int quantityDropped(Random rand) {
+		return 4 + rand.nextInt(2);
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.glowing) {
-			this.sparkle(var1, var2, var3, var4);
+			this.sparkle(worldObj, x, y, z);
 		}
 
 	}
 
-	private void sparkle(World var1, int var2, int var3, int var4) {
-		Random var5 = var1.rand;
-		double var6 = 1.0D / 16.0D;
+	private void sparkle(World worldObj, int x, int y, int z) {
+		Random var5 = worldObj.rand;
+		double var6 = 0.0625D;
 
 		for(int var8 = 0; var8 < 6; ++var8) {
-			double var9 = (double)((float)var2 + var5.nextFloat());
-			double var11 = (double)((float)var3 + var5.nextFloat());
-			double var13 = (double)((float)var4 + var5.nextFloat());
-			if(var8 == 0 && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				var11 = (double)(var3 + 1) + var6;
-			}
-
-			if(var8 == 1 && !var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var11 = (double)(var3 + 0) - var6;
-			}
-
-			if(var8 == 2 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-				var13 = (double)(var4 + 1) + var6;
-			}
-
-			if(var8 == 3 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-				var13 = (double)(var4 + 0) - var6;
-			}
-
-			if(var8 == 4 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-				var9 = (double)(var2 + 1) + var6;
-			}
-
-			if(var8 == 5 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-				var9 = (double)(var2 + 0) - var6;
-			}
-
-			if(var9 < (double)var2 || var9 > (double)(var2 + 1) || var11 < 0.0D || var11 > (double)(var3 + 1) || var13 < (double)var4 || var13 > (double)(var4 + 1)) {
-				var1.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+			double var9 = (double)((float)x + var5.nextFloat());
+			double var11 = (double)((float)y + var5.nextFloat());
+			double var13 = (double)((float)z + var5.nextFloat());
+			if(var8 == 0 && !worldObj.isBlockNormalCube(x, y + 1, z)) {
+				var11 = (double)(y + 1) + var6;
+			}
+
+			if(var8 == 1 && !worldObj.isBlockNormalCube(x, y - 1, z)) {
+				var11 = (double)(y + 0) - var6;
+			}
+
+			if(var8 == 2 && !worldObj.isBlockNormalCube(x, y, z + 1)) {
+				var13 = (double)(z + 1) + var6;
+			}
+
+			if(var8 == 3 && !worldObj.isBlockNormalCube(x, y, z - 1)) {
+				var13 = (double)(z + 0) - var6;
+			}
+
+			if(var8 == 4 && !worldObj.isBlockNormalCube(x + 1, y, z)) {
+				var9 = (double)(x + 1) + var6;
+			}
+
+			if(var8 == 5 && !worldObj.isBlockNormalCube(x - 1, y, z)) {
+				var9 = (double)(x + 0) - var6;
+			}
+
+			if(var9 < (double)x || var9 > (double)(x + 1) || var11 < 0.0D || var11 > (double)(y + 1) || var13 < (double)z || var13 > (double)(z + 1)) {
+				worldObj.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
 			}
 		}
+	}
 
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata == 0 ? blockIndexInTexture : altTex + (metadata - 1) * 16;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet38EntityStatus.java
@@ -1,0 +1,39 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet38EntityStatus extends Packet {
+	public int entityId;
+	public byte entityStatus;
+
+	public Packet38EntityStatus() {
+	}
+
+	public Packet38EntityStatus(int var1, byte var2) {
+		this.entityId = var1;
+		this.entityStatus = var2;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.entityId = dataInputStream1.readInt();
+		this.entityStatus = dataInputStream1.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeInt(this.entityId);
+		dataOutputStream1.writeByte(this.entityStatus);
+	}
+
+	public void processPacket(NetHandler netHandler1) {
+		netHandler1.handleEntityStatus(this);
+	}
+
+	public int getPacketSize() {
+		return 5;
+	}
+}
--- net/minecraft/src/GuiLogFormatter.java
+++ net/minecraft/src/GuiLogFormatter.java
@@ -9,38 +9,38 @@
 class GuiLogFormatter extends Formatter {
 	final GuiLogOutputHandler handler;
 
-	GuiLogFormatter(GuiLogOutputHandler var1) {
-		this.handler = var1;
+	GuiLogFormatter(GuiLogOutputHandler handler) {
+		this.handler = handler;
 	}
 
-	public String format(LogRecord var1) {
-		StringBuilder var2 = new StringBuilder();
-		Level var3 = var1.getLevel();
-		if(var3 == Level.FINEST) {
-			var2.append("[FINEST] ");
-		} else if(var3 == Level.FINER) {
-			var2.append("[FINER] ");
-		} else if(var3 == Level.FINE) {
-			var2.append("[FINE] ");
-		} else if(var3 == Level.INFO) {
-			var2.append("[INFO] ");
-		} else if(var3 == Level.WARNING) {
-			var2.append("[WARNING] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append("[SEVERE] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append("[" + var3.getLocalizedName() + "] ");
-		}
-
-		var2.append(var1.getMessage());
-		var2.append('\n');
-		Throwable var4 = var1.getThrown();
-		if(var4 != null) {
-			StringWriter var5 = new StringWriter();
-			var4.printStackTrace(new PrintWriter(var5));
-			var2.append(var5.toString());
-		}
-
-		return var2.toString();
+	public String format(LogRecord logRecord) {
+		StringBuilder stringBuilder2 = new StringBuilder();
+		Level level3 = logRecord.getLevel();
+		if(level3 == Level.FINEST) {
+			stringBuilder2.append("[FINEST] ");
+		} else if(level3 == Level.FINER) {
+			stringBuilder2.append("[FINER] ");
+		} else if(level3 == Level.FINE) {
+			stringBuilder2.append("[FINE] ");
+		} else if(level3 == Level.INFO) {
+			stringBuilder2.append("[INFO] ");
+		} else if(level3 == Level.WARNING) {
+			stringBuilder2.append("[WARNING] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append("[SEVERE] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append("[" + level3.getLocalizedName() + "] ");
+		}
+
+		stringBuilder2.append(logRecord.getMessage());
+		stringBuilder2.append('\n');
+		Throwable throwable4 = logRecord.getThrown();
+		if(throwable4 != null) {
+			StringWriter stringWriter5 = new StringWriter();
+			throwable4.printStackTrace(new PrintWriter(stringWriter5));
+			stringBuilder2.append(stringWriter5.toString());
+		}
+
+		return stringBuilder2.toString();
 	}
 }
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -1,27 +1,33 @@
 package net.minecraft.src;
 
-public abstract class EntityAnimal extends EntityCreature implements IAnimals {
+public abstract class EntityAnimal extends EntityCreature implements IAnimal {
 	public EntityAnimal(World var1) {
 		super(var1);
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected float getBlockPathWeight(int x, int y, int z) {
+		int block = this.worldObj.getBlockId(x, y - 1, z);
+		return block == Block.grass.blockID
+				|| block == Block.dirt.blockID
+						? 10.0F
+						: this.worldObj.getBrightness(x, y, z) - 0.5F;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	public boolean getCanSpawnHere() {
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.boundingBox.minY);
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID && this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
+		int var4 = this.worldObj.getBlockId(var1, var2 - 1, var3);
+		return (var4 == Block.grass.blockID || var4 == Block.dirt.blockID || var4 == Block.snow.blockID)
+				&& this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
 	}
 
 	public int getTalkInterval() {
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -3,50 +3,58 @@
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
 
-	public static final float sin(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
-	}
-
-	public static final float cos(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F + 16384.0F) & '\uffff'];
-	}
-
-	public static final float sqrt_float(float var0) {
-		return (float)Math.sqrt((double)var0);
-	}
-
-	public static final float sqrt_double(double var0) {
-		return (float)Math.sqrt(var0);
-	}
-
-	public static int floor_float(float var0) {
-		int var1 = (int)var0;
-		return var0 < (float)var1 ? var1 - 1 : var1;
-	}
-
-	public static int floor_double(double var0) {
-		int var2 = (int)var0;
-		return var0 < (double)var2 ? var2 - 1 : var2;
-	}
-
-	public static float abs(float var0) {
-		return var0 >= 0.0F ? var0 : -var0;
-	}
-
-	public static double abs_max(double var0, double var2) {
-		if(var0 < 0.0D) {
-			var0 = -var0;
-		}
-
-		if(var2 < 0.0D) {
-			var2 = -var2;
-		}
-
-		return var0 > var2 ? var0 : var2;
-	}
-
-	public static int bucketInt(int var0, int var1) {
-		return var0 < 0 ? -((-var0 - 1) / var1) - 1 : var0 / var1;
+	public static final float sin(float value) {
+		return SIN_TABLE[(int)(value * 10430.378F) & 65535];
+	}
+
+	public static final float cos(float value) {
+		return SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
+	}
+
+	public static final float sqrt_float(float value) {
+		return (float)Math.sqrt((double)value);
+	}
+
+	public static final float sqrt_double(double value) {
+		return (float)Math.sqrt(value);
+	}
+
+	public static int floor_float(float value) {
+		int var1 = (int)value;
+		return value < (float)var1 ? var1 - 1 : var1;
+	}
+
+	public static int floor_double(double value) {
+		int var2 = (int)value;
+		return value < (double)var2 ? var2 - 1 : var2;
+	}
+
+	public static float abs(float value) {
+		return value >= 0.0F ? value : -value;
+	}
+
+	public static double abs_max(double value1, double value2) {
+		if(value1 < 0.0D) {
+			value1 = -value1;
+		}
+
+		if(value2 < 0.0D) {
+			value2 = -value2;
+		}
+
+		return value1 > value2 ? value1 : value2;
+	}
+
+	public static int bucketInt(int value1, int value2) {
+		return value1 < 0 ? -((-value1 - 1) / value2) - 1 : value1 / value2;
+	}
+
+	public static float clamp(float x, float min, float max) {
+		return Math.min(Math.max(x, min), max);
+	}
+
+	public static float lerp(float a, float b, float t) {
+		return a + (b - a) * t;
 	}
 
 	static {
--- net/minecraft/src/ItemPainting.java
+++ net/minecraft/src/ItemPainting.java
@@ -6,29 +6,29 @@
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(var7 == 1) {
+		} else if(side == 1) {
 			return false;
 		} else {
 			byte var8 = 0;
-			if(var7 == 4) {
+			if(side == 4) {
 				var8 = 1;
 			}
 
-			if(var7 == 3) {
+			if(side == 3) {
 				var8 = 2;
 			}
 
-			if(var7 == 5) {
+			if(side == 5) {
 				var8 = 3;
 			}
 
-			EntityPainting var9 = new EntityPainting(var3, var4, var5, var6, var8);
-			if(var9.onValidSurface()) {
-				var3.spawnEntityInWorld(var9);
-				--var1.stackSize;
+			EntityPainting entityPainting9 = new EntityPainting(worldObj, x, y, z, var8);
+			if(entityPainting9.onValidSurface()) {
+				worldObj.spawnEntityInWorld(entityPainting9);
+				--itemStack.stackSize;
 			}
 
 			return true;
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -9,12 +9,12 @@
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	protected String getLivingSound() {
@@ -33,14 +33,14 @@
 		return 0.4F;
 	}
 
-	protected int getDropItemId() {
-		return Item.leather.shiftedIndex;
+	protected int[] getDropItems() {
+		return new int[] { Item.leather.shiftedIndex, Item.beefRaw.shiftedIndex };
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		ItemStack var2 = var1.inventory.getCurrentItem();
+	public boolean interact(EntityPlayer entityPlayer) {
+		ItemStack var2 = entityPlayer.inventory.getCurrentItem();
 		if(var2 != null && var2.itemID == Item.bucketEmpty.shiftedIndex) {
-			var1.inventory.setInventorySlotContents(var1.inventory.currentItem, new ItemStack(Item.bucketMilk));
+			entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem, new ItemStack(Item.bucketMilk));
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/RenderPlayer.java
+++ net/minecraft/src/RenderPlayer.java
@@ -1,11 +1,14 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemCharm;
 import org.lwjgl.opengl.GL11;
 
 public class RenderPlayer extends RenderLiving {
 	private ModelBiped modelBipedMain = (ModelBiped)this.mainModel;
 	private ModelBiped modelArmorChestplate = new ModelBiped(1.0F);
 	private ModelBiped modelArmor = new ModelBiped(0.5F);
+	private ModelBiped modelCharmUpper = new ModelBiped(1.1F);
+	private ModelBiped modelCharmLower = new ModelBiped(0.6F);
 	private static final String[] armorFilenamePrefix = new String[]{"cloth", "chain", "iron", "diamond", "gold"};
 
 	public RenderPlayer() {
@@ -13,21 +16,37 @@
 	}
 
 	protected boolean setArmorModel(EntityPlayer var1, int var2) {
-		ItemStack var3 = var1.inventory.armorItemInSlot(3 - var2);
+		boolean charmUpper = var2 == 5;
+		if (charmUpper) {
+			var2 = 4;
+		}
+		ItemStack var3 = var1.inventory.armorItemInSlot(4 - var2);
 		if(var3 != null) {
 			Item var4 = var3.getItem();
 			if(var4 instanceof ItemArmor) {
-				ItemArmor var5 = (ItemArmor)var4;
-				this.loadTexture("/armor/" + armorFilenamePrefix[var5.renderIndex] + "_" + (var2 == 2 ? 2 : 1) + ".png");
-				ModelBiped var6 = var2 == 2 ? this.modelArmor : this.modelArmorChestplate;
-				var6.bipedHead.showModel = var2 == 0;
-				var6.bipedHeadwear.showModel = var2 == 0;
-				var6.bipedBody.showModel = var2 == 1 || var2 == 2;
-				var6.bipedRightArm.showModel = var2 == 1;
-				var6.bipedLeftArm.showModel = var2 == 1;
-				var6.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
-				var6.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
-				this.setRenderPassModel(var6);
+				ItemArmor itemArmor5 = (ItemArmor)var4;
+				this.loadTexture("/armor/" + armorFilenamePrefix[itemArmor5.renderIndex] + "_" + (var2 == 2 ? 2 : 1) + ".png");
+				ModelBiped modelBiped6 = var2 == 2 ? this.modelArmor : this.modelArmorChestplate;
+				modelBiped6.bipedHead.showModel = var2 == 0;
+				modelBiped6.bipedHeadwear.showModel = var2 == 0;
+				modelBiped6.bipedBody.showModel = var2 == 1 || var2 == 2;
+				modelBiped6.bipedRightArm.showModel = var2 == 1;
+				modelBiped6.bipedLeftArm.showModel = var2 == 1;
+				modelBiped6.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
+				modelBiped6.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
+				this.setRenderPassModel(modelBiped6);
+				return true;
+			} else if(var4 instanceof ItemCharm && var2 == 4 && ((ItemCharm) var4).textureName != null) {
+				this.loadTexture("/charm/" + ((ItemCharm) var4).textureName + (charmUpper ? "_upper.png" : "_lower.png"));
+				ModelBiped modelCharm = charmUpper ? modelCharmUpper : modelCharmLower;
+				modelCharm.bipedHead.showModel = true;
+				modelCharm.bipedHeadwear.showModel = true;
+				modelCharm.bipedBody.showModel = true;
+				modelCharm.bipedRightArm.showModel = true;
+				modelCharm.bipedLeftArm.showModel = true;
+				modelCharm.bipedRightLeg.showModel = true;
+				modelCharm.bipedLeftLeg.showModel = true;
+				this.setRenderPassModel(modelCharm);
 				return true;
 			}
 		}
@@ -42,9 +61,9 @@
 		super.doRenderLiving(var1, var2, var4 - (double)var1.yOffset, var6, var8, var9);
 		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = false;
 		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = false;
-		FontRenderer var11 = this.getFontRendererFromRenderManager();
+		FontRenderer fontRenderer11 = this.getFontRendererFromRenderManager();
 		float var12 = 1.6F;
-		float var13 = (float)(1.0D / 60.0D) * var12;
+		float var13 = 0.016666668F * var12;
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2 + 0.0F, (float)var4 + 2.3F, (float)var6);
 		GL11.glNormal3f(0.0F, 1.0F, 0.0F);
@@ -59,21 +78,21 @@
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		Tessellator var16 = Tessellator.instance;
+		Tessellator tessellator16 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		var16.startDrawingQuads();
-		int var17 = var11.getStringWidth(var15) / 2;
-		var16.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F);
-		var16.addVertex((double)(-var17 - 1), -1.0D, 0.0D);
-		var16.addVertex((double)(-var17 - 1), 8.0D, 0.0D);
-		var16.addVertex((double)(var17 + 1), 8.0D, 0.0D);
-		var16.addVertex((double)(var17 + 1), -1.0D, 0.0D);
-		var16.draw();
+		tessellator16.startDrawingQuads();
+		int var17 = fontRenderer11.getStringWidth(var15) / 2;
+		tessellator16.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F);
+		tessellator16.addVertex((double)(-var17 - 1), -1.0D, 0.0D);
+		tessellator16.addVertex((double)(-var17 - 1), 8.0D, 0.0D);
+		tessellator16.addVertex((double)(var17 + 1), 8.0D, 0.0D);
+		tessellator16.addVertex((double)(var17 + 1), -1.0D, 0.0D);
+		tessellator16.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
-		var11.drawString(var15, -var11.getStringWidth(var15) / 2, 0, 553648127);
+		fontRenderer11.drawString(var15, -fontRenderer11.getStringWidth(var15) / 2, 0, 553648127);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(true);
-		var11.drawString(var15, -var11.getStringWidth(var15) / 2, 0, -1);
+		fontRenderer11.drawString(var15, -fontRenderer11.getStringWidth(var15) / 2, 0, -1);
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -84,25 +103,25 @@
 		ItemStack var3 = var1.inventory.getCurrentItem();
 		if(var3 != null) {
 			GL11.glPushMatrix();
-			this.modelBipedMain.bipedRightArm.renderWithRotation(1.0F / 16.0F);
-			GL11.glTranslatef(-(1.0F / 16.0F), 7.0F / 16.0F, 1.0F / 16.0F);
+			this.modelBipedMain.bipedRightArm.renderWithRotation(0.0625F);
+			GL11.glTranslatef(-0.0625F, 0.4375F, 0.0625F);
 			float var4;
 			if(var3.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.itemID].getRenderType())) {
 				var4 = 0.5F;
-				GL11.glTranslatef(0.0F, 3.0F / 16.0F, -(5.0F / 16.0F));
-				var4 *= 12.0F / 16.0F;
+				GL11.glTranslatef(0.0F, 0.1875F, -0.3125F);
+				var4 *= 0.75F;
 				GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 				GL11.glScalef(var4, -var4, var4);
 			} else if(Item.itemsList[var3.itemID].isFull3D()) {
-				var4 = 10.0F / 16.0F;
-				GL11.glTranslatef(0.0F, 3.0F / 16.0F, 0.0F);
+				var4 = 0.625F;
+				GL11.glTranslatef(0.0F, 0.1875F, 0.0F);
 				GL11.glScalef(var4, -var4, var4);
 				GL11.glRotatef(-100.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			} else {
-				var4 = 6.0F / 16.0F;
-				GL11.glTranslatef(0.25F, 3.0F / 16.0F, -(3.0F / 16.0F));
+				var4 = 0.375F;
+				GL11.glTranslatef(0.25F, 0.1875F, -0.1875F);
 				GL11.glScalef(var4, var4, var4);
 				GL11.glRotatef(60.0F, 0.0F, 0.0F, 1.0F);
 				GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
@@ -116,14 +135,14 @@
 	}
 
 	protected void scalePlayer(EntityPlayer var1, float var2) {
-		float var3 = 15.0F / 16.0F;
+		float var3 = 0.9375F;
 		GL11.glScalef(var3, var3, var3);
 	}
 
 	public void drawFirstPersonHand() {
 		this.modelBipedMain.swingProgress = 0.0F;
-		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
-		this.modelBipedMain.bipedRightArm.render(1.0F / 16.0F);
+		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F);
+		this.modelBipedMain.bipedRightArm.render(0.0625F);
 	}
 
 	protected void preRenderCallback(EntityLiving var1, float var2) {
@@ -144,5 +163,9 @@
 
 	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
 		this.renderPlayer((EntityPlayer)var1, var2, var4, var6, var8, var9);
+	}
+
+	protected float maxRenderPasses() {
+		return 6;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Pair.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.Objects;
+
+public class Pair<I0, I1> {
+	public I0 var0;
+	public I1 var1;
+
+	public Pair(I0 var0, I1 var1) {
+		this.var0 = var0;
+		this.var1 = var1;
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		Pair<?, ?> pair = (Pair<?, ?>) o;
+		return Objects.equals(var0, pair.var0) && Objects.equals(var1, pair.var1);
+	}
+
+	public int hashCode() {
+		return Objects.hash(var0, var1);
+	}
+}
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -11,12 +11,12 @@
 		this.texture = "/mob/creeper.png";
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	protected void updateEntityActionState() {
@@ -44,16 +44,16 @@
 		return "mob.creeperdeath";
 	}
 
-	public void onDeath(Entity var1) {
-		super.onDeath(var1);
-		if(var1 instanceof EntitySkeleton) {
-			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(2), 1);
+	public void onDeath(Entity entity) {
+		super.onDeath(entity);
+		if(entity instanceof EntitySkeleton) {
+			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(6), 1);
 		}
 
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(this.creeperState <= 0 && var2 < 3.0F || this.creeperState > 0 && var2 < 7.0F) {
+	protected void attackEntity(Entity entity, float distance) {
+		if(this.creeperState <= 0 && distance < 3.0F || this.creeperState > 0 && distance < 7.0F) {
 			if(this.timeSinceIgnited == 0) {
 				this.worldObj.playSoundAtEntity(this, "random.fuse", 1.0F, 0.5F);
 			}
--- net/minecraft/src/EntityMob.java
+++ net/minecraft/src/EntityMob.java
@@ -30,11 +30,11 @@
 		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(super.attackEntityFrom(var1, var2)) {
-			if(this.riddenByEntity != var1 && this.ridingEntity != var1) {
-				if(var1 != this) {
-					this.entityToAttack = var1;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(super.attackEntityFrom(entity, damage)) {
+			if(this.riddenByEntity != entity && this.ridingEntity != entity) {
+				if(entity != this) {
+					this.entityToAttack = entity;
 				}
 
 				return true;
@@ -46,24 +46,24 @@
 		}
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if((double)var2 < 2.5D && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+	protected void attackEntity(Entity entity, float distance) {
+		if((double)distance < 2.5D && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
 			this.attackTime = 20;
-			var1.attackEntityFrom(this, this.attackStrength);
+			entity.attackEntityFrom(this, this.attackStrength);
 		}
 
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return 0.5F - this.worldObj.getBrightness(var1, var2, var3);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return 0.5F - this.worldObj.getBrightness(x, y, z);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	public boolean getCanSpawnHere() {
--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -3,29 +3,37 @@
 import java.util.Random;
 
 public class BlockFlower extends Block {
-	protected BlockFlower(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
+	protected BlockFlower(int id, int tex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = tex;
 		this.setTickOnLoad(true);
 		float var3 = 0.2F;
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 3.0F, 0.5F + var3);
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.grass.blockID || var1 == Block.dirt.blockID || var1 == Block.tilledField.blockID;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		this.checkFlowerChange(var1, var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.checkFlowerChange(var1, var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int blockID) {
+		return blockID == Block.grass.blockID || blockID == Block.dirt.blockID || blockID == Block.tilledField.blockID;
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
+		this.checkFlowerChange(worldObj, x, y, z);
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		this.checkFlowerChange(worldObj, x, y, z);
+	}
+
+	protected final void checkFlowerChange(World worldObj, int x, int y, int z) {
+		if(!this.canBlockStay(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
+		}
+
 	}
 
 	protected final void g(World var1, int var2, int var3, int var4) {
@@ -36,19 +44,11 @@
 
 	}
 
-	protected final void checkFlowerChange(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-	}
-
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return (var1.getBlockLightValue(var2, var3, var4) >= 8 || var1.canBlockSeeTheSky(var2, var3, var4)) && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return (world.getBlockLightValue(x, y, z) >= 8 || world.canBlockSeeTheSky(x, y, z)) && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -4,8 +4,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
-import org.lwjgl.input.Keyboard;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -21,27 +22,31 @@
 	public float damageGuiPartialTime;
 	float prevVignetteBrightness = 1.0F;
 
-	public GuiIngame(Minecraft var1) {
-		this.mc = var1;
+	public GuiIngame(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
-		ScaledResolution var5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		int var6 = var5.getScaledWidth();
-		int var7 = var5.getScaledHeight();
-		FontRenderer var8 = this.mc.fontRenderer;
+	public void renderGameOverlay(float renderPartialTick, boolean hasScreen, int width, int height) {
+		if (!hasScreen && !this.mc.showHud) {
+			return;
+		}
+
+		ScaledResolution scaledResolution5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int var6 = scaledResolution5.getScaledWidth();
+		int var7 = scaledResolution5.getScaledHeight();
+		FontRenderer fontRenderer8 = this.mc.fontRenderer;
 		this.mc.entityRenderer.setupOverlayRendering();
 		GL11.glEnable(GL11.GL_BLEND);
 		if(this.mc.options.fancyGraphics) {
-			this.renderVignette(this.mc.thePlayer.getBrightness(var1), var6, var7);
+			this.renderVignette(this.mc.thePlayer.getBrightness(renderPartialTick), var6, var7);
 		}
 
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/gui.png"));
-		InventoryPlayer var9 = this.mc.thePlayer.inventory;
+		InventoryPlayer inventoryPlayer9 = this.mc.thePlayer.inventory;
 		this.zLevel = -90.0F;
 		this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-		this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var9.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+		this.drawTexturedModalRect(var6 / 2 - 91 - 1 + inventoryPlayer9.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
@@ -54,11 +59,17 @@
 
 		int var11 = this.mc.thePlayer.health;
 		int var12 = this.mc.thePlayer.prevHealth;
+		float cf0 = this.mc.thePlayer.energy;
+		float cf1 = this.mc.thePlayer.mana;
+		boolean cz1 = this.mc.thePlayer.energyRegen;
+		boolean cz2 = rand.nextFloat() < this.mc.thePlayer.energyBoost * 25.0F;
+		boolean cz3 = this.mc.thePlayer.showMana;
+		boolean cz4 = this.mc.thePlayer.creative;
 		this.rand.setSeed((long)(this.updateCounter * 312871));
 		int var13;
 		int var14;
 		int var15;
-		if(this.mc.playerController.shouldDrawHUD()) {
+		if(this.mc.playerController.shouldDrawHUD() && !cz4) {
 			var13 = this.mc.thePlayer.getPlayerArmorValue();
 
 			int var16;
@@ -67,15 +78,15 @@
 				if(var13 > 0) {
 					var16 = var6 / 2 + 91 - var14 * 8 - 9;
 					if(var14 * 2 + 1 < var13) {
-						this.drawTexturedModalRect(var16, var15, 34, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 34, 9, 9, 9);
 					}
 
 					if(var14 * 2 + 1 == var13) {
-						this.drawTexturedModalRect(var16, var15, 25, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 25, 9, 9, 9);
 					}
 
 					if(var14 * 2 + 1 > var13) {
-						this.drawTexturedModalRect(var16, var15, 16, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 16, 9, 9, 9);
 					}
 				}
 
@@ -107,18 +118,44 @@
 				if(var14 * 2 + 1 == var11) {
 					this.drawTexturedModalRect(var17, var15, 61, 0, 9, 9);
 				}
+
+				var15 = var7 - 32;
+				if (cz1) {
+					var15 += this.rand.nextInt(2);
+				}
+				var16 = var6 / 2 + 91 - var14 * 8 - 9;
+
+				this.drawTexturedModalRect(var16, var15, 34 + (cz2 ? 9 : 0), 18, 9, 9);
+				int ci3 = MathHelper.floor_float(MathHelper.clamp((var14 * 2 + 2 - cf0) * 9, 0, 9));
+				this.drawTexturedModalRect(var16 + ci3, var15, 52 + ci3, 18, 9, 9);
+
+				if (cz3) {
+					var15 = var7 - 42;
+					var16 = var6 / 2 - 91 + var14 * 8;
+					this.drawTexturedModalRect(var16, var15, 16, 27, 9, 9);
+					int ci5 = MathHelper.floor_float(MathHelper.clamp((cf1 - (var14 * 2 + 1)) * 9, 0, 9));
+					this.drawTexturedModalRect(var16, var15, 25, 27, ci5, 9);
+				}
 			}
 
 			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
+				if (cz3) {
+					var7 -= 10;
+				}
+
 				var14 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
 				var15 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var14;
 
 				for(var16 = 0; var16 < var14 + var15; ++var16) {
 					if(var16 < var14) {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 16, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 42, 16, 18, 9, 9);
 					} else {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 25, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 42, 25, 18, 9, 9);
 					}
+				}
+
+				if (cz3) {
+					var7 += 10;
 				}
 			}
 		}
@@ -133,31 +170,34 @@
 		for(var13 = 0; var13 < 9; ++var13) {
 			var14 = var6 / 2 - 90 + var13 * 20 + 2;
 			var15 = var7 - 16 - 3;
-			this.renderInventorySlot(var13, var14, var15, var1);
+			this.renderInventorySlot(var13, var14, var15, renderPartialTick);
 		}
 
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		String var21;
-		if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
+		if(this.mc.options.debugMenu) {
+			fontRenderer8.drawStringWithShadow(Minecraft.version + " (" + this.mc.debug + ")", 2, 2, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoLocation(), 2, 12, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 22, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 32, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 42, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoSeed(), 2, 52, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoWorld(), 2, 62, 0xFFFFFF);
 			long var22 = Runtime.getRuntime().maxMemory();
 			long var27 = Runtime.getRuntime().totalMemory();
 			long var28 = Runtime.getRuntime().freeMemory();
 			long var19 = var27 - var28;
 			var21 = "Used memory: " + var19 * 100L / var22 + "% (" + var19 / 1024L / 1024L + "MB) of " + var22 / 1024L / 1024L + "MB";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 2, 14737632);
+			this.drawString(fontRenderer8, var21, var6 - fontRenderer8.getStringWidth(var21) - 2, 2, 14737632);
 			var21 = "Allocated memory: " + var27 * 100L / var22 + "% (" + var27 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 12, 14737632);
+			this.drawString(fontRenderer8, var21, var6 - fontRenderer8.getStringWidth(var21) - 2, 12, 14737632);
 		} else {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01", 2, 2, 16777215);
+			fontRenderer8.drawStringWithShadow(Minecraft.version, 2, 2, 0xFFFFFF);
 		}
 
 		if(this.recordPlayingUpFor > 0) {
-			float var23 = (float)this.recordPlayingUpFor - var1;
+			float var23 = (float)this.recordPlayingUpFor - renderPartialTick;
 			var14 = (int)(var23 * 256.0F / 20.0F);
 			if(var14 > 255) {
 				var14 = 255;
@@ -168,8 +208,8 @@
 				GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 48), 0.0F);
 				GL11.glEnable(GL11.GL_BLEND);
 				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-				var15 = Color.HSBtoRGB(var23 / 50.0F, 0.7F, 0.6F) & 16777215;
-				var8.drawString(this.recordPlaying, -var8.getStringWidth(this.recordPlaying) / 2, -4, var15 + (var14 << 24));
+				var15 = Color.HSBtoRGB(var23 / 50.0F, 0.7F, 0.6F) & 0xFFFFFF;
+				fontRenderer8.drawString(this.recordPlaying, -fontRenderer8.getStringWidth(this.recordPlaying) / 2, -4, var15 + (var14 << 24));
 				GL11.glDisable(GL11.GL_BLEND);
 				GL11.glPopMatrix();
 			}
@@ -213,7 +253,7 @@
 					var21 = ((ChatLine)this.chatMessageList.get(var15)).message;
 					this.drawRect(var30, var20 - 1, var30 + 320, var20 + 8, var18 / 2 << 24);
 					GL11.glEnable(GL11.GL_BLEND);
-					var8.drawStringWithShadow(var21, var30, var20, 16777215 + (var18 << 24));
+					fontRenderer8.drawStringWithShadow(var21, var30, var20, 0xFFFFFF + (var18 << 24));
 				}
 			}
 		}
@@ -223,39 +263,39 @@
 		GL11.glDisable(GL11.GL_BLEND);
 	}
 
-	private void renderVignette(float var1, int var2, int var3) {
-		var1 = 1.0F - var1;
-		if(var1 < 0.0F) {
-			var1 = 0.0F;
-		}
-
-		if(var1 > 1.0F) {
-			var1 = 1.0F;
-		}
-
-		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(var1 - this.prevVignetteBrightness) * 0.01D);
+	private void renderVignette(float brightness, int width, int height) {
+		brightness = 1.0F - brightness;
+		if(brightness < 0.0F) {
+			brightness = 0.0F;
+		}
+
+		if(brightness > 1.0F) {
+			brightness = 1.0F;
+		}
+
+		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(brightness - this.prevVignetteBrightness) * 0.01D);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(false);
 		GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
 		GL11.glColor4f(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/misc/vignette.png"));
-		Tessellator var4 = Tessellator.instance;
-		var4.startDrawingQuads();
-		var4.addVertexWithUV(0.0D, (double)var3, -90.0D, 0.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, (double)var3, -90.0D, 1.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, 0.0D, -90.0D, 1.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
-		var4.draw();
+		Tessellator tessellator4 = Tessellator.instance;
+		tessellator4.startDrawingQuads();
+		tessellator4.addVertexWithUV(0.0D, (double)height, -90.0D, 0.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, (double)height, -90.0D, 1.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, 0.0D, -90.0D, 1.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
+		tessellator4.draw();
 		GL11.glDepthMask(true);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 	}
 
-	private void renderInventorySlot(int var1, int var2, int var3, float var4) {
+	private void renderInventorySlot(int var1, int var2, int var3, float renderPartialTick) {
 		ItemStack var5 = this.mc.thePlayer.inventory.mainInventory[var1];
 		if(var5 != null) {
-			float var6 = (float)var5.animationsToGo - var4;
+			float var6 = (float)var5.animationsToGo - renderPartialTick;
 			if(var6 > 0.0F) {
 				GL11.glPushMatrix();
 				float var7 = 1.0F + var6 / 5.0F;
@@ -286,17 +326,17 @@
 
 	}
 
-	public void addChatMessage(String var1) {
-		while(this.mc.fontRenderer.getStringWidth(var1) > 320) {
+	public void addChatMessage(String message) {
+		while(this.mc.fontRenderer.getStringWidth(message) > 320) {
 			int var2;
-			for(var2 = 1; var2 < var1.length() && this.mc.fontRenderer.getStringWidth(var1.substring(0, var2 + 1)) <= 320; ++var2) {
+			for(var2 = 1; var2 < message.length() && this.mc.fontRenderer.getStringWidth(message.substring(0, var2 + 1)) <= 320; ++var2) {
 			}
 
-			this.addChatMessage(var1.substring(0, var2));
-			var1 = var1.substring(var2);
+			this.addChatMessage(message.substring(0, var2));
+			message = message.substring(var2);
 		}
 
-		this.chatMessageList.add(0, new ChatLine(var1));
+		this.chatMessageList.add(0, new ChatLine(message));
 
 		while(this.chatMessageList.size() > 50) {
 			this.chatMessageList.remove(this.chatMessageList.size() - 1);
@@ -304,8 +344,8 @@
 
 	}
 
-	public void setRecordPlayingMessage(String var1) {
-		this.recordPlaying = "Now playing: " + var1;
+	public void setRecordPlayingMessage(String record) {
+		this.recordPlaying = "Now playing: " + record;
 		this.recordPlayingUpFor = 60;
 	}
 }
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,33 +1,35 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemHoe extends Item {
-	public ItemHoe(int var1, int var2) {
-		super(var1);
+	public ItemHoe(int id, int strength) {
+		super(id);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
+		this.maxDamage = 32 << strength;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
-		Material var9 = var3.getBlockMaterial(var4, var5 + 1, var6);
-		if((var9.isSolid() || var8 != Block.grass.blockID) && var8 != Block.dirt.blockID) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		int var8 = worldObj.getBlockId(x, y, z);
+		Material material9 = worldObj.getBlockMaterial(x, y + 1, z);
+		if((material9.isSolid() || var8 != Block.grass.blockID) && var8 != Block.dirt.blockID) {
 			return false;
 		} else {
 			Block var10 = Block.tilledField;
-			var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var10.stepSound.getStepSound(), (var10.stepSound.getVolume() + 1.0F) / 2.0F, var10.stepSound.getPitch() * 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, var10.blockID);
-			var1.damageItem(1);
-			if(var3.rand.nextInt(8) == 0 && var8 == Block.grass.blockID) {
+			worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), var10.stepSound.getStepSound(), (var10.stepSound.getVolume() + 1.0F) / 2.0F, var10.stepSound.getPitch() * 0.8F);
+			worldObj.setBlockWithNotify(x, y, z, var10.blockID);
+			itemStack.damageItem(1);
+			if(worldObj.rand.nextInt(8) == 0 && var8 == Block.grass.blockID) {
 				byte var11 = 1;
 
 				for(int var12 = 0; var12 < var11; ++var12) {
 					float var13 = 0.7F;
-					float var14 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
+					float var14 = worldObj.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
 					float var15 = 1.2F;
-					float var16 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
-					EntityItem var17 = new EntityItem(var3, (double)((float)var4 + var14), (double)((float)var5 + var15), (double)((float)var6 + var16), new ItemStack(Item.seeds));
-					var17.delayBeforeCanPickup = 10;
-					var3.spawnEntityInWorld(var17);
+					float var16 = worldObj.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
+					EntityItem entityItem17 = new EntityItem(worldObj, (double)((float)x + var14), (double)((float)y + var15), (double)((float)z + var16), new ItemStack(Item.seeds));
+					entityItem17.delayBeforeCanPickup = 10;
+					worldObj.spawnEntityInWorld(entityItem17);
 				}
 			}
 
@@ -37,5 +39,16 @@
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				"Right click to create farmland",
+				ItemTooltip.DESCRIPTION_COL,
+				"and gather seeds.",
+				ItemTooltip.DESCRIPTION_COL,
+				Integer.toString(this.maxDamage) + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/EntityPhantom.java
@@ -1,0 +1,40 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class EntityPhantom extends EntityMob {
+	public EntityPhantom(World var1) {
+		super(var1);
+		this.texture = "/mob/phantom.png";
+		this.moveSpeed = 2.0F;
+		this.attackStrength = 5;
+	}
+
+	public void onLivingUpdate() {
+		if (this.worldObj.getBrightness((int) (this.posX), (int) (this.posY), (int) (this.posZ)) >= 0.2F) {
+			this.attackEntityFrom(null, 5);
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected String getLivingSound() {
+		return "diverge.mob.phantom";
+	}
+
+	protected String getHurtSound() {
+		return "diverge.mob.phantom";
+	}
+
+	protected String getDeathSound() {
+		return "diverge.mob.phantomdeath";
+	}
+
+	protected float getSoundVolume() {
+		return 0.2F;
+	}
+
+	protected int getDropItemId() {
+		return Item.flint.shiftedIndex;
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/FurnaceRecipeManager.java
@@ -1,0 +1,67 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.Item;
+import net.minecraft.src.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FurnaceRecipeManager {
+	private static final FurnaceRecipeManager instance = new FurnaceRecipeManager();
+	private List<FurnaceRecipe> recipes = new ArrayList<>();
+
+	public static final FurnaceRecipeManager getInstance() {
+		return instance;
+	}
+
+	private FurnaceRecipeManager() {
+		addRecipe(Block.oreCoal.blockID, Item.coal.shiftedIndex, -1, 0);
+		addRecipe(Block.oreIron.blockID, Item.ingotIron.shiftedIndex, -1, 0);
+		addRecipe(Block.oreGold.blockID, Item.ingotGold.shiftedIndex, -1, 0);
+		addRecipe(Block.oreDiamond.blockID, Item.diamond.shiftedIndex, -1, 0);
+		addRecipe(Block.oreRuby.blockID, Item.ruby.shiftedIndex, -1, 0);
+		addRecipe(Block.oreSapphire.blockID, Item.sapphire.shiftedIndex, -1, 0);
+		addRecipe(Block.sand.blockID, Block.glass.blockID, 0, 0);
+		addRecipe(Item.porkRaw.shiftedIndex, Item.porkCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.beefRaw.shiftedIndex, Item.beefCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.chickenRaw.shiftedIndex, Item.chickenCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.muttonRaw.shiftedIndex, Item.muttonCooked.shiftedIndex, 0, 0);
+		addRecipe(Block.cobblestone.blockID, Block.stone.blockID, -1, -1);
+		addRecipe(Item.clay.shiftedIndex, Item.brick.shiftedIndex, 0, 0);
+		addRecipe(Item.starChunk.shiftedIndex, Item.starDust.shiftedIndex, 0, 0);
+	}
+
+	private void addRecipe(int input, int output, int inputMeta, int outputMeta) {
+		recipes.add(new FurnaceRecipe(new ItemStack(input, 1).withMetadata(inputMeta),
+									  new ItemStack(output, 1).withMetadata(outputMeta)));
+	}
+
+	public ItemStack findMatchingRecipe(ItemStack input) {
+		for (FurnaceRecipe recipe : recipes) {
+			if (recipe.canSmelt(input)) {
+				return recipe.getOutput(input);
+			}
+		}
+		return null;
+	}
+
+	public int count() {
+		return this.recipes.size();
+	}
+
+	public ItemStack[] getRecipeAsItems(int i) {
+		ItemStack in = this.recipes.get(i).getInput();
+		ItemStack out = this.recipes.get(i).getOutput(in);
+		if (in.itemMetadata == -1) {
+			in.itemMetadata = 0;
+		}
+		if (out.itemMetadata == -1) {
+			out.itemMetadata = 0;
+		}
+
+		return new ItemStack[] { in, new ItemStack(Block.stoneOvenIdle),
+								 null, null, null, null, null, null, null,
+								 out };
+	}
+}
--- net/minecraft/src/MCHashEntry2.java
+++ net/minecraft/src/MCHashEntry2.java
@@ -6,11 +6,11 @@
 	MCHashEntry2 nextEntry;
 	final int slotHash;
 
-	MCHashEntry2(int var1, long var2, Object var4, MCHashEntry2 var5) {
-		this.valueEntry = var4;
-		this.nextEntry = var5;
-		this.hashEntry = var2;
-		this.slotHash = var1;
+	MCHashEntry2(int slotHash, long hashEntry, Object valueEntry, MCHashEntry2 nextEntry) {
+		this.valueEntry = valueEntry;
+		this.nextEntry = nextEntry;
+		this.hashEntry = hashEntry;
+		this.slotHash = slotHash;
 	}
 
 	public final long getHash() {
@@ -21,16 +21,16 @@
 		return this.valueEntry;
 	}
 
-	public final boolean equals(Object var1) {
-		if(!(var1 instanceof MCHashEntry2)) {
+	public final boolean equals(Object object) {
+		if(!(object instanceof MCHashEntry2)) {
 			return false;
 		} else {
-			MCHashEntry2 var2 = (MCHashEntry2)var1;
-			Long var3 = Long.valueOf(this.getHash());
-			Long var4 = Long.valueOf(var2.getHash());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
+			MCHashEntry2 mCHashEntry22 = (MCHashEntry2)object;
+			Long long3 = this.getHash();
+			Long long4 = mCHashEntry22.getHash();
+			if(long3 == long4 || long3 != null && long3.equals(long4)) {
 				Object var5 = this.getValue();
-				Object var6 = var2.getValue();
+				Object var6 = mCHashEntry22.getValue();
 				if(var5 == var6 || var5 != null && var5.equals(var6)) {
 					return true;
 				}
--- net/minecraft/src/NBTTagFloat.java
+++ net/minecraft/src/NBTTagFloat.java
@@ -10,16 +10,16 @@
 	public NBTTagFloat() {
 	}
 
-	public NBTTagFloat(float var1) {
-		this.floatValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeFloat(this.floatValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.floatValue = var1.readFloat();
+	public NBTTagFloat(float value) {
+		this.floatValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeFloat(this.floatValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.floatValue = dataInput.readFloat();
 	}
 
 	public byte getType() {
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -3,8 +3,29 @@
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
+	private int trunkHeight = 4;
+	private int trunkVariation = 3;
+	private int leavesHeight = 3;
+
+	private int altMetadata = 0;
+	private double altChance = 0.0D;
+
+	public void setScale(double var1, double var3, double var5) {
+		trunkHeight = (int)var1 + 4;
+		trunkVariation = (int)var3 + 3;
+		leavesHeight = (int)var5 + 3;
+	}
+
+	public WorldGenTrees withAltForm(int altMetadata, double altChance) {
+		this.altMetadata = altMetadata;
+		this.altChance = altChance;
+		return this;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
+		int meta = var2.nextDouble() < altChance ? altMetadata : 0;
+
+		int var6 = var2.nextInt(trunkVariation) + trunkHeight;
 		boolean var7 = true;
 		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
 			int var8;
@@ -43,9 +64,10 @@
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
-					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+					for(var16 = var4 - leavesHeight + var6; var16 <= var4 + var6; ++var16) {
 						var10 = var16 - (var4 + var6);
 						var11 = 1 - var10 / 2;
+						if (var11 > 2) var11 = 2;
 
 						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
 							int var13 = var12 - var3;
@@ -53,7 +75,7 @@
 							for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
 								int var15 = var14 - var5;
 								if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-									var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+									var1.setBlockAndMetadata(var12, var16, var14, Block.leaves.blockID, meta);
 								}
 							}
 						}
@@ -62,7 +84,7 @@
 					for(var16 = 0; var16 < var6; ++var16) {
 						var10 = var1.getBlockId(var3, var4 + var16, var5);
 						if(var10 == 0 || var10 == Block.leaves.blockID) {
-							var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+							var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, meta);
 						}
 					}
 
--- net/minecraft/src/ThreadSleepForeverServer.java
+++ net/minecraft/src/ThreadSleepForeverServer.java
@@ -5,8 +5,8 @@
 public class ThreadSleepForeverServer extends Thread {
 	final MinecraftServer mcServer;
 
-	public ThreadSleepForeverServer(MinecraftServer var1) {
-		this.mcServer = var1;
+	public ThreadSleepForeverServer(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 		this.setDaemon(true);
 		this.start();
 	}
@@ -15,7 +15,7 @@
 		while(true) {
 			try {
 				Thread.sleep(2147483647L);
-			} catch (InterruptedException var2) {
+			} catch (InterruptedException interruptedException2) {
 			}
 		}
 	}
--- net/minecraft/src/TileEntitySign.java
+++ net/minecraft/src/TileEntitySign.java
@@ -4,19 +4,19 @@
 	public String[] signText = new String[]{"", "", "", ""};
 	public int lineBeingEdited = -1;
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("Text1", this.signText[0]);
-		var1.setString("Text2", this.signText[1]);
-		var1.setString("Text3", this.signText[2]);
-		var1.setString("Text4", this.signText[3]);
+	public void writeToNBT(NBTTagCompound compoundTag) {
+		super.writeToNBT(compoundTag);
+		compoundTag.setString("Text1", this.signText[0]);
+		compoundTag.setString("Text2", this.signText[1]);
+		compoundTag.setString("Text3", this.signText[2]);
+		compoundTag.setString("Text4", this.signText[3]);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		super.readFromNBT(compoundTag);
 
 		for(int var2 = 0; var2 < 4; ++var2) {
-			this.signText[var2] = var1.getString("Text" + (var2 + 1));
+			this.signText[var2] = compoundTag.getString("Text" + (var2 + 1));
 			if(this.signText[var2].length() > 15) {
 				this.signText[var2] = this.signText[var2].substring(0, 15);
 			}
--- net/minecraft/src/Packet14BlockDig.java
+++ net/minecraft/src/Packet14BlockDig.java
@@ -14,32 +14,32 @@
 	public Packet14BlockDig() {
 	}
 
-	public Packet14BlockDig(int var1, int var2, int var3, int var4, int var5) {
-		this.status = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.face = var5;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.status = var1.read();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.face = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.status);
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.face);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockDig(this);
+	public Packet14BlockDig(int status, int x, int y, int z, int side) {
+		this.status = status;
+		this.xPosition = x;
+		this.yPosition = y;
+		this.zPosition = z;
+		this.face = side;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.status = dataInputStream.read();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.face = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.status);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.face);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockDig(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -1,44 +1,44 @@
 package net.minecraft.src;
 
 public class BlockJukeBox extends Block {
-	protected BlockJukeBox(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.blockIndexInTexture + (var1 == 1 ? 1 : 0);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	protected BlockJukeBox(int blockID, int tex) {
+		super(blockID, tex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.blockIndexInTexture + (side == 1 ? 1 : 0);
+	}
+
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if(var6 > 0) {
-			this.ejectRecord(var1, var2, var3, var4, var6);
+			this.ejectRecord(worldObj, x, y, z, var6);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void ejectRecord(World var1, int var2, int var3, int var4, int var5) {
-		var1.playRecord((String)null, var2, var3, var4);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+	public void ejectRecord(World worldObj, int x, int y, int z, int var5) {
+		worldObj.playRecord(null, x, y, z, null);
+		worldObj.setBlockMetadataWithNotify(x, y, z, 0);
 		int var6 = Item.record13.shiftedIndex + var5 - 1;
 		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.2D + 0.6D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
+		double var8 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+		double var10 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.2D + 0.6D;
+		double var12 = (double)(worldObj.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(worldObj, (double)x + var8, (double)y + var10, (double)z + var12, new ItemStack(var6));
+		entityItem14.delayBeforeCanPickup = 10;
+		worldObj.spawnEntityInWorld(entityItem14);
 	}
 
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			if(var5 > 0) {
-				this.ejectRecord(var1, var2, var3, var4, var5);
+	public void dropBlockAsItemWithChance(World worldObj, int x, int y, int z, int metadata, float chance) {
+		if(worldObj.canDoClientAction()) {
+			if(metadata > 0) {
+				this.ejectRecord(worldObj, x, y, z, metadata);
 			}
 
-			super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+			super.dropBlockAsItemWithChance(worldObj, x, y, z, 0, chance);
 		}
 	}
 }
--- net/minecraft/src/Packet21PickupSpawn.java
+++ net/minecraft/src/Packet21PickupSpawn.java
@@ -13,52 +13,56 @@
 	public byte pitch;
 	public byte roll;
 	public int itemID;
+	public int itemMetadata;
 	public int count;
 
 	public Packet21PickupSpawn() {
 	}
 
-	public Packet21PickupSpawn(EntityItem var1) {
-		this.entityId = var1.entityID;
-		this.itemID = var1.item.itemID;
-		this.count = var1.item.stackSize;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.motionX * 128.0D));
-		this.pitch = (byte)((int)(var1.motionY * 128.0D));
-		this.roll = (byte)((int)(var1.motionZ * 128.0D));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.roll = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeByte(this.roll);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePickupSpawn(this);
+	public Packet21PickupSpawn(EntityItem entityItem) {
+		this.entityId = entityItem.entityID;
+		this.itemID = entityItem.item.itemID;
+		this.itemMetadata = entityItem.item.itemMetadata;
+		this.count = entityItem.item.stackSize;
+		this.xPosition = MathHelper.floor_double(entityItem.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityItem.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityItem.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityItem.motionX * 128.0D));
+		this.pitch = (byte)((int)(entityItem.motionY * 128.0D));
+		this.roll = (byte)((int)(entityItem.motionZ * 128.0D));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.itemID = dataInputStream.readShort();
+		this.itemMetadata = dataInputStream.readByte();
+		this.count = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.roll = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.itemMetadata);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeByte(this.roll);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePickupSpawn(this);
 	}
 
 	public int getPacketSize() {
-		return 22;
+		return 23;
 	}
 }
--- net/minecraft/src/NetworkManager.java
+++ net/minecraft/src/NetworkManager.java
@@ -31,27 +31,31 @@
 	private int sendQueueByteLength = 0;
 	private int chunkDataSendCounter = 0;
 
-	public NetworkManager(Socket var1, String var2, NetHandler var3) throws IOException {
-		this.networkSocket = var1;
-		this.netHandler = var3;
-		var1.setTrafficClass(24);
-		this.socketInputStream = new DataInputStream(var1.getInputStream());
-		this.socketOutputStream = new DataOutputStream(var1.getOutputStream());
-		this.readThread = new NetworkReaderThread(this, var2 + " read thread");
-		this.writeThread = new NetworkWriterThread(this, var2 + " write thread");
+	public NetworkManager(Socket socket, String name, NetHandler netHandler) throws IOException {
+		this.networkSocket = socket;
+		this.netHandler = netHandler;
+		socket.setTrafficClass(24);
+		this.socketInputStream = new DataInputStream(socket.getInputStream());
+		this.socketOutputStream = new DataOutputStream(socket.getOutputStream());
+		this.readThread = new NetworkReaderThread(this, name + " read thread");
+		this.writeThread = new NetworkWriterThread(this, name + " write thread");
 		this.readThread.start();
 		this.writeThread.start();
 	}
 
-	public void addToSendQueue(Packet var1) {
+	public void setNetHandler(NetHandler netHandler) {
+		this.netHandler = netHandler;
+	}
+
+	public void addToSendQueue(Packet packet) {
 		if(!this.isServerTerminating) {
 			Object var2 = this.sendQueueLock;
-			synchronized(var2) {
-				this.sendQueueByteLength += var1.getPacketSize() + 1;
-				if(var1.isChunkDataPacket) {
-					this.chunkDataPackets.add(var1);
+			synchronized(this.sendQueueLock) {
+				this.sendQueueByteLength += packet.getPacketSize() + 1;
+				if(packet.isChunkDataPacket) {
+					this.chunkDataPackets.add(packet);
 				} else {
-					this.dataPackets.add(var1);
+					this.dataPackets.add(packet);
 				}
 
 			}
@@ -61,38 +65,38 @@
 	private void sendPacket() {
 		try {
 			boolean var1 = true;
-			Packet var2;
+			Packet packet2;
 			Object var3;
 			if(!this.dataPackets.isEmpty()) {
 				var1 = false;
 				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.dataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.dataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 			}
 
 			if((var1 || this.chunkDataSendCounter-- <= 0) && !this.chunkDataPackets.isEmpty()) {
 				var1 = false;
 				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.chunkDataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.chunkDataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 				this.chunkDataSendCounter = 50;
 			}
 
 			if(var1) {
 				Thread.sleep(10L);
 			}
-		} catch (InterruptedException var8) {
-		} catch (Exception var9) {
+		} catch (InterruptedException interruptedException8) {
+		} catch (Exception exception9) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var9);
+				this.onNetworkError(exception9);
 			}
 		}
 
@@ -100,45 +104,45 @@
 
 	private void readPacket() {
 		try {
-			Packet var1 = Packet.readPacket(this.socketInputStream);
-			if(var1 != null) {
-				this.readPackets.add(var1);
+			Packet packet1 = Packet.readPacket(this.socketInputStream);
+			if(packet1 != null) {
+				this.readPackets.add(packet1);
 			} else {
 				this.networkShutdown("End of stream");
 			}
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var2);
+				this.onNetworkError(exception2);
 			}
 		}
 
 	}
 
-	private void onNetworkError(Exception var1) {
-		var1.printStackTrace();
-		this.networkShutdown("Internal exception: " + var1.toString());
+	private void onNetworkError(Exception exception) {
+		exception.printStackTrace();
+		this.networkShutdown("Internal exception: " + exception.toString());
 	}
 
-	public void networkShutdown(String var1) {
+	public void networkShutdown(String reason) {
 		if(this.isRunning) {
 			this.isTerminating = true;
-			this.terminationReason = var1;
+			this.terminationReason = reason;
 			(new NetworkMasterThread(this)).start();
 			this.isRunning = false;
 
 			try {
 				this.socketInputStream.close();
-			} catch (Throwable var5) {
+			} catch (Throwable throwable5) {
 			}
 
 			try {
 				this.socketOutputStream.close();
-			} catch (Throwable var4) {
+			} catch (Throwable throwable4) {
 			}
 
 			try {
 				this.networkSocket.close();
-			} catch (Throwable var3) {
+			} catch (Throwable throwable3) {
 			}
 
 		}
@@ -160,8 +164,8 @@
 		int var1 = 100;
 
 		while(!this.readPackets.isEmpty() && var1-- >= 0) {
-			Packet var2 = (Packet)this.readPackets.remove(0);
-			var2.processPacket(this.netHandler);
+			Packet packet2 = (Packet)this.readPackets.remove(0);
+			packet2.processPacket(this.netHandler);
 		}
 
 		if(this.isTerminating && this.readPackets.isEmpty()) {
@@ -206,9 +210,5 @@
 
 	static Thread getWriteThread(NetworkManager var0) {
 		return var0.writeThread;
-	}
-
-	public void setNetHandler(NetHandler var1) {
-		this.netHandler = var1;
 	}
 }
--- net/minecraft/src/ItemDoor.java
+++ net/minecraft/src/ItemDoor.java
@@ -3,18 +3,18 @@
 public class ItemDoor extends Item {
 	private Material material;
 
-	public ItemDoor(int var1, Material var2) {
-		super(var1);
-		this.material = var2;
+	public ItemDoor(int id, Material material) {
+		super(id);
+		this.material = material;
 		this.maxDamage = 64;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			++var5;
+			++y;
 			Block var8;
 			if(this.material == Material.wood) {
 				var8 = Block.doorWood;
@@ -22,10 +22,10 @@
 				var8 = Block.doorSteel;
 			}
 
-			if(!var8.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(!var8.canPlaceBlockAt(worldObj, x, y, z)) {
 				return false;
 			} else {
-				int var9 = MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
+				int var9 = MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
 				byte var10 = 0;
 				byte var11 = 0;
 				if(var9 == 0) {
@@ -44,10 +44,10 @@
 					var10 = 1;
 				}
 
-				int var12 = (var3.isBlockNormalCube(var4 - var10, var5, var6 - var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 - var10, var5 + 1, var6 - var11) ? 1 : 0);
-				int var13 = (var3.isBlockNormalCube(var4 + var10, var5, var6 + var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 + var10, var5 + 1, var6 + var11) ? 1 : 0);
-				boolean var14 = var3.getBlockId(var4 - var10, var5, var6 - var11) == var8.blockID || var3.getBlockId(var4 - var10, var5 + 1, var6 - var11) == var8.blockID;
-				boolean var15 = var3.getBlockId(var4 + var10, var5, var6 + var11) == var8.blockID || var3.getBlockId(var4 + var10, var5 + 1, var6 + var11) == var8.blockID;
+				int var12 = (worldObj.isBlockNormalCube(x - var10, y, z - var11) ? 1 : 0) + (worldObj.isBlockNormalCube(x - var10, y + 1, z - var11) ? 1 : 0);
+				int var13 = (worldObj.isBlockNormalCube(x + var10, y, z + var11) ? 1 : 0) + (worldObj.isBlockNormalCube(x + var10, y + 1, z + var11) ? 1 : 0);
+				boolean var14 = worldObj.getBlockId(x - var10, y, z - var11) == var8.blockID || worldObj.getBlockId(x - var10, y + 1, z - var11) == var8.blockID;
+				boolean var15 = worldObj.getBlockId(x + var10, y, z + var11) == var8.blockID || worldObj.getBlockId(x + var10, y + 1, z + var11) == var8.blockID;
 				boolean var16 = false;
 				if(var14 && !var15) {
 					var16 = true;
@@ -60,11 +60,11 @@
 					var9 += 4;
 				}
 
-				var3.setBlockWithNotify(var4, var5, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5, var6, var9);
-				var3.setBlockWithNotify(var4, var5 + 1, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5 + 1, var6, var9 + 8);
-				--var1.stackSize;
+				worldObj.setBlockWithNotify(x, y, z, var8.blockID);
+				worldObj.setBlockMetadataWithNotify(x, y, z, var9);
+				worldObj.setBlockWithNotify(x, y + 1, z, var8.blockID);
+				worldObj.setBlockMetadataWithNotify(x, y + 1, z, var9 + 8);
+				--itemStack.stackSize;
 				return true;
 			}
 		}
--- net/minecraft/src/NibbleArray.java
+++ net/minecraft/src/NibbleArray.java
@@ -3,29 +3,29 @@
 public class NibbleArray {
 	public final byte[] data;
 
-	public NibbleArray(int var1) {
-		this.data = new byte[var1 >> 1];
-	}
-
-	public NibbleArray(byte[] var1) {
-		this.data = var1;
-	}
-
-	public int get(int var1, int var2, int var3) {
-		int var4 = var1 << 11 | var3 << 7 | var2;
+	public NibbleArray(int size) {
+		this.data = new byte[size >> 1];
+	}
+
+	public NibbleArray(byte[] data) {
+		this.data = data;
+	}
+
+	public int get(int x, int y, int z) {
+		int var4 = x << 11 | z << 7 | y;
 		int var5 = var4 >> 1;
 		int var6 = var4 & 1;
 		return var6 == 0 ? this.data[var5] & 15 : this.data[var5] >> 4 & 15;
 	}
 
-	public void set(int var1, int var2, int var3, int var4) {
-		int var5 = var1 << 11 | var3 << 7 | var2;
+	public void set(int x, int y, int z, int value) {
+		int var5 = x << 11 | z << 7 | y;
 		int var6 = var5 >> 1;
 		int var7 = var5 & 1;
 		if(var7 == 0) {
-			this.data[var6] = (byte)(this.data[var6] & 240 | var4 & 15);
+			this.data[var6] = (byte)(this.data[var6] & 240 | value & 15);
 		} else {
-			this.data[var6] = (byte)(this.data[var6] & 15 | (var4 & 15) << 4);
+			this.data[var6] = (byte)(this.data[var6] & 15 | (value & 15) << 4);
 		}
 
 	}
--- net/minecraft/src/RenderMinecart.java
+++ net/minecraft/src/RenderMinecart.java
@@ -10,69 +10,69 @@
 		this.modelMinecart = new ModelMinecart();
 	}
 
-	public void renderMinecart(EntityMinecart var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderMinecart(EntityMinecart entityMinecart1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
-		double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var9;
-		double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var9;
-		double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var9;
+		double var10 = entityMinecart1.lastTickPosX + (entityMinecart1.posX - entityMinecart1.lastTickPosX) * (double)var9;
+		double var12 = entityMinecart1.lastTickPosY + (entityMinecart1.posY - entityMinecart1.lastTickPosY) * (double)var9;
+		double var14 = entityMinecart1.lastTickPosZ + (entityMinecart1.posZ - entityMinecart1.lastTickPosZ) * (double)var9;
 		double var16 = (double)0.3F;
-		Vec3D var18 = var1.getPos(var10, var12, var14);
-		float var19 = var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9;
-		if(var18 != null) {
-			Vec3D var20 = var1.getPosOffset(var10, var12, var14, var16);
-			Vec3D var21 = var1.getPosOffset(var10, var12, var14, -var16);
-			if(var20 == null) {
-				var20 = var18;
-			}
-
-			if(var21 == null) {
-				var21 = var18;
-			}
-
-			var2 += var18.xCoord - var10;
-			var4 += (var20.yCoord + var21.yCoord) / 2.0D - var12;
-			var6 += var18.zCoord - var14;
-			Vec3D var22 = var21.addVector(-var20.xCoord, -var20.yCoord, -var20.zCoord);
-			if(var22.lengthVector() != 0.0D) {
-				var22 = var22.normalize();
-				var8 = (float)(Math.atan2(var22.zCoord, var22.xCoord) * 180.0D / Math.PI);
-				var19 = (float)(Math.atan(var22.yCoord) * 73.0D);
+		Vec3D vec3D18 = entityMinecart1.getPos(var10, var12, var14);
+		float var19 = entityMinecart1.prevRotationPitch + (entityMinecart1.rotationPitch - entityMinecart1.prevRotationPitch) * var9;
+		if(vec3D18 != null) {
+			Vec3D vec3D20 = entityMinecart1.getPosOffset(var10, var12, var14, var16);
+			Vec3D vec3D21 = entityMinecart1.getPosOffset(var10, var12, var14, -var16);
+			if(vec3D20 == null) {
+				vec3D20 = vec3D18;
+			}
+
+			if(vec3D21 == null) {
+				vec3D21 = vec3D18;
+			}
+
+			var2 += vec3D18.xCoord - var10;
+			var4 += (vec3D20.yCoord + vec3D21.yCoord) / 2.0D - var12;
+			var6 += vec3D18.zCoord - var14;
+			Vec3D vec3D22 = vec3D21.addVector(-vec3D20.xCoord, -vec3D20.yCoord, -vec3D20.zCoord);
+			if(vec3D22.lengthVector() != 0.0D) {
+				vec3D22 = vec3D22.normalize();
+				var8 = (float)(Math.atan2(vec3D22.zCoord, vec3D22.xCoord) * 180.0D / Math.PI);
+				var19 = (float)(Math.atan(vec3D22.yCoord) * 73.0D);
 			}
 		}
 
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glRotatef(180.0F - var8, 0.0F, 1.0F, 0.0F);
 		GL11.glRotatef(-var19, 0.0F, 0.0F, 1.0F);
-		float var23 = (float)var1.timeSinceHit - var9;
-		float var24 = (float)var1.damageTaken - var9;
+		float var23 = (float)entityMinecart1.timeSinceHit - var9;
+		float var24 = (float)entityMinecart1.damageTaken - var9;
 		if(var24 < 0.0F) {
 			var24 = 0.0F;
 		}
 
 		if(var23 > 0.0F) {
-			GL11.glRotatef(MathHelper.sin(var23) * var23 * var24 / 10.0F * (float)var1.forwardDirection, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(MathHelper.sin(var23) * var23 * var24 / 10.0F * (float)entityMinecart1.forwardDirection, 1.0F, 0.0F, 0.0F);
 		}
 
-		if(var1.minecartType != 0) {
+		if(entityMinecart1.minecartType != 0) {
 			this.loadTexture("/terrain.png");
-			float var25 = 12.0F / 16.0F;
+			float var25 = 0.75F;
 			GL11.glScalef(var25, var25, var25);
-			GL11.glTranslatef(0.0F, 5.0F / 16.0F, 0.0F);
+			GL11.glTranslatef(0.0F, 0.3125F, 0.0F);
 			GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
-			if(var1.minecartType == 1) {
-				(new RenderBlocks()).renderBlockOnInventory(Block.chest);
-			} else if(var1.minecartType == 2) {
-				(new RenderBlocks()).renderBlockOnInventory(Block.stoneOvenIdle);
+			if(entityMinecart1.minecartType == 1) {
+				(new RenderBlocks()).renderBlockOnInventory(Block.chest, 0);
+			} else if(entityMinecart1.minecartType == 2) {
+				(new RenderBlocks()).renderBlockOnInventory(Block.stoneOvenIdle, 0);
 			}
 
 			GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, -(5.0F / 16.0F), 0.0F);
+			GL11.glTranslatef(0.0F, -0.3125F, 0.0F);
 			GL11.glScalef(1.0F / var25, 1.0F / var25, 1.0F / var25);
 		}
 
 		this.loadTexture("/item/cart.png");
 		GL11.glScalef(-1.0F, -1.0F, 1.0F);
-		this.modelMinecart.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 1.0F / 16.0F);
+		this.modelMinecart.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
 		GL11.glPopMatrix();
 	}
 
--- net/minecraft/src/BlockDirt.java
+++ net/minecraft/src/BlockDirt.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class BlockDirt extends Block {
-	protected BlockDirt(int var1, int var2) {
-		super(var1, var2, Material.grass);
+	protected BlockDirt(int blockID, int tex) {
+		super(blockID, tex, Material.grass);
 	}
 }
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -2,26 +2,28 @@
 
 public class EntityFallingSand extends Entity {
 	public int blockID;
+	public int blockMetadata;
 	public int fallTime = 0;
+	public boolean breakOnFall = false;
 
 	public EntityFallingSand(World var1) {
 		super(var1);
 	}
 
-	public EntityFallingSand(World var1, float var2, float var3, float var4, int var5) {
-		super(var1);
-		this.blockID = var5;
+	public EntityFallingSand(World worldObj, float x, float y, float z, int blockID) {
+		super(worldObj);
+		this.blockID = blockID;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition((double)var2, (double)var3, (double)var4);
+		this.setPosition((double)x, (double)y, (double)z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
 		this.canTriggerWalking = false;
-		this.prevPosX = (double)var2;
-		this.prevPosY = (double)var3;
-		this.prevPosZ = (double)var4;
+		this.prevPosX = (double)x;
+		this.prevPosY = (double)y;
+		this.prevPosZ = (double)z;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -53,23 +55,27 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if(!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
-					this.dropItem(this.blockID, 1);
+				if(this.breakOnFall || !this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
+//					this.dropItem(this.blockID, 1);
+					Block.blocksList[this.blockID].dropBlockAsItem(this.worldObj, var1, var2, var3, this.blockMetadata);
 				}
 			} else if(this.fallTime > 100) {
-				this.dropItem(this.blockID, 1);
+				Block.blocksList[this.blockID].dropBlockAsItem(this.worldObj, var1, var2, var3, this.blockMetadata);
 				this.setEntityDead();
 			}
 
 		}
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Tile", (byte)this.blockID);
+	protected void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setByte("Tile", (byte)this.blockID);
+		compoundTag.setBoolean("BreakOnFall", this.breakOnFall);
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.blockID = var1.getByte("Tile") & 255;
+	protected void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.blockID = compoundTag.getByte("Tile");
+		this.blockMetadata = compoundTag.getByte("Metadata");
+		this.breakOnFall = compoundTag.getBoolean("BreakOnFall");
 	}
 
 	public float getShadowSize() {
--- net/minecraft/src/GuiDownloadTerrain.java
+++ net/minecraft/src/GuiDownloadTerrain.java
@@ -4,11 +4,11 @@
 	private NetClientHandler netHandler;
 	private int updateCounter = 0;
 
-	public GuiDownloadTerrain(NetClientHandler var1) {
-		this.netHandler = var1;
+	public GuiDownloadTerrain(NetClientHandler netHandler) {
+		this.netHandler = netHandler;
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -27,12 +27,12 @@
 
 	}
 
-	protected void actionPerformed(GuiButton var1) {
+	protected void actionPerformed(GuiButton button) {
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawBackground(0);
-		this.drawCenteredString(this.fontRenderer, "Downloading terrain", this.width / 2, this.height / 2 - 50, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Downloading terrain", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemRepairKit.java
@@ -1,0 +1,31 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemRepairKit extends ItemCharm {
+	public ItemRepairKit(int id) {
+		super(id, 1024);
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		if (player.isSneaking()) {
+			ItemStack heldItem = player.inventory.getCurrentItem();
+			if (rand.nextInt(2) != 0
+				|| heldItem == null
+				|| heldItem.itemDmg == 0
+				|| !Item.itemsList[heldItem.itemID].allowRepair()) {
+				return;
+			}
+			--heldItem.itemDmg;
+			stack.damageItem(1);
+			player.playSound("random.wood click", 1.0F, 1.0F);
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
+	}
+}
--- net/minecraft/src/RenderCreeper.java
+++ net/minecraft/src/RenderCreeper.java
@@ -7,8 +7,8 @@
 		super(new ModelCreeper(), 0.5F);
 	}
 
-	protected void updateCreeperScale(EntityCreeper var1, float var2) {
-		float var4 = var1.getCreeperFlashTime(var2);
+	protected void updateCreeperScale(EntityCreeper entityCreeper1, float var2) {
+		float var4 = entityCreeper1.getCreeperFlashTime(var2);
 		float var5 = 1.0F + MathHelper.sin(var4 * 100.0F) * var4 * 0.01F;
 		if(var4 < 0.0F) {
 			var4 = 0.0F;
@@ -25,8 +25,8 @@
 		GL11.glScalef(var6, var7, var6);
 	}
 
-	protected int updateCreeperColorMultiplier(EntityCreeper var1, float var2, float var3) {
-		float var5 = var1.getCreeperFlashTime(var3);
+	protected int updateCreeperColorMultiplier(EntityCreeper entityCreeper1, float var2, float var3) {
+		float var5 = entityCreeper1.getCreeperFlashTime(var3);
 		if((int)(var5 * 10.0F) % 2 == 0) {
 			return 0;
 		} else {
@@ -39,10 +39,10 @@
 				var6 = 255;
 			}
 
-			short var7 = 255;
-			short var8 = 255;
-			short var9 = 255;
-			return var6 << 24 | var7 << 16 | var8 << 8 | var9;
+			short s7 = 255;
+			short s8 = 255;
+			short s9 = 255;
+			return var6 << 24 | s7 << 16 | s8 << 8 | s9;
 		}
 	}
 
--- net/minecraft/src/TileEntitySignRenderer.java
+++ net/minecraft/src/TileEntitySignRenderer.java
@@ -5,18 +5,18 @@
 public class TileEntitySignRenderer extends TileEntitySpecialRenderer {
 	private SignModel modelSign = new SignModel();
 
-	public void renderTileEntitySignAt(TileEntitySign var1, double var2, double var4, double var6, float var8) {
-		Block var9 = var1.getBlockType();
+	public void renderTileEntitySignAt(TileEntitySign tileEntitySign1, double var2, double var4, double var6, float var8) {
+		Block var9 = tileEntitySign1.getBlockType();
 		GL11.glPushMatrix();
-		float var10 = 2.0F / 3.0F;
+		float var10 = 0.6666667F;
 		float var12;
 		if(var9 == Block.signStanding) {
-			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 12.0F / 16.0F * var10, (float)var6 + 0.5F);
-			float var11 = (float)(var1.getBlockMetadata() * 360) / 16.0F;
+			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 0.75F * var10, (float)var6 + 0.5F);
+			float var11 = (float)(tileEntitySign1.getBlockMetadata() * 360) / 16.0F;
 			GL11.glRotatef(-var11, 0.0F, 1.0F, 0.0F);
 			this.modelSign.signStick.showModel = true;
 		} else {
-			int var16 = var1.getBlockMetadata();
+			int var16 = tileEntitySign1.getBlockMetadata();
 			var12 = 0.0F;
 			if(var16 == 2) {
 				var12 = 180.0F;
@@ -30,9 +30,9 @@
 				var12 = -90.0F;
 			}
 
-			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 12.0F / 16.0F * var10, (float)var6 + 0.5F);
+			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 0.75F * var10, (float)var6 + 0.5F);
 			GL11.glRotatef(-var12, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, -(5.0F / 16.0F), -(7.0F / 16.0F));
+			GL11.glTranslatef(0.0F, -0.3125F, -0.4375F);
 			this.modelSign.signStick.showModel = false;
 		}
 
@@ -41,21 +41,21 @@
 		GL11.glScalef(var10, -var10, -var10);
 		this.modelSign.renderSign();
 		GL11.glPopMatrix();
-		FontRenderer var17 = this.getFontRenderer();
-		var12 = (float)(1.0D / 60.0D) * var10;
+		FontRenderer fontRenderer17 = this.getFontRenderer();
+		var12 = 0.016666668F * var10;
 		GL11.glTranslatef(0.0F, 0.5F * var10, 0.07F * var10);
 		GL11.glScalef(var12, -var12, var12);
 		GL11.glNormal3f(0.0F, 0.0F, -1.0F * var12);
 		GL11.glDepthMask(false);
 		byte var13 = 0;
 
-		for(int var14 = 0; var14 < var1.signText.length; ++var14) {
-			String var15 = var1.signText[var14];
-			if(var14 == var1.lineBeingEdited) {
+		for(int var14 = 0; var14 < tileEntitySign1.signText.length; ++var14) {
+			String var15 = tileEntitySign1.signText[var14];
+			if(var14 == tileEntitySign1.lineBeingEdited) {
 				var15 = "> " + var15 + " <";
-				var17.drawString(var15, -var17.getStringWidth(var15) / 2, var14 * 10 - var1.signText.length * 5, var13);
+				fontRenderer17.drawString(var15, -fontRenderer17.getStringWidth(var15) / 2, var14 * 10 - tileEntitySign1.signText.length * 5, var13);
 			} else {
-				var17.drawString(var15, -var17.getStringWidth(var15) / 2, var14 * 10 - var1.signText.length * 5, var13);
+				fontRenderer17.drawString(var15, -fontRenderer17.getStringWidth(var15) / 2, var14 * 10 - tileEntitySign1.signText.length * 5, var13);
 			}
 		}
 
@@ -64,7 +64,7 @@
 		GL11.glPopMatrix();
 	}
 
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		this.renderTileEntitySignAt((TileEntitySign)var1, var2, var4, var6, var8);
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		this.renderTileEntitySignAt((TileEntitySign)tileEntity, x, y, z, renderPartialTick);
 	}
 }
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -1,101 +1,119 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.FurnaceRecipeManager;
+
 public class TileEntityFurnace extends TileEntity implements IInventory {
 	private ItemStack[] furnaceItemStacks = new ItemStack[3];
 	private int furnaceBurnTime = 0;
 	private int currentItemBurnTime = 0;
 	private int furnaceCookTime = 0;
+	private int furnaceMaxTime;
+	private int furnaceBurnTick;
+
+	public TileEntityFurnace() {
+		this(200, 1);
+	}
+
+	public TileEntityFurnace(int speed) {
+		this(speed, 1);
+	}
+
+	public TileEntityFurnace(int speed, int burnTick) {
+		this.furnaceMaxTime = speed;
+		this.furnaceBurnTick = burnTick;
+	}
 
 	public int getSizeInventory() {
 		return this.furnaceItemStacks.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.furnaceItemStacks[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.furnaceItemStacks[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.furnaceItemStacks[var1] != null) {
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.furnaceItemStacks[slot] != null) {
 			ItemStack var3;
-			if(this.furnaceItemStacks[var1].stackSize <= var2) {
-				var3 = this.furnaceItemStacks[var1];
-				this.furnaceItemStacks[var1] = null;
-				return var3;
+			if(this.furnaceItemStacks[slot].stackSize <= stackSize) {
+				var3 = this.furnaceItemStacks[slot];
+				this.furnaceItemStacks[slot] = null;
 			} else {
-				var3 = this.furnaceItemStacks[var1].splitStack(var2);
-				if(this.furnaceItemStacks[var1].stackSize == 0) {
-					this.furnaceItemStacks[var1] = null;
+				var3 = this.furnaceItemStacks[slot].splitStack(stackSize);
+				if(this.furnaceItemStacks[slot].stackSize == 0) {
+					this.furnaceItemStacks[slot] = null;
 				}
-
-				return var3;
 			}
+			return var3;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.furnaceItemStacks[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.furnaceItemStacks[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
-
 	}
 
 	public String getInvName() {
-		return "Chest";
+		return "Furnace";
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		super.readFromNBT(compoundTag);
+		NBTTagList nBTTagList2 = compoundTag.getTagList("Items");
 		this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			byte var5 = var4.getByte("Slot");
+		for(int var3 = 0; var3 < nBTTagList2.tagCount(); ++var3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(var3);
+			byte var5 = nBTTagCompound4.getByte("Slot");
 			if(var5 >= 0 && var5 < this.furnaceItemStacks.length) {
-				this.furnaceItemStacks[var5] = new ItemStack(var4);
+				this.furnaceItemStacks[var5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
-		this.furnaceBurnTime = var1.getShort("BurnTime");
-		this.furnaceCookTime = var1.getShort("CookTime");
+		this.furnaceBurnTime = compoundTag.getShort("BurnTime");
+		this.furnaceBurnTick = compoundTag.getShort("BurnTick");
+		this.furnaceCookTime = compoundTag.getShort("CookTime");
+		this.furnaceMaxTime = compoundTag.getShort("MaxTime");
 		this.currentItemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setShort("BurnTime", (short)this.furnaceBurnTime);
-		var1.setShort("CookTime", (short)this.furnaceCookTime);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound compoundTag) {
+		super.writeToNBT(compoundTag);
+		compoundTag.setShort("BurnTime", (short) this.furnaceBurnTime);
+		compoundTag.setShort("BurnTick", (short) this.furnaceBurnTick);
+		compoundTag.setShort("CookTime", (short) this.furnaceCookTime);
+		compoundTag.setShort("MaxTime", (short) this.furnaceMaxTime);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
 		for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
 			if(this.furnaceItemStacks[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.furnaceItemStacks[var3].writeToNBT(var4);
-				var2.setTag(var4);
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)var3);
+				this.furnaceItemStacks[var3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		compoundTag.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public int getCookProgressScaled(int var1) {
-		return this.furnaceCookTime * var1 / 200;
+	public int getCookProgressScaled(int scale) {
+		return this.furnaceCookTime * scale / this.furnaceMaxTime;
 	}
 
-	public int getBurnTimeRemainingScaled(int var1) {
-		if(this.currentItemBurnTime == 0) {
-			this.currentItemBurnTime = 200;
+	public int getBurnTimeRemainingScaled(int scale) {
+		if (this.currentItemBurnTime == 0) {
+			this.currentItemBurnTime = this.furnaceMaxTime;
 		}
 
-		return this.furnaceBurnTime * var1 / this.currentItemBurnTime;
+		return this.furnaceBurnTime * scale / this.currentItemBurnTime;
 	}
 
 	public boolean isBurning() {
@@ -106,10 +124,10 @@
 		boolean var1 = this.furnaceBurnTime > 0;
 		boolean var2 = false;
 		if(this.furnaceBurnTime > 0) {
-			--this.furnaceBurnTime;
+			this.furnaceBurnTime -= this.furnaceBurnTick;
 		}
 
-		if(!this.worldObj.multiplayerWorld) {
+		if(this.worldObj.canDoClientAction()) {
 			if(this.furnaceBurnTime == 0 && this.canSmelt()) {
 				this.currentItemBurnTime = this.furnaceBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 				if(this.furnaceBurnTime > 0) {
@@ -125,7 +143,7 @@
 
 			if(this.isBurning() && this.canSmelt()) {
 				++this.furnaceCookTime;
-				if(this.furnaceCookTime == 200) {
+				if(this.furnaceCookTime == this.furnaceMaxTime) {
 					this.furnaceCookTime = 0;
 					this.smeltItem();
 					var2 = true;
@@ -136,7 +154,7 @@
 
 			if(var1 != this.furnaceBurnTime > 0) {
 				var2 = true;
-				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
+				((BlockFurnace) this.getBlockType()).updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
@@ -149,18 +167,25 @@
 	private boolean canSmelt() {
 		if(this.furnaceItemStacks[0] == null) {
 			return false;
-		} else {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
-			return var1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != var1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[var1].getItemStackLimit())));
 		}
+		ItemStack var1 = this.getCookedItem(this.furnaceItemStacks[0]);
+		ItemStack outSlot = this.furnaceItemStacks[2];
+		return var1 != null
+			   && (outSlot == null
+				   || (outSlot.itemID == var1.itemID
+					   && outSlot.itemMetadata == var1.itemMetadata
+					   && outSlot.stackSize < this.getInventoryStackLimit()
+					   && outSlot.stackSize < outSlot.getMaxStackSize()
+					   && outSlot.stackSize < var1.getMaxStackSize() ) );
 	}
 
 	public void smeltItem() {
 		if(this.canSmelt()) {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			ItemStack var1 = this.getCookedItem(this.furnaceItemStacks[0]);
 			if(this.furnaceItemStacks[2] == null) {
-				this.furnaceItemStacks[2] = new ItemStack(var1, 1);
-			} else if(this.furnaceItemStacks[2].itemID == var1) {
+				this.furnaceItemStacks[2] = new ItemStack(var1.itemID, 1).withMetadata(var1.itemMetadata);
+			} else if(this.furnaceItemStacks[2].itemID == var1.itemID
+					  && this.furnaceItemStacks[2].itemMetadata == var1.itemMetadata) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
@@ -168,20 +193,32 @@
 			if(this.furnaceItemStacks[0].stackSize <= 0) {
 				this.furnaceItemStacks[0] = null;
 			}
-
 		}
 	}
 
-	private int getCookedItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
+	private ItemStack getCookedItem(ItemStack input) {
+		return FurnaceRecipeManager.getInstance().findMatchingRecipe(input);
+//		return id == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex
+//		: (id == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex
+//		: (id == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex
+//		: (id == Block.sand.blockID ? Block.glass.blockID
+//		: (id == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex
+//		: (id == Block.cobblestone.blockID ? Block.stone.blockID
+//		: (id == Item.clay.shiftedIndex ? Item.brick.shiftedIndex
+//		: -1))))));
 	}
 
-	private int getItemBurnTime(ItemStack var1) {
-		if(var1 == null) {
+	private int getItemBurnTime(ItemStack itemStack) {
+		if(itemStack == null) {
 			return 0;
 		} else {
-			int var2 = var1.getItem().shiftedIndex;
-			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : 0)));
+			int var2 = itemStack.getItem().shiftedIndex;
+			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300
+			: var2 == Item.stick.shiftedIndex ? 100
+			: var2 == Item.coal.shiftedIndex ? 1600
+			: var2 == Item.bucketLava.shiftedIndex ? 20000
+			: var2 == Item.starDust.shiftedIndex ? 6400
+			: 0;
 		}
 	}
 }
--- net/minecraft/src/WorldGenCactus.java
+++ net/minecraft/src/WorldGenCactus.java
@@ -3,13 +3,21 @@
 import java.util.Random;
 
 public class WorldGenCactus extends WorldGenerator {
+	private int height = 3;
+	private int minHeight = 1;
+
+	public void setScale(double var1, double var3, double var5) {
+		height = (int)var1;
+		minHeight = (int)var3;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		for(int var6 = 0; var6 < 10; ++var6) {
 			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
 			if(var1.getBlockId(var7, var8, var9) == 0) {
-				int var10 = 1 + var2.nextInt(var2.nextInt(3) + 1);
+				int var10 = 1 + var2.nextInt(var2.nextInt(height) + minHeight);
 
 				for(int var11 = 0; var11 < var10; ++var11) {
 					if(Block.cactus.canBlockStay(var1, var7, var8 + var11, var9)) {
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -34,33 +34,33 @@
 		return "mob.spiderdeath";
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
+	protected void attackEntity(Entity entity, float distance) {
 		float var3 = this.getBrightness(1.0F);
 		if(var3 > 0.5F && this.rand.nextInt(100) == 0) {
 			this.entityToAttack = null;
 		} else {
-			if(var2 > 2.0F && var2 < 6.0F && this.rand.nextInt(10) == 0) {
+			if(distance > 2.0F && distance < 6.0F && this.rand.nextInt(10) == 0) {
 				if(this.onGround) {
-					double var4 = var1.posX - this.posX;
-					double var6 = var1.posZ - this.posZ;
+					double var4 = entity.posX - this.posX;
+					double var6 = entity.posZ - this.posZ;
 					float var8 = MathHelper.sqrt_double(var4 * var4 + var6 * var6);
 					this.motionX = var4 / (double)var8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
 					this.motionZ = var6 / (double)var8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
 					this.motionY = (double)0.4F;
 				}
 			} else {
-				super.attackEntity(var1, var2);
+				super.attackEntity(entity, distance);
 			}
 
 		}
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	protected int getDropItemId() {
--- net/minecraft/src/LogoEffectRandomizer.java
+++ net/minecraft/src/LogoEffectRandomizer.java
@@ -6,8 +6,8 @@
 	public double dropSpeed;
 	final GuiMainMenu mainMenu;
 
-	public LogoEffectRandomizer(GuiMainMenu var1, int var2, int var3) {
-		this.mainMenu = var1;
+	public LogoEffectRandomizer(GuiMainMenu mainMenu, int var2, int var3) {
+		this.mainMenu = mainMenu;
 		this.height = this.prevHeight = (double)(10 + var3) + GuiMainMenu.getRandom().nextDouble() * 32.0D + (double)var2;
 	}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet9Respawn.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet9Respawn extends Packet {
+	public void processPacket(NetHandler var1) {
+		var1.handleRespawnPacket(this);
+	}
+
+	public void readPacketData(DataInputStream var1) throws IOException {
+	}
+
+	public void writePacket(DataOutputStream var1) throws IOException {
+	}
+
+	public int getPacketSize() {
+		return 0;
+	}
+}
--- net/minecraft/src/ServerGuiFocusadapter.java
+++ net/minecraft/src/ServerGuiFocusadapter.java
@@ -6,10 +6,10 @@
 class ServerGuiFocusadapter extends FocusAdapter {
 	final ServerGUI mcServerGui;
 
-	ServerGuiFocusadapter(ServerGUI var1) {
-		this.mcServerGui = var1;
+	ServerGuiFocusadapter(ServerGUI serverGUI1) {
+		this.mcServerGui = serverGUI1;
 	}
 
-	public void focusGained(FocusEvent var1) {
+	public void focusGained(FocusEvent focusEvent1) {
 	}
 }
--- net/minecraft/src/BlockClay.java
+++ net/minecraft/src/BlockClay.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockClay extends Block {
-	public BlockClay(int var1, int var2) {
-		super(var1, var2, Material.clay);
+	public BlockClay(int id, int tex) {
+		super(id, tex, Material.clay);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.clay.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 4;
 	}
 }
--- net/minecraft/src/WorldGenerator.java
+++ net/minecraft/src/WorldGenerator.java
@@ -7,4 +7,9 @@
 
 	public void setScale(double var1, double var3, double var5) {
 	}
+
+	public final WorldGenerator withScale(double var1, double var3, double var5) {
+		setScale(var1, var3, var5);
+		return this;
+	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockSpeleothem.java
@@ -1,0 +1,130 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class BlockSpeleothem extends Block {
+	public BlockSpeleothem(int var1, int var2) {
+		super(var1, var2, Material.rock);
+		this.minX = 0.25D;
+		this.minZ = 0.25D;
+		this.maxX = 0.75D;
+		this.maxZ = 0.75D;
+	}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		return var1.isBlockNormalCube(var2, var3 - 1, var4)
+				|| (var1.isBlockNormalCube(var2, var3 - 2, var4) && var1.getBlockId(var2, var3 - 1, var4) == this.blockID)
+				|| var1.isBlockNormalCube(var2, var3 + 1, var4)
+				|| (var1.isBlockNormalCube(var2, var3 + 2, var4) && var1.getBlockId(var2, var3 + 1, var4) == this.blockID);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + (var2 & 3) * 16 + (var2 & ~3) / 4;
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		if (!canPlaceBlockAt(var1, var2, var3, var4)) {
+			this.dropBlockAsItem(var1, var2, var3, var4, var5);
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+		} else {
+			updateMetadata(var1, var2, var3, var4);
+		}
+	}
+
+	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+		updateMetadata(var1, var2, var3, var4);
+	}
+
+	private static int getStoneMetadata(World var1, int var2, int var3, int var4) {
+		int block = var1.getBlockId(var2, var3, var4);
+		return Block.blocksList[block] != null
+				&& (Block.blocksList[block] instanceof BlockStone
+						|| Block.blocksList[block] instanceof BlockOre
+						|| Block.blocksList[block] instanceof BlockRedstoneOre)
+				? var1.getBlockMetadata(var2, var3, var4)
+				: 0;
+	}
+
+	private void updateMetadata(World var1, int var2, int var3, int var4) {
+		int metadata;
+		if (var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+			if (var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
+				metadata = 1;
+			} else {
+				metadata = 0;
+			}
+			metadata += getStoneMetadata(var1, var2, var3 - 1, var4) * 4;
+		} else if (var1.isBlockNormalCube(var2, var3 + 1, var4)) {
+			if (var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
+				metadata = 2;
+			} else {
+				metadata = 3;
+			}
+			metadata += getStoneMetadata(var1, var2, var3 + 1, var4) * 4;
+		} else if (var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
+			metadata = 3;
+			metadata += getStoneMetadata(var1, var2, var3 + 2, var4) * 4;
+		} else {
+			metadata = 0;
+			metadata += getStoneMetadata(var1, var2, var3 - 2, var4) * 4;
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, metadata);
+	}
+
+	private static int getStoneMetadataInChunk(Chunk chunk, int var2, int var3, int var4) {
+		int block = chunk.getBlockID(var2, var3, var4);
+		return block == Block.stone.blockID
+				|| Block.blocksList[block] instanceof BlockOre
+				? chunk.getBlockMetadata(var2, var3, var4)
+				: 0;
+	}
+
+	private static boolean isChunkBlockNormalCube(Chunk chunk, int var2, int var3, int var4) {
+		Block var5 = Block.blocksList[chunk.getBlockID(var2, var3, var4)];
+		return var5 != null && var5.isOpaqueCube();
+	}
+
+	private void updateMetadataInChunk(Chunk chunk, int var2, int var3, int var4) {
+		int metadata;
+		if (isChunkBlockNormalCube(chunk, var2, var3 - 1, var4)) {
+			if (chunk.getBlockID(var2, var3 + 1, var4) == this.blockID) {
+				metadata = 1;
+			} else {
+				metadata = 0;
+			}
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 - 1, var4) * 4;
+		} else if (isChunkBlockNormalCube(chunk, var2, var3 + 1, var4)) {
+			if (chunk.getBlockID(var2, var3 - 1, var4) == this.blockID) {
+				metadata = 2;
+			} else {
+				metadata = 3;
+			}
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 + 1, var4) * 4;
+		} else if (chunk.getBlockID(var2, var3 + 1, var4) == this.blockID) {
+			metadata = 3;
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 + 2, var4) * 4;
+		} else {
+			metadata = 0;
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 - 2, var4) * 4;
+		}
+
+		chunk.setBlockMetadata(var2, var3, var4, metadata);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		updateMetadataInChunk(chunk, x, y, z);
+	}
+}
--- net/minecraft/src/EntitySorter.java
+++ net/minecraft/src/EntitySorter.java
@@ -9,8 +9,8 @@
 		this.comparedEntity = var1;
 	}
 
-	public int sortByDistanceToEntity(WorldRenderer var1, WorldRenderer var2) {
-		return var1.distanceToEntitySquared(this.comparedEntity) < var2.distanceToEntitySquared(this.comparedEntity) ? -1 : 1;
+	public int sortByDistanceToEntity(WorldRenderer worldRenderer1, WorldRenderer worldRenderer2) {
+		return worldRenderer1.distanceToEntitySquared(this.comparedEntity) < worldRenderer2.distanceToEntitySquared(this.comparedEntity) ? -1 : 1;
 	}
 
 	public int compare(Object var1, Object var2) {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RecipesBlocks.java
@@ -1,0 +1,73 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class RecipesBlocks {
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 0), "###", '#', new Pair<>(Block.cobblestone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 1), "###", '#', new Pair<>(Block.cobblestone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 2), "###", '#', new Pair<>(Block.cobblestone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 3), "###", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 4), "###", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 5), "###", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 6), "###", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 7), "###", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 8), "###", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 9), "###", '#', new Pair<>(Block.stone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 10), "###", '#', new Pair<>(Block.cobblestone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 11), "###", '#', new Pair<>(Block.polishedStone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 12), "###", '#', new Pair<>(Block.stoneBricks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 13), "###", '#', new Pair<>(Block.stoneBricks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 14), "###", '#', new Pair<>(Block.stoneBricks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 15), "###", '#', new Pair<>(Block.stoneBricks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 0), "###", '#', new Pair<>(Block.planks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 1), "###", '#', new Pair<>(Block.planks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 2), "###", '#', new Pair<>(Block.planks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 3), "###", '#', new Pair<>(Block.planks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.brickStairSingle, 6, 0), "###", '#', Block.brick);
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 0), "#", '#', new Pair<>(Block.wood, 0));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 1), "#", '#', new Pair<>(Block.wood, 1));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 2), "#", '#', new Pair<>(Block.wood, 2));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 3), "#", '#', new Pair<>(Block.wood, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 0), "##", "##", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 1), "##", "##", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 2), "##", "##", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 3), "##", "##", '#', new Pair<>(Block.stone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 0), "##", "##", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 1), "##", "##", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 2), "##", "##", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 3), "##", "##", '#', new Pair<>(Block.polishedStone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.starLantern, 8), "xxx", "x#x", "xxx", 'x', Block.glass, '#', Item.starDust);
+	}
+}
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -1,5 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Pair;
+import io.github.bluestaggo.mcdiverge.RecipesBlocks;
+import io.github.bluestaggo.mcdiverge.RecipesDyes;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -20,49 +24,55 @@
 		(new RecipesFood()).addRecipes(this);
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
-		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
-		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
-		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.minecartBox, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.minecartEngine, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.striker, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
-		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactWood, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactStone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
-		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
-		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		(new RecipesDyes()).addRecipes(this);
+		(new RecipesBlocks()).addRecipes(this);
+		this.addRecipe(new ItemStack(Item.paper, 3), "###", '#', Item.reed);
+		this.addRecipe(new ItemStack(Item.book, 1), "#", "#", "#", '#', Item.paper);
+		this.addRecipe(new ItemStack(Block.fence, 2), "###", "###", '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.jukebox, 1), "###", "#X#", "###", '#', Block.planks, 'X', Item.diamond);
+		this.addRecipe(new ItemStack(Block.bookshelf, 1), "###", "XXX", "###", '#', Block.planks, 'X', Item.book);
+		this.addRecipe(new ItemStack(Block.blockSnow, 1), "##", "##", '#', Item.snowball);
+		this.addRecipe(new ItemStack(Block.blockClay, 1), "##", "##", '#', Item.clay);
+		this.addRecipe(new ItemStack(Block.brick, 1), "##", "##", '#', Item.brick);
+		this.addRecipe(new ItemStack(Block.cloth, 1), "###", "###", "###", '#', Item.silk);
+		this.addRecipe(new ItemStack(Block.tnt, 1), "X#X", "#X#", "X#X", 'X', Item.gunpowder, '#', Block.sand);
+		this.addRecipe(new ItemStack(Block.ladder, 1), "# #", "###", "# #", '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.doorWood, 1), "##", "##", "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.doorSteel, 1), "##", "##", "##", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.sign, 1), "###", "###", " X ", '#', Block.planks, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Item.stick, 4), "#", "#", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.torch, 4), "X", "#", 'X', Item.coal, '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), "# #", " # ", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.minecartTrack, 16), "X X", "X#X", "X X", 'X', Item.ingotIron, '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.boosterTrack, 4), "X-X", "X#X", "X-X", 'X', Item.ingotIron, '-', Item.stick, '#', Item.ruby);
+		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), "# #", "###", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.minecartBox, 1), "A", "B", 'A', Block.chest, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.minecartEngine, 1), "A", "B", 'A', Block.stoneOvenIdle, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.boat, 1), "# #", "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), "# #", " # ", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.striker, 1), "A ", " B", 'A', Item.ingotIron, 'B', Item.flint);
+		this.addRecipe(new ItemStack(Item.bread, 1), "###", '#', Item.wheat);
+		this.addRecipe(new ItemStack(Item.fishingRod, 1), "  #", " #X", "# X", '#', Item.stick, 'X', Item.silk);
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8), "#  ", "## ", "###", '#', Block.cobblestone);
+		this.addRecipe(new ItemStack(Item.painting, 1), "###", "#X#", "###", '#', Item.stick, 'X', Block.cloth);
+		this.addRecipe(new ItemStack(Item.appleGold, 1), "###", "#X#", "###", '#', Block.blockGold, 'X', Item.appleRed);
+		this.addRecipe(new ItemStack(Block.lever, 1), "X", "#", '#', Block.cobblestone, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), "X", "#", '#', Item.stick, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.compass, 1), " # ", "#X#", " # ", '#', Item.ingotIron, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Block.button, 1), "#", "#", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), "##", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.quiver, 1), "##/", "##/", "## ", '#', Item.leather, '/', Item.stick);
+		this.addRecipe(new ItemStack(Item.wardingRing, 1), " o ", "X X", " X ", 'o', Item.ruby, 'X', Item.sapphire);
+		this.addRecipe(new ItemStack(Item.repairKit, 1), "=o=", "###", '=', Block.stone, 'o', Item.sapphire, '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.slimeShoes, 1), "# #", "# #", '#', Item.slimeBall);
+		this.addRecipe(new ItemStack(Item.nimbleBoots, 1), "f f", "x x", "# #", 'f', Item.feather, 'x', Item.sapphire, '#', Block.cloth);
+		this.addRecipe(new ItemStack(Item.wings, 1), "#o#", "#-#", "# #", '#', Item.feather, 'o', Item.sapphire, '-', Item.silk);
+		this.addRecipe(new ItemStack(Item.sugar, 1), "#", '#', Item.reed);
 		Collections.sort(this.recipes, new RecipeSorter(this));
-		System.out.println(this.recipes.size() + " recipes");
 	}
 
-	void addRecipe(ItemStack var1, Object... var2) {
+	public void addRecipe(ItemStack var1, Object... var2) {
 		String var3 = "";
 		int var4 = 0;
 		int var5 = 0;
@@ -85,42 +95,69 @@
 			}
 		}
 
-		HashMap var12;
-		int var15;
-		for(var12 = new HashMap(); var4 < var2.length; var4 += 2) {
-			Character var13 = (Character)var2[var4];
-			var15 = 0;
-			if(var2[var4 + 1] instanceof Item) {
-				var15 = ((Item)var2[var4 + 1]).shiftedIndex;
-			} else if(var2[var4 + 1] instanceof Block) {
-				var15 = ((Block)var2[var4 + 1]).blockID;
+		HashMap hashMap12;
+		Pair<Integer, Integer> var15;
+		for(hashMap12 = new HashMap(); var4 < var2.length; var4 += 2) {
+			Object value = var2[var4 + 1];
+			Character character13 = (Character)var2[var4];
+
+			var15 = new Pair<>( -1, -1 );
+			if(value instanceof Pair && ((Pair<?, ?>) value).var1 instanceof Integer) {
+				if(((Pair<?, ?>) value).var0 instanceof Integer) {
+					var15 = (Pair<Integer, Integer>)value;
+				} else if(((Pair<?, ?>) value).var0 instanceof Item) {
+					Pair<Item, Integer> item = (Pair<Item, Integer>) value;
+					var15 = new Pair<>( item.var0.shiftedIndex, item.var1 );
+				} else if(((Pair<?, ?>) value).var0 instanceof Block) {
+					Pair<Block, Integer> item = (Pair<Block, Integer>) value;
+					var15 = new Pair<>( item.var0.blockID, item.var1 );
+				}
+			} else if(value instanceof Item) {
+				var15 = new Pair<>( ((Item)var2[var4 + 1]).shiftedIndex, -1 );
+			} else if(value instanceof Block) {
+				var15 = new Pair<>( ((Block)var2[var4 + 1]).blockID, -1 );
 			}
 
-			var12.put(var13, Integer.valueOf(var15));
+			hashMap12.put(character13, var15);
 		}
 
 		int[] var14 = new int[var5 * var6];
+		int[] metadata = new int[var5 * var6];
 
-		for(var15 = 0; var15 < var5 * var6; ++var15) {
-			char var10 = var3.charAt(var15);
-			if(var12.containsKey(Character.valueOf(var10))) {
-				var14[var15] = ((Integer)var12.get(Character.valueOf(var10))).intValue();
+		for(int var16 = 0; var16 < var5 * var6; ++var16) {
+			char c10 = var3.charAt(var16);
+			if(hashMap12.containsKey(c10)) {
+				var14[var16] = ((Pair<Integer, Integer>) hashMap12.get(c10)).var0;
+				metadata[var16] = ((Pair<Integer, Integer>) hashMap12.get(c10)).var1;
 			} else {
-				var14[var15] = -1;
+				var14[var16] = -1;
+				metadata[var16] = -1;
 			}
 		}
 
-		this.recipes.add(new CraftingRecipe(var5, var6, var14, var1));
+		this.recipes.add(new CraftingRecipe(var5, var6, var14, metadata, var1));
 	}
 
-	public ItemStack findMatchingRecipe(int[] var1) {
+	public ItemStack findMatchingRecipe(int[] var1, int[] metadata) {
 		for(int var2 = 0; var2 < this.recipes.size(); ++var2) {
-			CraftingRecipe var3 = (CraftingRecipe)this.recipes.get(var2);
-			if(var3.matches(var1)) {
-				return var3.getCraftingResult(var1);
+			CraftingRecipe craftingRecipe3 = (CraftingRecipe)this.recipes.get(var2);
+			if(craftingRecipe3.matches(var1, metadata)) {
+				return craftingRecipe3.getCraftingResult();
 			}
 		}
 
 		return null;
+	}
+
+	public ItemStack[] getRecipeAsItems(int i) {
+		CraftingRecipe recipe = (CraftingRecipe)recipes.get(i);
+		if (recipe == null) {
+			return null;
+		}
+		return recipe.asItemStacks();
+	}
+
+	public int count() {
+		return this.recipes.size();
 	}
 }
--- net/minecraft/src/EntityFlameFX.java
+++ net/minecraft/src/EntityFlameFX.java
@@ -18,14 +18,14 @@
 		this.particleTextureIndex = 48;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge;
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float var8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
 		this.particleScale = this.flameScale * (1.0F - var8 * var8 * 0.5F);
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
-	public float getBrightness(float var1) {
-		float var2 = ((float)this.particleAge + var1) / (float)this.particleMaxAge;
+	public float getBrightness(float renderPartialTick) {
+		float var2 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
 		if(var2 < 0.0F) {
 			var2 = 0.0F;
 		}
@@ -34,7 +34,7 @@
 			var2 = 1.0F;
 		}
 
-		float var3 = super.getBrightness(var1);
+		float var3 = super.getBrightness(renderPartialTick) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		return var3 * var2 + (1.0F - var2);
 	}
 
--- net/minecraft/src/BlockIce.java
+++ net/minecraft/src/BlockIce.java
@@ -3,8 +3,8 @@
 import java.util.Random;
 
 public class BlockIce extends BlockBreakable {
-	public BlockIce(int var1, int var2) {
-		super(var1, var2, Material.ice, false);
+	public BlockIce(int blockID, int tex) {
+		super(blockID, tex, Material.ice, false);
 		this.slipperiness = 0.98F;
 		this.setTickOnLoad(true);
 	}
@@ -13,26 +13,26 @@
 		return 1;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, 1 - var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, 1 - side);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3 - 1, var4);
-		if(var5.getIsSolid() || var5.getIsLiquid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterMoving.blockID);
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		Material material5 = worldObj.getBlockMaterial(x, y - 1, z);
+		if(material5.getIsSolid() || material5.getIsLiquid()) {
+			worldObj.setBlockWithNotify(x, y, z, Block.waterMoving.blockID);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11 - Block.lightOpacity[this.blockID]) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11 - Block.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, Block.waterStill.blockID);
 		}
 
 	}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemSlimeShoes.java
@@ -1,0 +1,14 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+
+public class ItemSlimeShoes extends ItemCharm {
+	public ItemSlimeShoes(int id) {
+		super(id, 64, "slimeshoes");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.bounce = 0.5F;
+	}
+}
--- net/minecraft/src/TileEntitySpecialRenderer.java
+++ net/minecraft/src/TileEntitySpecialRenderer.java
@@ -3,15 +3,15 @@
 public abstract class TileEntitySpecialRenderer {
 	protected TileEntityRenderer tileEntityRenderer;
 
-	public abstract void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8);
+	public abstract void renderTileEntityAt(TileEntity tileEntity1, double var2, double var4, double var6, float var8);
 
-	protected void bindTextureByName(String var1) {
+	protected void bindTextureByName(String name) {
 		RenderEngine var2 = this.tileEntityRenderer.renderEngine;
-		var2.bindTexture(var2.getTexture(var1));
+		var2.bindTexture(var2.getTexture(name));
 	}
 
-	public void setTileEntityRenderer(TileEntityRenderer var1) {
-		this.tileEntityRenderer = var1;
+	public void setTileEntityRenderer(TileEntityRenderer tileEntityRenderer) {
+		this.tileEntityRenderer = tileEntityRenderer;
 	}
 
 	public FontRenderer getFontRenderer() {
--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -12,18 +12,18 @@
 		this(new Random());
 	}
 
-	public NoiseGeneratorPerlin(Random var1) {
+	public NoiseGeneratorPerlin(Random random) {
 		this.permutations = new int[512];
-		this.xCoord = var1.nextDouble() * 256.0D;
-		this.yCoord = var1.nextDouble() * 256.0D;
-		this.zCoord = var1.nextDouble() * 256.0D;
+		this.xCoord = random.nextDouble() * 256.0D;
+		this.yCoord = random.nextDouble() * 256.0D;
+		this.zCoord = random.nextDouble() * 256.0D;
 
 		int var2;
 		for(var2 = 0; var2 < 256; this.permutations[var2] = var2++) {
 		}
 
 		for(var2 = 0; var2 < 256; ++var2) {
-			int var3 = var1.nextInt(256 - var2) + var2;
+			int var3 = random.nextInt(256 - var2) + var2;
 			int var4 = this.permutations[var2];
 			this.permutations[var2] = this.permutations[var3];
 			this.permutations[var3] = var4;
--- net/minecraft/src/PropertyManager.java
+++ net/minecraft/src/PropertyManager.java
@@ -1,9 +1,14 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.util.Arrays;
 import java.util.Properties;
+import java.util.Random;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -12,17 +17,17 @@
 	private Properties serverProperties = new Properties();
 	private File propertiesFile;
 
-	public PropertyManager(File var1) {
-		this.propertiesFile = var1;
-		if(var1.exists()) {
+	public PropertyManager(File propertiesFile) {
+		this.propertiesFile = propertiesFile;
+		if(propertiesFile.exists()) {
 			try {
-				this.serverProperties.load(new FileInputStream(var1));
-			} catch (Exception var3) {
-				logger.log(Level.WARNING, "Failed to load " + var1, var3);
+				this.serverProperties.load(new FileInputStream(propertiesFile));
+			} catch (Exception exception3) {
+				logger.log(Level.WARNING, "Failed to load " + propertiesFile, exception3);
 				this.generateAndSaveProperties();
 			}
 		} else {
-			logger.log(Level.WARNING, var1 + " does not exist");
+			logger.log(Level.WARNING, propertiesFile + " does not exist");
 			this.generateAndSaveProperties();
 		}
 
@@ -36,37 +41,48 @@
 	public void saveProperties() {
 		try {
 			this.serverProperties.store(new FileOutputStream(this.propertiesFile), "Minecraft server properties");
-		} catch (Exception var2) {
-			logger.log(Level.WARNING, "Failed to save " + this.propertiesFile, var2);
+		} catch (Exception exception2) {
+			logger.log(Level.WARNING, "Failed to save " + this.propertiesFile, exception2);
 			this.generateAndSaveProperties();
 		}
 
 	}
 
-	public String getStringProperty(String var1, String var2) {
-		if(!this.serverProperties.containsKey(var1)) {
-			this.serverProperties.setProperty(var1, var2);
+	public String getStringProperty(String key, String value) {
+		if(!this.serverProperties.containsKey(key)) {
+			this.serverProperties.setProperty(key, value);
 			this.saveProperties();
 		}
 
-		return this.serverProperties.getProperty(var1, var2);
-	}
-
-	public int getIntProperty(String var1, int var2) {
-		try {
-			return Integer.parseInt(this.getStringProperty(var1, "" + var2));
-		} catch (Exception var4) {
-			this.serverProperties.setProperty(var1, "" + var2);
-			return var2;
-		}
-	}
-
-	public boolean getBooleanProperty(String var1, boolean var2) {
-		try {
-			return Boolean.parseBoolean(this.getStringProperty(var1, "" + var2));
-		} catch (Exception var4) {
-			this.serverProperties.setProperty(var1, "" + var2);
-			return var2;
-		}
+		return this.serverProperties.getProperty(key, value);
+	}
+
+	public int getIntProperty(String key, int value) {
+		try {
+			return Integer.parseInt(this.getStringProperty(key, "" + value));
+		} catch (Exception exception4) {
+			this.serverProperties.setProperty(key, "" + value);
+			return value;
+		}
+	}
+
+	public boolean getBooleanProperty(String key, boolean value) {
+		try {
+			return Boolean.parseBoolean(this.getStringProperty(key, "" + value));
+		} catch (Exception exception4) {
+			this.serverProperties.setProperty(key, "" + value);
+			return value;
+		}
+	}
+
+	public CreateWorldInfo getCreateWorldInfo() {
+		return new CreateWorldInfo()
+			.withName(this.getStringProperty("level-display-name", "World"))
+			.withSeed(this.getIntProperty("seed", new Random().nextInt()))
+			.withWorldType(Arrays.stream(WorldType.values())
+					.filter(worldType -> worldType.name().equalsIgnoreCase(this.getStringProperty("world-type", "normal")))
+					.findAny()
+					.orElse(WorldType.NORMAL))
+			.withCreative(this.getBooleanProperty("creative", false));
 	}
 }
--- net/minecraft/src/ClippingHelper.java
+++ net/minecraft/src/ClippingHelper.java
@@ -6,9 +6,9 @@
 	public float[] modelviewMatrix = new float[16];
 	public float[] clippingMatrix = new float[16];
 
-	public boolean isBoxInFrustum(double var1, double var3, double var5, double var7, double var9, double var11) {
+	public boolean isBoxInFrustum(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
 		for(int var13 = 0; var13 < 6; ++var13) {
-			if((double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D) {
+			if((double)this.frustum[var13][0] * minX + (double)this.frustum[var13][1] * minY + (double)this.frustum[var13][2] * minZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * maxX + (double)this.frustum[var13][1] * minY + (double)this.frustum[var13][2] * minZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * minX + (double)this.frustum[var13][1] * maxY + (double)this.frustum[var13][2] * minZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * maxX + (double)this.frustum[var13][1] * maxY + (double)this.frustum[var13][2] * minZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * minX + (double)this.frustum[var13][1] * minY + (double)this.frustum[var13][2] * maxZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * maxX + (double)this.frustum[var13][1] * minY + (double)this.frustum[var13][2] * maxZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * minX + (double)this.frustum[var13][1] * maxY + (double)this.frustum[var13][2] * maxZ + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * maxX + (double)this.frustum[var13][1] * maxY + (double)this.frustum[var13][2] * maxZ + (double)this.frustum[var13][3] <= 0.0D) {
 				return false;
 			}
 		}
--- net/minecraft/src/SignModel.java
+++ net/minecraft/src/SignModel.java
@@ -11,7 +11,7 @@
 	}
 
 	public void renderSign() {
-		this.signBoard.render(1.0F / 16.0F);
-		this.signStick.render(1.0F / 16.0F);
+		this.signBoard.render(0.0625F);
+		this.signStick.render(0.0625F);
 	}
 }
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -7,9 +7,9 @@
 public abstract class NBTBase {
 	private String key = null;
 
-	abstract void writeTagContents(DataOutput var1) throws IOException;
+	abstract void writeTagContents(DataOutput dataOutput1) throws IOException;
 
-	abstract void readTagContents(DataInput var1) throws IOException;
+	abstract void readTagContents(DataInput dataInput1) throws IOException;
 
 	public abstract byte getType();
 
@@ -17,33 +17,33 @@
 		return this.key == null ? "" : this.key;
 	}
 
-	public NBTBase setKey(String var1) {
-		this.key = var1;
+	public NBTBase setKey(String name) {
+		this.key = name;
 		return this;
 	}
 
-	public static NBTBase readNamedTag(DataInput var0) throws IOException {
-		byte var1 = var0.readByte();
+	public static NBTBase readNamedTag(DataInput dataInput) throws IOException {
+		byte var1 = dataInput.readByte();
 		if(var1 == 0) {
 			return new NBTTagEnd();
 		} else {
-			NBTBase var2 = createTagOfType(var1);
-			var2.key = var0.readUTF();
-			var2.readTagContents(var0);
-			return var2;
-		}
-	}
-
-	public static void writeNamedTag(NBTBase var0, DataOutput var1) throws IOException {
-		var1.writeByte(var0.getType());
-		if(var0.getType() != 0) {
-			var1.writeUTF(var0.getKey());
-			var0.writeTagContents(var1);
-		}
-	}
-
-	public static NBTBase createTagOfType(byte var0) {
-		switch(var0) {
+			NBTBase nBTBase2 = createTagOfType(var1);
+			nBTBase2.key = dataInput.readUTF();
+			nBTBase2.readTagContents(dataInput);
+			return nBTBase2;
+		}
+	}
+
+	public static void writeNamedTag(NBTBase tag, DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(tag.getType());
+		if(tag.getType() != 0) {
+			dataOutput.writeUTF(tag.getKey());
+			tag.writeTagContents(dataOutput);
+		}
+	}
+
+	public static NBTBase createTagOfType(byte type) {
+		switch(type) {
 		case 0:
 			return new NBTTagEnd();
 		case 1:
@@ -71,8 +71,8 @@
 		}
 	}
 
-	public static String getTagName(byte var0) {
-		switch(var0) {
+	public static String getTagName(byte type) {
+		switch(type) {
 		case 0:
 			return "TAG_End";
 		case 1:
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TileEntityRefabricator.java
@@ -1,0 +1,133 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class TileEntityRefabricator extends TileEntity implements IInventory {
+	private ItemStack[] items = new ItemStack[2];
+	private int fabricationTime;
+	private EntityItem displayItem;
+
+	public void onSpawn() {
+		displayItem = new EntityItem(this.worldObj, this.xCoord + 0.5D, this.yCoord + 1.5D, this.zCoord + 0.5D, null);
+	}
+
+	public EntityItem getDisplayItem() {
+		return this.displayItem;
+	}
+
+	public int getSizeInventory() {
+		return this.items.length;
+	}
+
+	public ItemStack getStackInSlot(int var1) {
+		return this.items[var1];
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.items[slot] != null) {
+			ItemStack var3;
+			if(this.items[slot].stackSize <= stackSize) {
+				var3 = this.items[slot];
+				this.items[slot] = null;
+			} else {
+				var3 = this.items[slot].splitStack(stackSize);
+				if(this.items[slot].stackSize == 0) {
+					this.items[slot] = null;
+				}
+			}
+			return var3;
+		} else {
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.items[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
+		}
+	}
+
+	public String getInvName() {
+		return "Refabricator";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public boolean canRefabricate() {
+		return this.items[0] != null
+				&& this.items[1] != null
+				&& this.items[1].itemID == Item.starDust.shiftedIndex
+				&& this.items[1].stackSize >= 1
+				&& (this.items[0].stackSize < this.items[0].getMaxStackSize()
+					|| this.items[0].itemDmg > 0
+						&& Item.itemsList[this.items[0].itemID].allowRepair());
+	}
+
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		super.readFromNBT(compoundTag);
+		NBTTagList nBTTagList2 = compoundTag.getTagList("Items");
+		this.items = new ItemStack[this.getSizeInventory()];
+
+		for(int var3 = 0; var3 < nBTTagList2.tagCount(); ++var3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(var3);
+			byte var5 = nBTTagCompound4.getByte("Slot");
+			if(var5 >= 0 && var5 < this.items.length) {
+				this.items[var5] = new ItemStack(nBTTagCompound4);
+			}
+		}
+
+		this.fabricationTime = compoundTag.getInteger("FabricationTime");
+	}
+
+	public void writeToNBT(NBTTagCompound compoundTag) {
+		super.writeToNBT(compoundTag);
+
+		NBTTagList nBTTagList2 = new NBTTagList();
+		for(int var3 = 0; var3 < this.items.length; ++var3) {
+			if(this.items[var3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)var3);
+				this.items[var3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
+			}
+		}
+		compoundTag.setTag("Items", nBTTagList2);
+		compoundTag.setInteger("FabricationTime", this.fabricationTime);
+	}
+
+	public int getProgressScaled(int scale) {
+		return this.fabricationTime * scale / 600;
+	}
+
+	public void updateEntity() {
+		this.displayItem.item = this.items[0];
+		this.displayItem.age++;
+		if (this.displayItem.age >= 6000) {
+			this.displayItem.age = 0;
+		}
+
+		if (!canRefabricate()) {
+			this.fabricationTime -= 10;
+			if (this.fabricationTime < 0) {
+				this.fabricationTime = 0;
+			}
+			return;
+		}
+
+		this.fabricationTime++;
+		if (this.fabricationTime >= 600) {
+			ItemStack input = this.items[0];
+			if (input.itemDmg > 0 && Item.itemsList[input.itemID].allowRepair()) {
+				input.itemDmg = 0;
+			} else if (input.stackSize < input.getMaxStackSize()) {
+				input.stackSize++;
+			}
+			this.decrStackSize(1, 1);
+			this.fabricationTime = 0;
+			this.displayItem.item = this.items[0];
+		}
+	}
+}
--- net/minecraft/src/MovementInput.java
+++ net/minecraft/src/MovementInput.java
@@ -6,13 +6,14 @@
 	public boolean unused = false;
 	public boolean jump = false;
 	public boolean sneak = false;
+	public boolean run = false;
 
-	public void updatePlayerMoveState(EntityPlayer var1) {
+	public void updatePlayerMoveState(EntityPlayer entityPlayer) {
 	}
 
 	public void resetKeyState() {
 	}
 
-	public void checkKeyForMovementInput(int var1, boolean var2) {
+	public void checkKeyForMovementInput(int key, boolean state) {
 	}
 }
--- net/minecraft/src/EntityExplodeFX.java
+++ net/minecraft/src/EntityExplodeFX.java
@@ -11,8 +11,8 @@
 		this.particleMaxAge = (int)(16.0D / ((double)this.rand.nextFloat() * 0.8D + 0.2D)) + 2;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -18,8 +18,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -30,35 +30,36 @@
 		return true;
 	}
 
-	public EntityBoat(World var1, double var2, double var4, double var6) {
-		this(var1);
-		this.setPosition(var2, var4 + (double)this.yOffset, var6);
+	public EntityBoat(World worldObj, double x, double y, double z) {
+		this(worldObj);
+		this.setPosition(x, y + (double)this.yOffset, z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
+		this.prevPosX = x;
+		this.prevPosY = y;
+		this.prevPosZ = z;
 	}
 
 	public double getMountedYOffset() {
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
 			int var3;
-			for(var3 = 0; var3 < 3; ++var3) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
-			}
-
-			for(var3 = 0; var3 < 2; ++var3) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
-			}
-
+//			for(var3 = 0; var3 < 3; ++var3) {
+//				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
+//			}
+//
+//			for(var3 = 0; var3 < 2; ++var3) {
+//				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
+//			}
+
+			this.entityDropItem(Item.boat.shiftedIndex, 1, 0.0F);
 			this.setEntityDead();
 		}
 
@@ -88,8 +89,8 @@
 		for(int var4 = 0; var4 < var1; ++var4) {
 			double var5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 0) / (double)var1 - 0.125D;
 			double var7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 1) / (double)var1 - 0.125D;
-			AxisAlignedBB var9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, var5, this.boundingBox.minZ, this.boundingBox.maxX, var7, this.boundingBox.maxZ);
-			if(this.worldObj.isAABBInMaterial(var9, Material.water)) {
+			AxisAlignedBB axisAlignedBB9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, var5, this.boundingBox.minZ, this.boundingBox.maxX, var7, this.boundingBox.maxZ);
+			if(this.worldObj.isAABBInMaterial(axisAlignedBB9, Material.water)) {
 				var2 += 1.0D / (double)var1;
 			}
 		}
@@ -97,11 +98,11 @@
 		double var23 = var2 * 2.0D - 1.0D;
 		this.motionY += (double)0.04F * var23;
 		if(this.riddenByEntity != null) {
-			this.motionX += this.riddenByEntity.motionX * 0.2D;
-			this.motionZ += this.riddenByEntity.motionZ * 0.2D;
+			this.motionX += this.riddenByEntity.motionX * 0.5D;
+			this.motionZ += this.riddenByEntity.motionZ * 0.5D;
 		}
 
-		double var6 = 0.4D;
+		double var6 = 1.5D;
 		if(this.motionX < -var6) {
 			this.motionX = -var6;
 		}
@@ -150,20 +151,22 @@
 		}
 
 		if(this.isCollidedHorizontally && var8 > 0.15D) {
-			this.setEntityDead();
-
-			int var24;
-			for(var24 = 0; var24 < 3; ++var24) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
-			}
-
-			for(var24 = 0; var24 < 2; ++var24) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
-			}
+//			this.setEntityDead();
+//
+//			int var24;
+//			for(var24 = 0; var24 < 3; ++var24) {
+//				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
+//			}
+//
+//			for(var24 = 0; var24 < 2; ++var24) {
+//				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
+//			}
+			this.motionX = 0.0D;
+			this.motionZ = 0.0D;
 		} else {
-			this.motionX *= (double)0.99F;
-			this.motionY *= (double)0.95F;
-			this.motionZ *= (double)0.99F;
+			this.motionX *= 0.99D;
+			this.motionY *= 0.95D;
+			this.motionZ *= 0.99D;
 		}
 
 		this.rotationPitch = 0.0F;
@@ -192,10 +195,10 @@
 
 		this.rotationYaw = (float)((double)this.rotationYaw + var16);
 		this.setRotation(this.rotationYaw, this.rotationPitch);
-		List var18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var18 != null && var18.size() > 0) {
-			for(int var26 = 0; var26 < var18.size(); ++var26) {
-				Entity var20 = (Entity)var18.get(var26);
+		List list18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list18 != null && list18.size() > 0) {
+			for(int var26 = 0; var26 < list18.size(); ++var26) {
+				Entity var20 = (Entity)list18.get(var26);
 				if(var20 != this.riddenByEntity && var20.canBePushed() && var20 instanceof EntityBoat) {
 					var20.applyEntityCollision(this);
 				}
@@ -214,18 +217,18 @@
 		this.riddenByEntity.setPosition(this.posX + var1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + var3);
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
+	protected void writeEntityToNBT(NBTTagCompound compoundTag) {
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
+	protected void readEntityFromNBT(NBTTagCompound compoundTag) {
 	}
 
 	public float getShadowSize() {
 		return 0.0F;
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		var1.mountEntity(this);
+	public boolean interact(EntityPlayer entityPlayer) {
+		entityPlayer.mountEntity(this);
 		return true;
 	}
 }
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,9 +1,12 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
 	private Random rand;
+	private long seed;
 	private NoiseGeneratorOctaves noiseGen1;
 	private NoiseGeneratorOctaves noiseGen2;
 	private NoiseGeneratorOctaves noiseGen3;
@@ -25,9 +28,10 @@
 	double[] noise7;
 	int[][] unused = new int[32][32];
 
-	public ChunkProviderGenerate(World var1, long var2) {
-		this.worldObj = var1;
-		this.rand = new Random(var2);
+	public ChunkProviderGenerate(World worldObj, long seed) {
+		this.worldObj = worldObj;
+		this.rand = new Random(seed);
+		this.seed = seed;
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
@@ -38,16 +42,17 @@
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3) {
+	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
 		byte var4 = 4;
 		byte var5 = 64;
 		int var6 = var4 + 1;
 		byte var7 = 17;
 		int var8 = var4 + 1;
-		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var4, 0, var2 * var4, var6, var7, var8);
+		this.noiseArray = this.initializeNoiseField(this.noiseArray, chunkX * var4, 0, chunkZ * var4, var6, var7, var8);
 
 		for(int var9 = 0; var9 < var4; ++var9) {
 			for(int var10 = 0; var10 < var4; ++var10) {
+				Biome biome = this.getBiome(var9 * 4 + chunkX * 16, var10 * 4 + chunkZ * 16);
 				for(int var11 = 0; var11 < 16; ++var11) {
 					double var12 = 0.125D;
 					double var14 = this.noiseArray[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
@@ -68,17 +73,18 @@
 
 						for(int var41 = 0; var41 < 4; ++var41) {
 							int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-							short var43 = 128;
+							short s43 = 128;
 							double var44 = 0.25D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
 
 							for(int var50 = 0; var50 < 4; ++var50) {
+
 								int var51 = 0;
 								if(var11 * 8 + var30 < var5) {
-									if(this.worldObj.snowCovered && var11 * 8 + var30 >= var5 - 1) {
+									if (biome == Biome.TUNDRA) {
 										var51 = Block.ice.blockID;
-									} else {
+									} else if (this.worldObj.worldType != WorldType.ARID) {
 										var51 = Block.waterStill.blockID;
 									}
 								}
@@ -87,8 +93,8 @@
 									var51 = Block.stone.blockID;
 								}
 
-								var3[var42] = (byte)var51;
-								var42 += var43;
+								blocks[var42] = (byte)var51;
+								var42 += s43;
 								var46 += var48;
 							}
 
@@ -107,38 +113,45 @@
 
 	}
 
-	public void replaceSurfaceBlocks(int var1, int var2, byte[] var3) {
+	public void replaceSurfaceBlocks(int chunkX, int chunkZ, byte[] blocks, NibbleArray metadata) {
 		byte var4 = 64;
-		double var5 = 1.0D / 32.0D;
-		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
-		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var5, 1.0D, var5);
-		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5 * 2.0D, var5 * 2.0D, var5 * 2.0D);
 
 		for(int var7 = 0; var7 < 16; ++var7) {
 			for(int var8 = 0; var8 < 16; ++var8) {
-				boolean var9 = this.sandNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
-				boolean var10 = this.gravelNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
-				int var11 = (int)(this.stoneNoise[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
+				Biome biome = getBiome(var7 + chunkX * 16, var8 + chunkZ * 16);
+
+				boolean var9 = SimplexOctaves.noise2(seed, (var7 + chunkX * 16) / 2048.0D, (var8 + chunkZ * 16) / 2048.0D, 4)
+						/ 4 + this.rand.nextFloat() * 0.2F > 0.0F;
+				boolean var10 = SimplexOctaves.noise3_ImproveXY(seed,
+						(var7 + chunkX * 16) / 2048.0D, (var8 + chunkZ * 16) / 2048.0D, 109.0134D, 4)
+						/ 4 + this.rand.nextFloat() * 0.2F > 3.0F;
+				int var11 = (int)(SimplexOctaves.noise2(seed, (var7 + chunkX * 16) / 512.0, (var8 + chunkZ * 16) / 512.0D, 4)
+						/ 4.0F + 4.0F + this.rand.nextFloat() * 0.25F);
+
 				int var12 = -1;
-				byte var13 = (byte)Block.grass.blockID;
-				byte var14 = (byte)Block.dirt.blockID;
+				byte var13 = (byte)biome.getSurface().blockID;
+				byte var14 = (byte)biome.getSoil().blockID;
 
 				for(int var15 = 127; var15 >= 0; --var15) {
 					int var16 = (var7 * 16 + var8) * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(6) - 1) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+					if(var15 <= this.rand.nextInt(4)) {
+						blocks[var16] = (byte)Block.bedrock.blockID;
 					} else {
-						byte var17 = var3[var16];
+						byte var17 = blocks[var16];
 						if(var17 == 0) {
 							var12 = -1;
 						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
+							int stoneMetadata = biome.getStoneMetadata();
+							if(var15 <= 32 - this.rand.nextInt(8)) {
+								metadata.set(var7, var15, var8, 2);
+							} else if(var12 == -1) {
 								if(var11 <= 0) {
 									var13 = 0;
 									var14 = (byte)Block.stone.blockID;
 								} else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-									var13 = (byte)Block.grass.blockID;
-									var14 = (byte)Block.dirt.blockID;
+									var13 = (byte)biome.getSurface().blockID;
+									var14 = (byte)biome.getSoil().blockID;
+
 									if(var10) {
 										var13 = 0;
 									}
@@ -162,31 +175,39 @@
 
 								var12 = var11;
 								if(var15 >= var4 - 1) {
-									var3[var16] = var13;
+									blocks[var16] = var13;
+									if (var13 == biome.getSurface().blockID) {
+										metadata.set(var7, var15, var8, biome.getSurfaceMetadata());
+									}
 								} else {
-									var3[var16] = var14;
+									blocks[var16] = var14;
 								}
 							} else if(var12 > 0) {
 								--var12;
-								var3[var16] = var14;
+								blocks[var16] = var14;
+							} else if(stoneMetadata != 0) {
+								metadata.set(var7, var15, var8, stoneMetadata);
 							}
 						}
 					}
 				}
 			}
 		}
-
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-		this.generateTerrain(var1, var2, var3);
-		this.replaceSurfaceBlocks(var1, var2, var3);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
-		var4.generateSkylightMap();
-		return var4;
+	}
+
+	public Chunk provideChunk(int chunkX, int chunkZ) {
+		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
+		byte[] var3 = new byte[32768];
+		Chunk chunk4 = new Chunk(this.worldObj, var3, chunkX, chunkZ);
+		this.generateTerrain(chunkX, chunkZ, var3);
+		this.replaceSurfaceBlocks(chunkX, chunkZ, var3, chunk4.data);
+		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, var3);
+		chunk4.generateSkylightMap();
+		return chunk4;
+	}
+
+	public Biome getBiome(int x, int z) {
+		return this.worldObj.getBiome(x, z);
 	}
 
 	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
@@ -287,180 +308,79 @@
 		return var1;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
+	public boolean chunkExists(int chunkX, int chunkZ) {
 		return true;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int chunkX, int chunkZ) {
 		BlockSand.fallInstantly = true;
-		int var4 = var2 * 16;
-		int var5 = var3 * 16;
+		int var4 = chunkX * 16;
+		int var5 = chunkZ * 16;
 		this.rand.setSeed(this.worldObj.randomSeed);
 		long var6 = this.rand.nextLong() / 2L * 2L + 1L;
 		long var8 = this.rand.nextLong() / 2L * 2L + 1L;
-		this.rand.setSeed((long)var2 * var6 + (long)var3 * var8 ^ this.worldObj.randomSeed);
-		double var10 = 0.25D;
-
-		int var12;
-		int var13;
-		int var14;
-		int var15;
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenClay(32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(64);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 2; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(32);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 1; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		var10 = 0.5D;
-		var12 = (int)((this.mobSpawnerNoise.generateNoiseOctaves((double)var4 * var10, (double)var5 * var10) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
-		if(var12 < 0) {
-			var12 = 0;
-		}
-
-		if(this.rand.nextInt(10) == 0) {
-			++var12;
-		}
-
-		Object var18 = new WorldGenTrees();
-		if(this.rand.nextInt(10) == 0) {
-			var18 = new WorldGenBigTree();
-		}
-
-		int var16;
-		for(var14 = 0; var14 < var12; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			((WorldGenerator)var18).setScale(1.0D, 1.0D, 1.0D);
-			((WorldGenerator)var18).generate(this.worldObj, this.rand, var15, this.worldObj.getHeightValue(var15, var16), var16);
-		}
-
-		int var17;
-		for(var14 = 0; var14 < 2; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		if(this.rand.nextInt(2) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(4) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(8) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var14 = 0; var14 < 10; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenReed()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 1; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenCactus()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 50; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 20; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = var4 + 8 + 0; var14 < var4 + 8 + 16; ++var14) {
-			for(var15 = var5 + 8 + 0; var15 < var5 + 8 + 16; ++var15) {
-				var16 = this.worldObj.getTopSolidOrLiquidBlock(var14, var15);
-				if(this.worldObj.snowCovered && var16 > 0 && var16 < 128 && this.worldObj.getBlockId(var14, var16, var15) == 0 && this.worldObj.getBlockMaterial(var14, var16 - 1, var15).getIsSolid() && this.worldObj.getBlockMaterial(var14, var16 - 1, var15) != Material.ice) {
-					this.worldObj.setBlockWithNotify(var14, var16, var15, Block.snow.blockID);
+		this.rand.setSeed((long)chunkX * var6 + (long)chunkZ * var8 ^ this.worldObj.randomSeed);
+
+		PopulatorHost host = new PopulatorHost(this, var4, var5, worldObj, rand, mobSpawnerNoise);
+
+		int maxDungeons = this.rand.nextInt(2) + 1;
+		host.generate(new WorldGenDungeons(), maxDungeons, 16, 64, 8);
+		host.generate(new WorldGenClay(32), 10, 0, 128);
+
+		host.generateMinable(Block.dirt, 32, 20, 0, 128);
+		host.generateMinable(Block.gravel, 32, 10, 0, 128);
+		host.generateMinable(Block.stone, 32, 10, 32, 128, 1);
+		host.generateMinableInStone(Block.oreCoal, 16, 20, 0, 128);
+		host.generateMinableInStone(Block.oreIron, 8, 20, 0, 64);
+		host.generateMinableInStone(Block.oreGold, 8, 2, 0, 32);
+		host.generateMinableInStone(Block.oreRedstone, 7, 8, 0, 16);
+		host.generateMinableInStone(Block.oreDiamond, 7, 1, 0, 16);
+		host.generateMinableInStone(Block.oreRuby, 4, 1, 0, 24);
+		host.generateMinableInStone(Block.oreSapphire, 4, 1, 0, 24);
+
+		getBiome(chunkX * 16, chunkZ * 16).populate(host);
+
+		host.generate(new WorldGenReed(), 10, 0, 128, 8);
+		host.generate(new WorldGenCactus(), 1, 0, 128, 8);
+		host.generate(new WorldGenSpeleothems(), 64, 0, 64, 8);
+
+		for(int i = 0; i < 50; ++i) {
+			int x = var4 + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(this.rand.nextInt(120) + 8);
+			int z = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		for(int i = 0; i < 20; ++i) {
+			int x = var4 + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
+			int z = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		/*if (this.worldObj.snowCovered) {
+			for(int x = var4 + 8; x < var4 + 24; ++x) {
+				for(int z = var5 + 8; z < var5 + 24; ++z) {
+					int y = this.worldObj.getTopSolidOrLiquidBlock(x, z);
+					if(y > 0 && y < 128 && this.worldObj.getBlockId(x, y, z) == 0 && this.worldObj.getBlockMaterial(x, y - 1, z).getIsSolid() && this.worldObj.getBlockMaterial(x, y - 1, z) != Material.ice) {
+						this.worldObj.setBlockWithNotify(x, y, z, Block.snow.blockID);
+					}
 				}
 			}
-		}
+		}*/
+
+		for(int x = var4 + 8; x < var4 + 24; ++x)
+			for(int z = var5 + 8; z < var5 + 24; ++z)
+				for (int y = 0; y < 8; y++) {
+					if (!this.worldObj.isBlockNormalCube(x, y, z)) {
+						this.worldObj.setBlockWithNotify(x, y, z, Block.lavaStill.blockID);
+					}
+				}
 
 		BlockSand.fallInstantly = false;
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean var1, IProgressUpdate progressUpdate) {
 		return true;
 	}
 
--- net/minecraft/src/ItemFlintAndSteel.java
+++ net/minecraft/src/ItemFlintAndSteel.java
@@ -7,38 +7,38 @@
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		int var8 = var3.getBlockId(var4, var5, var6);
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		int var8 = worldObj.getBlockId(x, y, z);
 		if(var8 == 0) {
-			var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
+			worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
+			worldObj.setBlockWithNotify(x, y, z, Block.fire.blockID);
 		}
 
-		var1.damageItem(1);
+		itemStack.damageItem(1);
 		return true;
 	}
 }
--- net/minecraft/src/NBTTagShort.java
+++ net/minecraft/src/NBTTagShort.java
@@ -10,16 +10,16 @@
 	public NBTTagShort() {
 	}
 
-	public NBTTagShort(short var1) {
-		this.shortValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeShort(this.shortValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.shortValue = var1.readShort();
+	public NBTTagShort(short value) {
+		this.shortValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeShort(this.shortValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.shortValue = dataInput.readShort();
 	}
 
 	public byte getType() {
--- net/minecraft/src/EntitySnowball.java
+++ net/minecraft/src/EntitySnowball.java
@@ -12,66 +12,83 @@
 	private EntityLiving thrower;
 	private int ticksInGround;
 	private int ticksInAir = 0;
+	public int iconIndex;
+	public int damage;
+	public int burn;
+	public float pierce;
 
 	public EntitySnowball(World var1) {
 		super(var1);
 		this.setSize(0.25F, 0.25F);
 	}
 
-	public boolean isInRangeToRenderDist(double var1) {
+	public boolean isInRangeToRenderDist(double distance) {
 		double var3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
 		var3 *= 64.0D;
-		return var1 < var3 * var3;
-	}
-
-	public EntitySnowball(World var1, EntityLiving var2) {
+		return distance < var3 * var3;
+	}
+
+	public EntitySnowball(World var1, EntityLiving var2, int iconIndex, int damage) {
+		this(var1, var2, iconIndex, damage, 0, 1.0F);
+	}
+
+	public EntitySnowball(World var1, EntityLiving var2, int iconIndex, int damage, int burn,
+						  float pierce) {
 		super(var1);
 		this.thrower = var2;
 		this.setSize(0.25F, 0.25F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
-		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-		this.posY -= (double)0.1F;
-		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw,
+				var2.rotationPitch);
+		this.posX -= (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
+		this.posY -= (double) 0.1F;
+		this.posZ -= (double) (MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.yOffset = 0.0F;
 		float var3 = 0.4F;
-		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
+		this.motionX = (double) (-MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI)
+				* MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI) * var3);
+		this.motionZ = (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI)
+				* MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI) * var3);
+		this.motionY = (double) (-MathHelper.sin(this.rotationPitch / 180.0F * (float) Math.PI) * var3);
 		this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+		this.iconIndex = iconIndex;
+		this.damage = damage;
+		this.burn = burn;
+		this.pierce = pierce;
 	}
 
 	public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
 		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
+		var1 /= (double) var9;
+		var3 /= (double) var9;
+		var5 /= (double) var9;
+		var1 += this.rand.nextGaussian() * (double) 0.0075F * (double) var8;
+		var3 += this.rand.nextGaussian() * (double) 0.0075F * (double) var8;
+		var5 += this.rand.nextGaussian() * (double) 0.0075F * (double) var8;
+		var1 *= (double) var7;
+		var3 *= (double) var7;
+		var5 *= (double) var7;
 		this.motionX = var1;
 		this.motionY = var3;
 		this.motionZ = var5;
 		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+		this.prevRotationYaw = this.rotationYaw = (float) (Math.atan2(var1, var5) * 180.0D / (double) (float) Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float) (Math.atan2(var3, (double) var10) * 180.0D
+				/ (double) (float) Math.PI);
 		this.ticksInGround = 0;
 	}
 
 	public void onUpdate() {
 		super.onUpdate();
-		if(this.throwableShake > 0) {
+		if (this.throwableShake > 0) {
 			--this.throwableShake;
 		}
 
-		if(this.inGround) {
+		if (this.inGround) {
 			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+			if (var1 == this.inTile) {
 				++this.ticksInGround;
-				if(this.ticksInGround == 1200) {
+				if (this.ticksInGround == 1200) {
 					this.setEntityDead();
 				}
 
@@ -79,39 +96,41 @@
 			}
 
 			this.inGround = false;
-			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionX *= (double) (this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double) (this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double) (this.rand.nextFloat() * 0.2F);
 			this.ticksInGround = 0;
 			this.ticksInAir = 0;
 		} else {
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if (movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord,
+					movingObjectPosition3.hitVec.zCoord);
 		}
 
 		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		List<Entity> list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this,
+				this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
 		double var6 = 0.0D;
 
 		int var8;
 		float var10;
-		for(var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
-			if(var9.canBeCollidedWith() && (var9 != this.thrower || this.ticksInAir >= 5)) {
+		for (var8 = 0; var8 < list5.size(); ++var8) {
+			Entity var9 = (Entity) list5.get(var8);
+			if (var9.canBeCollidedWith() && (var9 != this.thrower || this.ticksInAir >= 5)) {
 				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
-					if(var13 < var6 || var6 == 0.0D) {
+				AxisAlignedBB axisAlignedBB11 = var9.boundingBox.expand((double) var10, (double) var10, (double) var10);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if (movingObjectPosition12 != null) {
+					double var13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if (var13 < var6 || var6 == 0.0D) {
 						var4 = var9;
 						var6 = var13;
 					}
@@ -119,39 +138,74 @@
 			}
 		}
 
-		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+		if (var4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(var4);
 		}
 
-		if(var3 != null) {
-			if(var3.entityHit != null && var3.entityHit.attackEntityFrom(this.thrower, 0)) {
-			}
-
-			for(var8 = 0; var8 < 8; ++var8) {
-				this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
-			}
-
-			this.setEntityDead();
+		float cf16;
+		if (movingObjectPosition3 != null) {
+			if (movingObjectPosition3.entityHit != null) {
+				if (movingObjectPosition3.entityHit.attackEntityFrom(this.thrower, this.damage)) {
+					// this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+					// (this.rand.nextFloat() * 0.2F + 0.9F));
+					if (this.burn > 0) {
+						movingObjectPosition3.entityHit.fire = this.burn;
+					}
+					if (EntityLiving.class.isInstance(movingObjectPosition3.entityHit)) {
+						((EntityLiving) movingObjectPosition3.entityHit).hurtTime /= this.pierce;
+						((EntityLiving) movingObjectPosition3.entityHit).maxHurtTime /= this.pierce;
+						((EntityLiving) movingObjectPosition3.entityHit).heartsLife /= this.pierce;
+					}
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.ticksInAir = 0;
+				}
+			} else {
+				this.xTile = movingObjectPosition3.blockX;
+				this.yTile = movingObjectPosition3.blockY;
+				this.zTile = movingObjectPosition3.blockZ;
+				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+				this.motionX = (double) ((float) (movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double) ((float) (movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double) ((float) (movingObjectPosition3.hitVec.zCoord - this.posZ));
+				cf16 = MathHelper.sqrt_double(
+						this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double) cf16 * (double) 0.05F;
+				this.posY -= this.motionY / (double) cf16 * (double) 0.05F;
+				this.posZ -= this.motionZ / (double) cf16 * (double) 0.05F;
+				// this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+				// (this.rand.nextFloat() * 0.2F + 0.9F));
+				this.inGround = true;
+				this.throwableShake = 7;
+				this.setEntityDead();
+			}
 		}
 
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
 		float var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		this.rotationYaw = (float) (Math.atan2(this.motionX, this.motionZ) * 180.0D / (double) (float) Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for (this.rotationPitch = (float) (Math.atan2(this.motionY, (double) var16) * 180.0D
+				/ (double) (float) Math.PI); this.rotationPitch
+						- this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
-		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+		while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
 			this.prevRotationPitch += 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
 			this.prevRotationYaw -= 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
 			this.prevRotationYaw += 360.0F;
 		}
 
@@ -159,47 +213,53 @@
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
 		float var17 = 0.99F;
 		var10 = 0.03F;
-		if(this.handleWaterMovement()) {
-			for(int var18 = 0; var18 < 4; ++var18) {
+		if (this.handleWaterMovement()) {
+			for (int var18 = 0; var18 < 4; ++var18) {
 				float var19 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double) var19,
+						this.posY - this.motionY * (double) var19, this.posZ - this.motionZ * (double) var19, this.motionX,
+						this.motionY, this.motionZ);
 			}
 
 			var17 = 0.8F;
 		}
 
-		this.motionX *= (double)var17;
-		this.motionY *= (double)var17;
-		this.motionZ *= (double)var17;
-		this.motionY -= (double)var10;
+		this.motionX *= (double) var17;
+		this.motionY *= (double) var17;
+		this.motionZ *= (double) var17;
+		this.motionY -= (double) var10;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.throwableShake);
-		var1.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.throwableShake = var1.getByte("shake") & 255;
-		this.inGround = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inGround && this.thrower == var1 && this.throwableShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
-			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setShort("xTile", (short) this.xTile);
+		compoundTag.setShort("yTile", (short) this.yTile);
+		compoundTag.setShort("zTile", (short) this.zTile);
+		compoundTag.setByte("inTile", (byte) this.inTile);
+		compoundTag.setByte("shake", (byte) this.throwableShake);
+		compoundTag.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+		compoundTag.setByte("itemIndex", (byte) this.iconIndex);
+		compoundTag.setByte("damage", (byte) this.damage);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.xTile = compoundTag.getShort("xTile");
+		this.yTile = compoundTag.getShort("yTile");
+		this.zTile = compoundTag.getShort("zTile");
+		this.inTile = compoundTag.getByte("inTile") & 255;
+		this.throwableShake = compoundTag.getByte("shake") & 255;
+		this.inGround = compoundTag.getByte("inGround") == 1;
+		this.iconIndex = compoundTag.getByte("itemIndex");
+		this.damage = compoundTag.getByte("damage");
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if (this.inGround && this.thrower == entityPlayer && this.throwableShake <= 0
+				&& entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F,
+					((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
 			this.setEntityDead();
 		}
-
 	}
 
 	public float getShadowSize() {
--- net/minecraft/src/MusInputStream.java
+++ net/minecraft/src/MusInputStream.java
@@ -10,11 +10,11 @@
 	byte[] buffer;
 	final CodecMus codec;
 
-	public MusInputStream(CodecMus var1, URL var2, InputStream var3) {
-		this.codec = var1;
+	public MusInputStream(CodecMus codec, URL url, InputStream inputStream) {
+		this.codec = codec;
 		this.buffer = new byte[1];
-		this.inputStream = var3;
-		String var4 = var2.getPath();
+		this.inputStream = inputStream;
+		String var4 = url.getPath();
 		var4 = var4.substring(var4.lastIndexOf("/") + 1);
 		this.hash = var4.hashCode();
 	}
--- net/minecraft/src/EntityLavaFX.java
+++ net/minecraft/src/EntityLavaFX.java
@@ -3,8 +3,8 @@
 public class EntityLavaFX extends EntityFX {
 	private float lavaParticleScale;
 
-	public EntityLavaFX(World var1, double var2, double var4, double var6) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntityLavaFX(World worldObj, double x, double y, double z) {
+		super(worldObj, x, y, z, 0.0D, 0.0D, 0.0D);
 		this.motionX *= (double)0.8F;
 		this.motionY *= (double)0.8F;
 		this.motionZ *= (double)0.8F;
@@ -17,14 +17,14 @@
 		this.particleTextureIndex = 49;
 	}
 
-	public float getBrightness(float var1) {
+	public float getBrightness(float renderPartialTick) {
 		return 1.0F;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge;
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float var8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
 		this.particleScale = this.lavaParticleScale * (1.0F - var8 * var8);
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -11,55 +13,56 @@
 	public int yCoord;
 	public int zCoord;
 
-	private static void addMapping(Class var0, String var1) {
-		if(classToNameMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate id: " + var1);
+	private static void addMapping(Class tileClass, String name) {
+		if(classToNameMap.containsKey(name)) {
+			throw new IllegalArgumentException("Duplicate id: " + name);
 		} else {
-			nameToClassMap.put(var1, var0);
-			classToNameMap.put(var0, var1);
+			nameToClassMap.put(name, tileClass);
+			classToNameMap.put(tileClass, name);
 		}
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		this.xCoord = var1.getInteger("x");
-		this.yCoord = var1.getInteger("y");
-		this.zCoord = var1.getInteger("z");
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		this.xCoord = compoundTag.getInteger("x");
+		this.yCoord = compoundTag.getInteger("y");
+		this.zCoord = compoundTag.getInteger("z");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
+	public void writeToNBT(NBTTagCompound compoundTag) {
 		String var2 = (String)classToNameMap.get(this.getClass());
 		if(var2 == null) {
 			throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
 		} else {
-			var1.setString("id", var2);
-			var1.setInteger("x", this.xCoord);
-			var1.setInteger("y", this.yCoord);
-			var1.setInteger("z", this.zCoord);
+			compoundTag.setString("id", var2);
+			compoundTag.setInteger("x", this.xCoord);
+			compoundTag.setInteger("y", this.yCoord);
+			compoundTag.setInteger("z", this.zCoord);
 		}
 	}
 
 	public void updateEntity() {
 	}
 
-	public static TileEntity createAndLoadEntity(NBTTagCompound var0) {
-		TileEntity var1 = null;
+	public static TileEntity createAndLoadEntity(NBTTagCompound compoundTag) {
+		TileEntity tileEntity1 = null;
 
 		try {
-			Class var2 = (Class)nameToClassMap.get(var0.getString("id"));
-			if(var2 != null) {
-				var1 = (TileEntity)var2.newInstance();
+			Class class2 = (Class)nameToClassMap.get(compoundTag.getString("id"));
+			if(class2 != null) {
+				tileEntity1 = (TileEntity)class2.newInstance();
 			}
-		} catch (Exception var3) {
-			var3.printStackTrace();
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
-		if(var1 != null) {
-			var1.readFromNBT(var0);
+		if(tileEntity1 != null) {
+			tileEntity1.onSpawn();
+			tileEntity1.readFromNBT(compoundTag);
 		} else {
-			System.out.println("Skipping TileEntity with id " + var0.getString("id"));
+			System.out.println("Skipping TileEntity with id " + compoundTag.getString("id"));
 		}
 
-		return var1;
+		return tileEntity1;
 	}
 
 	public int getBlockMetadata() {
@@ -70,10 +73,10 @@
 		this.worldObj.updateTileEntityChunkAndDoNothing(this.xCoord, this.yCoord, this.zCoord, this);
 	}
 
-	public double getDistanceFrom(double var1, double var3, double var5) {
-		double var7 = (double)this.xCoord + 0.5D - var1;
-		double var9 = (double)this.yCoord + 0.5D - var3;
-		double var11 = (double)this.zCoord + 0.5D - var5;
+	public double getDistanceFrom(double x, double y, double z) {
+		double var7 = (double)this.xCoord + 0.5D - x;
+		double var9 = (double)this.yCoord + 0.5D - y;
+		double var11 = (double)this.zCoord + 0.5D - z;
 		return var7 * var7 + var9 * var9 + var11 * var11;
 	}
 
@@ -81,10 +84,15 @@
 		return Block.blocksList[this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord)];
 	}
 
+	public void onSpawn() {
+
+	}
+
 	static {
 		addMapping(TileEntityFurnace.class, "Furnace");
 		addMapping(TileEntityChest.class, "Chest");
 		addMapping(TileEntitySign.class, "Sign");
 		addMapping(TileEntityMobSpawner.class, "MobSpawner");
+		addMapping(TileEntityRefabricator.class, "Refabricator");
 	}
 }
--- net/minecraft/src/ICamera.java
+++ net/minecraft/src/ICamera.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public interface ICamera {
-	boolean isBoundingBoxInFrustum(AxisAlignedBB var1);
+	boolean isBoundingBoxInFrustum(AxisAlignedBB axisAlignedBB1);
 
 	void setPosition(double var1, double var3, double var5);
 }
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -3,49 +3,49 @@
 public class ItemReed extends Item {
 	private int spawnID;
 
-	public ItemReed(int var1, Block var2) {
-		super(var1);
-		this.spawnID = var2.blockID;
+	public ItemReed(int id, int block) {
+		super(id);
+		this.spawnID = block;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(worldObj.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(itemStack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.spawnID, var4, var5, var6, false)) {
+			if(worldObj.canBlockBePlacedAt(this.spawnID, x, y, z, false)) {
 				Block var8 = Block.blocksList[this.spawnID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.spawnID)) {
-					Block.blocksList[this.spawnID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+				if(worldObj.setBlockWithNotify(x, y, z, this.spawnID)) {
+					Block.blocksList[this.spawnID].onBlockPlaced(worldObj, x, y, z, side);
+					worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
+					--itemStack.stackSize;
 				}
 			}
 
--- net/minecraft/src/OSMap.java
+++ /dev/null
@@ -1,28 +1,0 @@
-package net.minecraft.src;
-
-public class OSMap {
-	public static final int[] osValues = new int[EnumOS.values().length];
-
-	static {
-		try {
-			osValues[EnumOS.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
-		}
-
-		try {
-			osValues[EnumOS.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
-		}
-
-		try {
-			osValues[EnumOS.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
-		}
-
-		try {
-			osValues[EnumOS.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
-		}
-
-	}
-}
--- net/minecraft/src/ItemBucket.java
+++ net/minecraft/src/ItemBucket.java
@@ -3,45 +3,45 @@
 public class ItemBucket extends Item {
 	private int isFull;
 
-	public ItemBucket(int var1, int var2) {
-		super(var1);
+	public ItemBucket(int id, int liquid) {
+		super(id);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
-		this.isFull = var2;
+		this.isFull = liquid;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
 		float var4 = 1.0F;
-		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
-		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
-		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4;
-		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
-		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
-		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var5 = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * var4;
+		float var6 = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * var4;
+		double var7 = entityPlayer.prevPosX + (entityPlayer.posX - entityPlayer.prevPosX) * (double)var4;
+		double var9 = entityPlayer.prevPosY + (entityPlayer.posY - entityPlayer.prevPosY) * (double)var4;
+		double var11 = entityPlayer.prevPosZ + (entityPlayer.posZ - entityPlayer.prevPosZ) * (double)var4;
+		Vec3D vec3D13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * 0.017453292F - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * 0.017453292F - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * 0.017453292F);
+		float var17 = MathHelper.sin(-var5 * 0.017453292F);
 		float var18 = var15 * var16;
 		float var20 = var14 * var16;
 		double var21 = 5.0D;
-		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, this.isFull == 0);
-		if(var24 == null) {
-			return var1;
+		Vec3D vec3D23 = vec3D13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition movingObjectPosition24 = worldObj.rayTraceBlocks_do(vec3D13, vec3D23, this.isFull == 0);
+		if(movingObjectPosition24 == null) {
+			return itemStack;
 		} else {
-			if(var24.typeOfHit == 0) {
-				int var25 = var24.blockX;
-				int var26 = var24.blockY;
-				int var27 = var24.blockZ;
+			if(movingObjectPosition24.typeOfHit == 0) {
+				int var25 = movingObjectPosition24.blockX;
+				int var26 = movingObjectPosition24.blockY;
+				int var27 = movingObjectPosition24.blockZ;
 				if(this.isFull == 0) {
-					if(var2.getBlockMaterial(var25, var26, var27) == Material.water && var2.getBlockMetadata(var25, var26, var27) == 0) {
-						var2.setBlockWithNotify(var25, var26, var27, 0);
+					if(worldObj.getBlockMaterial(var25, var26, var27) == Material.water && worldObj.getBlockMetadata(var25, var26, var27) == 0) {
+						worldObj.setBlockWithNotify(var25, var26, var27, 0);
 						return new ItemStack(Item.bucketWater);
 					}
 
-					if(var2.getBlockMaterial(var25, var26, var27) == Material.lava && var2.getBlockMetadata(var25, var26, var27) == 0) {
-						var2.setBlockWithNotify(var25, var26, var27, 0);
+					if(worldObj.getBlockMaterial(var25, var26, var27) == Material.lava && worldObj.getBlockMetadata(var25, var26, var27) == 0) {
+						worldObj.setBlockWithNotify(var25, var26, var27, 0);
 						return new ItemStack(Item.bucketLava);
 					}
 				} else {
@@ -49,40 +49,40 @@
 						return new ItemStack(Item.bucketEmpty);
 					}
 
-					if(var24.sideHit == 0) {
+					if(movingObjectPosition24.sideHit == 0) {
 						--var26;
 					}
 
-					if(var24.sideHit == 1) {
+					if(movingObjectPosition24.sideHit == 1) {
 						++var26;
 					}
 
-					if(var24.sideHit == 2) {
+					if(movingObjectPosition24.sideHit == 2) {
 						--var27;
 					}
 
-					if(var24.sideHit == 3) {
+					if(movingObjectPosition24.sideHit == 3) {
 						++var27;
 					}
 
-					if(var24.sideHit == 4) {
+					if(movingObjectPosition24.sideHit == 4) {
 						--var25;
 					}
 
-					if(var24.sideHit == 5) {
+					if(movingObjectPosition24.sideHit == 5) {
 						++var25;
 					}
 
-					if(var2.getBlockId(var25, var26, var27) == 0 || !var2.getBlockMaterial(var25, var26, var27).isSolid()) {
-						var2.setBlockAndMetadataWithNotify(var25, var26, var27, this.isFull, 0);
+					if(worldObj.getBlockId(var25, var26, var27) == 0 || !worldObj.getBlockMaterial(var25, var26, var27).isSolid()) {
+						worldObj.setBlockAndMetadataWithNotify(var25, var26, var27, this.isFull, 0);
 						return new ItemStack(Item.bucketEmpty);
 					}
 				}
-			} else if(this.isFull == 0 && var24.entityHit instanceof EntityCow) {
+			} else if(this.isFull == 0 && movingObjectPosition24.entityHit instanceof EntityCow) {
 				return new ItemStack(Item.bucketMilk);
 			}
 
-			return var1;
+			return itemStack;
 		}
 	}
 }
--- net/minecraft/src/MinecartTrackLogic.java
+++ net/minecraft/src/MinecartTrackLogic.java
@@ -12,14 +12,23 @@
 	private List connectedTracks;
 	final BlockMinecartTrack minecartTrack;
 
-	public MinecartTrackLogic(BlockMinecartTrack var1, World var2, int var3, int var4, int var5) {
-		this.minecartTrack = var1;
+	public static boolean isBlockMinecartTrack(World worldObj, int x, int y, int z) {
+		int blockId = worldObj.getBlockId(x, y, z);
+		return blockId == Block.minecartTrack.blockID || blockId == Block.boosterTrack.blockID;
+	}
+
+	private boolean isBlockMinecartTrack(int x, int y, int z) {
+		return isBlockMinecartTrack(this.worldObj, x, y, z);
+	}
+
+	public MinecartTrackLogic(BlockMinecartTrack minecartTrack, World world, int x, int y, int z) {
+		this.minecartTrack = minecartTrack;
 		this.connectedTracks = new ArrayList();
-		this.worldObj = var2;
-		this.trackX = var3;
-		this.trackY = var4;
-		this.trackZ = var5;
-		this.trackMetadata = var2.getBlockMetadata(var3, var4, var5);
+		this.worldObj = world;
+		this.trackX = x;
+		this.trackY = y;
+		this.trackZ = z;
+		this.trackMetadata = world.getBlockMetadata(x, y, z);
 		this.calculateConnectedTracks();
 	}
 
@@ -61,9 +70,9 @@
 
 	private void refreshConnectedTracks() {
 		for(int var1 = 0; var1 < this.connectedTracks.size(); ++var1) {
-			MinecartTrackLogic var2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var1));
-			if(var2 != null && var2.isConnectedTo(this)) {
-				this.connectedTracks.set(var1, new ChunkPosition(var2.trackX, var2.trackY, var2.trackZ));
+			MinecartTrackLogic minecartTrackLogic2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var1));
+			if(minecartTrackLogic2 != null && minecartTrackLogic2.isConnectedTo(this)) {
+				this.connectedTracks.set(var1, new ChunkPosition(minecartTrackLogic2.trackX, minecartTrackLogic2.trackY, minecartTrackLogic2.trackZ));
 			} else {
 				this.connectedTracks.remove(var1--);
 			}
@@ -71,18 +80,18 @@
 
 	}
 
-	private boolean isMinecartTrack(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2, var3) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(var1, var2 + 1, var3) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(var1, var2 - 1, var3) == this.minecartTrack.blockID);
-	}
-
-	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition var1) {
-		return this.worldObj.getBlockId(var1.x, var1.y, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y + 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y + 1, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y - 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y - 1, var1.z) : null));
-	}
-
-	private boolean isConnectedTo(MinecartTrackLogic var1) {
+	private boolean isMinecartTrack(int x, int y, int z) {
+		return isBlockMinecartTrack(x, y, z) ? true : (isBlockMinecartTrack(x, y + 1, z) ? true : isBlockMinecartTrack(x, y - 1, z));
+	}
+
+	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition chunkPos) {
+		return isBlockMinecartTrack(chunkPos.x, chunkPos.y, chunkPos.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y, chunkPos.z) : (isBlockMinecartTrack(chunkPos.x, chunkPos.y + 1, chunkPos.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y + 1, chunkPos.z) : (isBlockMinecartTrack(chunkPos.x, chunkPos.y - 1, chunkPos.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y - 1, chunkPos.z) : null));
+	}
+
+	private boolean isConnectedTo(MinecartTrackLogic minecartTrackLogic) {
 		for(int var2 = 0; var2 < this.connectedTracks.size(); ++var2) {
-			ChunkPosition var3 = (ChunkPosition)this.connectedTracks.get(var2);
-			if(var3.x == var1.trackX && var3.z == var1.trackZ) {
+			ChunkPosition chunkPosition3 = (ChunkPosition)this.connectedTracks.get(var2);
+			if(chunkPosition3.x == minecartTrackLogic.trackX && chunkPosition3.z == minecartTrackLogic.trackZ) {
 				return true;
 			}
 		}
@@ -90,10 +99,10 @@
 		return false;
 	}
 
-	private boolean isInTrack(int var1, int var2, int var3) {
+	private boolean isInTrack(int x, int y, int z) {
 		for(int var4 = 0; var4 < this.connectedTracks.size(); ++var4) {
-			ChunkPosition var5 = (ChunkPosition)this.connectedTracks.get(var4);
-			if(var5.x == var1 && var5.z == var3) {
+			ChunkPosition chunkPosition5 = (ChunkPosition)this.connectedTracks.get(var4);
+			if(chunkPosition5.x == x && chunkPosition5.z == z) {
 				return true;
 			}
 		}
@@ -122,21 +131,21 @@
 		return var1;
 	}
 
-	private boolean canConnectTo(MinecartTrackLogic var1) {
-		if(this.isConnectedTo(var1)) {
+	private boolean canConnectTo(MinecartTrackLogic minecartTrackLogic) {
+		if(this.isConnectedTo(minecartTrackLogic)) {
 			return true;
 		} else if(this.connectedTracks.size() == 2) {
 			return false;
 		} else if(this.connectedTracks.size() == 0) {
 			return true;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)this.connectedTracks.get(0);
-			return var1.trackY == this.trackY && var2.y == this.trackY ? true : true;
+			ChunkPosition chunkPosition2 = (ChunkPosition)this.connectedTracks.get(0);
+			return minecartTrackLogic.trackY == this.trackY && chunkPosition2.y == this.trackY ? true : true;
 		}
 	}
 
-	private void connectToNeighbor(MinecartTrackLogic var1) {
-		this.connectedTracks.add(new ChunkPosition(var1.trackX, var1.trackY, var1.trackZ));
+	private void connectToNeighbor(MinecartTrackLogic minecartTrackLogic) {
+		this.connectedTracks.add(new ChunkPosition(minecartTrackLogic.trackX, minecartTrackLogic.trackY, minecartTrackLogic.trackZ));
 		boolean var2 = this.isInTrack(this.trackX, this.trackY, this.trackZ - 1);
 		boolean var3 = this.isInTrack(this.trackX, this.trackY, this.trackZ + 1);
 		boolean var4 = this.isInTrack(this.trackX - 1, this.trackY, this.trackZ);
@@ -167,21 +176,21 @@
 		}
 
 		if(var6 == 0) {
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ - 1)) {
 				var6 = 4;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ + 1)) {
 				var6 = 5;
 			}
 		}
 
 		if(var6 == 1) {
-			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX + 1, this.trackY + 1, this.trackZ)) {
 				var6 = 2;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX - 1, this.trackY + 1, this.trackZ)) {
 				var6 = 3;
 			}
 		}
@@ -193,17 +202,17 @@
 		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
 	}
 
-	private boolean canConnectFrom(int var1, int var2, int var3) {
-		MinecartTrackLogic var4 = this.getMinecartTrackLogic(new ChunkPosition(var1, var2, var3));
-		if(var4 == null) {
+	private boolean canConnectFrom(int x, int y, int z) {
+		MinecartTrackLogic minecartTrackLogic4 = this.getMinecartTrackLogic(new ChunkPosition(x, y, z));
+		if(minecartTrackLogic4 == null) {
 			return false;
 		} else {
-			var4.refreshConnectedTracks();
-			return var4.canConnectTo(this);
+			minecartTrackLogic4.refreshConnectedTracks();
+			return minecartTrackLogic4.canConnectTo(this);
 		}
 	}
 
-	public void place(boolean var1) {
+	public void place(boolean powered) {
 		boolean var2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
 		boolean var3 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ + 1);
 		boolean var4 = this.canConnectFrom(this.trackX - 1, this.trackY, this.trackZ);
@@ -242,7 +251,7 @@
 				var6 = 1;
 			}
 
-			if(var1) {
+			if(powered) {
 				if(var3 && var5) {
 					var6 = 6;
 				}
@@ -278,21 +287,21 @@
 		}
 
 		if(var6 == 0) {
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ - 1)) {
 				var6 = 4;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ + 1)) {
 				var6 = 5;
 			}
 		}
 
 		if(var6 == 1) {
-			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX + 1, this.trackY + 1, this.trackZ)) {
 				var6 = 2;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX - 1, this.trackY + 1, this.trackZ)) {
 				var6 = 3;
 			}
 		}
@@ -306,18 +315,18 @@
 		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
 
 		for(int var7 = 0; var7 < this.connectedTracks.size(); ++var7) {
-			MinecartTrackLogic var8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var7));
-			if(var8 != null) {
-				var8.refreshConnectedTracks();
-				if(var8.canConnectTo(this)) {
-					var8.connectToNeighbor(this);
+			MinecartTrackLogic minecartTrackLogic8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var7));
+			if(minecartTrackLogic8 != null) {
+				minecartTrackLogic8.refreshConnectedTracks();
+				if(minecartTrackLogic8.canConnectTo(this)) {
+					minecartTrackLogic8.connectToNeighbor(this);
 				}
 			}
 		}
 
 	}
 
-	static int getNAdjacentTracks(MinecartTrackLogic var0) {
-		return var0.getAdjacentTracks();
+	static int getNAdjacentTracks(MinecartTrackLogic minecartTrackLogic0) {
+		return minecartTrackLogic0.getAdjacentTracks();
 	}
 }
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -1,5 +1,8 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -9,74 +12,74 @@
 	private static Map IDtoClassMapping = new HashMap();
 	private static Map classToIDMapping = new HashMap();
 
-	private static void addMapping(Class var0, String var1, int var2) {
-		stringToClassMapping.put(var1, var0);
-		classToStringMapping.put(var0, var1);
-		IDtoClassMapping.put(Integer.valueOf(var2), var0);
-		classToIDMapping.put(var0, Integer.valueOf(var2));
+	private static void addMapping(Class entityClass, String entityName, int entityID) {
+		stringToClassMapping.put(entityName, entityClass);
+		classToStringMapping.put(entityClass, entityName);
+		IDtoClassMapping.put(entityID, entityClass);
+		classToIDMapping.put(entityClass, entityID);
 	}
 
-	public static Entity createEntityByName(String var0, World var1) {
+	public static Entity createEntityByName(String entityName, World worldObj) {
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)stringToClassMapping.get(var0);
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)stringToClassMapping.get(entityName);
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldObj});
 			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		return var2;
 	}
 
-	public static Entity createEntityFromNBT(NBTTagCompound var0, World var1) {
+	public static Entity createEntityFromNBT(NBTTagCompound nbtCompound, World worldObj) {
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)stringToClassMapping.get(var0.getString("id"));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)stringToClassMapping.get(nbtCompound.getString("id"));
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldObj});
 			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		if(var2 != null) {
-			var2.readFromNBT(var0);
+			var2.readFromNBT(nbtCompound);
 		} else {
-			System.out.println("Skipping Entity with id " + var0.getString("id"));
+			System.out.println("Skipping Entity with id " + nbtCompound.getString("id"));
 		}
 
 		return var2;
 	}
 
-	public static Entity createEntityByID(int var0, World var1) {
+	public static Entity createEntityByID(int entityID, World worldObj) {
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)IDtoClassMapping.get(Integer.valueOf(var0));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)IDtoClassMapping.get(entityID);
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldObj});
 			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		if(var2 == null) {
-			System.out.println("Skipping Entity with id " + var0);
+			System.out.println("Skipping Entity with id " + entityID);
 		}
 
 		return var2;
 	}
 
-	public static int getEntityID(Entity var0) {
-		return ((Integer)classToIDMapping.get(var0.getClass())).intValue();
+	public static int getEntityID(Entity entity) {
+		return ((Integer)classToIDMapping.get(entity.getClass())).intValue();
 	}
 
-	public static String getEntityString(Entity var0) {
-		return (String)classToStringMapping.get(var0.getClass());
+	public static String getEntityString(Entity entity) {
+		return (String)classToStringMapping.get(entity.getClass());
 	}
 
 	static {
@@ -92,10 +95,12 @@
 		addMapping(EntityGiantZombie.class, "Giant", 53);
 		addMapping(EntityZombie.class, "Zombie", 54);
 		addMapping(EntitySlime.class, "Slime", 55);
+		addMapping(EntityPhantom.class, "Phantom", 56);
 		addMapping(EntityPig.class, "Pig", 90);
 		addMapping(EntitySheep.class, "Sheep", 91);
-		addMapping(EntityCow.class, "Cow", 91);
-		addMapping(EntityChicken.class, "Chicken", 91);
+		addMapping(EntityCow.class, "Cow", 92);
+		addMapping(EntityChicken.class, "Chicken", 93);
+		addMapping(EntityFox.class, "Fox", 94);
 		addMapping(EntityTNTPrimed.class, "PrimedTnt", 20);
 		addMapping(EntityFallingSand.class, "FallingSand", 21);
 		addMapping(EntityMinecart.class, "Minecart", 40);
--- net/minecraft/src/PanelCrashReport.java
+++ net/minecraft/src/PanelCrashReport.java
@@ -9,31 +9,33 @@
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+
+import net.minecraft.client.Minecraft;
 import org.lwjgl.Sys;
 import org.lwjgl.opengl.GL11;
 
 public class PanelCrashReport extends Panel {
-	public PanelCrashReport(UnexpectedThrowable var1) {
+	public PanelCrashReport(UnexpectedThrowable throwable) {
 		this.setBackground(new Color(3028036));
 		this.setLayout(new BorderLayout());
-		StringWriter var2 = new StringWriter();
-		var1.exception.printStackTrace(new PrintWriter(var2));
-		String var3 = var2.toString();
+		StringWriter stringWriter2 = new StringWriter();
+		throwable.exception.printStackTrace(new PrintWriter(stringWriter2));
+		String var3 = stringWriter2.toString();
 		String var4 = "";
 		String var5 = "";
 
 		try {
 			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
 			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft Alpha v1.1.2_01\n";
+			var5 = var5 + "Minecraft: " + Minecraft.version + "\n";
 			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
 			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
 			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
 			var5 = var5 + "LWJGL: " + Sys.getVersion() + "\n";
 			var4 = GL11.glGetString(GL11.GL_VENDOR);
 			var5 = var5 + "OpenGL: " + GL11.glGetString(GL11.GL_RENDERER) + " version " + GL11.glGetString(GL11.GL_VERSION) + ", " + GL11.glGetString(GL11.GL_VENDOR) + "\n";
-		} catch (Throwable var8) {
-			var5 = var5 + "[failed to get system properties (" + var8 + ")]\n";
+		} catch (Throwable throwable8) {
+			var5 = var5 + "[failed to get system properties (" + throwable8 + ")]\n";
 		}
 
 		var5 = var5 + "\n";
@@ -42,8 +44,8 @@
 		var6 = var6 + "\n";
 		var6 = var6 + "\n";
 		if(var3.contains("Pixel format not accelerated")) {
-			var6 = var6 + "      Bad video card drivers!      \n";
-			var6 = var6 + "      -----------------------      \n";
+			var6 = var6 + "	  Bad video card drivers!	  \n";
+			var6 = var6 + "	  -----------------------	  \n";
 			var6 = var6 + "\n";
 			var6 = var6 + "Minecraft was unable to start because it failed to find an accelerated OpenGL mode.\n";
 			var6 = var6 + "This can usually be fixed by updating the video card drivers.\n";
@@ -57,8 +59,8 @@
 				var6 = var6 + "  http://www.amd.com/\n";
 			}
 		} else {
-			var6 = var6 + "      Minecraft has crashed!      \n";
-			var6 = var6 + "      ----------------------      \n";
+			var6 = var6 + "	  Minecraft has crashed!	  \n";
+			var6 = var6 + "	  ----------------------	  \n";
 			var6 = var6 + "\n";
 			var6 = var6 + "Minecraft has stopped running because it encountered a problem.\n";
 			var6 = var6 + "\n";
@@ -74,12 +76,12 @@
 		var6 = var6 + "--- END ERROR REPORT " + Integer.toHexString(var6.hashCode()) + " ----------\n";
 		var6 = var6 + "\n";
 		var6 = var6 + "\n";
-		TextArea var7 = new TextArea(var6, 0, 0, 1);
-		var7.setFont(new Font("Monospaced", 0, 12));
+		TextArea textArea7 = new TextArea(var6, 0, 0, 1);
+		textArea7.setFont(new Font("Monospaced", 0, 12));
 		this.add(new CanvasMojangLogo(), "North");
 		this.add(new CanvasCrashReport(80), "East");
 		this.add(new CanvasCrashReport(80), "West");
 		this.add(new CanvasCrashReport(100), "South");
-		this.add(var7, "Center");
+		this.add(textArea7, "Center");
 	}
 }
--- net/minecraft/src/RecipeSorter.java
+++ net/minecraft/src/RecipeSorter.java
@@ -5,12 +5,12 @@
 class RecipeSorter implements Comparator {
 	final CraftingManager craftingManager;
 
-	RecipeSorter(CraftingManager var1) {
-		this.craftingManager = var1;
+	RecipeSorter(CraftingManager craftingManager) {
+		this.craftingManager = craftingManager;
 	}
 
-	public int compareRecipes(CraftingRecipe var1, CraftingRecipe var2) {
-		return var2.getRecipeSize() < var1.getRecipeSize() ? -1 : (var2.getRecipeSize() > var1.getRecipeSize() ? 1 : 0);
+	public int compareRecipes(CraftingRecipe craftingRecipe1, CraftingRecipe craftingRecipe2) {
+		return craftingRecipe2.getRecipeSize() < craftingRecipe1.getRecipeSize() ? -1 : (craftingRecipe2.getRecipeSize() > craftingRecipe1.getRecipeSize() ? 1 : 0);
 	}
 
 	public int compare(Object var1, Object var2) {
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -2,20 +2,24 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public abstract class GuiContainer extends GuiScreen {
 	private static RenderItem itemRenderer = new RenderItem();
 	protected int xSize = 176;
 	protected int ySize = 166;
 	protected List inventorySlots = new ArrayList();
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
 		int var4 = (this.width - this.xSize) / 2;
 		int var5 = (this.height - this.ySize) / 2;
-		this.drawGuiContainerBackgroundLayer(var3);
+		this.drawGuiContainerBackgroundLayer(renderPartialTick);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 		GL11.glPushMatrix();
 		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
@@ -26,24 +30,24 @@
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 
 		for(int var6 = 0; var6 < this.inventorySlots.size(); ++var6) {
-			SlotInventory var7 = (SlotInventory)this.inventorySlots.get(var6);
-			this.drawSlotInventory(var7);
-			if(var7.getIsMouseOverSlot(var1, var2)) {
+			SlotInventory slotInventory7 = (SlotInventory)this.inventorySlots.get(var6);
+			this.drawSlotInventory(slotInventory7);
+			if(slotInventory7.getIsMouseOverSlot(mouseX, mouseY)) {
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				int var8 = var7.xDisplayPosition;
-				int var9 = var7.yDisplayPosition;
+				int var8 = slotInventory7.xDisplayPosition;
+				int var9 = slotInventory7.yDisplayPosition;
 				this.drawGradientRect(var8, var9, var8 + 16, var9 + 16, -2130706433, -2130706433);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
 		}
 
-		InventoryPlayer var10 = this.mc.thePlayer.inventory;
-		if(var10.draggedItemStack != null) {
+		InventoryPlayer inventoryPlayer10 = this.mc.thePlayer.inventory;
+		if(inventoryPlayer10.draggedItemStack != null) {
 			GL11.glTranslatef(0.0F, 0.0F, 32.0F);
-			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var10.draggedItemStack, var1 - var4 - 8, var2 - var5 - 8);
-			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var10.draggedItemStack, var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, inventoryPlayer10.draggedItemStack, mouseX - var4 - 8, mouseY - var5 - 8);
+			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, inventoryPlayer10.draggedItemStack, mouseX - var4 - 8, mouseY - var5 - 8);
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -51,6 +55,12 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
+		for (int var6 = 0; var6 < this.inventorySlots.size(); ++var6) {
+			SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(var6);
+			if (slotInventory4.getIsMouseOverSlot(mouseX, mouseY)) {
+				this.drawSlotTooltip(slotInventory4, mouseX, mouseY);
+			}
+		}
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glPopMatrix();
@@ -61,14 +71,14 @@
 
 	protected abstract void drawGuiContainerBackgroundLayer(float var1);
 
-	private void drawSlotInventory(SlotInventory var1) {
-		IInventory var2 = var1.inventory;
-		int var3 = var1.slotIndex;
-		int var4 = var1.xDisplayPosition;
-		int var5 = var1.yDisplayPosition;
-		ItemStack var6 = var2.getStackInSlot(var3);
+	private void drawSlotInventory(SlotInventory slotInventory) {
+		IInventory iInventory2 = slotInventory.inventory;
+		int var3 = slotInventory.slotIndex;
+		int var4 = slotInventory.xDisplayPosition;
+		int var5 = slotInventory.yDisplayPosition;
+		ItemStack var6 = iInventory2.getStackInSlot(var3);
 		if(var6 == null) {
-			int var7 = var1.getBackgroundIconIndex();
+			int var7 = slotInventory.getBackgroundIconIndex();
 			if(var7 >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
 				this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture("/gui/items.png"));
@@ -82,11 +92,40 @@
 		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var6, var4, var5);
 	}
 
+	private void drawSlotTooltip(SlotInventory slotInventory1, int x, int y) {
+		x -= (this.width - this.xSize) / 2;
+		y -= (this.height - this.ySize) / 2;
+		if (slotInventory1 == null || slotInventory1.getStack() == null) {
+			return;
+		}
+
+		ItemTooltip tooltip = slotInventory1.getTooltip();
+		if (tooltip != null) {
+			int tooltipWidth = 0;
+			for (String line : tooltip.lines) {
+				int newWidth = this.fontRenderer.getStringWidth(line);
+				if (newWidth > tooltipWidth) {
+					tooltipWidth = newWidth;
+				}
+			}
+			if ((x + tooltipWidth + 48) > this.width) {
+				x -= tooltipWidth + 24;
+			}
+
+			int tooltipHeight = tooltip.size() * 9;
+			this.drawGradientRect(x + 8, y, x + tooltipWidth + 16, y + tooltipHeight + 8, tooltip.gradient.var0,
+					tooltip.gradient.var1);
+			for (int i = 0; i < tooltip.size(); i++) {
+				this.drawString(this.fontRenderer, tooltip.lines.get(i), x + 12, y + 4 + i * 9, tooltip.colors.get(i));
+			}
+		}
+	}
+
 	private Slot getSlotAtPosition(int var1, int var2) {
 		for(int var3 = 0; var3 < this.inventorySlots.size(); ++var3) {
-			SlotInventory var4 = (SlotInventory)this.inventorySlots.get(var3);
-			if(var4.getIsMouseOverSlot(var1, var2)) {
-				return var4;
+			SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(var3);
+			if(slotInventory4.getIsMouseOverSlot(var1, var2)) {
+				return slotInventory4;
 			}
 		}
 
@@ -95,130 +134,122 @@
 
 	protected void mouseClicked(int var1, int var2, int var3) {
 		if(var3 == 0 || var3 == 1) {
-			Slot var4 = this.getSlotAtPosition(var1, var2);
-			InventoryPlayer var5 = this.mc.thePlayer.inventory;
+			Slot slot4 = this.getSlotAtPosition(var1, var2);
+			InventoryPlayer inventoryPlayer5 = this.mc.thePlayer.inventory;
 			int var7;
-			if(var4 != null) {
-				ItemStack var6 = var4.getStack();
-				if(var6 != null || var5.draggedItemStack != null) {
-					if(var6 != null && var5.draggedItemStack == null) {
+			if(slot4 != null) {
+				ItemStack var6 = slot4.getStack();
+				if(var6 != null || inventoryPlayer5.draggedItemStack != null) {
+					if(var6 != null && inventoryPlayer5.draggedItemStack == null) {
 						var7 = var3 == 0 ? var6.stackSize : (var6.stackSize + 1) / 2;
-						var5.draggedItemStack = var4.inventory.decrStackSize(var4.slotIndex, var7);
+						inventoryPlayer5.draggedItemStack = slot4.inventory.decrStackSize(slot4.slotIndex, var7);
 						if(var6.stackSize == 0) {
-							var4.putStack((ItemStack)null);
-						}
-
-						var4.onPickupFromSlot();
-					} else if(var6 == null && var5.draggedItemStack != null && var4.isItemValid(var5.draggedItemStack)) {
-						var7 = var3 == 0 ? var5.draggedItemStack.stackSize : 1;
-						if(var7 > var4.inventory.getInventoryStackLimit()) {
-							var7 = var4.inventory.getInventoryStackLimit();
-						}
-
-						var4.putStack(var5.draggedItemStack.splitStack(var7));
-						if(var5.draggedItemStack.stackSize == 0) {
-							var5.draggedItemStack = null;
-						}
-					} else if(var6 != null && var5.draggedItemStack != null) {
-						if(var4.isItemValid(var5.draggedItemStack)) {
-							if(var6.itemID != var5.draggedItemStack.itemID) {
-								if(var5.draggedItemStack.stackSize <= var4.inventory.getInventoryStackLimit()) {
-									var4.putStack(var5.draggedItemStack);
-									var5.draggedItemStack = var6;
+							slot4.putStack((ItemStack)null);
+						}
+
+						slot4.onPickupFromSlot();
+					} else if(var6 == null && inventoryPlayer5.draggedItemStack != null && slot4.isItemValid(inventoryPlayer5.draggedItemStack)) {
+						var7 = var3 == 0 ? inventoryPlayer5.draggedItemStack.stackSize : 1;
+						if(var7 > slot4.inventory.getInventoryStackLimit()) {
+							var7 = slot4.inventory.getInventoryStackLimit();
+						}
+
+						slot4.putStack(inventoryPlayer5.draggedItemStack.splitStack(var7));
+						if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+							inventoryPlayer5.draggedItemStack = null;
+						}
+					} else if(var6 != null && inventoryPlayer5.draggedItemStack != null) {
+						if(slot4.isItemValid(inventoryPlayer5.draggedItemStack)) {
+							if(var6.itemID != inventoryPlayer5.draggedItemStack.itemID || var6.itemMetadata != inventoryPlayer5.draggedItemStack.itemMetadata) {
+								if(inventoryPlayer5.draggedItemStack.stackSize <= slot4.inventory.getInventoryStackLimit()) {
+									slot4.putStack(inventoryPlayer5.draggedItemStack);
+									inventoryPlayer5.draggedItemStack = var6;
 								}
-							} else if(var6.itemID == var5.draggedItemStack.itemID) {
+							} else if(var6.itemID == inventoryPlayer5.draggedItemStack.itemID && var6.itemMetadata == inventoryPlayer5.draggedItemStack.itemMetadata) {
 								if(var3 == 0) {
-									var7 = var5.draggedItemStack.stackSize;
-									if(var7 > var4.inventory.getInventoryStackLimit() - var6.stackSize) {
-										var7 = var4.inventory.getInventoryStackLimit() - var6.stackSize;
-									}
-
-									if(var7 > var5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
-										var7 = var5.draggedItemStack.getMaxStackSize() - var6.stackSize;
-									}
-
-									var5.draggedItemStack.splitStack(var7);
-									if(var5.draggedItemStack.stackSize == 0) {
-										var5.draggedItemStack = null;
+									var7 = inventoryPlayer5.draggedItemStack.stackSize;
+									if(var7 > slot4.inventory.getInventoryStackLimit() - var6.stackSize) {
+										var7 = slot4.inventory.getInventoryStackLimit() - var6.stackSize;
+									}
+
+									if(var7 > inventoryPlayer5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
+										var7 = inventoryPlayer5.draggedItemStack.getMaxStackSize() - var6.stackSize;
+									}
+
+									inventoryPlayer5.draggedItemStack.splitStack(var7);
+									if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+										inventoryPlayer5.draggedItemStack = null;
 									}
 
 									var6.stackSize += var7;
 								} else if(var3 == 1) {
 									var7 = 1;
-									if(var7 > var4.inventory.getInventoryStackLimit() - var6.stackSize) {
-										var7 = var4.inventory.getInventoryStackLimit() - var6.stackSize;
-									}
-
-									if(var7 > var5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
-										var7 = var5.draggedItemStack.getMaxStackSize() - var6.stackSize;
-									}
-
-									var5.draggedItemStack.splitStack(var7);
-									if(var5.draggedItemStack.stackSize == 0) {
-										var5.draggedItemStack = null;
+									if(var7 > slot4.inventory.getInventoryStackLimit() - var6.stackSize) {
+										var7 = slot4.inventory.getInventoryStackLimit() - var6.stackSize;
+									}
+
+									if(var7 > inventoryPlayer5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
+										var7 = inventoryPlayer5.draggedItemStack.getMaxStackSize() - var6.stackSize;
+									}
+
+									inventoryPlayer5.draggedItemStack.splitStack(var7);
+									if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+										inventoryPlayer5.draggedItemStack = null;
 									}
 
 									var6.stackSize += var7;
 								}
 							}
-						} else if(var6.itemID == var5.draggedItemStack.itemID && var5.draggedItemStack.getMaxStackSize() > 1) {
+						} else if(var6.itemID == inventoryPlayer5.draggedItemStack.itemID && var6.itemMetadata == inventoryPlayer5.draggedItemStack.itemMetadata && inventoryPlayer5.draggedItemStack.getMaxStackSize() > 1) {
 							var7 = var6.stackSize;
-							if(var7 > 0 && var7 + var5.draggedItemStack.stackSize <= var5.draggedItemStack.getMaxStackSize()) {
-								var5.draggedItemStack.stackSize += var7;
+							if(var7 > 0 && var7 + inventoryPlayer5.draggedItemStack.stackSize <= inventoryPlayer5.draggedItemStack.getMaxStackSize()) {
+								inventoryPlayer5.draggedItemStack.stackSize += var7;
 								var6.splitStack(var7);
 								if(var6.stackSize == 0) {
-									var4.putStack((ItemStack)null);
+									slot4.putStack((ItemStack)null);
 								}
 
-								var4.onPickupFromSlot();
+								slot4.onPickupFromSlot();
 							}
 						}
 					}
 				}
 
-				var4.onSlotChanged();
-			} else if(var5.draggedItemStack != null) {
+				slot4.onSlotChanged();
+			} else if(inventoryPlayer5.draggedItemStack != null) {
 				int var9 = (this.width - this.xSize) / 2;
 				var7 = (this.height - this.ySize) / 2;
 				if(var1 < var9 || var2 < var7 || var1 >= var9 + this.xSize || var2 >= var7 + this.xSize) {
 					EntityPlayerSP var8 = this.mc.thePlayer;
 					if(var3 == 0) {
-						var8.dropPlayerItem(var5.draggedItemStack);
-						var5.draggedItemStack = null;
+						var8.dropPlayerItem(inventoryPlayer5.draggedItemStack);
+						inventoryPlayer5.draggedItemStack = null;
 					}
 
 					if(var3 == 1) {
-						var8.dropPlayerItem(var5.draggedItemStack.splitStack(1));
-						if(var5.draggedItemStack.stackSize == 0) {
-							var5.draggedItemStack = null;
+						var8.dropPlayerItem(inventoryPlayer5.draggedItemStack.splitStack(1));
+						if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+							inventoryPlayer5.draggedItemStack = null;
 						}
 					}
 				}
 			}
 		}
-
-	}
-
-	protected void mouseMovedOrUp(int var1, int var2, int var3) {
-		if(var3 == 0) {
-		}
-
-	}
-
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1 || var2 == this.mc.options.keyBindInventory.keyCode) {
+		super.mouseClicked(var1, var2, var3);
+	}
+
+	protected void keyTyped(char character, int key) {
+		if(key == 1 || key == this.mc.options.keyBindInventory.keyCode) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
-
 	}
 
 	public void onGuiClosed() {
-		InventoryPlayer var1 = this.mc.thePlayer.inventory;
-		if(var1.draggedItemStack != null) {
-			this.mc.thePlayer.dropPlayerItem(var1.draggedItemStack);
-			var1.draggedItemStack = null;
+		InventoryPlayer inventoryPlayer1 = this.mc.thePlayer.inventory;
+		if(inventoryPlayer1.draggedItemStack != null) {
+			this.mc.thePlayer.dropPlayerItem(inventoryPlayer1.draggedItemStack);
+			inventoryPlayer1.draggedItemStack = null;
 		}
-
 	}
 
 	public boolean doesGuiPauseGame() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiRefabricator.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+import org.lwjgl.opengl.GL11;
+
+public class GuiRefabricator extends GuiContainer {
+	private TileEntityRefabricator refabricator;
+
+	public GuiRefabricator(InventoryPlayer inventoryPlayer1, TileEntityRefabricator tileEntityRefabricator) {
+		this.refabricator = tileEntityRefabricator;
+		this.inventorySlots.add(new SlotInventory(this, tileEntityRefabricator, 0, 80, 35));
+		this.inventorySlots.add(new SlotInventory(this, tileEntityRefabricator, 1, 107, 58));
+
+		int var3;
+		for(var3 = 0; var3 < 3; ++var3) {
+			for(int var4 = 0; var4 < 9; ++var4) {
+				this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+			}
+		}
+
+		for(var3 = 0; var3 < 9; ++var3) {
+			this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var3, 8 + var3 * 18, 142));
+		}
+
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString("Refabricator", 60, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int bg = this.mc.renderEngine.getTexture("/gui/refabricator.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+
+		int var5 = this.refabricator.getProgressScaled(48);
+		this.drawTexturedModalRect(posX + 55, posY + 26 + (48 - var5), 176, 48 - var5, 16, var5);
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/SimplexOctaves.java
@@ -1,0 +1,32 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class SimplexOctaves {
+	public static float noise2(long seed, double x, double y, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = 1 << i;
+			value += SimplexNoise.noise2(seed, x * res, y * res) * res;
+		}
+		return value;
+	}
+
+	public static float noise3_ImproveXY(long seed, double x, double y, double z, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = (1 << i);
+			value += SimplexNoise.noise3_ImproveXY(seed, x * res, y * res, z * res) * res;
+		}
+		return value;
+	}
+
+	public static float noise3_ImproveXZ(long seed, double x, double y, double z, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = (1 << i);
+			value += SimplexNoise.noise3_ImproveXZ(seed, x * res, y * res, z * res) * res;
+		}
+		return value;
+	}
+
+	private SimplexOctaves() {}
+}
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -3,16 +3,16 @@
 import java.util.ArrayList;
 
 public class BlockFence extends Block {
-	public BlockFence(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		var6.add(AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)var3 + 1.5D, (double)(var4 + 1)));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? false : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
+	public BlockFence(int blockID, int tex) {
+		super(blockID, tex, Material.wood);
+	}
+
+	public void getCollidingBoundingBoxes(World worldObj, int x, int y, int z, AxisAlignedBB aabb, ArrayList collidingBoundingBoxes) {
+		collidingBoundingBoxes.add(AxisAlignedBB.getBoundingBoxFromPool((double)x, (double)y, (double)z, (double)(x + 1), (double)y + 1.5D, (double)(z + 1)));
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.getBlockId(x, y - 1, z) == this.blockID ? false : (!world.getBlockMaterial(x, y - 1, z).isSolid() ? false : super.canPlaceBlockAt(world, x, y, z));
 	}
 
 	public boolean isOpaqueCube() {
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -7,7 +7,7 @@
 public class Explosion {
 	public void doExplosion(World var1, Entity var2, double var3, double var5, double var7, float var9) {
 		var1.playSoundEffect(var3, var5, var7, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
-		HashSet var10 = new HashSet();
+		HashSet hashSet10 = new HashSet();
 		float var11 = var9;
 		byte var12 = 16;
 
@@ -33,7 +33,7 @@
 						var27 = var5;
 						var29 = var7;
 
-						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * (12.0F / 16.0F)) {
+						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * 0.75F) {
 							int var32 = MathHelper.floor_double(var25);
 							int var33 = MathHelper.floor_double(var27);
 							int var34 = MathHelper.floor_double(var29);
@@ -43,7 +43,7 @@
 							}
 
 							if(var24 > 0.0F) {
-								var10.add(new ChunkPosition(var32, var33, var34));
+								hashSet10.add(new ChunkPosition(var32, var33, var34));
 							}
 
 							var25 += var16 * (double)var31;
@@ -62,14 +62,14 @@
 		int var45 = MathHelper.floor_double(var5 + (double)var9 + 1.0D);
 		int var17 = MathHelper.floor_double(var7 - (double)var9 - 1.0D);
 		int var46 = MathHelper.floor_double(var7 + (double)var9 + 1.0D);
-		List var19 = var1.getEntitiesWithinAABBExcludingEntity(var2, AxisAlignedBB.getBoundingBoxFromPool((double)var13, (double)var15, (double)var17, (double)var14, (double)var45, (double)var46));
-		Vec3D var47 = Vec3D.createVector(var3, var5, var7);
+		List list19 = var1.getEntitiesWithinAABBExcludingEntity(var2, AxisAlignedBB.getBoundingBoxFromPool((double)var13, (double)var15, (double)var17, (double)var14, (double)var45, (double)var46));
+		Vec3D vec3D47 = Vec3D.createVector(var3, var5, var7);
 
 		double var55;
 		double var56;
 		double var57;
-		for(int var21 = 0; var21 < var19.size(); ++var21) {
-			Entity var49 = (Entity)var19.get(var21);
+		for(int var21 = 0; var21 < list19.size(); ++var21) {
+			Entity var49 = (Entity)list19.get(var21);
 			double var23 = var49.getDistance(var3, var5, var7) / (double)var9;
 			if(var23 <= 1.0D) {
 				var25 = var49.posX - var3;
@@ -79,7 +79,7 @@
 				var25 /= var55;
 				var27 /= var55;
 				var29 /= var55;
-				var56 = (double)var1.getBlockDensity(var47, var49.boundingBox);
+				var56 = (double)var1.getBlockDensity(vec3D47, var49.boundingBox);
 				var57 = (1.0D - var23) * var56;
 				var49.attackEntityFrom(var2, (int)((var57 * var57 + var57) / 2.0D * 8.0D * (double)var9 + 1.0D));
 				var49.motionX += var25 * var57;
@@ -89,14 +89,14 @@
 		}
 
 		var9 = var11;
-		ArrayList var48 = new ArrayList();
-		var48.addAll(var10);
+		ArrayList arrayList48 = new ArrayList();
+		arrayList48.addAll(hashSet10);
 
-		for(int var50 = var48.size() - 1; var50 >= 0; --var50) {
-			ChunkPosition var51 = (ChunkPosition)var48.get(var50);
-			int var52 = var51.x;
-			int var53 = var51.y;
-			int var26 = var51.z;
+		for(int var50 = arrayList48.size() - 1; var50 >= 0; --var50) {
+			ChunkPosition chunkPosition51 = (ChunkPosition)arrayList48.get(var50);
+			int var52 = chunkPosition51.x;
+			int var53 = chunkPosition51.y;
+			int var26 = chunkPosition51.z;
 			int var54 = var1.getBlockId(var52, var53, var26);
 
 			for(int var28 = 0; var28 < 1; ++var28) {
--- net/minecraft/src/ThreadSleepForever.java
+++ net/minecraft/src/ThreadSleepForever.java
@@ -5,9 +5,9 @@
 public class ThreadSleepForever extends Thread {
 	final Minecraft mc;
 
-	public ThreadSleepForever(Minecraft var1, String var2) {
-		super(var2);
-		this.mc = var1;
+	public ThreadSleepForever(Minecraft minecraft, String name) {
+		super(name);
+		this.mc = minecraft;
 		this.setDaemon(true);
 		this.start();
 	}
@@ -16,7 +16,7 @@
 		while(this.mc.running) {
 			try {
 				Thread.sleep(2147483647L);
-			} catch (InterruptedException var2) {
+			} catch (InterruptedException interruptedException2) {
 			}
 		}
 
--- net/minecraft/src/ThreadMonitorConnection.java
+++ net/minecraft/src/ThreadMonitorConnection.java
@@ -14,8 +14,8 @@
 				NetworkManager.getWriteThread(this.netManager).interrupt();
 				this.netManager.networkShutdown("Connection closed");
 			}
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -5,21 +5,21 @@
 public class BlockChest extends BlockContainer {
 	private Random random = new Random();
 
-	protected BlockChest(int var1) {
-		super(var1, Material.wood);
+	protected BlockChest(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 26;
 	}
 
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 1) {
 			return this.blockIndexInTexture - 1;
-		} else if(var5 == 0) {
+		} else if(side == 0) {
 			return this.blockIndexInTexture - 1;
 		} else {
-			int var6 = var1.getBlockId(var2, var3, var4 - 1);
-			int var7 = var1.getBlockId(var2, var3, var4 + 1);
-			int var8 = var1.getBlockId(var2 - 1, var3, var4);
-			int var9 = var1.getBlockId(var2 + 1, var3, var4);
+			int var6 = blockAccess.getBlockId(x, y, z - 1);
+			int var7 = blockAccess.getBlockId(x, y, z + 1);
+			int var8 = blockAccess.getBlockId(x - 1, y, z);
+			int var9 = blockAccess.getBlockId(x + 1, y, z);
 			int var10;
 			int var11;
 			int var12;
@@ -43,16 +43,16 @@
 						var14 = 4;
 					}
 
-					return var5 == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-				} else if(var5 != 4 && var5 != 5) {
+					return side == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+				} else if(side != 4 && side != 5) {
 					var10 = 0;
 					if(var8 == this.blockID) {
 						var10 = -1;
 					}
 
-					var11 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-					var12 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-					if(var5 == 3) {
+					var11 = blockAccess.getBlockId(var8 == this.blockID ? x - 1 : x + 1, y, z - 1);
+					var12 = blockAccess.getBlockId(var8 == this.blockID ? x - 1 : x + 1, y, z + 1);
+					if(side == 3) {
 						var10 = -1 - var10;
 					}
 
@@ -65,19 +65,19 @@
 						var13 = 2;
 					}
 
-					return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+					return (side == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
 				} else {
 					return this.blockIndexInTexture;
 				}
-			} else if(var5 != 2 && var5 != 3) {
+			} else if(side != 2 && side != 3) {
 				var10 = 0;
 				if(var6 == this.blockID) {
 					var10 = -1;
 				}
 
-				var11 = var1.getBlockId(var2 - 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				var12 = var1.getBlockId(var2 + 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				if(var5 == 4) {
+				var11 = blockAccess.getBlockId(x - 1, y, var6 == this.blockID ? z - 1 : z + 1);
+				var12 = blockAccess.getBlockId(x + 1, y, var6 == this.blockID ? z - 1 : z + 1);
+				if(side == 4) {
 					var10 = -1 - var10;
 				}
 
@@ -90,47 +90,47 @@
 					var13 = 4;
 				}
 
-				return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+				return (side == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
 			} else {
 				return this.blockIndexInTexture;
 			}
 		}
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture - 1 : (side == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
 		int var5 = 0;
-		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-			++var5;
-		}
-
-		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-	}
-
-	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-
-		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-			ItemStack var7 = var5.getStackInSlot(var6);
+		if(world.getBlockId(x - 1, y, z) == this.blockID) {
+			++var5;
+		}
+
+		if(world.getBlockId(x + 1, y, z) == this.blockID) {
+			++var5;
+		}
+
+		if(world.getBlockId(x, y, z - 1) == this.blockID) {
+			++var5;
+		}
+
+		if(world.getBlockId(x, y, z + 1) == this.blockID) {
+			++var5;
+		}
+
+		return var5 > 1 ? false : (this.isThereANeighborChest(world, x - 1, y, z) ? false : (this.isThereANeighborChest(world, x + 1, y, z) ? false : (this.isThereANeighborChest(world, x, y, z - 1) ? false : !this.isThereANeighborChest(world, x, y, z + 1))));
+	}
+
+	private boolean isThereANeighborChest(World worldObj, int x, int y, int z) {
+		return worldObj.getBlockId(x, y, z) != this.blockID ? false : (worldObj.getBlockId(x - 1, y, z) == this.blockID ? true : (worldObj.getBlockId(x + 1, y, z) == this.blockID ? true : (worldObj.getBlockId(x, y, z - 1) == this.blockID ? true : worldObj.getBlockId(x, y, z + 1) == this.blockID)));
+	}
+
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		TileEntityChest tileEntityChest5 = (TileEntityChest)worldObj.getBlockTileEntity(x, y, z);
+
+		for(int var6 = 0; var6 < tileEntityChest5.getSizeInventory(); ++var6) {
+			ItemStack var7 = tileEntityChest5.getStackInSlot(var6);
 			if(var7 != null) {
 				float var8 = this.random.nextFloat() * 0.8F + 0.1F;
 				float var9 = this.random.nextFloat() * 0.8F + 0.1F;
@@ -143,49 +143,49 @@
 					}
 
 					var7.stackSize -= var11;
-					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
+					EntityItem entityItem12 = new EntityItem(worldObj, (double)((float)x + var8), (double)((float)y + var9), (double)((float)z + var10), new ItemStack(var7.itemID, var11, var7.itemDmg).withMetadata(var7.itemMetadata));
 					float var13 = 0.05F;
-					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
-					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
-					var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
-					var1.spawnEntityInWorld(var12);
+					entityItem12.motionX = (double)((float)this.random.nextGaussian() * var13);
+					entityItem12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
+					entityItem12.motionZ = (double)((float)this.random.nextGaussian() * var13);
+					worldObj.spawnEntityInWorld(entityItem12);
 				}
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
+		super.onBlockRemoval(worldObj, x, y, z);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		Object var6 = (TileEntityChest)worldObj.getBlockTileEntity(x, y, z);
+		if(worldObj.isBlockNormalCube(x, y + 1, z)) {
+			return true;
+		} else if(worldObj.getBlockId(x - 1, y, z) == this.blockID && worldObj.isBlockNormalCube(x - 1, y + 1, z)) {
+			return true;
+		} else if(worldObj.getBlockId(x + 1, y, z) == this.blockID && worldObj.isBlockNormalCube(x + 1, y + 1, z)) {
+			return true;
+		} else if(worldObj.getBlockId(x, y, z - 1) == this.blockID && worldObj.isBlockNormalCube(x, y + 1, z - 1)) {
+			return true;
+		} else if(worldObj.getBlockId(x, y, z + 1) == this.blockID && worldObj.isBlockNormalCube(x, y + 1, z + 1)) {
 			return true;
 		} else {
-			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-			}
-
-			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-			}
-
-			var5.displayGUIChest((IInventory)var6);
+			if(worldObj.getBlockId(x - 1, y, z) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)worldObj.getBlockTileEntity(x - 1, y, z), (IInventory)var6);
+			}
+
+			if(worldObj.getBlockId(x + 1, y, z) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)worldObj.getBlockTileEntity(x + 1, y, z));
+			}
+
+			if(worldObj.getBlockId(x, y, z - 1) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)worldObj.getBlockTileEntity(x, y, z - 1), (IInventory)var6);
+			}
+
+			if(worldObj.getBlockId(x, y, z + 1) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)worldObj.getBlockTileEntity(x, y, z + 1));
+			}
+
+			entityPlayer.displayGUIChest((IInventory)var6);
 			return true;
 		}
 	}
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -6,12 +6,12 @@
 	private NoiseGeneratorPerlin[] generatorCollection;
 	private int octaves;
 
-	public NoiseGeneratorOctaves(Random var1, int var2) {
-		this.octaves = var2;
-		this.generatorCollection = new NoiseGeneratorPerlin[var2];
+	public NoiseGeneratorOctaves(Random random, int octaves) {
+		this.octaves = octaves;
+		this.generatorCollection = new NoiseGeneratorPerlin[octaves];
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			this.generatorCollection[var3] = new NoiseGeneratorPerlin(var1);
+		for(int var3 = 0; var3 < octaves; ++var3) {
+			this.generatorCollection[var3] = new NoiseGeneratorPerlin(random);
 		}
 
 	}
--- net/minecraft/src/PlayerManager.java
+++ net/minecraft/src/PlayerManager.java
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerManager {
@@ -11,8 +12,8 @@
 	private List playerInstancesToUpdate = new ArrayList();
 	private MinecraftServer mcServer;
 
-	public PlayerManager(MinecraftServer var1) {
-		this.mcServer = var1;
+	public PlayerManager(MinecraftServer mcServer) {
+		this.mcServer = mcServer;
 	}
 
 	public void updatePlayerInstances() throws IOException {
@@ -25,66 +26,66 @@
 
 	private PlayerInstance getPlayerInstance(int var1, int var2, boolean var3) {
 		long var4 = (long)var1 + 2147483647L | (long)var2 + 2147483647L << 32;
-		PlayerInstance var6 = (PlayerInstance)this.playerInstances.lookup(var4);
-		if(var6 == null && var3) {
-			var6 = new PlayerInstance(this, var1, var2);
-			this.playerInstances.addKey(var4, var6);
-		}
-
-		return var6;
-	}
-
-	public void sendTileEntity(Packet var1, int var2, int var3, int var4) {
-		int var5 = var2 >> 4;
-		int var6 = var4 >> 4;
-		PlayerInstance var7 = this.getPlayerInstance(var5, var6, false);
-		if(var7 != null) {
-			var7.sendTileEntity(var1);
-		}
-
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		int var4 = var1 >> 4;
-		int var5 = var3 >> 4;
-		PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-		if(var6 != null) {
-			var6.markBlockNeedsUpdate(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public void addPlayer(EntityPlayerMP var1) {
-		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + var1.username + " joined the game."));
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		var1.managedPosX = var1.posX;
-		var1.managedPosZ = var1.posZ;
+		PlayerInstance playerInstance6 = (PlayerInstance)this.playerInstances.lookup(var4);
+		if(playerInstance6 == null && var3) {
+			playerInstance6 = new PlayerInstance(this, var1, var2);
+			this.playerInstances.addKey(var4, playerInstance6);
+		}
+
+		return playerInstance6;
+	}
+
+	public void sendTileEntity(Packet packet, int x, int y, int z) {
+		int var5 = x >> 4;
+		int var6 = z >> 4;
+		PlayerInstance playerInstance7 = this.getPlayerInstance(var5, var6, false);
+		if(playerInstance7 != null) {
+			playerInstance7.sendTileEntity(packet);
+		}
+
+	}
+
+	public void markBlockNeedsUpdate(int x, int y, int z) {
+		int var4 = x >> 4;
+		int var5 = z >> 4;
+		PlayerInstance playerInstance6 = this.getPlayerInstance(var4, var5, false);
+		if(playerInstance6 != null) {
+			playerInstance6.markBlockNeedsUpdate(x & 15, y, z & 15);
+		}
+
+	}
+
+	public void addPlayer(EntityPlayerMP entityPlayerMP) {
+		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + entityPlayerMP.username + " joined the game."));
+		int var2 = (int)entityPlayerMP.posX >> 4;
+		int var3 = (int)entityPlayerMP.posZ >> 4;
+		entityPlayerMP.managedPosX = entityPlayerMP.posX;
+		entityPlayerMP.managedPosZ = entityPlayerMP.posZ;
 
 		for(int var4 = var2 - 10; var4 <= var2 + 10; ++var4) {
 			for(int var5 = var3 - 10; var5 <= var3 + 10; ++var5) {
-				this.getPlayerInstance(var4, var5, true).addPlayer(var1);
+				this.getPlayerInstance(var4, var5, true).addPlayer(entityPlayerMP);
 			}
 		}
 
-		this.players.add(var1);
+		this.players.add(entityPlayerMP);
 	}
 
-	public void removePlayer(EntityPlayerMP var1) {
-		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + var1.username + " left the game."));
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
+	public void removePlayer(EntityPlayerMP entityPlayerMP) {
+		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + entityPlayerMP.username + " left the game."));
+		int var2 = (int)entityPlayerMP.posX >> 4;
+		int var3 = (int)entityPlayerMP.posZ >> 4;
 
 		for(int var4 = var2 - 10; var4 <= var2 + 10; ++var4) {
 			for(int var5 = var3 - 10; var5 <= var3 + 10; ++var5) {
-				PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-				if(var6 != null) {
-					var6.removePlayer(var1);
+				PlayerInstance playerInstance6 = this.getPlayerInstance(var4, var5, false);
+				if(playerInstance6 != null) {
+					playerInstance6.removePlayer(entityPlayerMP);
 				}
 			}
 		}
 
-		this.players.remove(var1);
+		this.players.remove(entityPlayerMP);
 	}
 
 	private boolean a(int var1, int var2, int var3, int var4) {
@@ -93,35 +94,35 @@
 		return var5 >= -10 && var5 <= 10 ? var6 >= -10 && var6 <= 10 : false;
 	}
 
-	public void updateMountedMovingPlayer(EntityPlayerMP var1) {
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		double var4 = var1.managedPosX - var1.posX;
-		double var6 = var1.managedPosZ - var1.posZ;
+	public void updateMountedMovingPlayer(EntityPlayerMP entityPlayerMP) {
+		int var2 = (int)entityPlayerMP.posX >> 4;
+		int var3 = (int)entityPlayerMP.posZ >> 4;
+		double var4 = entityPlayerMP.managedPosX - entityPlayerMP.posX;
+		double var6 = entityPlayerMP.managedPosZ - entityPlayerMP.posZ;
 		double var8 = var4 * var4 + var6 * var6;
 		if(var8 >= 64.0D) {
-			int var10 = (int)var1.managedPosX >> 4;
-			int var11 = (int)var1.managedPosZ >> 4;
+			int var10 = (int)entityPlayerMP.managedPosX >> 4;
+			int var11 = (int)entityPlayerMP.managedPosZ >> 4;
 			int var12 = var2 - var10;
 			int var13 = var3 - var11;
 			if(var12 != 0 || var13 != 0) {
 				for(int var14 = var2 - 10; var14 <= var2 + 10; ++var14) {
 					for(int var15 = var3 - 10; var15 <= var3 + 10; ++var15) {
 						if(!this.a(var14, var15, var10, var11)) {
-							this.getPlayerInstance(var14, var15, true).addPlayer(var1);
+							this.getPlayerInstance(var14, var15, true).addPlayer(entityPlayerMP);
 						}
 
 						if(!this.a(var14 - var12, var15 - var13, var2, var3)) {
-							PlayerInstance var16 = this.getPlayerInstance(var14 - var12, var15 - var13, false);
-							if(var16 != null) {
-								var16.removePlayer(var1);
+							PlayerInstance playerInstance16 = this.getPlayerInstance(var14 - var12, var15 - var13, false);
+							if(playerInstance16 != null) {
+								playerInstance16.removePlayer(entityPlayerMP);
 							}
 						}
 					}
 				}
 
-				var1.managedPosX = var1.posX;
-				var1.managedPosZ = var1.posZ;
+				entityPlayerMP.managedPosX = entityPlayerMP.posX;
+				entityPlayerMP.managedPosZ = entityPlayerMP.posZ;
 			}
 		}
 	}
@@ -130,15 +131,15 @@
 		return 144;
 	}
 
-	static MinecraftServer getMinecraftServer(PlayerManager var0) {
-		return var0.mcServer;
-	}
-
-	static MCHashTable2 getPlayerInstances(PlayerManager var0) {
-		return var0.playerInstances;
-	}
-
-	static List getPlayerInstancesToUpdate(PlayerManager var0) {
-		return var0.playerInstancesToUpdate;
+	static MinecraftServer getMinecraftServer(PlayerManager playerManager) {
+		return playerManager.mcServer;
+	}
+
+	static MCHashTable2 getPlayerInstances(PlayerManager playerManager) {
+		return playerManager.playerInstances;
+	}
+
+	static List getPlayerInstancesToUpdate(PlayerManager playerManager) {
+		return playerManager.playerInstancesToUpdate;
 	}
 }
--- net/minecraft/src/ModelCow.java
+++ net/minecraft/src/ModelCow.java
@@ -19,7 +19,7 @@
 		this.udders = new ModelRenderer(52, 0);
 		this.udders.addBox(-2.0F, -3.0F, 0.0F, 4, 6, 2, 0.0F);
 		this.udders.setRotationPoint(0.0F, 14.0F, 6.0F);
-		this.udders.rotateAngleX = (float)Math.PI * 0.5F;
+		this.udders.rotateAngleX = (float)Math.PI / 2F;
 		this.body = new ModelRenderer(18, 4);
 		this.body.addBox(-6.0F, -10.0F, -7.0F, 12, 18, 10, 0.0F);
 		this.body.setRotationPoint(0.0F, 5.0F, 2.0F);
--- net/minecraft/src/MCHashTable.java
+++ net/minecraft/src/MCHashTable.java
@@ -4,7 +4,7 @@
 	private transient MCHashEntry[] slots = new MCHashEntry[16];
 	private transient int count;
 	private int threshold = 12;
-	private final float growFactor = 12.0F / 16.0F;
+	private final float growFactor = 0.75F;
 	private transient volatile int versionStamp;
 
 	private static int computeHash(int var0) {
@@ -19,9 +19,9 @@
 	public Object lookup(int var1) {
 		int var2 = computeHash(var1);
 
-		for(MCHashEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-			if(var3.hashEntry == var1) {
-				return var3.valueEntry;
+		for(MCHashEntry mCHashEntry3 = this.slots[getSlotIndex(var2, this.slots.length)]; mCHashEntry3 != null; mCHashEntry3 = mCHashEntry3.nextEntry) {
+			if(mCHashEntry3.hashEntry == var1) {
+				return mCHashEntry3.valueEntry;
 			}
 		}
 
@@ -35,9 +35,9 @@
 	final MCHashEntry lookupEntry(int var1) {
 		int var2 = computeHash(var1);
 
-		for(MCHashEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-			if(var3.hashEntry == var1) {
-				return var3;
+		for(MCHashEntry mCHashEntry3 = this.slots[getSlotIndex(var2, this.slots.length)]; mCHashEntry3 != null; mCHashEntry3 = mCHashEntry3.nextEntry) {
+			if(mCHashEntry3.hashEntry == var1) {
+				return mCHashEntry3;
 			}
 		}
 
@@ -48,9 +48,9 @@
 		int var3 = computeHash(var1);
 		int var4 = getSlotIndex(var3, this.slots.length);
 
-		for(MCHashEntry var5 = this.slots[var4]; var5 != null; var5 = var5.nextEntry) {
-			if(var5.hashEntry == var1) {
-				var5.valueEntry = var2;
+		for(MCHashEntry mCHashEntry5 = this.slots[var4]; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry5.nextEntry) {
+			if(mCHashEntry5.hashEntry == var1) {
+				mCHashEntry5.valueEntry = var2;
 			}
 		}
 
@@ -59,86 +59,86 @@
 	}
 
 	private void grow(int var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var2.length;
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int var3 = mCHashEntry2.length;
 		if(var3 == 1073741824) {
 			this.threshold = Integer.MAX_VALUE;
 		} else {
-			MCHashEntry[] var4 = new MCHashEntry[var1];
-			this.copyTo(var4);
-			this.slots = var4;
+			MCHashEntry[] mCHashEntry4 = new MCHashEntry[var1];
+			this.copyTo(mCHashEntry4);
+			this.slots = mCHashEntry4;
 			this.threshold = (int)((float)var1 * this.growFactor);
 		}
 	}
 
-	private void copyTo(MCHashEntry[] var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var1.length;
-
-		for(int var4 = 0; var4 < var2.length; ++var4) {
-			MCHashEntry var5 = var2[var4];
-			if(var5 != null) {
-				var2[var4] = null;
-
-				MCHashEntry var6;
+	private void copyTo(MCHashEntry[] mCHashEntry1) {
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int var3 = mCHashEntry1.length;
+
+		for(int var4 = 0; var4 < mCHashEntry2.length; ++var4) {
+			MCHashEntry mCHashEntry5 = mCHashEntry2[var4];
+			if(mCHashEntry5 != null) {
+				mCHashEntry2[var4] = null;
+
+				MCHashEntry mCHashEntry6;
 				do {
-					var6 = var5.nextEntry;
-					int var7 = getSlotIndex(var5.slotHash, var3);
-					var5.nextEntry = var1[var7];
-					var1[var7] = var5;
-					var5 = var6;
-				} while(var6 != null);
+					mCHashEntry6 = mCHashEntry5.nextEntry;
+					int var7 = getSlotIndex(mCHashEntry5.slotHash, var3);
+					mCHashEntry5.nextEntry = mCHashEntry1[var7];
+					mCHashEntry1[var7] = mCHashEntry5;
+					mCHashEntry5 = mCHashEntry6;
+				} while(mCHashEntry6 != null);
 			}
 		}
 
 	}
 
 	public Object removeObject(int var1) {
-		MCHashEntry var2 = this.removeEntry(var1);
-		return var2 == null ? null : var2.valueEntry;
+		MCHashEntry mCHashEntry2 = this.removeEntry(var1);
+		return mCHashEntry2 == null ? null : mCHashEntry2.valueEntry;
 	}
 
 	final MCHashEntry removeEntry(int var1) {
 		int var2 = computeHash(var1);
 		int var3 = getSlotIndex(var2, this.slots.length);
-		MCHashEntry var4 = this.slots[var3];
+		MCHashEntry mCHashEntry4 = this.slots[var3];
 
-		MCHashEntry var5;
-		MCHashEntry var6;
-		for(var5 = var4; var5 != null; var5 = var6) {
-			var6 = var5.nextEntry;
-			if(var5.hashEntry == var1) {
+		MCHashEntry mCHashEntry5;
+		MCHashEntry mCHashEntry6;
+		for(mCHashEntry5 = mCHashEntry4; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry6) {
+			mCHashEntry6 = mCHashEntry5.nextEntry;
+			if(mCHashEntry5.hashEntry == var1) {
 				++this.versionStamp;
 				--this.count;
-				if(var4 == var5) {
-					this.slots[var3] = var6;
+				if(mCHashEntry4 == mCHashEntry5) {
+					this.slots[var3] = mCHashEntry6;
 				} else {
-					var4.nextEntry = var6;
+					mCHashEntry4.nextEntry = mCHashEntry6;
 				}
 
-				return var5;
+				return mCHashEntry5;
 			}
 
-			var4 = var5;
+			mCHashEntry4 = mCHashEntry5;
 		}
 
-		return var5;
+		return mCHashEntry5;
 	}
 
 	public void clearMap() {
 		++this.versionStamp;
-		MCHashEntry[] var1 = this.slots;
+		MCHashEntry[] mCHashEntry1 = this.slots;
 
-		for(int var2 = 0; var2 < var1.length; ++var2) {
-			var1[var2] = null;
+		for(int var2 = 0; var2 < mCHashEntry1.length; ++var2) {
+			mCHashEntry1[var2] = null;
 		}
 
 		this.count = 0;
 	}
 
 	private void insert(int var1, int var2, Object var3, int var4) {
-		MCHashEntry var5 = this.slots[var4];
-		this.slots[var4] = new MCHashEntry(var1, var2, var3, var5);
+		MCHashEntry mCHashEntry5 = this.slots[var4];
+		this.slots[var4] = new MCHashEntry(var1, var2, var3, mCHashEntry5);
 		if(this.count++ >= this.threshold) {
 			this.grow(2 * this.slots.length);
 		}
--- net/minecraft/src/ChunkCoordIntPair.java
+++ net/minecraft/src/ChunkCoordIntPair.java
@@ -4,25 +4,25 @@
 	public int chunkXPos;
 	public int chunkZPos;
 
-	public ChunkCoordIntPair(int var1, int var2) {
-		this.chunkXPos = var1;
-		this.chunkZPos = var2;
+	public ChunkCoordIntPair(int posX, int posZ) {
+		this.chunkXPos = posX;
+		this.chunkZPos = posZ;
 	}
 
 	public int hashCode() {
 		return this.chunkXPos << 8 | this.chunkZPos;
 	}
 
-	public boolean equals(Object var1) {
-		ChunkCoordIntPair var2 = (ChunkCoordIntPair)var1;
-		return var2.chunkXPos == this.chunkXPos && var2.chunkZPos == this.chunkZPos;
+	public boolean equals(Object chunkCoordIntPair) {
+		ChunkCoordIntPair chunkCoordIntPair2 = (ChunkCoordIntPair)chunkCoordIntPair;
+		return chunkCoordIntPair2.chunkXPos == this.chunkXPos && chunkCoordIntPair2.chunkZPos == this.chunkZPos;
 	}
 
-	public double a(Entity var1) {
+	public double a(Entity entity) {
 		double var2 = (double)(this.chunkXPos * 16 + 8);
 		double var4 = (double)(this.chunkZPos * 16 + 8);
-		double var6 = var2 - var1.posX;
-		double var8 = var4 - var1.posZ;
+		double var6 = var2 - entity.posX;
+		double var8 = var4 - entity.posZ;
 		return var6 * var6 + var8 * var8;
 	}
 }
--- net/minecraft/src/WorldServer.java
+++ net/minecraft/src/WorldServer.java
@@ -1,5 +1,11 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+import io.github.bluestaggo.mcdiverge.Packet38EntityStatus;
+import net.minecraft.server.MinecraftServer;
+
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -9,12 +15,37 @@
 	public boolean disableSpawnProtection = false;
 	public boolean levelSaving;
 	private boolean monsters;
-	private SpawnerAnimals monsterSpawner = new SpawnerServer(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
-	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
-
-	public WorldServer(File var1, String var2, boolean var3) {
-		super(var1, var2);
+	private SpawnerAnimals monsterSpawner = new SpawnerServer(this, 200, IMobs.class, new Class[] {
+			EntityZombie.class,
+			EntitySkeleton.class,
+			EntityCreeper.class,
+			EntitySpider.class,
+			EntitySlime.class,
+			EntityPhantom.class
+	});
+	private SpawnerAnimals animalSpawner = new SpawnerAnimals(20, EntityAnimal.class, new Class[] {
+			EntitySheep.class,
+			EntityPig.class,
+			EntityCow.class,
+			EntityChicken.class,
+			EntityFox.class
+	});
+	private MCHashTable entityHashTable;
+	private MinecraftServer mcServer;
+
+	public WorldServer(MinecraftServer mcServer, File file1, String var2, boolean var3) {
+		this(mcServer, file1, var2, var3, null);
+	}
+
+	public WorldServer(MinecraftServer mcServer, File file1, String var2, boolean var3, CreateWorldInfo info) {
+		super(file1, var2, 0, info);
 		this.monsters = var3;
+		this.entityHashTable = new MCHashTable();
+		this.mcServer = mcServer;
+	}
+
+	public boolean canDoClientAction() {
+		return MinecraftServer.getInstance() != null;
 	}
 
 	public void tick() {
@@ -26,21 +57,40 @@
 		this.animalSpawner.onUpdate(this);
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		this.chunkProviderServer = new ChunkProviderServer(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
+	protected void obtainEntitySkin(Entity entity) {
+		super.obtainEntitySkin(entity);
+		this.entityHashTable.addKey(entity.entityID, entity);
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		super.releaseEntitySkin(entity);
+		this.entityHashTable.removeObject(entity.entityID);
+	}
+
+	public Entity getEntityFromId(int id) {
+		return (Entity) this.entityHashTable.lookup(id);
+	}
+
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		this.chunkProviderServer = new ChunkProviderServer(this, new ChunkLoader(saveDir, true), new ChunkProviderGenerate(this, this.randomSeed));
 		return this.chunkProviderServer;
 	}
 
 	public List getTileEntityList(int var1, int var2, int var3, int var4, int var5, int var6) {
-		ArrayList var7 = new ArrayList();
+		ArrayList arrayList7 = new ArrayList();
 
 		for(int var8 = 0; var8 < this.loadedTileEntityList.size(); ++var8) {
-			TileEntity var9 = (TileEntity)this.loadedTileEntityList.get(var8);
-			if(var9.xCoord >= var1 && var9.yCoord >= var2 && var9.zCoord >= var3 && var9.xCoord < var4 && var9.yCoord < var5 && var9.zCoord < var6) {
-				var7.add(var9);
+			TileEntity tileEntity9 = (TileEntity)this.loadedTileEntityList.get(var8);
+			if(tileEntity9.xCoord >= var1 && tileEntity9.yCoord >= var2 && tileEntity9.zCoord >= var3 && tileEntity9.xCoord < var4 && tileEntity9.yCoord < var5 && tileEntity9.zCoord < var6) {
+				arrayList7.add(tileEntity9);
 			}
 		}
 
-		return var7;
+		return arrayList7;
+	}
+
+	public void sendTrackedEntityStatusUpdatePacket(Entity var1, byte var2) {
+		Packet38EntityStatus packet38EntityStatus3 = new Packet38EntityStatus(var1.entityID, var2);
+		this.mcServer.entityTracker.sendPacketToTrackedPlayersAndTrackedEntity(var1, packet38EntityStatus3);
 	}
 }
--- net/minecraft/src/PlayerListBox.java
+++ net/minecraft/src/PlayerListBox.java
@@ -2,26 +2,27 @@
 
 import java.util.Vector;
 import javax.swing.JList;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerListBox extends JList implements IUpdatePlayerListBox {
 	private MinecraftServer mcServer;
 	private int playerCount = 0;
 
-	public PlayerListBox(MinecraftServer var1) {
-		this.mcServer = var1;
-		var1.addToOnlinePlayerList(this);
+	public PlayerListBox(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		minecraftServer.addToOnlinePlayerList(this);
 	}
 
 	public void addAllPlayers() {
 		if(this.playerCount++ % 20 == 0) {
-			Vector var1 = new Vector();
+			Vector vector1 = new Vector();
 
 			for(int var2 = 0; var2 < this.mcServer.configManager.playerEntities.size(); ++var2) {
-				var1.add(((EntityPlayerMP)this.mcServer.configManager.playerEntities.get(var2)).username);
+				vector1.add(((EntityPlayerMP)this.mcServer.configManager.playerEntities.get(var2)).username);
 			}
 
-			this.setListData(var1);
+			this.setListData(vector1);
 		}
 
 	}
--- net/minecraft/src/Packet18ArmAnimation.java
+++ net/minecraft/src/Packet18ArmAnimation.java
@@ -11,23 +11,23 @@
 	public Packet18ArmAnimation() {
 	}
 
-	public Packet18ArmAnimation(Entity var1, int var2) {
-		this.entityId = var1.entityID;
-		this.animate = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.animate = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.animate);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleArmAnimation(this);
+	public Packet18ArmAnimation(Entity entity, int animate) {
+		this.entityId = entity.entityID;
+		this.animate = animate;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.animate = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.animate);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleArmAnimation(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/EntityFX.java
+++ net/minecraft/src/EntityFX.java
@@ -15,15 +15,15 @@
 	public static double interpPosY;
 	public static double interpPosZ;
 
-	public EntityFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1);
+	public EntityFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj);
 		this.setSize(0.2F, 0.2F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
+		this.setPosition(x, y, z);
 		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
-		this.motionX = var8 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
-		this.motionY = var10 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
-		this.motionZ = var12 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		this.motionX = motionX + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		this.motionY = motionY + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		this.motionZ = motionZ + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
 		float var14 = (float)(Math.random() + Math.random() + 1.0D) * 0.15F;
 		float var15 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
 		this.motionX = this.motionX / (double)var15 * (double)var14 * (double)0.4F;
@@ -37,16 +37,16 @@
 		this.canTriggerWalking = false;
 	}
 
-	public EntityFX multiplyVelocity(float var1) {
-		this.motionX *= (double)var1;
-		this.motionY = (this.motionY - (double)0.1F) * (double)var1 + (double)0.1F;
-		this.motionZ *= (double)var1;
+	public EntityFX multiplyVelocity(float velocityMultiplier) {
+		this.motionX *= (double)velocityMultiplier;
+		this.motionY = (this.motionY - (double)0.1F) * (double)velocityMultiplier + (double)0.1F;
+		this.motionZ *= (double)velocityMultiplier;
 		return this;
 	}
 
-	public EntityFX multipleParticleScaleBy(float var1) {
-		this.setSize(0.2F * var1, 0.2F * var1);
-		this.particleScale *= var1;
+	public EntityFX multipleParticleScaleBy(float particleScaleMultiplier) {
+		this.setSize(0.2F * particleScaleMultiplier, 0.2F * particleScaleMultiplier);
+		this.particleScale *= particleScaleMultiplier;
 		return this;
 	}
 
@@ -70,30 +70,30 @@
 
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
 		float var8 = (float)(this.particleTextureIndex % 16) / 16.0F;
-		float var9 = var8 + 0.999F / 16.0F;
+		float var9 = var8 + 0.0624375F;
 		float var10 = (float)(this.particleTextureIndex / 16) / 16.0F;
-		float var11 = var10 + 0.999F / 16.0F;
+		float var11 = var10 + 0.0624375F;
 		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(this.particleRed * var16, this.particleGreen * var16, this.particleBlue * var16);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float var16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(this.particleRed * var16, this.particleGreen * var16, this.particleBlue * var16);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 - zOffset * var12 - zOffset2 * var12), (double)var8, (double)var11);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 - zOffset * var12 + zOffset2 * var12), (double)var8, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 + zOffset * var12 + zOffset2 * var12), (double)var9, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 + zOffset * var12 - zOffset2 * var12), (double)var9, (double)var11);
 	}
 
 	public int getFXLayer() {
 		return 0;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
 	}
 }
--- net/minecraft/src/BlockBreakable.java
+++ net/minecraft/src/BlockBreakable.java
@@ -3,17 +3,17 @@
 public class BlockBreakable extends Block {
 	private boolean localFlag;
 
-	protected BlockBreakable(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.localFlag = var4;
+	protected BlockBreakable(int id, int tex, Material material, boolean localFlag) {
+		super(id, tex, material);
+		this.localFlag = localFlag;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.localFlag && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int var6 = blockAccess.getBlockId(x, y, z);
+		return !this.localFlag && var6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -5,8 +5,8 @@
 		super(var1, var2);
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		super.onItemRightClick(var1, var2, var3);
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		super.onItemRightClick(itemStack, worldObj, entityPlayer);
 		return new ItemStack(Item.bowlEmpty);
 	}
 }
--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -43,11 +43,11 @@
 				GL11.glRotatef(var14 * this.getDeathMaxRotation(var1), 0.0F, 0.0F, 1.0F);
 			}
 
-			var14 = 1.0F / 16.0F;
+			var14 = 0.0625F;
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 			GL11.glScalef(-1.0F, -1.0F, 1.0F);
 			this.preRenderCallback(var1, var9);
-			GL11.glTranslatef(0.0F, -24.0F * var14 - 1.0F / 128.0F, 0.0F);
+			GL11.glTranslatef(0.0F, -24.0F * var14 - 0.0078125F, 0.0F);
 			float var15 = var1.prevLimbYaw + (var1.limbYaw - var1.prevLimbYaw) * var9;
 			float var16 = var1.limbSwing - var1.limbYaw * (1.0F - var9);
 			if(var15 > 1.0F) {
@@ -58,7 +58,7 @@
 			GL11.glEnable(GL11.GL_ALPHA_TEST);
 			this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-			for(int var17 = 0; var17 < 4; ++var17) {
+			for(int var17 = 0; var17 < maxRenderPasses(); ++var17) {
 				if(this.shouldRenderPass(var1, var17)) {
 					this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
 					GL11.glDisable(GL11.GL_BLEND);
@@ -79,7 +79,7 @@
 					GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
 					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-					for(int var19 = 0; var19 < 4; ++var19) {
+					for(int var19 = 0; var19 < maxRenderPasses(); ++var19) {
 						if(this.shouldRenderPass(var1, var19)) {
 							GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
 							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
@@ -95,7 +95,7 @@
 					GL11.glColor4f(var26, var20, var21, var22);
 					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-					for(int var23 = 0; var23 < 4; ++var23) {
+					for(int var23 = 0; var23 < maxRenderPasses(); ++var23) {
 						if(this.shouldRenderPass(var1, var23)) {
 							GL11.glColor4f(var26, var20, var21, var22);
 							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
@@ -110,8 +110,8 @@
 			}
 
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-		} catch (Exception var24) {
-			var24.printStackTrace();
+		} catch (Exception exception24) {
+			exception24.printStackTrace();
 		}
 
 		GL11.glEnable(GL11.GL_CULL_FACE);
@@ -146,5 +146,9 @@
 
 	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
 		this.doRenderLiving((EntityLiving)var1, var2, var4, var6, var8, var9);
+	}
+
+	protected float maxRenderPasses() {
+		return 4;
 	}
 }
--- net/minecraft/src/WorldClient.java
+++ net/minecraft/src/WorldClient.java
@@ -14,9 +14,9 @@
 	private Set entityList = new HashSet();
 	private Set entitySpawnQueue = new HashSet();
 
-	public WorldClient(NetClientHandler var1) {
+	public WorldClient(NetClientHandler netClientHandler) {
 		super("MpServer");
-		this.sendQueue = var1;
+		this.sendQueue = netClientHandler;
 		this.spawnX = 8;
 		this.spawnY = 64;
 		this.spawnZ = 8;
@@ -42,27 +42,27 @@
 		this.sendQueue.processReadPackets();
 
 		for(var2 = 0; var2 < this.blocksToReceive.size(); ++var2) {
-			WorldBlockPositionType var4 = (WorldBlockPositionType)this.blocksToReceive.get(var2);
-			if(--var4.acceptCountdown == 0) {
-				super.setBlockAndMetadata(var4.posX, var4.posY, var4.posZ, var4.blockID, var4.metadata);
-				super.markBlockNeedsUpdate(var4.posX, var4.posY, var4.posZ);
+			WorldBlockPositionType worldBlockPositionType4 = (WorldBlockPositionType)this.blocksToReceive.get(var2);
+			if(--worldBlockPositionType4.acceptCountdown == 0) {
+				super.setBlockAndMetadata(worldBlockPositionType4.posX, worldBlockPositionType4.posY, worldBlockPositionType4.posZ, worldBlockPositionType4.blockID, worldBlockPositionType4.metadata);
+				super.markBlockNeedsUpdate(worldBlockPositionType4.posX, worldBlockPositionType4.posY, worldBlockPositionType4.posZ);
 				this.blocksToReceive.remove(var2--);
 			}
 		}
 
 	}
 
-	public void invalidateBlockReceiveRegion(int var1, int var2, int var3, int var4, int var5, int var6) {
+	public void invalidateBlockReceiveRegion(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
 		for(int var7 = 0; var7 < this.blocksToReceive.size(); ++var7) {
-			WorldBlockPositionType var8 = (WorldBlockPositionType)this.blocksToReceive.get(var7);
-			if(var8.posX >= var1 && var8.posY >= var2 && var8.posZ >= var3 && var8.posX <= var4 && var8.posY <= var5 && var8.posZ <= var6) {
+			WorldBlockPositionType worldBlockPositionType8 = (WorldBlockPositionType)this.blocksToReceive.get(var7);
+			if(worldBlockPositionType8.posX >= minX && worldBlockPositionType8.posY >= minY && worldBlockPositionType8.posZ >= minZ && worldBlockPositionType8.posX <= maxX && worldBlockPositionType8.posY <= maxY && worldBlockPositionType8.posZ <= maxZ) {
 				this.blocksToReceive.remove(var7--);
 			}
 		}
 
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
+	protected IChunkProvider getChunkProvider(File file) {
 		this.clientChunkProvider = new ChunkProviderClient(this);
 		return this.clientChunkProvider;
 	}
@@ -76,74 +76,74 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 	}
 
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
+	public void scheduleBlockUpdate(int x, int y, int z, int id) {
 	}
 
 	public boolean tickUpdates(boolean var1) {
 		return false;
 	}
 
-	public void doPreChunk(int var1, int var2, boolean var3) {
-		if(var3) {
-			this.clientChunkProvider.loadChunk(var1, var2);
+	public void doPreChunk(int x, int z, boolean mode) {
+		if(mode) {
+			this.clientChunkProvider.loadChunk(x, z);
 		} else {
-			this.clientChunkProvider.unloadChunk(var1, var2);
+			this.clientChunkProvider.unloadChunk(x, z);
 		}
 
-		if(!var3) {
-			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 128, var2 * 16 + 15);
+		if(!mode) {
+			this.markBlocksDirty(x * 16, 0, z * 16, x * 16 + 15, 128, z * 16 + 15);
 		}
 
 	}
 
-	public boolean spawnEntityInWorld(Entity var1) {
-		boolean var2 = super.spawnEntityInWorld(var1);
-		if(var1 instanceof EntityPlayerSP) {
-			this.entityList.add(var1);
+	public boolean spawnEntityInWorld(Entity entity) {
+		boolean var2 = super.spawnEntityInWorld(entity);
+		if(entity instanceof EntityPlayerSP) {
+			this.entityList.add(entity);
 		}
 
 		return var2;
 	}
 
-	public void setEntityDead(Entity var1) {
-		super.setEntityDead(var1);
-		if(var1 instanceof EntityPlayerSP) {
-			this.entityList.remove(var1);
-		}
-
-	}
-
-	protected void obtainEntitySkin(Entity var1) {
-		super.obtainEntitySkin(var1);
-		if(this.entitySpawnQueue.contains(var1)) {
-			this.entitySpawnQueue.remove(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		super.releaseEntitySkin(var1);
-		if(this.entityList.contains(var1)) {
-			this.entitySpawnQueue.add(var1);
-		}
-
-	}
-
-	public void addEntityToWorld(int var1, Entity var2) {
-		this.entityList.add(var2);
-		if(!this.spawnEntityInWorld(var2)) {
-			this.entitySpawnQueue.add(var2);
-		}
-
-		this.entityHashTable.addKey(var1, var2);
-	}
-
-	public Entity getEntityByID(int var1) {
-		return (Entity)this.entityHashTable.lookup(var1);
-	}
-
-	public Entity removeEntityFromWorld(int var1) {
-		Entity var2 = (Entity)this.entityHashTable.removeObject(var1);
+	public void setEntityDead(Entity entity) {
+		super.setEntityDead(entity);
+		if(entity instanceof EntityPlayerSP) {
+			this.entityList.remove(entity);
+		}
+
+	}
+
+	protected void obtainEntitySkin(Entity entity) {
+		super.obtainEntitySkin(entity);
+		if(this.entitySpawnQueue.contains(entity)) {
+			this.entitySpawnQueue.remove(entity);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		super.releaseEntitySkin(entity);
+		if(this.entityList.contains(entity)) {
+			this.entitySpawnQueue.add(entity);
+		}
+
+	}
+
+	public void addEntityToWorld(int id, Entity entity) {
+		this.entityList.add(entity);
+		if(!this.spawnEntityInWorld(entity)) {
+			this.entitySpawnQueue.add(entity);
+		}
+
+		this.entityHashTable.addKey(id, entity);
+	}
+
+	public Entity getEntityByID(int id) {
+		return (Entity)this.entityHashTable.lookup(id);
+	}
+
+	public Entity removeEntityFromWorld(int id) {
+		Entity var2 = (Entity)this.entityHashTable.removeObject(id);
 		if(var2 != null) {
 			this.entityList.remove(var2);
 			this.setEntityDead(var2);
@@ -152,52 +152,52 @@
 		return var2;
 	}
 
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		int var6 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlockMetadata(var1, var2, var3, var4)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var5, var6));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getBlockId(var1, var2, var3);
-		int var7 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var6, var7));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		int var6 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlock(var1, var2, var3, var4)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var5, var6));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean handleBlockChange(int var1, int var2, int var3, int var4, int var5) {
-		this.invalidateBlockReceiveRegion(var1, var2, var3, var1, var2, var3);
-		if(super.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
+	public boolean setBlockMetadata(int x, int y, int z, int metadata) {
+		int var5 = this.getBlockId(x, y, z);
+		int var6 = this.getBlockMetadata(x, y, z);
+		if(super.setBlockMetadata(x, y, z, metadata)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, var5, var6));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadata(int x, int y, int z, int id, int metadata) {
+		int var6 = this.getBlockId(x, y, z);
+		int var7 = this.getBlockMetadata(x, y, z);
+		if(super.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, var6, var7));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlock(int x, int y, int z, int id) {
+		int var5 = this.getBlockId(x, y, z);
+		int var6 = this.getBlockMetadata(x, y, z);
+		if(super.setBlock(x, y, z, id)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, var5, var6));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean handleBlockChange(int x, int y, int z, int id, int metadata) {
+		this.invalidateBlockReceiveRegion(x, y, z, x, y, z);
+		if(super.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void updateTileEntityChunkAndDoNothing(int x, int y, int z, TileEntity tileEntity) {
 		if(!this.noTileEntityUpdates) {
-			this.sendQueue.addToSendQueue(new Packet59ComplexEntity(var1, var2, var3, var4));
+			this.sendQueue.addToSendQueue(new Packet59ComplexEntity(x, y, z, tileEntity));
 		}
 	}
 
--- net/minecraft/src/BlockMobSpawner.java
+++ net/minecraft/src/BlockMobSpawner.java
@@ -3,19 +3,19 @@
 import java.util.Random;
 
 public class BlockMobSpawner extends BlockContainer {
-	protected BlockMobSpawner(int var1, int var2) {
-		super(var1, var2, Material.rock);
+	protected BlockMobSpawner(int id, int tex) {
+		super(id, tex, Material.rock);
 	}
 
 	protected TileEntity getBlockEntity() {
 		return new TileEntityMobSpawner();
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return 0;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 
--- net/minecraft/src/EntityOtherPlayerMP.java
+++ net/minecraft/src/EntityOtherPlayerMP.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.regex.Pattern;
+
 public class EntityOtherPlayerMP extends EntityPlayer {
 	private int otherPlayerMPPosRotationIncrements;
 	private double otherPlayerMPX;
@@ -9,32 +11,36 @@
 	private double otherPlayerMPPitch;
 	float unusedFloat = 0.0F;
 
-	public EntityOtherPlayerMP(World var1, String var2) {
-		super(var1);
-		this.username = var2;
+	public EntityOtherPlayerMP(World worldObj, String username) {
+		super(worldObj);
+		this.username = username;
 		this.yOffset = 0.0F;
 		this.stepHeight = 0.0F;
-		if(var2 != null && var2.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var2 + ".png";
-			System.out.println("Loading texture " + this.skinUrl);
+		if (username != null && username.length() > 0) {
+			boolean useBlueStagSkin = username.matches("Player[0-9]{0,4}");
+			if (useBlueStagSkin) {
+				this.skinUrl = "https://raw.githubusercontent.com/BlueStaggo/BlueStaggo/main/skin-mc-diverge.png";
+			} else {
+				this.skinUrl = "http://www.minecraft.net/skin/" + username + ".png";
+			}
 		}
 
 		this.noClip = true;
 		this.renderDistanceWeight = 10.0D;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return true;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
 		this.yOffset = 0.0F;
-		this.otherPlayerMPX = var1;
-		this.otherPlayerMPY = var3;
-		this.otherPlayerMPZ = var5;
-		this.otherPlayerMPYaw = (double)var7;
-		this.otherPlayerMPPitch = (double)var8;
-		this.otherPlayerMPPosRotationIncrements = var9;
+		this.otherPlayerMPX = x;
+		this.otherPlayerMPY = y;
+		this.otherPlayerMPZ = z;
+		this.otherPlayerMPYaw = (double)rotationYaw;
+		this.otherPlayerMPPitch = (double)rotationPitch;
+		this.otherPlayerMPPosRotationIncrements = newPosRotationIncrements;
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/EntityDiggingFX.java
+++ net/minecraft/src/EntityDiggingFX.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
 public class EntityDiggingFX extends EntityFX {
-	public EntityDiggingFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12, Block var14) {
-		super(var1, var2, var4, var6, var8, var10, var12);
-		this.particleTextureIndex = var14.blockIndexInTexture;
-		this.particleGravity = var14.blockParticleGravity;
+	public EntityDiggingFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ, Block block, int metadata) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
+		this.particleTextureIndex = block.getBlockTextureFromSideAndMetadata(0, metadata);
+		this.particleGravity = block.blockParticleGravity;
 		this.particleRed = this.particleGreen = this.particleBlue = 0.6F;
 		this.particleScale /= 2.0F;
 	}
@@ -13,20 +13,20 @@
 		return 1;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
 		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
+		float var9 = var8 + 0.015609375F;
 		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
+		float var11 = var10 + 0.015609375F;
 		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float var16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 - zOffset * var12 - zOffset2 * var12), (double)var8, (double)var11);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 - zOffset * var12 + zOffset2 * var12), (double)var8, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 + zOffset * var12 + zOffset2 * var12), (double)var9, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 + zOffset * var12 - zOffset2 * var12), (double)var9, (double)var11);
 	}
 }
--- net/minecraft/src/Path.java
+++ net/minecraft/src/Path.java
@@ -4,20 +4,20 @@
 	private PathPoint[] pathPoints = new PathPoint[1024];
 	private int count = 0;
 
-	public PathPoint addPoint(PathPoint var1) {
-		if(var1.index >= 0) {
+	public PathPoint addPoint(PathPoint pathPoint) {
+		if(pathPoint.index >= 0) {
 			throw new IllegalStateException("OW KNOWS!");
 		} else {
 			if(this.count == this.pathPoints.length) {
-				PathPoint[] var2 = new PathPoint[this.count << 1];
-				System.arraycopy(this.pathPoints, 0, var2, 0, this.count);
-				this.pathPoints = var2;
+				PathPoint[] pathPoint2 = new PathPoint[this.count << 1];
+				System.arraycopy(this.pathPoints, 0, pathPoint2, 0, this.count);
+				this.pathPoints = pathPoint2;
 			}
 
-			this.pathPoints[this.count] = var1;
-			var1.index = this.count;
+			this.pathPoints[this.count] = pathPoint;
+			pathPoint.index = this.count;
 			this.sortBack(this.count++);
-			return var1;
+			return pathPoint;
 		}
 	}
 
@@ -26,68 +26,68 @@
 	}
 
 	public PathPoint dequeue() {
-		PathPoint var1 = this.pathPoints[0];
+		PathPoint pathPoint1 = this.pathPoints[0];
 		this.pathPoints[0] = this.pathPoints[--this.count];
 		this.pathPoints[this.count] = null;
 		if(this.count > 0) {
 			this.sortForward(0);
 		}
 
-		var1.index = -1;
-		return var1;
+		pathPoint1.index = -1;
+		return pathPoint1;
 	}
 
-	public void changeDistance(PathPoint var1, float var2) {
-		float var3 = var1.distanceToTarget;
-		var1.distanceToTarget = var2;
-		if(var2 < var3) {
-			this.sortBack(var1.index);
+	public void changeDistance(PathPoint pathPoint, float distance) {
+		float var3 = pathPoint.distanceToTarget;
+		pathPoint.distanceToTarget = distance;
+		if(distance < var3) {
+			this.sortBack(pathPoint.index);
 		} else {
-			this.sortForward(var1.index);
+			this.sortForward(pathPoint.index);
 		}
 
 	}
 
-	private void sortBack(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
+	private void sortBack(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
 
 		int var4;
-		for(float var3 = var2.distanceToTarget; var1 > 0; var1 = var4) {
-			var4 = var1 - 1 >> 1;
-			PathPoint var5 = this.pathPoints[var4];
-			if(var3 >= var5.distanceToTarget) {
+		for(float var3 = pathPoint2.distanceToTarget; index > 0; index = var4) {
+			var4 = index - 1 >> 1;
+			PathPoint pathPoint5 = this.pathPoints[var4];
+			if(var3 >= pathPoint5.distanceToTarget) {
 				break;
 			}
 
-			this.pathPoints[var1] = var5;
-			var5.index = var1;
+			this.pathPoints[index] = pathPoint5;
+			pathPoint5.index = index;
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
-	private void sortForward(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
-		float var3 = var2.distanceToTarget;
+	private void sortForward(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
+		float var3 = pathPoint2.distanceToTarget;
 
 		while(true) {
-			int var4 = 1 + (var1 << 1);
+			int var4 = 1 + (index << 1);
 			int var5 = var4 + 1;
 			if(var4 >= this.count) {
 				break;
 			}
 
-			PathPoint var6 = this.pathPoints[var4];
-			float var7 = var6.distanceToTarget;
-			PathPoint var8;
+			PathPoint pathPoint6 = this.pathPoints[var4];
+			float var7 = pathPoint6.distanceToTarget;
+			PathPoint pathPoint8;
 			float var9;
 			if(var5 >= this.count) {
-				var8 = null;
+				pathPoint8 = null;
 				var9 = Float.POSITIVE_INFINITY;
 			} else {
-				var8 = this.pathPoints[var5];
-				var9 = var8.distanceToTarget;
+				pathPoint8 = this.pathPoints[var5];
+				var9 = pathPoint8.distanceToTarget;
 			}
 
 			if(var7 < var9) {
@@ -95,22 +95,22 @@
 					break;
 				}
 
-				this.pathPoints[var1] = var6;
-				var6.index = var1;
-				var1 = var4;
+				this.pathPoints[index] = pathPoint6;
+				pathPoint6.index = index;
+				index = var4;
 			} else {
 				if(var9 >= var3) {
 					break;
 				}
 
-				this.pathPoints[var1] = var8;
-				var8.index = var1;
-				var1 = var5;
+				this.pathPoints[index] = pathPoint8;
+				pathPoint8.index = index;
+				index = var5;
 			}
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
 	public boolean isPathEmpty() {
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
 import net.minecraft.client.Minecraft;
 
 public class PlayerControllerSP extends PlayerController {
@@ -10,25 +12,38 @@
 	private float prevBlockDamage = 0.0F;
 	private float blockDestroySoundCounter = 0.0F;
 	private int blockHitWait = 0;
-	private SpawnerAnimals monsterSpawner = new SpawnerClient(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
-	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
+	private SpawnerAnimals monsterSpawner = new SpawnerClient(this, 200, IMobs.class, new Class[] {
+			EntityZombie.class,
+			EntitySkeleton.class,
+			EntityCreeper.class,
+			EntitySpider.class,
+			EntitySlime.class,
+			EntityPhantom.class
+	});
+	private SpawnerAnimals animalSpawner = new SpawnerAnimals(20, EntityAnimal.class, new Class[] {
+			EntitySheep.class,
+			EntityPig.class,
+			EntityCow.class,
+			EntityChicken.class,
+			EntityFox.class
+	});
 
 	public PlayerControllerSP(Minecraft var1) {
 		super(var1);
 	}
 
-	public void flipPlayer(EntityPlayer var1) {
-		var1.rotationYaw = -180.0F;
+	public void flipPlayer(EntityPlayer entityPlayer) {
+		entityPlayer.rotationYaw = -180.0F;
 	}
 
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
-		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		int var5 = this.mc.theWorld.getBlockId(x, y, z);
+		int var6 = this.mc.theWorld.getBlockMetadata(x, y, z);
+		boolean var7 = super.sendBlockRemoved(x, y, z, side);
 		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
 		boolean var9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5]);
 		if(var8 != null) {
-			var8.onDestroyBlock(var5, var1, var2, var3);
+			var8.onDestroyBlock(var5, x, y, z);
 			if(var8.stackSize == 0) {
 				var8.onItemDestroyedByUse(this.mc.thePlayer);
 				this.mc.thePlayer.destroyCurrentEquippedItem();
@@ -36,20 +51,20 @@
 		}
 
 		if(var7 && var9) {
-			Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+			Block.blocksList[var5].harvestBlock(this.mc.theWorld, x, y, z, var6);
 		}
 
 		return var7;
 	}
 
-	public void clickBlock(int var1, int var2, int var3, int var4) {
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
+	public void clickBlock(int x, int y, int z, int side) {
+		int var5 = this.mc.theWorld.getBlockId(x, y, z);
 		if(var5 > 0 && this.curBlockDamage == 0.0F) {
-			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, var1, var2, var3, this.mc.thePlayer);
+			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, x, y, z, this.mc.thePlayer);
 		}
 
 		if(var5 > 0 && Block.blocksList[var5].blockStrength(this.mc.thePlayer) >= 1.0F) {
-			this.sendBlockRemoved(var1, var2, var3, var4);
+			this.sendBlockRemoved(x, y, z, side);
 		}
 
 	}
@@ -59,12 +74,12 @@
 		this.blockHitWait = 0;
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 		if(this.blockHitWait > 0) {
 			--this.blockHitWait;
 		} else {
-			if(var1 == this.curBlockX && var2 == this.curBlockY && var3 == this.curBlockZ) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
+			if(x == this.curBlockX && y == this.curBlockY && z == this.curBlockZ) {
+				int var5 = this.mc.theWorld.getBlockId(x, y, z);
 				if(var5 == 0) {
 					return;
 				}
@@ -72,35 +87,35 @@
 				Block var6 = Block.blocksList[var5];
 				this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
 				if(this.blockDestroySoundCounter % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
 				}
 
 				++this.blockDestroySoundCounter;
 				if(this.curBlockDamage >= 1.0F) {
-					this.sendBlockRemoved(var1, var2, var3, var4);
+					this.sendBlockRemoved(x, y, z, side);
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.blockDestroySoundCounter = 0.0F;
-					this.blockHitWait = 5;
+					this.blockHitWait = this.mc.thePlayer.creative ? 60 : 0;
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
 				this.prevBlockDamage = 0.0F;
 				this.blockDestroySoundCounter = 0.0F;
-				this.curBlockX = var1;
-				this.curBlockY = var2;
-				this.curBlockZ = var3;
+				this.curBlockX = x;
+				this.curBlockY = y;
+				this.curBlockZ = z;
 			}
 
 		}
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 		if(this.curBlockDamage <= 0.0F) {
 			this.mc.ingameGUI.damageGuiPartialTime = 0.0F;
 			this.mc.renderGlobal.damagePartialTime = 0.0F;
 		} else {
-			float var2 = this.prevBlockDamage + (this.curBlockDamage - this.prevBlockDamage) * var1;
+			float var2 = this.prevBlockDamage + (this.curBlockDamage - this.prevBlockDamage) * renderPartialTick;
 			this.mc.ingameGUI.damageGuiPartialTime = var2;
 			this.mc.renderGlobal.damagePartialTime = var2;
 		}
@@ -111,14 +126,33 @@
 		return 4.0F;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
 		this.prevBlockDamage = this.curBlockDamage;
 		this.monsterSpawner.onUpdate(this.mc.theWorld);
 		this.animalSpawner.onUpdate(this.mc.theWorld);
-		this.mc.sndManager.playRandomMusicIfReady();
+
+		EntityPlayer plr = this.mc.thePlayer;
+		int ix = (int) plr.posX;
+		int iy = (int) plr.posY;
+		int iz = (int) plr.posZ;
+
+		this.mc.sndManager.tickMusic();
+		if (iy < 64
+				&& this.mc.theWorld.getSavedLightValue(EnumSkyBlock.Sky, ix, iy, iz) <= 0
+				&& this.mc.theWorld.hasSolidCeiling(ix, iy, iz)) {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.CAVE) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomCaveMusicIfReady();
+		} else {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.NORMAL) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomMusicIfReady();
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiRecipeGuide.java
@@ -1,0 +1,134 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.src.*;
+
+public class GuiRecipeGuide extends GuiContainer {
+	private final List<ItemStack[]> recipes = new ArrayList<>();
+	private int currentRecipe = 0;
+	private final ItemStack filterItem;
+	private final String filterItemName;
+
+	public GuiRecipeGuide() {
+		this(null);
+	}
+
+	public GuiRecipeGuide(ItemStack filterItem) {
+		this.xSize = 176;
+		this.ySize = 90;
+		this.filterItem = filterItem;
+
+		String name = "Crafting";
+		if (filterItem != null) {
+			ItemTooltip tooltip = this.filterItem.getTooltip();
+			if (tooltip != null) {
+				name = tooltip.lines.get(0);
+			}
+		}
+		filterItemName = name;
+
+		this.setupRecipes();
+		this.setupCurrentRecipe();
+	}
+
+	private void setupRecipes() {
+		this.recipes.clear();
+		int r;
+		for (r = 0; r < CraftingManager.getInstance().count(); r++) {
+			ItemStack[] recipe = CraftingManager.getInstance().getRecipeAsItems(r);
+			if (showRecipe(recipe)) {
+				recipes.add(recipe);
+			}
+		}
+		for (r = 0; r < FurnaceRecipeManager.getInstance().count(); r++) {
+			ItemStack[] recipe = FurnaceRecipeManager.getInstance().getRecipeAsItems(r);
+			if (showRecipe(recipe)) {
+				recipes.add(recipe);
+			}
+		}
+	}
+
+	private boolean showRecipe(ItemStack[] recipe) {
+		Stream<ItemStack> filterStream = Arrays.stream(recipe).filter(Objects::nonNull);
+		return filterItem == null
+				|| filterItem.itemID == 0
+				|| filterStream.anyMatch(i ->
+					i.itemID == filterItem.itemID
+					&& (i.itemMetadata == -1
+						|| i.itemMetadata == filterItem.itemMetadata));
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float var1) {
+		int bg = this.mc.renderEngine.getTexture("/gui/guide.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+	}
+
+	public void initGui() {
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, 5 + posX, 67 + posY, 18, 18, "<"));
+		this.controlList.add(new GuiButton(1, 153 + posX, 67 + posY, 18, 18, ">"));
+	}
+
+	private void setupCurrentRecipe() {
+		this.inventorySlots.clear();
+		if (this.recipes.size() == 0) {
+			return;
+		}
+		ItemStack[] items = recipes.get(this.currentRecipe);
+		InventoryReadonly inventory = new InventoryReadonly(items);
+		for (int i = 0; i < 9; i++) {
+			this.inventorySlots.add(new SlotInventory(this, inventory, i, 30 + (i % 3) * 18, 17 + (i / 3) * 18));
+		}
+		this.inventorySlots.add(new SlotInventory(this, inventory, 9, 124, 35));
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		if (this.recipes.size() > 0) {
+			String title = (this.currentRecipe + 1) +
+				" / " +
+				this.recipes.size() +
+				" " +
+				this.filterItemName +
+				" recipes";
+
+			this.drawString(this.fontRenderer, title, 5, 5, 0xFFFFFF);
+		} else {
+			this.drawString(this.fontRenderer, "No recipes", 5, 5, 0xFFFFFF);
+			this.drawString(this.fontRenderer, "Discover more items!", 29, 76, 0xFFFFFF);
+		}
+	}
+
+	protected void actionPerformed(GuiButton guiButton1) {
+		switch (guiButton1.id) {
+			case 0:
+				if (this.currentRecipe > 0) {
+					this.currentRecipe--;
+				} else {
+					this.currentRecipe = this.recipes.size() - 1;
+				}
+				break;
+
+			case 1:
+				if (this.currentRecipe < this.recipes.size() - 1) {
+					this.currentRecipe++;
+				} else {
+					this.currentRecipe = 0;
+				}
+				break;
+		}
+		this.setupCurrentRecipe();
+	}
+}
--- net/minecraft/src/GuiYesNo.java
+++ net/minecraft/src/GuiYesNo.java
@@ -6,8 +6,8 @@
 	private String message2;
 	private int worldNumber;
 
-	public GuiYesNo(GuiScreen var1, String var2, String var3, int var4) {
-		this.parentScreen = var1;
+	public GuiYesNo(GuiScreen guiScreen1, String var2, String var3, int var4) {
+		this.parentScreen = guiScreen1;
 		this.message1 = var2;
 		this.message2 = var3;
 		this.worldNumber = var4;
@@ -18,14 +18,14 @@
 		this.controlList.add(new GuiSmallButton(1, this.width / 2 - 155 + 160, this.height / 6 + 96, "No"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		this.parentScreen.deleteWorld(var1.id == 0, this.worldNumber);
+	protected void actionPerformed(GuiButton button) {
+		this.parentScreen.deleteWorld(button.id == 0, this.worldNumber);
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/TileEntityMobSpawner.java
+++ net/minecraft/src/TileEntityMobSpawner.java
@@ -79,15 +79,15 @@
 		this.delay = 200 + this.worldObj.rand.nextInt(600);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		this.mobID = var1.getString("EntityId");
-		this.delay = var1.getShort("Delay");
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		super.readFromNBT(compoundTag);
+		this.mobID = compoundTag.getString("EntityId");
+		this.delay = compoundTag.getShort("Delay");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("EntityId", this.mobID);
-		var1.setShort("Delay", (short)this.delay);
+	public void writeToNBT(NBTTagCompound compoundTag) {
+		super.writeToNBT(compoundTag);
+		compoundTag.setString("EntityId", this.mobID);
+		compoundTag.setShort("Delay", (short)this.delay);
 	}
 }
--- net/minecraft/src/EntityRainFX.java
+++ net/minecraft/src/EntityRainFX.java
@@ -15,8 +15,8 @@
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
@@ -41,8 +41,8 @@
 			this.motionZ *= (double)0.7F;
 		}
 
-		Material var1 = this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
-		if(var1.getIsLiquid() || var1.isSolid()) {
+		Material material1 = this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
+		if(material1.getIsLiquid() || material1.isSolid()) {
 			double var2 = (double)((float)(MathHelper.floor_double(this.posY) + 1) - BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))));
 			if(this.posY < var2) {
 				this.setEntityDead();
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -2,16 +2,17 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStairs extends Block {
-	private Block modelBlock;
+	private int[] modelBlocks;
 
-	protected BlockStairs(int var1, Block var2) {
-		super(var1, var2.blockIndexInTexture, var2.material);
-		this.modelBlock = var2;
-		this.setHardness(var2.hardness);
-		this.setResistance(var2.resistance / 3.0F);
-		this.setStepSound(var2.stepSound);
+	protected BlockStairs(int id, Material material, int[] modelBlocks) {
+		super(id, 1, material);
+		if (modelBlocks.length > 4) {
+			throw new IllegalArgumentException("Too many stair types! 4 maximum!");
+		}
+		this.modelBlocks = modelBlocks;
 	}
 
 	public boolean isOpaqueCube() {
@@ -26,226 +27,144 @@
 		return 10;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
+	public void getCollidingBoundingBoxes(World worldObj, int x, int y, int z, AxisAlignedBB aabb, ArrayList collidingBoundingBoxes) {
+		int var7 = worldObj.getBlockMetadata(x, y, z) % 4;
 		if(var7 == 0) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 		} else if(var7 == 1) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 		} else if(var7 == 2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 		} else if(var7 == 3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(worldObj, x, y, z, aabb, collidingBoundingBoxes);
 		}
 
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.multiplayerWorld) {
-			if(var1.getBlockMaterial(var2, var3 + 1, var4).isSolid()) {
-				var1.setBlockWithNotify(var2, var3, var4, this.modelBlock.blockID);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(worldObj.canDoClientAction()) {
+			if(worldObj.getBlockMaterial(x, y + 1, z).isSolid()) {
+//				worldObj.setBlockWithNotify(x, y, z, this.modelBlock.blockID);
 			} else {
-				this.updateState(var1, var2, var3, var4);
-				this.updateState(var1, var2 + 1, var3 - 1, var4);
-				this.updateState(var1, var2 - 1, var3 - 1, var4);
-				this.updateState(var1, var2, var3 - 1, var4 - 1);
-				this.updateState(var1, var2, var3 - 1, var4 + 1);
-				this.updateState(var1, var2 + 1, var3 + 1, var4);
-				this.updateState(var1, var2 - 1, var3 + 1, var4);
-				this.updateState(var1, var2, var3 + 1, var4 - 1);
-				this.updateState(var1, var2, var3 + 1, var4 + 1);
+				this.updateState(worldObj, x, y, z);
+				this.updateState(worldObj, x + 1, y - 1, z);
+				this.updateState(worldObj, x - 1, y - 1, z);
+				this.updateState(worldObj, x, y - 1, z - 1);
+				this.updateState(worldObj, x, y - 1, z + 1);
+				this.updateState(worldObj, x + 1, y + 1, z);
+				this.updateState(worldObj, x - 1, y + 1, z);
+				this.updateState(worldObj, x, y + 1, z - 1);
+				this.updateState(worldObj, x, y + 1, z + 1);
 			}
-
-			this.modelBlock.onNeighborBlockChange(var1, var2, var3, var4, var5);
 		}
 	}
 
-	private void updateState(World var1, int var2, int var3, int var4) {
-		if(this.isBlockStair(var1, var2, var3, var4)) {
+	private void updateState(World worldObj, int x, int y, int z) {
+		if(this.isBlockStair(worldObj, x, y, z)) {
+			byte type = (byte) (worldObj.getBlockMetadata(x, y, z) / 4);
 			byte var5 = -1;
-			if(this.isBlockStair(var1, var2 + 1, var3 + 1, var4)) {
+			if(this.isBlockStair(worldObj, x + 1, y + 1, z)) {
 				var5 = 0;
 			}
 
-			if(this.isBlockStair(var1, var2 - 1, var3 + 1, var4)) {
+			if(this.isBlockStair(worldObj, x - 1, y + 1, z)) {
 				var5 = 1;
 			}
 
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 + 1)) {
+			if(this.isBlockStair(worldObj, x, y + 1, z + 1)) {
 				var5 = 2;
 			}
 
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 - 1)) {
+			if(this.isBlockStair(worldObj, x, y + 1, z - 1)) {
 				var5 = 3;
 			}
 
 			if(var5 < 0) {
-				if(this.isBlockSolid(var1, var2 + 1, var3, var4) && !this.isBlockSolid(var1, var2 - 1, var3, var4)) {
+				if(this.isBlockSolid(worldObj, x + 1, y, z) && !this.isBlockSolid(worldObj, x - 1, y, z)) {
 					var5 = 0;
 				}
 
-				if(this.isBlockSolid(var1, var2 - 1, var3, var4) && !this.isBlockSolid(var1, var2 + 1, var3, var4)) {
+				if(this.isBlockSolid(worldObj, x - 1, y, z) && !this.isBlockSolid(worldObj, x + 1, y, z)) {
 					var5 = 1;
 				}
 
-				if(this.isBlockSolid(var1, var2, var3, var4 + 1) && !this.isBlockSolid(var1, var2, var3, var4 - 1)) {
+				if(this.isBlockSolid(worldObj, x, y, z + 1) && !this.isBlockSolid(worldObj, x, y, z - 1)) {
 					var5 = 2;
 				}
 
-				if(this.isBlockSolid(var1, var2, var3, var4 - 1) && !this.isBlockSolid(var1, var2, var3, var4 + 1)) {
+				if(this.isBlockSolid(worldObj, x, y, z - 1) && !this.isBlockSolid(worldObj, x, y, z + 1)) {
 					var5 = 3;
 				}
 			}
 
 			if(var5 < 0) {
-				if(this.isBlockStair(var1, var2 - 1, var3 - 1, var4)) {
+				if(this.isBlockStair(worldObj, x - 1, y - 1, z)) {
 					var5 = 0;
 				}
 
-				if(this.isBlockStair(var1, var2 + 1, var3 - 1, var4)) {
+				if(this.isBlockStair(worldObj, x + 1, y - 1, z)) {
 					var5 = 1;
 				}
 
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 - 1)) {
+				if(this.isBlockStair(worldObj, x, y - 1, z - 1)) {
 					var5 = 2;
 				}
 
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 + 1)) {
+				if(this.isBlockStair(worldObj, x, y - 1, z + 1)) {
 					var5 = 3;
 				}
 			}
 
 			if(var5 >= 0) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
+				worldObj.setBlockMetadataWithNotify(x, y, z, var5 + type * 4);
 			}
 
 		}
 	}
 
-	private boolean isBlockSolid(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).isSolid();
-	}
-
-	private boolean isBlockStair(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 ? false : Block.blocksList[var5].getRenderType() == 10;
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.randomDisplayTick(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
-	}
-
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.modelBlock.getBlockBrightness(var1, var2, var3, var4);
-	}
-
-	public float getExplosionResistance(Entity var1) {
-		return this.modelBlock.getExplosionResistance(var1);
-	}
-
-	public int getRenderBlockPass() {
-		return this.modelBlock.getRenderBlockPass();
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSide(var1);
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
-	}
-
-	public int tickRate() {
-		return this.modelBlock.tickRate();
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		this.modelBlock.velocityToAddToEntity(var1, var2, var3, var4, var5, var6);
-	}
-
-	public boolean isCollidable() {
-		return this.modelBlock.isCollidable();
-	}
-
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return this.modelBlock.canCollideCheck(var1, var2);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.canPlaceBlockAt(var1, var2, var3, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.onNeighborBlockChange(var1, var2, var3, var4, 0);
-		this.modelBlock.onBlockAdded(var1, var2, var3, var4);
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.updateTick(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		return this.modelBlock.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockDestroyedByExplosion(var1, var2, var3, var4);
+	private boolean isBlockSolid(World worldObj, int x, int y, int z) {
+		return worldObj.getBlockMaterial(x, y, z).isSolid();
+	}
+
+	private boolean isBlockStair(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockId(x, y, z);
+		return var5 != 0 && Block.blocksList[var5].getRenderType() == 10;
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata / 4 * 4;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, modelBlocks.length).map(i -> i * 4).toArray();
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.modelBlocks[metadata / 4];
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		this.onNeighborBlockChange(worldObj, x, y, z, 0);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool(x + 0.0F, y + 0.0F, z + 0.0F, x + 1.0F, y + 1.0F, z + 1.0F);
 	}
 }
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -7,6 +7,10 @@
 import java.util.Random;
 
 public class Chunk {
+	public static final int CHUNK_VERSION_CURRENT = 1,
+			CHUNK_VERSION_0_1 = 0,
+			CHUNK_VERSION_0_2 = 1;
+
 	public static boolean isLit;
 	public byte[] blocks;
 	public boolean isChunkLoaded;
@@ -27,7 +31,7 @@
 	public boolean hasEntities;
 	public long lastSaveTime;
 
-	public Chunk(World var1, int var2, int var3) {
+	public Chunk(World worldObj, int xPosition, int zPosition) {
 		this.chunkTileEntityMap = new HashMap();
 		this.entities = new List[8];
 		this.isTerrainPopulated = false;
@@ -35,31 +39,30 @@
 		this.isChunkRendered = false;
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
-		this.worldObj = var1;
-		this.xPosition = var2;
-		this.zPosition = var3;
+		this.worldObj = worldObj;
+		this.xPosition = xPosition;
+		this.zPosition = zPosition;
 		this.heightMap = new byte[256];
 
 		for(int var4 = 0; var4 < this.entities.length; ++var4) {
 			this.entities[var4] = new ArrayList();
 		}
-
-	}
-
-	public Chunk(World var1, byte[] var2, int var3, int var4) {
-		this(var1, var3, var4);
-		this.blocks = var2;
-		this.data = new NibbleArray(var2.length);
-		this.skylightMap = new NibbleArray(var2.length);
-		this.blocklightMap = new NibbleArray(var2.length);
-	}
-
-	public boolean isAtLocation(int var1, int var2) {
-		return var1 == this.xPosition && var2 == this.zPosition;
-	}
-
-	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+	}
+
+	public Chunk(World worldObj, byte[] blocks, int xPosition, int zPosition) {
+		this(worldObj, xPosition, zPosition);
+		this.blocks = blocks;
+		this.data = new NibbleArray(blocks.length);
+		this.skylightMap = new NibbleArray(blocks.length);
+		this.blocklightMap = new NibbleArray(blocks.length);
+	}
+
+	public boolean isAtLocation(int xPosition, int zPosition) {
+		return xPosition == this.xPosition && zPosition == this.zPosition;
+	}
+
+	public int getHeightValue(int blockX, int blockZ) {
+		return this.heightMap[blockZ << 4 | blockX] & 255;
 	}
 
 	public void doNothing() {
@@ -112,40 +115,40 @@
 		this.isModified = true;
 	}
 
-	private void updateSkylight_do(int var1, int var2) {
-		int var3 = this.getHeightValue(var1, var2);
-		int var4 = this.xPosition * 16 + var1;
-		int var5 = this.zPosition * 16 + var2;
+	private void updateSkylight_do(int x, int z) {
+		int var3 = this.getHeightValue(x, z);
+		int var4 = this.xPosition * 16 + x;
+		int var5 = this.zPosition * 16 + z;
 		this.checkSkylightNeighborUpdate(var4 - 1, var5, var3);
 		this.checkSkylightNeighborUpdate(var4 + 1, var5, var3);
 		this.checkSkylightNeighborUpdate(var4, var5 - 1, var3);
 		this.checkSkylightNeighborUpdate(var4, var5 + 1, var3);
 	}
 
-	private void checkSkylightNeighborUpdate(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getHeightValue(var1, var2);
-		if(var4 > var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var3, var2, var1, var4, var2);
-		} else if(var4 < var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var4, var2, var1, var3, var2);
+	private void checkSkylightNeighborUpdate(int blockX, int blockZ, int blockY) {
+		int var4 = this.worldObj.getHeightValue(blockX, blockZ);
+		if(var4 > blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, blockY, blockZ, blockX, var4, blockZ);
+		} else if(var4 < blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, var4, blockZ, blockX, blockY, blockZ);
 		}
 
 		this.isModified = true;
 	}
 
-	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
+	private void relightBlock(int x, int y, int z) {
+		int var4 = this.heightMap[z << 4 | x] & 255;
 		int var5 = var4;
-		if(var2 > var4) {
-			var5 = var2;
+		if(y > var4) {
+			var5 = y;
 		}
 
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
+		for(int var6 = x << 11 | z << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
 		}
 
 		if(var5 != var4) {
-			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
+			this.worldObj.markBlocksDirtyVertical(x, z, var5, var4);
+			this.heightMap[z << 4 | x] = (byte)var5;
 			int var7;
 			int var8;
 			int var9;
@@ -165,26 +168,26 @@
 				this.height = var7;
 			}
 
-			var7 = this.xPosition * 16 + var1;
-			var8 = this.zPosition * 16 + var3;
+			var7 = this.xPosition * 16 + x;
+			var8 = this.zPosition * 16 + z;
 			if(var5 < var4) {
 				for(var9 = var5; var9 < var4; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 15);
+					this.skylightMap.set(x, var9, z, 15);
 				}
 			} else {
 				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
 
 				for(var9 = var4; var9 < var5; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 0);
+					this.skylightMap.set(x, var9, z, 0);
 				}
 			}
 
 			var9 = 15;
 
 			int var10;
-			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(var1, var5, var3, var9)) {
+			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(x, var5, z, var9)) {
 				--var5;
-				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
+				int var11 = Block.lightOpacity[this.getBlockID(x, var5, z)];
 				if(var11 == 0) {
 					var11 = 1;
 				}
@@ -195,7 +198,7 @@
 				}
 			}
 
-			while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
+			while(var5 > 0 && Block.lightOpacity[this.getBlockID(x, var5 - 1, z)] == 0) {
 				--var5;
 			}
 
@@ -207,38 +210,38 @@
 		}
 	}
 
-	public int getBlockID(int var1, int var2, int var3) {
-		return this.blocks[var1 << 11 | var3 << 7 | var2];
+	public int getBlockID(int x, int y, int z) {
+		return this.blocks[x << 11 | z << 7 | y];
 	}
 
-	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.get(var1, var2, var3) == var5) {
+	public boolean setBlockIDWithMetadata(int x, int y, int z, int id, int metadata) {
+		byte var6 = (byte)id;
+		int var7 = this.heightMap[z << 4 | x] & 255;
+		int var8 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(var8 == id && this.data.get(x, y, z) == metadata) {
 			return false;
 		} else {
-			int var9 = this.xPosition * 16 + var1;
-			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
+			int var9 = this.xPosition * 16 + x;
+			int var10 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = var6;
+			if(var8 != 0 && this.worldObj.canDoClientAction()) {
+				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, y, var10);
 			}
 
-			this.data.set(var1, var2, var3, var5);
+			this.data.set(x, y, z, metadata);
 			if(Block.lightOpacity[var6] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
+				if(y >= var7) {
+					this.relightBlock(x, y + 1, z);
 				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
+			} else if(y == var7 - 1) {
+				this.relightBlock(x, y, z);
 			}
 
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, y, var10, var9, y, var10);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, y, var10, var9, y, var10);
+			this.updateSkylight_do(x, z);
+			if(id != 0) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, var9, y, var10);
 			}
 
 			this.isModified = true;
@@ -246,34 +249,34 @@
 		}
 	}
 
-	public boolean setBlockID(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
-		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var7 == var4) {
+	public boolean setBlockID(int x, int y, int z, int id) {
+		byte var5 = (byte)id;
+		int var6 = this.heightMap[z << 4 | x] & 255;
+		int var7 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(var7 == id) {
 			return false;
 		} else {
-			int var8 = this.xPosition * 16 + var1;
-			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
+			int var8 = this.xPosition * 16 + x;
+			int var9 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = var5;
 			if(var7 != 0) {
-				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
+				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, y, var9);
 			}
 
-			this.data.set(var1, var2, var3, 0);
+			this.data.set(x, y, z, 0);
 			if(Block.lightOpacity[var5] != 0) {
-				if(var2 >= var6) {
-					this.relightBlock(var1, var2 + 1, var3);
+				if(y >= var6) {
+					this.relightBlock(x, y + 1, z);
 				}
-			} else if(var2 == var6 - 1) {
-				this.relightBlock(var1, var2, var3);
+			} else if(y == var6 - 1) {
+				this.relightBlock(x, y, z);
 			}
 
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, y, var9, var8, y, var9);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, y, var9, var8, y, var9);
+			this.updateSkylight_do(x, z);
+			if(id != 0 && this.worldObj.canDoClientAction()) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, var8, y, var9);
 			}
 
 			this.isModified = true;
@@ -281,41 +284,41 @@
 		}
 	}
 
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.get(var1, var2, var3);
-	}
-
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-		this.isModified = true;
-		this.data.set(var1, var2, var3, var4);
-	}
-
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		return var1 == EnumSkyBlock.Sky ? this.skylightMap.get(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.get(var2, var3, var4) : 0);
-	}
-
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		this.isModified = true;
-		if(var1 == EnumSkyBlock.Sky) {
-			this.skylightMap.set(var2, var3, var4, var5);
+	public int getBlockMetadata(int x, int y, int z) {
+		return this.data.get(x, y, z);
+	}
+
+	public void setBlockMetadata(int x, int y, int z, int metadata) {
+		this.isModified = true;
+		this.data.set(x, y, z, metadata);
+	}
+
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int x, int y, int z) {
+		return skyBlock == EnumSkyBlock.Sky ? this.skylightMap.get(x, y, z) : (skyBlock == EnumSkyBlock.Block ? this.blocklightMap.get(x, y, z) : 0);
+	}
+
+	public void setLightValue(EnumSkyBlock skyBlock, int x, int y, int z, int lightValue) {
+		this.isModified = true;
+		if(skyBlock == EnumSkyBlock.Sky) {
+			this.skylightMap.set(x, y, z, lightValue);
 		} else {
-			if(var1 != EnumSkyBlock.Block) {
+			if(skyBlock != EnumSkyBlock.Block) {
 				return;
 			}
 
-			this.blocklightMap.set(var2, var3, var4, var5);
+			this.blocklightMap.set(x, y, z, lightValue);
 		}
 
 	}
 
-	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-		int var5 = this.skylightMap.get(var1, var2, var3);
+	public int getBlockLightValue(int x, int y, int z, int skyLightSubtracted) {
+		int var5 = this.skylightMap.get(x, y, z);
 		if(var5 > 0) {
 			isLit = true;
 		}
 
-		var5 -= var4;
-		int var6 = this.blocklightMap.get(var1, var2, var3);
+		var5 -= skyLightSubtracted;
+		int var6 = this.blocklightMap.get(x, y, z);
 		if(var6 > var5) {
 			var5 = var6;
 		}
@@ -323,16 +326,16 @@
 		return var5;
 	}
 
-	public void addEntity(Entity var1) {
+	public void addEntity(Entity entity) {
 		if(!this.isChunkRendered) {
 			this.hasEntities = true;
-			int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
+			int var2 = MathHelper.floor_double(entity.posX / 16.0D);
+			int var3 = MathHelper.floor_double(entity.posZ / 16.0D);
 			if(var2 != this.xPosition || var3 != this.zPosition) {
-				System.out.println("Wrong location! " + var1);
+				System.out.println("Wrong location! " + entity);
 			}
 
-			int var4 = MathHelper.floor_double(var1.posY / 16.0D);
+			int var4 = MathHelper.floor_double(entity.posY / 16.0D);
 			if(var4 < 0) {
 				var4 = 0;
 			}
@@ -341,83 +344,84 @@
 				var4 = this.entities.length - 1;
 			}
 
-			var1.addedToChunk = true;
-			var1.chunkCoordX = this.xPosition;
-			var1.chunkCoordY = var4;
-			var1.chunkCoordZ = this.zPosition;
-			this.entities[var4].add(var1);
-		}
-	}
-
-	public void removeEntity(Entity var1) {
-		this.removeEntityAtIndex(var1, var1.chunkCoordY);
-	}
-
-	public void removeEntityAtIndex(Entity var1, int var2) {
-		if(var2 < 0) {
-			var2 = 0;
-		}
-
-		if(var2 >= this.entities.length) {
-			var2 = this.entities.length - 1;
-		}
-
-		this.entities[var2].remove(var1);
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
-	}
-
-	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-		TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-		if(var5 == null) {
-			int var6 = this.getBlockID(var1, var2, var3);
+			entity.addedToChunk = true;
+			entity.chunkCoordX = this.xPosition;
+			entity.chunkCoordY = var4;
+			entity.chunkCoordZ = this.zPosition;
+			this.entities[var4].add(entity);
+		}
+	}
+
+	public void removeEntity(Entity entity) {
+		this.removeEntityAtIndex(entity, entity.chunkCoordY);
+	}
+
+	public void removeEntityAtIndex(Entity entity, int index) {
+		if(index < 0) {
+			index = 0;
+		}
+
+		if(index >= this.entities.length) {
+			index = this.entities.length - 1;
+		}
+
+		this.entities[index].remove(entity);
+	}
+
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return y >= (this.heightMap[z << 4 | x] & 255);
+	}
+
+	public TileEntity getChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
+		TileEntity tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
+		if(tileEntity5 == null) {
+			int var6 = this.getBlockID(x, y, z);
 			if(!Block.isBlockContainer[var6]) {
 				return null;
 			}
 
-			BlockContainer var7 = (BlockContainer)Block.blocksList[var6];
-			var7.onBlockAdded(this.worldObj, this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3);
-			var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+			BlockContainer blockContainer7 = (BlockContainer)Block.blocksList[var6];
+			blockContainer7.onBlockAdded(this.worldObj, this.xPosition * 16 + x, y, this.zPosition * 16 + z);
+			tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
 		}
 
-		return var5;
-	}
-
-	public void addTileEntity(TileEntity var1) {
-		int var2 = var1.xCoord - this.xPosition * 16;
-		int var3 = var1.yCoord;
-		int var4 = var1.zCoord - this.zPosition * 16;
-		this.setChunkBlockTileEntity(var2, var3, var4, var1);
-	}
-
-	public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-		var4.worldObj = this.worldObj;
-		var4.xCoord = this.xPosition * 16 + var1;
-		var4.yCoord = var2;
-		var4.zCoord = this.zPosition * 16 + var3;
-		if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
+		return tileEntity5;
+	}
+
+	public void addTileEntity(TileEntity tileEntity) {
+		int var2 = tileEntity.xCoord - this.xPosition * 16;
+		int var3 = tileEntity.yCoord;
+		int var4 = tileEntity.zCoord - this.zPosition * 16;
+		this.setChunkBlockTileEntity(var2, var3, var4, tileEntity);
+	}
+
+	public void setChunkBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		ChunkPosition chunkPosition5 = new ChunkPosition(x, y, z);
+		tileEntity.worldObj = this.worldObj;
+		tileEntity.xCoord = this.xPosition * 16 + x;
+		tileEntity.yCoord = y;
+		tileEntity.zCoord = this.zPosition * 16 + z;
+		if(this.getBlockID(x, y, z) != 0 && Block.blocksList[this.getBlockID(x, y, z)] instanceof BlockContainer) {
 			if(this.isChunkLoaded) {
-				if(this.chunkTileEntityMap.get(var5) != null) {
-					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(var5));
+				if(this.chunkTileEntityMap.get(chunkPosition5) != null) {
+					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(chunkPosition5));
 				}
 
-				this.worldObj.loadedTileEntityList.add(var4);
+				this.worldObj.loadedTileEntityList.add(tileEntity);
 			}
 
-			this.chunkTileEntityMap.put(var5, var4);
+			this.chunkTileEntityMap.put(chunkPosition5, tileEntity);
 		} else {
 			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
+		tileEntity.onSpawn();
 	}
 
-	public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+	public void removeChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
 		if(this.isChunkLoaded) {
-			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(var4));
+			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(chunkPosition4));
 		}
 
 	}
@@ -446,9 +450,9 @@
 		this.isModified = true;
 	}
 
-	public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
+	public void getEntitiesWithinAABBForEntity(Entity entity, AxisAlignedBB aabb, List list) {
+		int var4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int var5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
 		if(var4 < 0) {
 			var4 = 0;
 		}
@@ -458,21 +462,21 @@
 		}
 
 		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
+			List list7 = this.entities[var6];
 
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
+			for(int var8 = 0; var8 < list7.size(); ++var8) {
+				Entity var9 = (Entity)list7.get(var8);
+				if(var9 != entity && var9.boundingBox.intersectsWith(aabb)) {
+					list.add(var9);
 				}
 			}
 		}
 
 	}
 
-	public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
+	public void getEntitiesOfTypeWithinAAAB(Class entityClass, AxisAlignedBB aabb, List list) {
+		int var4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int var5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
 		if(var4 < 0) {
 			var4 = 0;
 		}
@@ -482,12 +486,12 @@
 		}
 
 		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
+			List list7 = this.entities[var6];
 
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var1.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
+			for(int var8 = 0; var8 < list7.size(); ++var8) {
+				Entity var9 = (Entity)list7.get(var8);
+				if(entityClass.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(aabb)) {
+					list.add(var9);
 				}
 			}
 		}
@@ -498,6 +502,52 @@
 		return this.neverSave ? false : (this.hasEntities && this.worldObj.worldTime != this.lastSaveTime ? true : this.isModified);
 	}
 
+	public int setChunkData(byte[] blocks, int minX, int minY, int minZ, int maxX, int maxY, int maxZ, int size) {
+		int var9;
+		int var10;
+		int var11;
+		int var12;
+		for(var9 = minX; var9 < maxX; ++var9) {
+			for(var10 = minZ; var10 < maxZ; ++var10) {
+				var11 = var9 << 11 | var10 << 7 | minY;
+				var12 = maxY - minY;
+				System.arraycopy(blocks, size, this.blocks, var11, var12);
+				size += var12;
+			}
+		}
+
+		this.generateHeightMap();
+
+		for(var9 = minX; var9 < maxX; ++var9) {
+			for(var10 = minZ; var10 < maxZ; ++var10) {
+				var11 = (var9 << 11 | var10 << 7 | minY) >> 1;
+				var12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.data.data, var11, var12);
+				size += var12;
+			}
+		}
+
+		for(var9 = minX; var9 < maxX; ++var9) {
+			for(var10 = minZ; var10 < maxZ; ++var10) {
+				var11 = (var9 << 11 | var10 << 7 | minY) >> 1;
+				var12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.blocklightMap.data, var11, var12);
+				size += var12;
+			}
+		}
+
+		for(var9 = minX; var9 < maxX; ++var9) {
+			for(var10 = minZ; var10 < maxZ; ++var10) {
+				var11 = (var9 << 11 | var10 << 7 | minY) >> 1;
+				var12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.skylightMap.data, var11, var12);
+				size += var12;
+			}
+		}
+
+		return size;
+	}
+
 	public int getChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
 		int var9;
 		int var10;
@@ -535,52 +585,6 @@
 				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(this.skylightMap.data, var11, var1, var8, var12);
-				var8 += var12;
-			}
-		}
-
-		return var8;
-	}
-
-	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		this.generateHeightMap();
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.data.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
 				var8 += var12;
 			}
 		}
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -4,13 +4,13 @@
 	private String[][] recipePatterns = new String[][]{{"XXX", "X X"}, {"X X", "XXX", "XXX"}, {"XXX", "X X", "X X"}, {"X X", "X X"}};
 	private Object[][] recipeItems = new Object[][]{{Item.leather, Block.fire, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], 'X', var3});
 			}
 		}
 
--- net/minecraft/src/WorldIso.java
+++ net/minecraft/src/WorldIso.java
@@ -5,12 +5,12 @@
 class WorldIso extends World {
 	final CanvasIsomPreview isomPreview;
 
-	WorldIso(CanvasIsomPreview var1, File var2, String var3) {
-		super(var2, var3);
-		this.isomPreview = var1;
+	WorldIso(CanvasIsomPreview canvasIsomPreview1, File file2, String var3) {
+		super(file2, var3);
+		this.isomPreview = canvasIsomPreview1;
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderIso(this, new ChunkLoader(var1, false));
+	protected IChunkProvider getChunkProvider(File file) {
+		return new ChunkProviderIso(this, new ChunkLoader(file, false));
 	}
 }
--- net/minecraft/src/ItemRecord.java
+++ net/minecraft/src/ItemRecord.java
@@ -1,22 +1,30 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemRecord extends Item {
-	private String recordName;
+	private final String recordName;
+	private final String recordTitle;
 
-	protected ItemRecord(int var1, String var2) {
-		super(var1);
-		this.recordName = var2;
+	protected ItemRecord(int id, String name, String title) {
+		super(id);
+		this.recordName = name;
+		this.recordTitle = title;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.jukebox.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
-			var3.setBlockMetadataWithNotify(var4, var5, var6, this.shiftedIndex - Item.record13.shiftedIndex + 1);
-			var3.playRecord(this.recordName, var4, var5, var6);
-			--var1.stackSize;
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(worldObj.getBlockId(x, y, z) == Block.jukebox.blockID && worldObj.getBlockMetadata(x, y, z) == 0) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, this.shiftedIndex - Item.record13.shiftedIndex + 1);
+			worldObj.playRecord(this.recordName, x, y, z, this.recordTitle);
+			--itemStack.stackSize;
 			return true;
 		} else {
 			return false;
 		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] { this.recordTitle, ItemTooltip.DESCRIPTION_COL };
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/SimplexNoise.java
@@ -1,0 +1,757 @@
+package io.github.bluestaggo.mcdiverge;
+
+/**
+ * K.jpg's OpenSimplex 2, faster variant
+ */
+
+public class SimplexNoise {
+
+	private static final long PRIME_X = 0x5205402B9270C86FL;
+	private static final long PRIME_Y = 0x598CD327003817B5L;
+	private static final long PRIME_Z = 0x5BCC226E9FA0BACBL;
+	private static final long PRIME_W = 0x56CC5227E58F554BL;
+	private static final long HASH_MULTIPLIER = 0x53A3F72DEEC546F5L;
+	private static final long SEED_FLIP_3D = -0x52D547B2E96ED629L;
+	private static final long SEED_OFFSET_4D = 0xE83DC3E0DA7164DL;
+
+	private static final double ROOT2OVER2 = 0.7071067811865476;
+	private static final double SKEW_2D = 0.366025403784439;
+	private static final double UNSKEW_2D = -0.21132486540518713;
+
+	private static final double ROOT3OVER3 = 0.577350269189626;
+	private static final double FALLBACK_ROTATE_3D = 2.0 / 3.0;
+	private static final double ROTATE_3D_ORTHOGONALIZER = UNSKEW_2D;
+
+	private static final float SKEW_4D = -0.138196601125011f;
+	private static final float UNSKEW_4D = 0.309016994374947f;
+	private static final float LATTICE_STEP_4D = 0.2f;
+
+	private static final int N_GRADS_2D_EXPONENT = 7;
+	private static final int N_GRADS_3D_EXPONENT = 8;
+	private static final int N_GRADS_4D_EXPONENT = 9;
+	private static final int N_GRADS_2D = 1 << N_GRADS_2D_EXPONENT;
+	private static final int N_GRADS_3D = 1 << N_GRADS_3D_EXPONENT;
+	private static final int N_GRADS_4D = 1 << N_GRADS_4D_EXPONENT;
+
+	private static final double NORMALIZER_2D = 0.01001634121365712;
+	private static final double NORMALIZER_3D = 0.07969837668935331;
+	private static final double NORMALIZER_4D = 0.0220065933241897;
+
+	private static final float RSQUARED_2D = 0.5f;
+	private static final float RSQUARED_3D = 0.6f;
+	private static final float RSQUARED_4D = 0.6f;
+
+
+	/*
+	 * Noise Evaluators
+	 */
+
+	/**
+	 * 2D Simplex noise, standard lattice orientation.
+	 */
+	public static float noise2(long seed, double x, double y) {
+
+		// Get points for A2* lattice
+		double s = SKEW_2D * (x + y);
+		double xs = x + s, ys = y + s;
+
+		return noise2_UnskewedBase(seed, xs, ys);
+	}
+
+	/**
+	 * 2D Simplex noise, with Y pointing down the main diagonal.
+	 * Might be better for a 2D sandbox style game, where Y is vertical.
+	 * Probably slightly less optimal for heightmaps or continent maps,
+	 * unless your map is centered around an equator. It's a subtle
+	 * difference, but the option is here to make it an easy choice.
+	 */
+	public static float noise2_ImproveX(long seed, double x, double y) {
+
+		// Skew transform and rotation baked into one.
+		double xx = x * ROOT2OVER2;
+		double yy = y * (ROOT2OVER2 * (1 + 2 * SKEW_2D));
+
+		return noise2_UnskewedBase(seed, yy + xx, yy - xx);
+	}
+
+	/**
+	 * 2D Simplex noise base.
+	 */
+	private static float noise2_UnskewedBase(long seed, double xs, double ys) {
+
+		// Get base points and offsets.
+		int xsb = fastFloor(xs), ysb = fastFloor(ys);
+		float xi = (float)(xs - xsb), yi = (float)(ys - ysb);
+
+		// Prime pre-multiplication for hash.
+		long xsbp = xsb * PRIME_X, ysbp = ysb * PRIME_Y;
+
+		// Unskew.
+		float t = (xi + yi) * (float)UNSKEW_2D;
+		float dx0 = xi + t, dy0 = yi + t;
+
+		// First vertex.
+		float value = 0;
+		float a0 = RSQUARED_2D - dx0 * dx0 - dy0 * dy0;
+		if (a0 > 0) {
+			value = (a0 * a0) * (a0 * a0) * grad(seed, xsbp, ysbp, dx0, dy0);
+		}
+
+		// Second vertex.
+		float a1 = (float)(2 * (1 + 2 * UNSKEW_2D) * (1 / UNSKEW_2D + 2)) * t + ((float)(-2 * (1 + 2 * UNSKEW_2D) * (1 + 2 * UNSKEW_2D)) + a0);
+		if (a1 > 0) {
+			float dx1 = dx0 - (float)(1 + 2 * UNSKEW_2D);
+			float dy1 = dy0 - (float)(1 + 2 * UNSKEW_2D);
+			value += (a1 * a1) * (a1 * a1) * grad(seed, xsbp + PRIME_X, ysbp + PRIME_Y, dx1, dy1);
+		}
+
+		// Third vertex.
+		if (dy0 > dx0) {
+			float dx2 = dx0 - (float)UNSKEW_2D;
+			float dy2 = dy0 - (float)(UNSKEW_2D + 1);
+			float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
+			if (a2 > 0) {
+				value += (a2 * a2) * (a2 * a2) * grad(seed, xsbp, ysbp + PRIME_Y, dx2, dy2);
+			}
+		}
+		else
+		{
+			float dx2 = dx0 - (float)(UNSKEW_2D + 1);
+			float dy2 = dy0 - (float)UNSKEW_2D;
+			float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
+			if (a2 > 0) {
+				value += (a2 * a2) * (a2 * a2) * grad(seed, xsbp + PRIME_X, ysbp, dx2, dy2);
+			}
+		}
+
+		return value;
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, with better visual isotropy in (X, Y).
+	 * Recommended for 3D terrain and time-varied animations.
+	 * The Z coordinate should always be the "different" coordinate in whatever your use case is.
+	 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, z, Y) or use noise3_XZBeforeY.
+	 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, y, Z).
+	 * For a time varied animation, call noise3_ImproveXY(x, y, T).
+	 */
+	public static float noise3_ImproveXY(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices without skewing, so Z points up the main lattice diagonal,
+		// and the planes formed by XY are moved far out of alignment with the cube faces.
+		// Orthonormal rotation. Not a skew transform.
+		double xy = x + y;
+		double s2 = xy * ROTATE_3D_ORTHOGONALIZER;
+		double zz = z * ROOT3OVER3;
+		double xr = x + s2 + zz;
+		double yr = y + s2 + zz;
+		double zr = xy * -ROOT3OVER3 + zz;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, with better visual isotropy in (X, Z).
+	 * Recommended for 3D terrain and time-varied animations.
+	 * The Y coordinate should always be the "different" coordinate in whatever your use case is.
+	 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, Y, z).
+	 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, Z, y) or use noise3_ImproveXY.
+	 * For a time varied animation, call noise3_ImproveXZ(x, T, y) or use noise3_ImproveXY.
+	 */
+	public static float noise3_ImproveXZ(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices without skewing, so Y points up the main lattice diagonal,
+		// and the planes formed by XZ are moved far out of alignment with the cube faces.
+		// Orthonormal rotation. Not a skew transform.
+		double xz = x + z;
+		double s2 = xz * ROTATE_3D_ORTHOGONALIZER;
+		double yy = y * ROOT3OVER3;
+		double xr = x + s2 + yy;
+		double zr = z + s2 + yy;
+		double yr = xz * -ROOT3OVER3 + yy;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, fallback rotation option
+	 * Use noise3_ImproveXY or noise3_ImproveXZ instead, wherever appropriate.
+	 * They have less diagonal bias. This function's best use is as a fallback.
+	 */
+	public static float noise3_Fallback(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices via rotation, to produce a familiar look.
+		// Orthonormal rotation. Not a skew transform.
+		double r = FALLBACK_ROTATE_3D * (x + y + z);
+		double xr = r - x, yr = r - y, zr = r - z;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * Generate overlapping cubic lattices for 3D OpenSimplex2 noise.
+	 */
+	private static float noise3_UnrotatedBase(long seed, double xr, double yr, double zr) {
+
+		// Get base points and offsets.
+		int xrb = fastRound(xr), yrb = fastRound(yr), zrb = fastRound(zr);
+		float xri = (float)(xr - xrb), yri = (float)(yr - yrb), zri = (float)(zr - zrb);
+
+		// -1 if positive, 1 if negative.
+		int xNSign = (int)(-1.0f - xri) | 1, yNSign = (int)(-1.0f - yri) | 1, zNSign = (int)(-1.0f - zri) | 1;
+
+		// Compute absolute values, using the above as a shortcut. This was faster in my tests for some reason.
+		float ax0 = xNSign * -xri, ay0 = yNSign * -yri, az0 = zNSign * -zri;
+
+		// Prime pre-multiplication for hash.
+		long xrbp = xrb * PRIME_X, yrbp = yrb * PRIME_Y, zrbp = zrb * PRIME_Z;
+
+		// Loop: Pick an edge on each lattice copy.
+		float value = 0;
+		float a = (RSQUARED_3D - xri * xri) - (yri * yri + zri * zri);
+		for (int l = 0; ; l++) {
+
+			// Closest point on cube.
+			if (a > 0) {
+				value += (a * a) * (a * a) * grad(seed, xrbp, yrbp, zrbp, xri, yri, zri);
+			}
+
+			// Second-closest point.
+			if (ax0 >= ay0 && ax0 >= az0) {
+				float b = a + ax0 + ax0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp - xNSign * PRIME_X, yrbp, zrbp, xri + xNSign, yri, zri);
+				}
+			}
+			else if (ay0 > ax0 && ay0 >= az0) {
+				float b = a + ay0 + ay0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp, yrbp - yNSign * PRIME_Y, zrbp, xri, yri + yNSign, zri);
+				}
+			}
+			else
+			{
+				float b = a + az0 + az0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp, yrbp, zrbp - zNSign * PRIME_Z, xri, yri, zri + zNSign);
+				}
+			}
+
+			// Break from loop if we're done, skipping updates below.
+			if (l == 1) break;
+
+			// Update absolute value.
+			ax0 = 0.5f - ax0;
+			ay0 = 0.5f - ay0;
+			az0 = 0.5f - az0;
+
+			// Update relative coordinate.
+			xri = xNSign * ax0;
+			yri = yNSign * ay0;
+			zri = zNSign * az0;
+
+			// Update falloff.
+			a += (0.75f - ax0) - (ay0 + az0);
+
+			// Update prime for hash.
+			xrbp += (xNSign >> 1) & PRIME_X;
+			yrbp += (yNSign >> 1) & PRIME_Y;
+			zrbp += (zNSign >> 1) & PRIME_Z;
+
+			// Update the reverse sign indicators.
+			xNSign = -xNSign;
+			yNSign = -yNSign;
+			zNSign = -zNSign;
+
+			// And finally update the seed for the other lattice copy.
+			seed ^= SEED_FLIP_3D;
+		}
+
+		return value;
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_ImproveXY
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * in a space where Z is vertical
+	 */
+	public static float noise4_ImproveXYZ_ImproveXY(long seed, double x, double y, double z, double w) {
+
+		double xy = x + y;
+		double s2 = xy * -0.21132486540518699998;
+		double zz = z * 0.28867513459481294226;
+		double ww = w * 0.2236067977499788;
+		double xr = x + (zz + ww + s2), yr = y + (zz + ww + s2);
+		double zr = xy * -0.57735026918962599998 + (zz + ww);
+		double wr = z * -0.866025403784439 + ww;
+
+		return noise4_UnskewedBase(seed, xr, yr, zr, wr);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_ImproveXZ
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * in a space where Y is vertical
+	 */
+	public static float noise4_ImproveXYZ_ImproveXZ(long seed, double x, double y, double z, double w) {
+
+		double xz = x + z;
+		double s2 = xz * -0.21132486540518699998;
+		double yy = y * 0.28867513459481294226;
+		double ww = w * 0.2236067977499788;
+		double xr = x + (yy + ww + s2), zr = z + (yy + ww + s2);
+		double yr = xz * -0.57735026918962599998 + (yy + ww);
+		double wr = y * -0.866025403784439 + ww;
+
+		return noise4_UnskewedBase(seed, xr, yr, zr, wr);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_Fallback
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * where there isn't a clear distinction between horizontal and vertical
+	 */
+	public static float noise4_ImproveXYZ(long seed, double x, double y, double z, double w) {
+
+		double xyz = x + y + z;
+		double ww = w * 0.2236067977499788;
+		double s2 = xyz * -0.16666666666666666 + ww;
+		double xs = x + s2, ys = y + s2, zs = z + s2, ws = -0.5 * xyz + ww;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XY and ZW forming orthogonal triangular-based planes.
+	 * Recommended for 3D terrain, where X and Y (or Z and W) are horizontal.
+	 * Recommended for noise(x, y, sin(time), cos(time)) trick.
+	 */
+	public static float noise4_ImproveXY_ImproveZW(long seed, double x, double y, double z, double w) {
+
+		double s2 = (x + y) * -0.178275657951399372 + (z + w) * 0.215623393288842828;
+		double t2 = (z + w) * -0.403949762580207112 + (x + y) * -0.375199083010075342;
+		double xs = x + s2, ys = y + s2, zs = z + t2, ws = w + t2;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, fallback lattice orientation.
+	 */
+	public static float noise4_Fallback(long seed, double x, double y, double z, double w) {
+
+		// Get points for A4 lattice
+		double s = SKEW_4D * (x + y + z + w);
+		double xs = x + s, ys = y + s, zs = z + s, ws = w + s;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise base.
+	 */
+	private static float noise4_UnskewedBase(long seed, double xs, double ys, double zs, double ws) {
+
+		// Get base points and offsets
+		int xsb = fastFloor(xs), ysb = fastFloor(ys), zsb = fastFloor(zs), wsb = fastFloor(ws);
+		float xsi = (float)(xs - xsb), ysi = (float)(ys - ysb), zsi = (float)(zs - zsb), wsi = (float)(ws - wsb);
+
+		// Determine which lattice we can be confident has a contributing point its corresponding cell's base simplex.
+		// We only look at the spaces between the diagonal planes. This proved effective in all of my tests.
+		float siSum = (xsi + ysi) + (zsi + wsi);
+		int startingLattice = (int)(siSum * 1.25);
+
+		// Offset for seed based on first lattice copy.
+		seed += startingLattice * SEED_OFFSET_4D;
+
+		// Offset for lattice point relative positions (skewed)
+		float startingLatticeOffset = startingLattice * -LATTICE_STEP_4D;
+		xsi += startingLatticeOffset; ysi += startingLatticeOffset; zsi += startingLatticeOffset; wsi += startingLatticeOffset;
+
+		// Prep for vertex contributions.
+		float ssi = (siSum + startingLatticeOffset * 4) * UNSKEW_4D;
+
+		// Prime pre-multiplication for hash.
+		long xsvp = xsb * PRIME_X, ysvp = ysb * PRIME_Y, zsvp = zsb * PRIME_Z, wsvp = wsb * PRIME_W;
+
+		// Five points to add, total, from five copies of the A4 lattice.
+		float value = 0;
+		for (int i = 0; ; i++) {
+
+			// Next point is the closest vertex on the 4-simplex whose base vertex is the aforementioned vertex.
+			double score0 = 1.0 + ssi * (-1.0 / UNSKEW_4D); // Seems slightly faster than 1.0-xsi-ysi-zsi-wsi
+			if (xsi >= ysi && xsi >= zsi && xsi >= wsi && xsi >= score0) {
+				xsvp += PRIME_X;
+				xsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (ysi > xsi && ysi >= zsi && ysi >= wsi && ysi >= score0) {
+				ysvp += PRIME_Y;
+				ysi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (zsi > xsi && zsi > ysi && zsi >= wsi && zsi >= score0) {
+				zsvp += PRIME_Z;
+				zsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (wsi > xsi && wsi > ysi && wsi > zsi && wsi >= score0) {
+				wsvp += PRIME_W;
+				wsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+
+			// gradient contribution with falloff.
+			float dx = xsi + ssi, dy = ysi + ssi, dz = zsi + ssi, dw = wsi + ssi;
+			float a = (dx * dx + dy * dy) + (dz * dz + dw * dw);
+			if (a < RSQUARED_4D) {
+				a -= RSQUARED_4D;
+				a *= a;
+				value += a * a * grad(seed, xsvp, ysvp, zsvp, wsvp, dx, dy, dz, dw);
+			}
+
+			// Break from loop if we're done, skipping updates below.
+			if (i == 4) break;
+
+			// Update for next lattice copy shifted down by <-0.2, -0.2, -0.2, -0.2>.
+			xsi += LATTICE_STEP_4D; ysi += LATTICE_STEP_4D; zsi += LATTICE_STEP_4D; wsi += LATTICE_STEP_4D;
+			ssi += LATTICE_STEP_4D * 4 * UNSKEW_4D;
+			seed -= SEED_OFFSET_4D;
+
+			// Because we don't always start on the same lattice copy, there's a special reset case.
+			if (i == startingLattice) {
+				xsvp -= PRIME_X;
+				ysvp -= PRIME_Y;
+				zsvp -= PRIME_Z;
+				wsvp -= PRIME_W;
+				seed += SEED_OFFSET_4D * 5;
+			}
+		}
+
+		return value;
+	}
+
+	/*
+	 * Utility
+	 */
+
+	private static float grad(long seed, long xsvp, long ysvp, float dx, float dy) {
+		long hash = seed ^ xsvp ^ ysvp;
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_2D_EXPONENT + 1);
+		int gi = (int)hash & ((N_GRADS_2D - 1) << 1);
+		return GRADIENTS_2D[gi | 0] * dx + GRADIENTS_2D[gi | 1] * dy;
+	}
+
+	private static float grad(long seed, long xrvp, long yrvp, long zrvp, float dx, float dy, float dz) {
+		long hash = (seed ^ xrvp) ^ (yrvp ^ zrvp);
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_3D_EXPONENT + 2);
+		int gi = (int)hash & ((N_GRADS_3D - 1) << 2);
+		return GRADIENTS_3D[gi | 0] * dx + GRADIENTS_3D[gi | 1] * dy + GRADIENTS_3D[gi | 2] * dz;
+	}
+
+	private static float grad(long seed, long xsvp, long ysvp, long zsvp, long wsvp, float dx, float dy, float dz, float dw) {
+		long hash = seed ^ (xsvp ^ ysvp) ^ (zsvp ^ wsvp);
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_4D_EXPONENT + 2);
+		int gi = (int)hash & ((N_GRADS_4D - 1) << 2);
+		return (GRADIENTS_4D[gi | 0] * dx + GRADIENTS_4D[gi | 1] * dy) + (GRADIENTS_4D[gi | 2] * dz + GRADIENTS_4D[gi | 3] * dw);
+	}
+
+	private static int fastFloor(double x) {
+		int xi = (int)x;
+		return x < xi ? xi - 1 : xi;
+	}
+
+	private static int fastRound(double x) {
+		return x < 0 ? (int)(x - 0.5) : (int)(x + 0.5);
+	}
+
+	/*
+	 * gradients
+	 */
+
+	private static float[] GRADIENTS_2D;
+	private static float[] GRADIENTS_3D;
+	private static float[] GRADIENTS_4D;
+	static {
+
+		GRADIENTS_2D = new float[N_GRADS_2D * 2];
+		float[] grad2 = {
+			 0.38268343236509f,   0.923879532511287f,
+			 0.923879532511287f,  0.38268343236509f,
+			 0.923879532511287f, -0.38268343236509f,
+			 0.38268343236509f,  -0.923879532511287f,
+			-0.38268343236509f,  -0.923879532511287f,
+			-0.923879532511287f, -0.38268343236509f,
+			-0.923879532511287f,  0.38268343236509f,
+			-0.38268343236509f,   0.923879532511287f,
+			//-------------------------------------//
+			 0.130526192220052f,  0.99144486137381f,
+			 0.608761429008721f,  0.793353340291235f,
+			 0.793353340291235f,  0.608761429008721f,
+			 0.99144486137381f,   0.130526192220051f,
+			 0.99144486137381f,  -0.130526192220051f,
+			 0.793353340291235f, -0.60876142900872f,
+			 0.608761429008721f, -0.793353340291235f,
+			 0.130526192220052f, -0.99144486137381f,
+			-0.130526192220052f, -0.99144486137381f,
+			-0.608761429008721f, -0.793353340291235f,
+			-0.793353340291235f, -0.608761429008721f,
+			-0.99144486137381f,  -0.130526192220052f,
+			-0.99144486137381f,   0.130526192220051f,
+			-0.793353340291235f,  0.608761429008721f,
+			-0.608761429008721f,  0.793353340291235f,
+			-0.130526192220052f,  0.99144486137381f,
+		};
+		for (int i = 0; i < grad2.length; i++) {
+			grad2[i] = (float)(grad2[i] / NORMALIZER_2D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_2D.length; i++, j++) {
+			if (j == grad2.length) j = 0;
+			GRADIENTS_2D[i] = grad2[j];
+		}
+
+		GRADIENTS_3D = new float[N_GRADS_3D * 4];
+		float[] grad3 = {
+			 2.22474487139f,	   2.22474487139f,	  -1.0f,				 0.0f,
+			 2.22474487139f,	   2.22474487139f,	   1.0f,				 0.0f,
+			 3.0862664687972017f,  1.1721513422464978f,  0.0f,				 0.0f,
+			 1.1721513422464978f,  3.0862664687972017f,  0.0f,				 0.0f,
+			-2.22474487139f,	   2.22474487139f,	  -1.0f,				 0.0f,
+			-2.22474487139f,	   2.22474487139f,	   1.0f,				 0.0f,
+			-1.1721513422464978f,  3.0862664687972017f,  0.0f,				 0.0f,
+			-3.0862664687972017f,  1.1721513422464978f,  0.0f,				 0.0f,
+			-1.0f,				-2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 1.0f,				-2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 0.0f,				-3.0862664687972017f, -1.1721513422464978f,  0.0f,
+			 0.0f,				-1.1721513422464978f, -3.0862664687972017f,  0.0f,
+			-1.0f,				-2.22474487139f,	   2.22474487139f,	   0.0f,
+			 1.0f,				-2.22474487139f,	   2.22474487139f,	   0.0f,
+			 0.0f,				-1.1721513422464978f,  3.0862664687972017f,  0.0f,
+			 0.0f,				-3.0862664687972017f,  1.1721513422464978f,  0.0f,
+			//--------------------------------------------------------------------//
+			-2.22474487139f,	  -2.22474487139f,	  -1.0f,				 0.0f,
+			-2.22474487139f,	  -2.22474487139f,	   1.0f,				 0.0f,
+			-3.0862664687972017f, -1.1721513422464978f,  0.0f,				 0.0f,
+			-1.1721513422464978f, -3.0862664687972017f,  0.0f,				 0.0f,
+			-2.22474487139f,	  -1.0f,				-2.22474487139f,	   0.0f,
+			-2.22474487139f,	   1.0f,				-2.22474487139f,	   0.0f,
+			-1.1721513422464978f,  0.0f,				-3.0862664687972017f,  0.0f,
+			-3.0862664687972017f,  0.0f,				-1.1721513422464978f,  0.0f,
+			-2.22474487139f,	  -1.0f,				 2.22474487139f,	   0.0f,
+			-2.22474487139f,	   1.0f,				 2.22474487139f,	   0.0f,
+			-3.0862664687972017f,  0.0f,				 1.1721513422464978f,  0.0f,
+			-1.1721513422464978f,  0.0f,				 3.0862664687972017f,  0.0f,
+			-1.0f,				 2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 1.0f,				 2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 0.0f,				 1.1721513422464978f, -3.0862664687972017f,  0.0f,
+			 0.0f,				 3.0862664687972017f, -1.1721513422464978f,  0.0f,
+			-1.0f,				 2.22474487139f,	   2.22474487139f,	   0.0f,
+			 1.0f,				 2.22474487139f,	   2.22474487139f,	   0.0f,
+			 0.0f,				 3.0862664687972017f,  1.1721513422464978f,  0.0f,
+			 0.0f,				 1.1721513422464978f,  3.0862664687972017f,  0.0f,
+			 2.22474487139f,	  -2.22474487139f,	  -1.0f,				 0.0f,
+			 2.22474487139f,	  -2.22474487139f,	   1.0f,				 0.0f,
+			 1.1721513422464978f, -3.0862664687972017f,  0.0f,				 0.0f,
+			 3.0862664687972017f, -1.1721513422464978f,  0.0f,				 0.0f,
+			 2.22474487139f,	  -1.0f,				-2.22474487139f,	   0.0f,
+			 2.22474487139f,	   1.0f,				-2.22474487139f,	   0.0f,
+			 3.0862664687972017f,  0.0f,				-1.1721513422464978f,  0.0f,
+			 1.1721513422464978f,  0.0f,				-3.0862664687972017f,  0.0f,
+			 2.22474487139f,	  -1.0f,				 2.22474487139f,	   0.0f,
+			 2.22474487139f,	   1.0f,				 2.22474487139f,	   0.0f,
+			 1.1721513422464978f,  0.0f,				 3.0862664687972017f,  0.0f,
+			 3.0862664687972017f,  0.0f,				 1.1721513422464978f,  0.0f,
+		};
+		for (int i = 0; i < grad3.length; i++) {
+			grad3[i] = (float)(grad3[i] / NORMALIZER_3D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_3D.length; i++, j++) {
+			if (j == grad3.length) j = 0;
+			GRADIENTS_3D[i] = grad3[j];
+		}
+
+		GRADIENTS_4D = new float[N_GRADS_4D * 4];
+		float[] grad4 = {
+			-0.6740059517812944f,   -0.3239847771997537f,   -0.3239847771997537f,	0.5794684678643381f,
+			-0.7504883828755602f,   -0.4004672082940195f,	0.15296486218853164f,   0.5029860367700724f,
+			-0.7504883828755602f,	0.15296486218853164f,  -0.4004672082940195f,	0.5029860367700724f,
+			-0.8828161875373585f,	0.08164729285680945f,   0.08164729285680945f,   0.4553054119602712f,
+			-0.4553054119602712f,   -0.08164729285680945f,  -0.08164729285680945f,   0.8828161875373585f,
+			-0.5029860367700724f,   -0.15296486218853164f,   0.4004672082940195f,	0.7504883828755602f,
+			-0.5029860367700724f,	0.4004672082940195f,   -0.15296486218853164f,   0.7504883828755602f,
+			-0.5794684678643381f,	0.3239847771997537f,	0.3239847771997537f,	0.6740059517812944f,
+			-0.6740059517812944f,   -0.3239847771997537f,	0.5794684678643381f,   -0.3239847771997537f,
+			-0.7504883828755602f,   -0.4004672082940195f,	0.5029860367700724f,	0.15296486218853164f,
+			-0.7504883828755602f,	0.15296486218853164f,   0.5029860367700724f,   -0.4004672082940195f,
+			-0.8828161875373585f,	0.08164729285680945f,   0.4553054119602712f,	0.08164729285680945f,
+			-0.4553054119602712f,   -0.08164729285680945f,   0.8828161875373585f,   -0.08164729285680945f,
+			-0.5029860367700724f,   -0.15296486218853164f,   0.7504883828755602f,	0.4004672082940195f,
+			-0.5029860367700724f,	0.4004672082940195f,	0.7504883828755602f,   -0.15296486218853164f,
+			-0.5794684678643381f,	0.3239847771997537f,	0.6740059517812944f,	0.3239847771997537f,
+			-0.6740059517812944f,	0.5794684678643381f,   -0.3239847771997537f,   -0.3239847771997537f,
+			-0.7504883828755602f,	0.5029860367700724f,   -0.4004672082940195f,	0.15296486218853164f,
+			-0.7504883828755602f,	0.5029860367700724f,	0.15296486218853164f,  -0.4004672082940195f,
+			-0.8828161875373585f,	0.4553054119602712f,	0.08164729285680945f,   0.08164729285680945f,
+			-0.4553054119602712f,	0.8828161875373585f,   -0.08164729285680945f,  -0.08164729285680945f,
+			-0.5029860367700724f,	0.7504883828755602f,   -0.15296486218853164f,   0.4004672082940195f,
+			-0.5029860367700724f,	0.7504883828755602f,	0.4004672082940195f,   -0.15296486218853164f,
+			-0.5794684678643381f,	0.6740059517812944f,	0.3239847771997537f,	0.3239847771997537f,
+			 0.5794684678643381f,   -0.6740059517812944f,   -0.3239847771997537f,   -0.3239847771997537f,
+			 0.5029860367700724f,   -0.7504883828755602f,   -0.4004672082940195f,	0.15296486218853164f,
+			 0.5029860367700724f,   -0.7504883828755602f,	0.15296486218853164f,  -0.4004672082940195f,
+			 0.4553054119602712f,   -0.8828161875373585f,	0.08164729285680945f,   0.08164729285680945f,
+			 0.8828161875373585f,   -0.4553054119602712f,   -0.08164729285680945f,  -0.08164729285680945f,
+			 0.7504883828755602f,   -0.5029860367700724f,   -0.15296486218853164f,   0.4004672082940195f,
+			 0.7504883828755602f,   -0.5029860367700724f,	0.4004672082940195f,   -0.15296486218853164f,
+			 0.6740059517812944f,   -0.5794684678643381f,	0.3239847771997537f,	0.3239847771997537f,
+			//------------------------------------------------------------------------------------------//
+			-0.753341017856078f,	-0.37968289875261624f,  -0.37968289875261624f,  -0.37968289875261624f,
+			-0.7821684431180708f,   -0.4321472685365301f,   -0.4321472685365301f,	0.12128480194602098f,
+			-0.7821684431180708f,   -0.4321472685365301f,	0.12128480194602098f,  -0.4321472685365301f,
+			-0.7821684431180708f,	0.12128480194602098f,  -0.4321472685365301f,   -0.4321472685365301f,
+			-0.8586508742123365f,   -0.508629699630796f,	 0.044802370851755174f,  0.044802370851755174f,
+			-0.8586508742123365f,	0.044802370851755174f, -0.508629699630796f,	 0.044802370851755174f,
+			-0.8586508742123365f,	0.044802370851755174f,  0.044802370851755174f, -0.508629699630796f,
+			-0.9982828964265062f,   -0.03381941603233842f,  -0.03381941603233842f,  -0.03381941603233842f,
+			-0.37968289875261624f,  -0.753341017856078f,	-0.37968289875261624f,  -0.37968289875261624f,
+			-0.4321472685365301f,   -0.7821684431180708f,   -0.4321472685365301f,	0.12128480194602098f,
+			-0.4321472685365301f,   -0.7821684431180708f,	0.12128480194602098f,  -0.4321472685365301f,
+			 0.12128480194602098f,  -0.7821684431180708f,   -0.4321472685365301f,   -0.4321472685365301f,
+			-0.508629699630796f,	-0.8586508742123365f,	0.044802370851755174f,  0.044802370851755174f,
+			 0.044802370851755174f, -0.8586508742123365f,   -0.508629699630796f,	 0.044802370851755174f,
+			 0.044802370851755174f, -0.8586508742123365f,	0.044802370851755174f, -0.508629699630796f,
+			-0.03381941603233842f,  -0.9982828964265062f,   -0.03381941603233842f,  -0.03381941603233842f,
+			-0.37968289875261624f,  -0.37968289875261624f,  -0.753341017856078f,	-0.37968289875261624f,
+			-0.4321472685365301f,   -0.4321472685365301f,   -0.7821684431180708f,	0.12128480194602098f,
+			-0.4321472685365301f,	0.12128480194602098f,  -0.7821684431180708f,   -0.4321472685365301f,
+			 0.12128480194602098f,  -0.4321472685365301f,   -0.7821684431180708f,   -0.4321472685365301f,
+			-0.508629699630796f,	 0.044802370851755174f, -0.8586508742123365f,	0.044802370851755174f,
+			 0.044802370851755174f, -0.508629699630796f,	-0.8586508742123365f,	0.044802370851755174f,
+			 0.044802370851755174f,  0.044802370851755174f, -0.8586508742123365f,   -0.508629699630796f,
+			-0.03381941603233842f,  -0.03381941603233842f,  -0.9982828964265062f,   -0.03381941603233842f,
+			-0.37968289875261624f,  -0.37968289875261624f,  -0.37968289875261624f,  -0.753341017856078f,
+			-0.4321472685365301f,   -0.4321472685365301f,	0.12128480194602098f,  -0.7821684431180708f,
+			-0.4321472685365301f,	0.12128480194602098f,  -0.4321472685365301f,   -0.7821684431180708f,
+			 0.12128480194602098f,  -0.4321472685365301f,   -0.4321472685365301f,   -0.7821684431180708f,
+			-0.508629699630796f,	 0.044802370851755174f,  0.044802370851755174f, -0.8586508742123365f,
+			 0.044802370851755174f, -0.508629699630796f,	 0.044802370851755174f, -0.8586508742123365f,
+			 0.044802370851755174f,  0.044802370851755174f, -0.508629699630796f,	-0.8586508742123365f,
+			-0.03381941603233842f,  -0.03381941603233842f,  -0.03381941603233842f,  -0.9982828964265062f,
+			-0.3239847771997537f,   -0.6740059517812944f,   -0.3239847771997537f,	0.5794684678643381f,
+			-0.4004672082940195f,   -0.7504883828755602f,	0.15296486218853164f,   0.5029860367700724f,
+			 0.15296486218853164f,  -0.7504883828755602f,   -0.4004672082940195f,	0.5029860367700724f,
+			 0.08164729285680945f,  -0.8828161875373585f,	0.08164729285680945f,   0.4553054119602712f,
+			-0.08164729285680945f,  -0.4553054119602712f,   -0.08164729285680945f,   0.8828161875373585f,
+			-0.15296486218853164f,  -0.5029860367700724f,	0.4004672082940195f,	0.7504883828755602f,
+			 0.4004672082940195f,   -0.5029860367700724f,   -0.15296486218853164f,   0.7504883828755602f,
+			 0.3239847771997537f,   -0.5794684678643381f,	0.3239847771997537f,	0.6740059517812944f,
+			-0.3239847771997537f,   -0.3239847771997537f,   -0.6740059517812944f,	0.5794684678643381f,
+			-0.4004672082940195f,	0.15296486218853164f,  -0.7504883828755602f,	0.5029860367700724f,
+			 0.15296486218853164f,  -0.4004672082940195f,   -0.7504883828755602f,	0.5029860367700724f,
+			 0.08164729285680945f,   0.08164729285680945f,  -0.8828161875373585f,	0.4553054119602712f,
+			-0.08164729285680945f,  -0.08164729285680945f,  -0.4553054119602712f,	0.8828161875373585f,
+			-0.15296486218853164f,   0.4004672082940195f,   -0.5029860367700724f,	0.7504883828755602f,
+			 0.4004672082940195f,   -0.15296486218853164f,  -0.5029860367700724f,	0.7504883828755602f,
+			 0.3239847771997537f,	0.3239847771997537f,   -0.5794684678643381f,	0.6740059517812944f,
+			-0.3239847771997537f,   -0.6740059517812944f,	0.5794684678643381f,   -0.3239847771997537f,
+			-0.4004672082940195f,   -0.7504883828755602f,	0.5029860367700724f,	0.15296486218853164f,
+			 0.15296486218853164f,  -0.7504883828755602f,	0.5029860367700724f,   -0.4004672082940195f,
+			 0.08164729285680945f,  -0.8828161875373585f,	0.4553054119602712f,	0.08164729285680945f,
+			-0.08164729285680945f,  -0.4553054119602712f,	0.8828161875373585f,   -0.08164729285680945f,
+			-0.15296486218853164f,  -0.5029860367700724f,	0.7504883828755602f,	0.4004672082940195f,
+			 0.4004672082940195f,   -0.5029860367700724f,	0.7504883828755602f,   -0.15296486218853164f,
+			 0.3239847771997537f,   -0.5794684678643381f,	0.6740059517812944f,	0.3239847771997537f,
+			-0.3239847771997537f,   -0.3239847771997537f,	0.5794684678643381f,   -0.6740059517812944f,
+			-0.4004672082940195f,	0.15296486218853164f,   0.5029860367700724f,   -0.7504883828755602f,
+			 0.15296486218853164f,  -0.4004672082940195f,	0.5029860367700724f,   -0.7504883828755602f,
+			 0.08164729285680945f,   0.08164729285680945f,   0.4553054119602712f,   -0.8828161875373585f,
+			-0.08164729285680945f,  -0.08164729285680945f,   0.8828161875373585f,   -0.4553054119602712f,
+			-0.15296486218853164f,   0.4004672082940195f,	0.7504883828755602f,   -0.5029860367700724f,
+			 0.4004672082940195f,   -0.15296486218853164f,   0.7504883828755602f,   -0.5029860367700724f,
+			 0.3239847771997537f,	0.3239847771997537f,	0.6740059517812944f,   -0.5794684678643381f,
+			-0.3239847771997537f,	0.5794684678643381f,   -0.6740059517812944f,   -0.3239847771997537f,
+			-0.4004672082940195f,	0.5029860367700724f,   -0.7504883828755602f,	0.15296486218853164f,
+			 0.15296486218853164f,   0.5029860367700724f,   -0.7504883828755602f,   -0.4004672082940195f,
+			 0.08164729285680945f,   0.4553054119602712f,   -0.8828161875373585f,	0.08164729285680945f,
+			-0.08164729285680945f,   0.8828161875373585f,   -0.4553054119602712f,   -0.08164729285680945f,
+			-0.15296486218853164f,   0.7504883828755602f,   -0.5029860367700724f,	0.4004672082940195f,
+			 0.4004672082940195f,	0.7504883828755602f,   -0.5029860367700724f,   -0.15296486218853164f,
+			 0.3239847771997537f,	0.6740059517812944f,   -0.5794684678643381f,	0.3239847771997537f,
+			-0.3239847771997537f,	0.5794684678643381f,   -0.3239847771997537f,   -0.6740059517812944f,
+			-0.4004672082940195f,	0.5029860367700724f,	0.15296486218853164f,  -0.7504883828755602f,
+			 0.15296486218853164f,   0.5029860367700724f,   -0.4004672082940195f,   -0.7504883828755602f,
+			 0.08164729285680945f,   0.4553054119602712f,	0.08164729285680945f,  -0.8828161875373585f,
+			-0.08164729285680945f,   0.8828161875373585f,   -0.08164729285680945f,  -0.4553054119602712f,
+			-0.15296486218853164f,   0.7504883828755602f,	0.4004672082940195f,   -0.5029860367700724f,
+			 0.4004672082940195f,	0.7504883828755602f,   -0.15296486218853164f,  -0.5029860367700724f,
+			 0.3239847771997537f,	0.6740059517812944f,	0.3239847771997537f,   -0.5794684678643381f,
+			 0.5794684678643381f,   -0.3239847771997537f,   -0.6740059517812944f,   -0.3239847771997537f,
+			 0.5029860367700724f,   -0.4004672082940195f,   -0.7504883828755602f,	0.15296486218853164f,
+			 0.5029860367700724f,	0.15296486218853164f,  -0.7504883828755602f,   -0.4004672082940195f,
+			 0.4553054119602712f,	0.08164729285680945f,  -0.8828161875373585f,	0.08164729285680945f,
+			 0.8828161875373585f,   -0.08164729285680945f,  -0.4553054119602712f,   -0.08164729285680945f,
+			 0.7504883828755602f,   -0.15296486218853164f,  -0.5029860367700724f,	0.4004672082940195f,
+			 0.7504883828755602f,	0.4004672082940195f,   -0.5029860367700724f,   -0.15296486218853164f,
+			 0.6740059517812944f,	0.3239847771997537f,   -0.5794684678643381f,	0.3239847771997537f,
+			 0.5794684678643381f,   -0.3239847771997537f,   -0.3239847771997537f,   -0.6740059517812944f,
+			 0.5029860367700724f,   -0.4004672082940195f,	0.15296486218853164f,  -0.7504883828755602f,
+			 0.5029860367700724f,	0.15296486218853164f,  -0.4004672082940195f,   -0.7504883828755602f,
+			 0.4553054119602712f,	0.08164729285680945f,   0.08164729285680945f,  -0.8828161875373585f,
+			 0.8828161875373585f,   -0.08164729285680945f,  -0.08164729285680945f,  -0.4553054119602712f,
+			 0.7504883828755602f,   -0.15296486218853164f,   0.4004672082940195f,   -0.5029860367700724f,
+			 0.7504883828755602f,	0.4004672082940195f,   -0.15296486218853164f,  -0.5029860367700724f,
+			 0.6740059517812944f,	0.3239847771997537f,	0.3239847771997537f,   -0.5794684678643381f,
+			 0.03381941603233842f,   0.03381941603233842f,   0.03381941603233842f,   0.9982828964265062f,
+			-0.044802370851755174f, -0.044802370851755174f,  0.508629699630796f,	 0.8586508742123365f,
+			-0.044802370851755174f,  0.508629699630796f,	-0.044802370851755174f,  0.8586508742123365f,
+			-0.12128480194602098f,   0.4321472685365301f,	0.4321472685365301f,	0.7821684431180708f,
+			 0.508629699630796f,	-0.044802370851755174f, -0.044802370851755174f,  0.8586508742123365f,
+			 0.4321472685365301f,   -0.12128480194602098f,   0.4321472685365301f,	0.7821684431180708f,
+			 0.4321472685365301f,	0.4321472685365301f,   -0.12128480194602098f,   0.7821684431180708f,
+			 0.37968289875261624f,   0.37968289875261624f,   0.37968289875261624f,   0.753341017856078f,
+			 0.03381941603233842f,   0.03381941603233842f,   0.9982828964265062f,	0.03381941603233842f,
+			-0.044802370851755174f,  0.044802370851755174f,  0.8586508742123365f,	0.508629699630796f,
+			-0.044802370851755174f,  0.508629699630796f,	 0.8586508742123365f,   -0.044802370851755174f,
+			-0.12128480194602098f,   0.4321472685365301f,	0.7821684431180708f,	0.4321472685365301f,
+			 0.508629699630796f,	-0.044802370851755174f,  0.8586508742123365f,   -0.044802370851755174f,
+			 0.4321472685365301f,   -0.12128480194602098f,   0.7821684431180708f,	0.4321472685365301f,
+			 0.4321472685365301f,	0.4321472685365301f,	0.7821684431180708f,   -0.12128480194602098f,
+			 0.37968289875261624f,   0.37968289875261624f,   0.753341017856078f,	 0.37968289875261624f,
+			 0.03381941603233842f,   0.9982828964265062f,	0.03381941603233842f,   0.03381941603233842f,
+			-0.044802370851755174f,  0.8586508742123365f,   -0.044802370851755174f,  0.508629699630796f,
+			-0.044802370851755174f,  0.8586508742123365f,	0.508629699630796f,	-0.044802370851755174f,
+			-0.12128480194602098f,   0.7821684431180708f,	0.4321472685365301f,	0.4321472685365301f,
+			 0.508629699630796f,	 0.8586508742123365f,   -0.044802370851755174f, -0.044802370851755174f,
+			 0.4321472685365301f,	0.7821684431180708f,   -0.12128480194602098f,   0.4321472685365301f,
+			 0.4321472685365301f,	0.7821684431180708f,	0.4321472685365301f,   -0.12128480194602098f,
+			 0.37968289875261624f,   0.753341017856078f,	 0.37968289875261624f,   0.37968289875261624f,
+			 0.9982828964265062f,	0.03381941603233842f,   0.03381941603233842f,   0.03381941603233842f,
+			 0.8586508742123365f,   -0.044802370851755174f, -0.044802370851755174f,  0.508629699630796f,
+			 0.8586508742123365f,   -0.044802370851755174f,  0.508629699630796f,	-0.044802370851755174f,
+			 0.7821684431180708f,   -0.12128480194602098f,   0.4321472685365301f,	0.4321472685365301f,
+			 0.8586508742123365f,	0.508629699630796f,	-0.044802370851755174f, -0.044802370851755174f,
+			 0.7821684431180708f,	0.4321472685365301f,   -0.12128480194602098f,   0.4321472685365301f,
+			 0.7821684431180708f,	0.4321472685365301f,	0.4321472685365301f,   -0.12128480194602098f,
+			 0.753341017856078f,	 0.37968289875261624f,   0.37968289875261624f,   0.37968289875261624f,
+		};
+		for (int i = 0; i < grad4.length; i++) {
+			grad4[i] = (float)(grad4[i] / NORMALIZER_4D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_4D.length; i++, j++) {
+			if (j == grad4.length) j = 0;
+			GRADIENTS_4D[i] = grad4[j];
+		}
+	}
+}
--- net/minecraft/src/AxisAlignedBB.java
+++ net/minecraft/src/AxisAlignedBB.java
@@ -13,216 +13,182 @@
 	public double maxY;
 	public double maxZ;
 
-	public static AxisAlignedBB getBoundingBox(double var0, double var2, double var4, double var6, double var8, double var10) {
-		return new AxisAlignedBB(var0, var2, var4, var6, var8, var10);
+	public static AxisAlignedBB getBoundingBox(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
 	}
 
 	public static void clearBoundingBoxPool() {
 		numBoundingBoxesInUse = 0;
 	}
 
-	public static AxisAlignedBB getBoundingBoxFromPool(double var0, double var2, double var4, double var6, double var8, double var10) {
+	public static AxisAlignedBB getBoundingBoxFromPool(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
 		if(numBoundingBoxesInUse >= boundingBoxes.size()) {
 			boundingBoxes.add(getBoundingBox(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D));
 		}
 
-		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(var0, var2, var4, var6, var8, var10);
-	}
-
-	private AxisAlignedBB(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-	}
-
-	public AxisAlignedBB setBounds(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-		return this;
-	}
-
-	public AxisAlignedBB addCoord(double var1, double var3, double var5) {
-		double var7 = this.minX;
-		double var9 = this.minY;
-		double var11 = this.minZ;
-		double var13 = this.maxX;
-		double var15 = this.maxY;
-		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 += var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 += var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 += var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 += var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 += var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 += var5;
-		}
-
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB expand(double var1, double var3, double var5) {
-		double var7 = this.minX - var1;
-		double var9 = this.minY - var3;
-		double var11 = this.minZ - var5;
-		double var13 = this.maxX + var1;
-		double var15 = this.maxY + var3;
-		double var17 = this.maxZ + var5;
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB getOffsetBoundingBox(double var1, double var3, double var5) {
-		return getBoundingBoxFromPool(this.minX + var1, this.minY + var3, this.minZ + var5, this.maxX + var1, this.maxY + var3, this.maxZ + var5);
-	}
-
-	public double calculateXOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxY > this.minY && var1.minY < this.maxY) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxX <= this.minX) {
-					var4 = this.minX - var1.maxX;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minX >= this.maxX) {
-					var4 = this.maxX - var1.minX;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateYOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxY <= this.minY) {
-					var4 = this.minY - var1.maxY;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minY >= this.maxY) {
-					var4 = this.maxY - var1.minY;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateZOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxY > this.minY && var1.minY < this.maxY) {
-				double var4;
-				if(var2 > 0.0D && var1.maxZ <= this.minZ) {
-					var4 = this.minZ - var1.maxZ;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minZ >= this.maxZ) {
-					var4 = this.maxZ - var1.minZ;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public boolean intersectsWith(AxisAlignedBB var1) {
-		return var1.maxX > this.minX && var1.minX < this.maxX ? (var1.maxY > this.minY && var1.minY < this.maxY ? var1.maxZ > this.minZ && var1.minZ < this.maxZ : false) : false;
-	}
-
-	public AxisAlignedBB offset(double var1, double var3, double var5) {
-		this.minX += var1;
-		this.minY += var3;
-		this.minZ += var5;
-		this.maxX += var1;
-		this.maxY += var3;
-		this.maxZ += var5;
-		return this;
-	}
-
-	public AxisAlignedBB removeCoord(double var1, double var3, double var5) {
-		double var7 = this.minX;
-		double var9 = this.minY;
-		double var11 = this.minZ;
-		double var13 = this.maxX;
-		double var15 = this.maxY;
-		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 -= var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 -= var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 -= var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 -= var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 -= var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 -= var5;
-		}
-
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
+		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(minX, minY, minZ, maxX, maxY, maxZ);
+	}
+
+	private AxisAlignedBB(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
+	}
+
+	public AxisAlignedBB setBounds(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
+		return this;
+	}
+
+	public AxisAlignedBB addCoord(double x, double y, double z) {
+		double var7 = this.minX;
+		double var9 = this.minY;
+		double var11 = this.minZ;
+		double var13 = this.maxX;
+		double var15 = this.maxY;
+		double var17 = this.maxZ;
+		if(x < 0.0D) {
+			var7 += x;
+		}
+
+		if(x > 0.0D) {
+			var13 += x;
+		}
+
+		if(y < 0.0D) {
+			var9 += y;
+		}
+
+		if(y > 0.0D) {
+			var15 += y;
+		}
+
+		if(z < 0.0D) {
+			var11 += z;
+		}
+
+		if(z > 0.0D) {
+			var17 += z;
+		}
+
+		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
+	}
+
+	public AxisAlignedBB expand(double x, double y, double z) {
+		double var7 = this.minX - x;
+		double var9 = this.minY - y;
+		double var11 = this.minZ - z;
+		double var13 = this.maxX + x;
+		double var15 = this.maxY + y;
+		double var17 = this.maxZ + z;
+		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
+	}
+
+	public AxisAlignedBB getOffsetBoundingBox(double offsetX, double offsetY, double offsetZ) {
+		return getBoundingBoxFromPool(this.minX + offsetX, this.minY + offsetY, this.minZ + offsetZ, this.maxX + offsetX, this.maxY + offsetY, this.maxZ + offsetZ);
+	}
+
+	public double calculateXOffset(AxisAlignedBB aabb, double offsetX) {
+		if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double var4;
+				if(offsetX > 0.0D && aabb.maxX <= this.minX) {
+					var4 = this.minX - aabb.maxX;
+					if(var4 < offsetX) {
+						offsetX = var4;
+					}
+				}
+
+				if(offsetX < 0.0D && aabb.minX >= this.maxX) {
+					var4 = this.maxX - aabb.minX;
+					if(var4 > offsetX) {
+						offsetX = var4;
+					}
+				}
+
+				return offsetX;
+			} else {
+				return offsetX;
+			}
+		} else {
+			return offsetX;
+		}
+	}
+
+	public double calculateYOffset(AxisAlignedBB aabb, double offsetY) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double var4;
+				if(offsetY > 0.0D && aabb.maxY <= this.minY) {
+					var4 = this.minY - aabb.maxY;
+					if(var4 < offsetY) {
+						offsetY = var4;
+					}
+				}
+
+				if(offsetY < 0.0D && aabb.minY >= this.maxY) {
+					var4 = this.maxY - aabb.minY;
+					if(var4 > offsetY) {
+						offsetY = var4;
+					}
+				}
+
+				return offsetY;
+			} else {
+				return offsetY;
+			}
+		} else {
+			return offsetY;
+		}
+	}
+
+	public double calculateZOffset(AxisAlignedBB aabb, double offsetZ) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+				double var4;
+				if(offsetZ > 0.0D && aabb.maxZ <= this.minZ) {
+					var4 = this.minZ - aabb.maxZ;
+					if(var4 < offsetZ) {
+						offsetZ = var4;
+					}
+				}
+
+				if(offsetZ < 0.0D && aabb.minZ >= this.maxZ) {
+					var4 = this.maxZ - aabb.minZ;
+					if(var4 > offsetZ) {
+						offsetZ = var4;
+					}
+				}
+
+				return offsetZ;
+			} else {
+				return offsetZ;
+			}
+		} else {
+			return offsetZ;
+		}
+	}
+
+	public boolean intersectsWith(AxisAlignedBB aabb) {
+		return aabb.maxX > this.minX && aabb.minX < this.maxX ? (aabb.maxY > this.minY && aabb.minY < this.maxY ? aabb.maxZ > this.minZ && aabb.minZ < this.maxZ : false) : false;
+	}
+
+	public AxisAlignedBB offset(double offsetX, double offsetY, double offsetZ) {
+		this.minX += offsetX;
+		this.minY += offsetY;
+		this.minZ += offsetZ;
+		this.maxX += offsetX;
+		this.maxY += offsetY;
+		this.maxZ += offsetZ;
+		return this;
 	}
 
 	public double getAverageEdgeLength() {
@@ -232,116 +198,150 @@
 		return (var1 + var3 + var5) / 3.0D;
 	}
 
+	public AxisAlignedBB removeCoord(double x, double y, double z) {
+		double var7 = this.minX;
+		double var9 = this.minY;
+		double var11 = this.minZ;
+		double var13 = this.maxX;
+		double var15 = this.maxY;
+		double var17 = this.maxZ;
+		if(x < 0.0D) {
+			var7 -= x;
+		}
+
+		if(x > 0.0D) {
+			var13 -= x;
+		}
+
+		if(y < 0.0D) {
+			var9 -= y;
+		}
+
+		if(y > 0.0D) {
+			var15 -= y;
+		}
+
+		if(z < 0.0D) {
+			var11 -= z;
+		}
+
+		if(z > 0.0D) {
+			var17 -= z;
+		}
+
+		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
+	}
+
 	public AxisAlignedBB copy() {
 		return getBoundingBoxFromPool(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
 	}
 
-	public MovingObjectPosition calculateIntercept(Vec3D var1, Vec3D var2) {
-		Vec3D var3 = var1.getIntermediateWithXValue(var2, this.minX);
-		Vec3D var4 = var1.getIntermediateWithXValue(var2, this.maxX);
-		Vec3D var5 = var1.getIntermediateWithYValue(var2, this.minY);
-		Vec3D var6 = var1.getIntermediateWithYValue(var2, this.maxY);
-		Vec3D var7 = var1.getIntermediateWithZValue(var2, this.minZ);
-		Vec3D var8 = var1.getIntermediateWithZValue(var2, this.maxZ);
-		if(!this.isVecInYZ(var3)) {
-			var3 = null;
-		}
-
-		if(!this.isVecInYZ(var4)) {
-			var4 = null;
-		}
-
-		if(!this.isVecInXZ(var5)) {
-			var5 = null;
-		}
-
-		if(!this.isVecInXZ(var6)) {
-			var6 = null;
-		}
-
-		if(!this.isVecInXY(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInXY(var8)) {
-			var8 = null;
-		}
-
-		Vec3D var9 = null;
-		if(var3 != null && (var9 == null || var1.squareDistanceTo(var3) < var1.squareDistanceTo(var9))) {
-			var9 = var3;
-		}
-
-		if(var4 != null && (var9 == null || var1.squareDistanceTo(var4) < var1.squareDistanceTo(var9))) {
-			var9 = var4;
-		}
-
-		if(var5 != null && (var9 == null || var1.squareDistanceTo(var5) < var1.squareDistanceTo(var9))) {
-			var9 = var5;
-		}
-
-		if(var6 != null && (var9 == null || var1.squareDistanceTo(var6) < var1.squareDistanceTo(var9))) {
-			var9 = var6;
-		}
-
-		if(var7 != null && (var9 == null || var1.squareDistanceTo(var7) < var1.squareDistanceTo(var9))) {
-			var9 = var7;
-		}
-
-		if(var8 != null && (var9 == null || var1.squareDistanceTo(var8) < var1.squareDistanceTo(var9))) {
-			var9 = var8;
-		}
-
-		if(var9 == null) {
+	public MovingObjectPosition calculateIntercept(Vec3D vector1, Vec3D vector2) {
+		Vec3D vec3D3 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D4 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D5 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D6 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D7 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D8 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInYZ(vec3D3)) {
+			vec3D3 = null;
+		}
+
+		if(!this.isVecInYZ(vec3D4)) {
+			vec3D4 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D5)) {
+			vec3D5 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D6)) {
+			vec3D6 = null;
+		}
+
+		if(!this.isVecInXY(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInXY(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		Vec3D vec3D9 = null;
+		if(vec3D3 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D3) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D3;
+		}
+
+		if(vec3D4 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D4) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D4;
+		}
+
+		if(vec3D5 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D5) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D5;
+		}
+
+		if(vec3D6 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D6) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D6;
+		}
+
+		if(vec3D7 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D7) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D8) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D8;
+		}
+
+		if(vec3D9 == null) {
 			return null;
 		} else {
 			byte var10 = -1;
-			if(var9 == var3) {
+			if(vec3D9 == vec3D3) {
 				var10 = 4;
 			}
 
-			if(var9 == var4) {
+			if(vec3D9 == vec3D4) {
 				var10 = 5;
 			}
 
-			if(var9 == var5) {
+			if(vec3D9 == vec3D5) {
 				var10 = 0;
 			}
 
-			if(var9 == var6) {
+			if(vec3D9 == vec3D6) {
 				var10 = 1;
 			}
 
-			if(var9 == var7) {
+			if(vec3D9 == vec3D7) {
 				var10 = 2;
 			}
 
-			if(var9 == var8) {
+			if(vec3D9 == vec3D8) {
 				var10 = 3;
 			}
 
-			return new MovingObjectPosition(0, 0, 0, var10, var9);
+			return new MovingObjectPosition(0, 0, 0, var10, vec3D9);
 		}
 	}
 
-	private boolean isVecInYZ(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXZ(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXY(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void setBB(AxisAlignedBB var1) {
-		this.minX = var1.minX;
-		this.minY = var1.minY;
-		this.minZ = var1.minZ;
-		this.maxX = var1.maxX;
-		this.maxY = var1.maxY;
-		this.maxZ = var1.maxZ;
+	private boolean isVecInYZ(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXZ(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXY(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void setBB(AxisAlignedBB aabb) {
+		this.minX = aabb.minX;
+		this.minY = aabb.minY;
+		this.minZ = aabb.minZ;
+		this.maxX = aabb.maxX;
+		this.maxY = aabb.maxY;
+		this.maxZ = aabb.maxZ;
 	}
 }
--- net/minecraft/src/Packet34EntityTeleport.java
+++ net/minecraft/src/Packet34EntityTeleport.java
@@ -15,44 +15,44 @@
 	public Packet34EntityTeleport() {
 	}
 
-	public Packet34EntityTeleport(Entity var1) {
-		this.entityId = var1.entityID;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public Packet34EntityTeleport(int var1, int var2, int var3, int var4, byte var5, byte var6) {
-		this.entityId = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.yaw = var5;
-		this.pitch = var6;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = (byte)var1.read();
-		this.pitch = (byte)var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.yaw);
-		var1.write(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntityTeleport(this);
+	public Packet34EntityTeleport(Entity entity) {
+		this.entityId = entity.entityID;
+		this.xPosition = MathHelper.floor_double(entity.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entity.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entity.posZ * 32.0D);
+		this.yaw = (byte)((int)(entity.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entity.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public Packet34EntityTeleport(int entityID, int xPosition, int yPosition, int zPosition, byte yaw, byte pitch) {
+		this.entityId = entityID;
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = (byte)dataInputStream.read();
+		this.pitch = (byte)dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.yaw);
+		dataOutputStream.write(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntityTeleport(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Timer.java
+++ net/minecraft/src/Timer.java
@@ -11,8 +11,8 @@
 	private long lastSyncHRClock;
 	private double timeSyncAdjustment = 1.0D;
 
-	public Timer(float var1) {
-		this.ticksPerSecond = var1;
+	public Timer(float ticksPerSecond) {
+		this.ticksPerSecond = ticksPerSecond;
 		this.lastSyncSysClock = System.currentTimeMillis();
 		this.lastSyncHRClock = System.nanoTime() / 1000000L;
 	}
--- net/minecraft/src/GuiButton.java
+++ net/minecraft/src/GuiButton.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class GuiButton extends Gui {
@@ -17,46 +18,44 @@
 		this(var1, var2, var3, 200, 20, var4);
 	}
 
-	protected GuiButton(int var1, int var2, int var3, int var4, int var5, String var6) {
-		this.width = 200;
-		this.height = 20;
+	public GuiButton(int var1, int var2, int var3, int var4, int var5, String var6) {
+		this.width = var4;
+		this.height = var5;
 		this.enabled = true;
 		this.visible = true;
 		this.id = var1;
 		this.xPosition = var2;
 		this.yPosition = var3;
-		this.width = var4;
-		this.height = var5;
 		this.displayString = var6;
 	}
 
-	protected int getHoverState(boolean var1) {
+	protected int getHoverState(boolean mousePointerHovered) {
 		byte var2 = 1;
 		if(!this.enabled) {
 			var2 = 0;
-		} else if(var1) {
+		} else if(mousePointerHovered) {
 			var2 = 2;
 		}
 
 		return var2;
 	}
 
-	public void drawButton(Minecraft var1, int var2, int var3) {
+	public void drawButton(Minecraft minecraft, int mouseX, int mouseY) {
 		if(this.visible) {
-			FontRenderer var4 = var1.fontRenderer;
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.renderEngine.getTexture("/gui/gui.png"));
+			FontRenderer fontRenderer4 = minecraft.fontRenderer;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/gui.png"));
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-			boolean var5 = var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
+			boolean var5 = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
 			int var6 = this.getHoverState(var5);
 			this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 46 + var6 * 20, this.width / 2, this.height);
 			this.drawTexturedModalRect(this.xPosition + this.width / 2, this.yPosition, 200 - this.width / 2, 46 + var6 * 20, this.width / 2, this.height);
-			this.mouseDragged(var1, var2, var3);
+			this.mouseDragged(minecraft, mouseX, mouseY);
 			if(!this.enabled) {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
 			} else if(var5) {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
 			} else {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
 			}
 
 		}
--- net/minecraft/src/Packet12PlayerLook.java
+++ net/minecraft/src/Packet12PlayerLook.java
@@ -9,23 +9,23 @@
 		this.rotating = true;
 	}
 
-	public Packet12PlayerLook(float var1, float var2, boolean var3) {
-		this.yaw = var1;
-		this.pitch = var2;
-		this.onGround = var3;
+	public Packet12PlayerLook(float yaw, float pitch, boolean onGround) {
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.onGround = onGround;
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Packet6SpawnPosition.java
+++ net/minecraft/src/Packet6SpawnPosition.java
@@ -12,29 +12,29 @@
 	public Packet6SpawnPosition() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleSpawnPosition(this);
+	public Packet6SpawnPosition(int xPosition, int yPosition, int zPosition) {
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleSpawnPosition(this);
 	}
 
 	public int getPacketSize() {
 		return 12;
-	}
-
-	public Packet6SpawnPosition(int var1, int var2, int var3) {
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenShrubs.java
@@ -1,0 +1,45 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class WorldGenShrubs extends WorldGenerator {
+	private int metadata = 0;
+
+	public WorldGenShrubs withMetadata(int metadata) {
+		this.metadata = metadata;
+		return this;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.dirt.blockID)
+			return false;
+
+		for (int i = 0; i < 3; i++) {
+			int block = var1.getBlockId(var3, var4 + i, var5);
+			if (block != 0 && block != Block.leaves.blockID)
+				return false;
+		}
+
+		var1.setBlockAndMetadata(var3, var4, var5, Block.wood.blockID, metadata);
+
+		int baseThickness = var2.nextInt(3);
+		final int height = 2;
+		for (int y = 0; y < height; y++) {
+			int thickness = height - y + baseThickness;
+
+			for (int x = -thickness; x <= thickness; x++)
+				for (int z = -thickness; z <= thickness; z++) {
+					if (var1.getBlockId(var3 + x, var4 - 1, var5 + z) == 0) continue;
+					if (Math.sqrt(x * x + z * z) > var2.nextDouble() * thickness * 2) continue;
+
+					if (var1.getBlockId(var3 + x, var4 + y, var5 + z) == 0)
+						var1.setBlockAndMetadata(var3 + x, var4 + y, var5 + z, Block.leaves.blockID, metadata);
+				}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/EntityGiantZombie.java
+++ net/minecraft/src/EntityGiantZombie.java
@@ -11,7 +11,7 @@
 		this.setSize(this.width * 6.0F, this.height * 6.0F);
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBrightness(x, y, z) - 0.5F;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Biome.java
@@ -1,0 +1,316 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.font.FontRenderContext;
+import java.awt.font.GlyphVector;
+import java.awt.image.BufferedImage;
+import java.awt.image.WritableRaster;
+import java.io.File;
+import java.io.IOException;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Random;
+
+public enum Biome {
+	DESERT(0.75F, 0.00F, 1.00F, 0.25F) {
+		public void populate(PopulatorHost host) {
+			int cactiCount = host.rand.nextInt(5) - 2;
+			if (cactiCount > 0)
+				host.generateSurface(new WorldGenCactus().withScale(4, 1, 0), cactiCount, 8);
+		}
+
+		public Block getSurface() {
+			return Block.sand;
+		}
+
+		public Block getSoil() {
+			return Block.sand;
+		}
+
+		public int getStoneMetadata() {
+			return 3;
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 255, 128, 0 };
+		}
+	},
+	TUNDRA(0.00F, 0.00F, 0.30F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			TUNDRA_TREES.populate(host);
+
+			for(int x = host.x + 8; x < host.x + 24; ++x) {
+				for(int z = host.z + 8; z < host.z + 24; ++z) {
+					int y = host.worldObj.getTopSolidOrLiquidBlock(x, z);
+					if(	   (host.chunkProvider.getBiome(x - 16, z - 16) == this
+							&& host.chunkProvider.getBiome(x - 16, z + 16) == this
+							&& host.chunkProvider.getBiome(x + 16, z - 16) == this
+							&& host.chunkProvider.getBiome(x + 16, z + 16) == this)
+
+							&& y > 0 && y < 128 && host.worldObj.getBlockId(x, y, z) == 0
+							&& host.worldObj.getBlockMaterial(x, y - 1, z).getIsSolid()
+							&& host.worldObj.getBlockMaterial(x, y - 1, z) != Material.ice) {
+						host.worldObj.setBlockWithNotify(x, y, z, Block.snow.blockID);
+					}
+				}
+			}
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 128, 255 };
+		}
+	},
+	RAINFOREST(0.75F, 0.60F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			host.generateSurface(new WorldGenShrubs().withMetadata(3), 4, 8);
+			RAINFOREST_TREES.populate(host);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 128, 255, 0 };
+		}
+	},
+	SAVANNA(0.50F, 0.00F, 1.00F, 0.40F) {
+		public void populate(PopulatorHost host) {
+			SAVANNA_TREES.populate(host);
+		}
+
+		public Block getSurface() {
+			return Block.dirt;
+		}
+
+		public int getSurfaceMetadata() {
+			return 1;
+		}
+
+		public int getStoneMetadata() {
+			return 3;
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 255, 255, 0 };
+		}
+	},
+	SEASONAL_FOREST(0.60F, 0.40F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			SEASONAL_FOREST_TREES.populate(host);
+			host.generateFlowers(4);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 200, 100 };
+		}
+	},
+	PLAINS(0.00F, 0.00F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			PLAINS_TREES.populate(host);
+			host.generateFlowers(2);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 255, 0 };
+		}
+	};
+
+	//#region Biome Properties
+	private static final TreePopulator PLAINS_TREES = new TreePopulator()
+			.withTree(new WorldGenTrees())
+			.withBigTree(new WorldGenBigTree(), 20, 2)
+			.withHighTree(new WorldGenSpruceTrees(), 80, 100)
+			.withShrub(new WorldGenShrubs(), 1)
+			.withDensity(4.0D, 8.0D, 2.0D);
+
+	private static final TreePopulator TUNDRA_TREES = new TreePopulator()
+			.withTree(new WorldGenSpruceTrees())
+			.withBigTree(new WorldGenSpruceTrees().makeBig().withScale(6, 6, 5), 15, 1)
+			.withDensity(1.0D, 4.0D, 1.0D);
+
+	private static final TreePopulator SEASONAL_FOREST_TREES = new TreePopulator()
+			.withTree(new WorldGenTrees().withAltForm(2, 0.5D))
+			.withBigTree(new WorldGenBigTree().withAltForm(2, 0.75D), 20, 2)
+			.withShrub(new WorldGenShrubs(), -2)
+			.withDensity(8.0D, 12.0D, 2.0D);
+
+	private static final TreePopulator SAVANNA_TREES = new TreePopulator()
+			.withTree(new WorldGenMahoganyTrees())
+			.withShrub(new WorldGenShrubs().withMetadata(3), -5)
+			.withDensity(2.0D, 3.0D, 2.0D);
+
+	private static final TreePopulator RAINFOREST_TREES = new TreePopulator()
+			.withTree(new WorldGenMahoganyTrees())
+			.withDensity(16.0D, 24.0D, 1.0D);
+	//#endregion
+
+	//#region Properties
+	private final float minTemperature, minHumidity, maxTemperature, maxHumidity;
+
+	public float getMinTemperature() {
+		return minTemperature;
+	}
+
+	public float getMinHumidity() {
+		return minHumidity;
+	}
+
+	public float getMaxTemperature() {
+		return maxTemperature;
+	}
+
+	public float getMaxHumidity() {
+		return maxHumidity;
+	}
+
+	public Block getSurface() {
+		return Block.grass;
+	}
+
+	public Block getSoil() {
+		return Block.dirt;
+	}
+
+	public int getSurfaceMetadata() {
+		return 0;
+	}
+
+	public int getStoneMetadata() {
+		return 0;
+	}
+
+	public int[] getMapColor() {
+		return new int[] {
+				(int) MathHelper.clamp((minTemperature + maxTemperature) / 2.0F * 255.0F, 0.0F, 255.0F),
+				(int) MathHelper.clamp((minHumidity + maxHumidity) / 2.0F * 255.0F, 0.0F, 255.0F),
+				128
+		};
+	}
+
+	Biome(float minTemperature, float minHumidity, float maxTemperature, float maxHumidity) {
+		this.minTemperature = minTemperature;
+		this.minHumidity = minHumidity;
+		this.maxTemperature = maxTemperature;
+		this.maxHumidity = maxHumidity;
+	}
+
+	public void populate(PopulatorHost host) { }
+	//#endregion Properties
+
+	public static Biome getBiome(float temp, float hum) {
+		for (Biome biome : Biome.values()) {
+			if (temp >= biome.getMinTemperature()
+					&& temp <= biome.getMaxTemperature()
+					&& hum >= biome.getMinHumidity()
+					&& hum <= biome.getMaxHumidity()) {
+				return biome;
+			}
+		}
+		return Biome.PLAINS;
+	}
+
+	//#region Biome Maps
+	public static void generateBiomeMap() throws IOException {
+		Instant generationBegin = Instant.now();
+
+		BufferedImage img = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_RGB);
+		WritableRaster raster = img.getRaster();
+		Graphics2D gfx = img.createGraphics();
+
+		for (int x = 0; x < 1000; x++)
+			for (int y = 0; y < 1000; y++) {
+				Biome biome = Biome.getBiome(x / 1000.0F, y / 1000.0F);
+				int[] color = biome.getMapColor();
+				raster.setPixel(x, y, color);
+			}
+
+		Font font = new Font(Font.DIALOG, Font.PLAIN, 16);
+		Stroke stroke = new BasicStroke(2.0F, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL);
+		Stroke originalStroke = gfx.getStroke();
+
+		gfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+		gfx.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
+
+		for (Biome biome : Biome.values()) {
+			String biomeName = biome.name().toLowerCase();
+			biomeName = Character.toUpperCase(biomeName.charAt(0)) + biomeName.substring(1);
+			biomeName = biomeName.replace('_', ' ');
+
+			int labelX = (int)MathHelper.clamp(biome.getMinTemperature() * 1000.0F, 0.0F, 1000.0F);
+			int labelY = (int)MathHelper.clamp(biome.getMinHumidity() * 1000.0F, 0.0F, 1000.0F);
+
+			FontRenderContext fctx = gfx.getFontRenderContext();
+			GlyphVector glyphVector = font.createGlyphVector(fctx, biomeName);
+
+			Rectangle bounds = glyphVector.getPixelBounds(fctx, labelX, labelY + 16);
+			if (bounds.getMaxX() > 1000.0F) labelX -= bounds.width;
+			if (bounds.getMaxY() > 1000.0F) labelY -= bounds.height;
+			Shape textShape = glyphVector.getOutline(labelX, labelY + 16);
+
+			gfx.setColor(Color.black);
+			gfx.setStroke(stroke);
+			gfx.draw(textShape);
+
+			gfx.setColor(Color.white);
+			gfx.setStroke(originalStroke);
+			gfx.fill(textShape);
+		}
+
+		gfx.dispose();
+
+		File imgFile = new File("C:/tmp/mcdiverge-biomemap.png");
+		ImageIO.write(img, "png", imgFile);
+
+		Instant generationEnd = Instant.now();
+		System.out.println("Saved biome map to C:/tmp/mcdiverge-biomemap.png in "
+				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
+	}
+
+	public static void generateWorldBiomeMap() throws IOException {
+		Instant generationBegin = Instant.now();
+
+		final int size = 2048;
+		final int scale = 16;
+		final double biomeSize = 250000.0D / scale;
+//		final float biomeBlend = 0.005F / scale;
+		final float biomeBlend = 0.0F;
+		Random rand = new Random();
+
+		BufferedImage img = new BufferedImage(size * 2, size * 2, BufferedImage.TYPE_INT_RGB);
+		WritableRaster raster = img.getRaster();
+
+		long seed = rand.nextLong();
+
+		for (int x = 0; x < size; x++)
+			for (int y = 0; y < size; y++) {
+				float temperature = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
+								x / biomeSize, y / biomeSize, 1000, 8) / 256 * 1.2F + 0.6F
+								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+						0.0F, 1.0F);
+				float humidity = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
+								x / biomeSize, y / biomeSize, -1000, 8) / 256 * 1.2F + 0.6F
+								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+						0.0F, 1.0F);
+
+				Biome biome = Biome.getBiome(temperature, humidity);
+				raster.setPixel(x, y, biome.getMapColor());
+
+				int tempCol = (int)(temperature * 255.0F);
+				int humCol = (int)(humidity * 255.0F);
+				raster.setPixel(x + size, y, new int[] { tempCol, tempCol, tempCol });
+				raster.setPixel(x + size, y + size, new int[] { humCol, humCol, humCol });
+				raster.setPixel(x, y + size, new int[] { tempCol, humCol, 0 });
+			}
+
+		Graphics2D gfx = img.createGraphics();
+		gfx.drawString("Scale: 1:" + scale, 4, 20);
+
+		File imgFile = new File("C:/tmp/mcdiverge-worldbiomemap.png");
+		ImageIO.write(img, "png", imgFile);
+
+		Instant generationEnd = Instant.now();
+		System.out.println("Saved world biome map to C:/tmp/mcdiverge-worldbiomemap.png in "
+				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
+	}
+	//#endregion Biome Maps
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenMahoganyTrees.java
@@ -1,0 +1,124 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.World;
+import net.minecraft.src.WorldGenerator;
+
+import java.util.Random;
+
+public class WorldGenMahoganyTrees extends WorldGenerator {
+	private int trunkHeightVariation = 4;
+	private int trunkHeightMin = 4;
+	private int leavesHeightVariation = 3;
+
+	public void setScale(double var1, double var3, double var5) {
+		this.trunkHeightVariation = (int)var1 + 4;
+		this.trunkHeightMin = (int)var3 + 4;
+		this.leavesHeightVariation = (int)var5 + 3;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		final int maxLeaves = 4;
+		int trunkHeight = rand.nextInt(trunkHeightVariation) + trunkHeightMin;
+		int leavesWidth = rand.nextInt(2) + 1;
+		int leavesHeight = rand.nextInt(leavesHeightVariation) + 2;
+
+		while (y + trunkHeight >= 128) {
+			trunkHeight /= 2;
+			if (trunkHeight == 0) {
+				return false;
+			}
+		}
+
+		int ground = world.getBlockId(x, y - 1, z);
+		if (ground != Block.dirt.blockID && ground != Block.grass.blockID) {
+			return false;
+		}
+
+		for (int sy = y; sy < y + trunkHeight; sy++) {
+			if (sy < 0 || sy >= 128)
+				continue;
+
+			for (int sx = x - leavesWidth; sx <= x + leavesWidth; sx++)
+				for (int sz = z - leavesWidth; sz <= z + leavesWidth; sz++) {
+					int block = world.getBlockId(sx, sy, sz);
+					if (block != 0 && block != Block.leaves.blockID) {
+						return false;
+					}
+				}
+		}
+
+		int ogx = x;
+		int ogz = z;
+
+		world.setBlock(x, y - 1, z, Block.dirt.blockID);
+		for (int ty = y; ty < y + trunkHeight; ty++) {
+			world.setBlockAndMetadata(x, ty, z, Block.wood.blockID, 3);
+			if (rand.nextInt(5) == 0) {
+				int add = rand.nextInt(3) - 1;
+				if (rand.nextInt(2) == 0) {
+					x += add;
+					x = Math.min(Math.max(x, ogx - 1), ogx + 1);
+				} else {
+					z += add;
+					z = Math.min(Math.max(z, ogz - 1), ogz + 1);
+				}
+			}
+		}
+
+		for (int ly = 0; ly < leavesHeight; ly++) {
+			int lyWorld = y + trunkHeight - ly;
+			int lq = Math.min(ly + 2, maxLeaves);
+
+			for (int i = 0; i < lq; i++) {
+				int lx = x + (rand.nextInt(leavesWidth * 2 + 1) - leavesWidth);
+				int lz = z + (rand.nextInt(leavesWidth * 2 + 1) - leavesWidth);
+				placeLeaves(world, lx, lyWorld, lz, rand.nextInt(3) == 0 ? 2 : 1);
+			}
+		}
+
+		int branchCount = trunkHeight / 10;
+		if (branchCount > 0) {
+			for (int i = 0; i < branchCount; i++) {
+				int by = rand.nextInt(trunkHeight / 2) + trunkHeight / 4 + y;
+				int bdx = rand.nextInt(3) - 1;
+				int bdz = rand.nextInt(3) - 1;
+				int blen = rand.nextInt(3) + 3;
+
+				int bx = x;
+				int bz = z;
+				world.setBlockAndMetadata(bx, by, bz, Block.wood.blockID, 3);
+				for (int j = 0; j < blen; j++) {
+					if (rand.nextInt(3) == 0)
+						by++;
+
+					bx += bdx;
+					bz += bdz;
+					world.setBlockAndMetadata(bx, by, bz, Block.wood.blockID, 3);
+				}
+
+				for (int ly = 0; ly < 3; ly++) {
+					int lyWorld = ly + by - 1;
+					int lc = ly < 2 ? 2 : 1;
+
+					for (int j = 0; j < lc; j++) {
+						int lx = bx + (rand.nextInt(3) - 1);
+						int lz = bz + (rand.nextInt(3) - 1);
+						placeLeaves(world, lx, lyWorld, lz, 1);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private static void placeLeaves(World world, int x, int y, int z, int leafSize) {
+		for (int lx = x - leafSize; lx <= x + leafSize; lx++)
+			for (int lz = z - leafSize; lz <= z + leafSize; lz++) {
+				if (world.getBlockId(lx, y, lz) == 0) {
+				   world.setBlockAndMetadata(lx, y, lz, Block.leaves.blockID, 3);
+				}
+			}
+	}
+}
--- net/minecraft/src/ImageBufferDownload.java
+++ net/minecraft/src/ImageBufferDownload.java
@@ -10,17 +10,17 @@
 	private int imageWidth;
 	private int imageHeight;
 
-	public BufferedImage parseUserSkin(BufferedImage var1) {
-		if(var1 == null) {
+	public BufferedImage parseUserSkin(BufferedImage bufferedImage1) {
+		if(bufferedImage1 == null) {
 			return null;
 		} else {
 			this.imageWidth = 64;
 			this.imageHeight = 32;
-			BufferedImage var2 = new BufferedImage(this.imageWidth, this.imageHeight, 2);
-			Graphics var3 = var2.getGraphics();
-			var3.drawImage(var1, 0, 0, (ImageObserver)null);
-			var3.dispose();
-			this.imageData = ((DataBufferInt)var2.getRaster().getDataBuffer()).getData();
+			BufferedImage bufferedImage2 = new BufferedImage(this.imageWidth, this.imageHeight, 2);
+			Graphics graphics3 = bufferedImage2.getGraphics();
+			graphics3.drawImage(bufferedImage1, 0, 0, (ImageObserver)null);
+			graphics3.dispose();
+			this.imageData = ((DataBufferInt)bufferedImage2.getRaster().getDataBuffer()).getData();
 			this.setAreaOpaque(0, 0, 32, 16);
 			this.setAreaTransparent(32, 0, 64, 32);
 			this.setAreaOpaque(0, 16, 64, 32);
@@ -49,7 +49,7 @@
 				}
 			}
 
-			return var2;
+			return bufferedImage2;
 		}
 	}
 
@@ -57,7 +57,7 @@
 		if(!this.hasTransparency(var1, var2, var3, var4)) {
 			for(int var5 = var1; var5 < var3; ++var5) {
 				for(int var6 = var2; var6 < var4; ++var6) {
-					this.imageData[var5 + var6 * this.imageWidth] &= 16777215;
+					this.imageData[var5 + var6 * this.imageWidth] &= 0xFFFFFF;
 				}
 			}
 
@@ -67,7 +67,7 @@
 	private void setAreaOpaque(int var1, int var2, int var3, int var4) {
 		for(int var5 = var1; var5 < var3; ++var5) {
 			for(int var6 = var2; var6 < var4; ++var6) {
-				this.imageData[var5 + var6 * this.imageWidth] |= -16777216;
+				this.imageData[var5 + var6 * this.imageWidth] |= 0xFF000000;
 			}
 		}
 
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -12,6 +12,7 @@
 import java.util.List;
 import java.util.Map;
 import javax.imageio.ImageIO;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderEngine {
@@ -25,14 +26,24 @@
 	private GameSettings options;
 	private boolean clampTexture = false;
 
-	public RenderEngine(GameSettings var1) {
-		this.options = var1;
+	public RenderEngine(GameSettings gameSettings1) {
+		this.options = gameSettings1;
+		RenderGlobal.globalBrightness = this.options.brightness * 0.2F;
 	}
 
 	public int getTexture(String var1) {
-		Integer var2 = (Integer)this.textureMap.get(var1);
-		if(var2 != null) {
-			return var2.intValue();
+		if (this.options.darkMode
+				&& var1.startsWith("/gui/")
+				&& !var1.contains("/items.png")
+				&& !var1.contains("/icons.png")
+				&& !var1.contains("/bg")) {
+			int dotPos = var1.indexOf(".");
+			var1 = var1.substring(0, dotPos) + "_dark.png";
+		}
+
+		Integer integer2 = (Integer)this.textureMap.get(var1);
+		if(integer2 != null) {
+			return integer2.intValue();
 		} else {
 			try {
 				this.singleIntBuffer.clear();
@@ -48,37 +59,37 @@
 					this.setupTexture(ImageIO.read(RenderEngine.class.getResourceAsStream(var1)), var4);
 				}
 
-				this.textureMap.put(var1, Integer.valueOf(var4));
+				this.textureMap.put(var1, var4);
 				return var4;
-			} catch (IOException var3) {
+			} catch (IOException iOException3) {
 				throw new RuntimeException("!!");
 			}
 		}
 	}
 
-	private BufferedImage unwrapImageByColumns(BufferedImage var1) {
-		int var2 = var1.getWidth() / 16;
-		BufferedImage var3 = new BufferedImage(16, var1.getHeight() * var2, 2);
-		Graphics var4 = var3.getGraphics();
+	private BufferedImage unwrapImageByColumns(BufferedImage bufferedImage1) {
+		int var2 = bufferedImage1.getWidth() / 16;
+		BufferedImage bufferedImage3 = new BufferedImage(16, bufferedImage1.getHeight() * var2, 2);
+		Graphics graphics4 = bufferedImage3.getGraphics();
 
 		for(int var5 = 0; var5 < var2; ++var5) {
-			var4.drawImage(var1, -var5 * 16, var5 * var1.getHeight(), (ImageObserver)null);
+			graphics4.drawImage(bufferedImage1, -var5 * 16, var5 * bufferedImage1.getHeight(), (ImageObserver)null);
 		}
 
-		var4.dispose();
-		return var3;
+		graphics4.dispose();
+		return bufferedImage3;
 	}
 
-	public int allocateAndSetupTexture(BufferedImage var1) {
+	public int allocateAndSetupTexture(BufferedImage bufferedImage1) {
 		this.singleIntBuffer.clear();
 		GLAllocation.generateTextureNames(this.singleIntBuffer);
 		int var2 = this.singleIntBuffer.get(0);
-		this.setupTexture(var1, var2);
-		this.textureContentsMap.put(Integer.valueOf(var2), var1);
+		this.setupTexture(bufferedImage1, var2);
+		this.textureContentsMap.put(var2, bufferedImage1);
 		return var2;
 	}
 
-	public void setupTexture(BufferedImage var1, int var2) {
+	public void setupTexture(BufferedImage bufferedImage1, int var2) {
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
 		if(useMipmaps) {
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
@@ -96,11 +107,11 @@
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
 		}
 
-		int var3 = var1.getWidth();
-		int var4 = var1.getHeight();
+		int var3 = bufferedImage1.getWidth();
+		int var4 = bufferedImage1.getHeight();
 		int[] var5 = new int[var3 * var4];
 		byte[] var6 = new byte[var3 * var4 * 4];
-		var1.getRGB(0, 0, var3, var4, var5, 0, var3);
+		bufferedImage1.getRGB(0, 0, var3, var4, var5, 0, var3);
 
 		int var7;
 		int var8;
@@ -133,7 +144,7 @@
 		this.imageData.clear();
 		this.imageData.put(var6);
 		this.imageData.position(0).limit(var6.length);
-		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, var3, var4, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, var3, var4, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 		if(useMipmaps) {
 			for(var7 = 1; var7 <= 4; ++var7) {
 				var8 = var3 >> var7 - 1;
@@ -151,14 +162,14 @@
 					}
 				}
 
-				GL11.glTexImage2D(GL11.GL_TEXTURE_2D, var7, GL11.GL_RGBA, var9, var10, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+				GL11.glTexImage2D(GL11.GL_TEXTURE_2D, var7, GL11.GL_RGBA, var9, var10, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 			}
 		}
 
 	}
 
 	public void deleteTexture(int var1) {
-		this.textureContentsMap.remove(Integer.valueOf(var1));
+		this.textureContentsMap.remove(var1);
 		this.singleIntBuffer.clear();
 		this.singleIntBuffer.put(var1);
 		this.singleIntBuffer.flip();
@@ -166,38 +177,38 @@
 	}
 
 	public int getTextureForDownloadableImage(String var1, String var2) {
-		ThreadDownloadImageData var3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var3 != null && var3.image != null && !var3.textureSetupComplete) {
-			if(var3.textureName < 0) {
-				var3.textureName = this.allocateAndSetupTexture(var3.image);
+		ThreadDownloadImageData threadDownloadImageData3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
+		if(threadDownloadImageData3 != null && threadDownloadImageData3.image != null && !threadDownloadImageData3.textureSetupComplete) {
+			if(threadDownloadImageData3.textureName < 0) {
+				threadDownloadImageData3.textureName = this.allocateAndSetupTexture(threadDownloadImageData3.image);
 			} else {
-				this.setupTexture(var3.image, var3.textureName);
+				this.setupTexture(threadDownloadImageData3.image, threadDownloadImageData3.textureName);
 			}
 
-			var3.textureSetupComplete = true;
+			threadDownloadImageData3.textureSetupComplete = true;
 		}
 
-		return var3 != null && var3.textureName >= 0 ? var3.textureName : this.getTexture(var2);
+		return threadDownloadImageData3 != null && threadDownloadImageData3.textureName >= 0 ? threadDownloadImageData3.textureName : this.getTexture(var2);
 	}
 
-	public ThreadDownloadImageData obtainImageData(String var1, ImageBuffer var2) {
-		ThreadDownloadImageData var3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var3 == null) {
-			this.urlToImageDataMap.put(var1, new ThreadDownloadImageData(var1, var2));
+	public ThreadDownloadImageData obtainImageData(String var1, ImageBuffer imageBuffer2) {
+		ThreadDownloadImageData threadDownloadImageData3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
+		if(threadDownloadImageData3 == null) {
+			this.urlToImageDataMap.put(var1, new ThreadDownloadImageData(var1, imageBuffer2));
 		} else {
-			++var3.referenceCount;
+			++threadDownloadImageData3.referenceCount;
 		}
 
-		return var3;
+		return threadDownloadImageData3;
 	}
 
 	public void releaseImageData(String var1) {
-		ThreadDownloadImageData var2 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var2 != null) {
-			--var2.referenceCount;
-			if(var2.referenceCount == 0) {
-				if(var2.textureName >= 0) {
-					this.deleteTexture(var2.textureName);
+		ThreadDownloadImageData threadDownloadImageData2 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
+		if(threadDownloadImageData2 != null) {
+			--threadDownloadImageData2.referenceCount;
+			if(threadDownloadImageData2.referenceCount == 0) {
+				if(threadDownloadImageData2.textureName >= 0) {
+					this.deleteTexture(threadDownloadImageData2.textureName);
 				}
 
 				this.urlToImageDataMap.remove(var1);
@@ -206,14 +217,14 @@
 
 	}
 
-	public void registerTextureFX(TextureFX var1) {
-		this.textureList.add(var1);
-		var1.onTick();
+	public void registerTextureFX(TextureFX textureFX1) {
+		this.textureList.add(textureFX1);
+		textureFX1.onTick();
 	}
 
 	public void updateDynamicTextures() {
 		int var1;
-		TextureFX var2;
+		TextureFX textureFX2;
 		int var3;
 		int var4;
 		int var5;
@@ -225,17 +236,17 @@
 		int var11;
 		int var12;
 		for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-			var2 = (TextureFX)this.textureList.get(var1);
-			var2.anaglyphEnabled = this.options.anaglyph;
-			var2.onTick();
+			textureFX2 = (TextureFX)this.textureList.get(var1);
+			textureFX2.anaglyphEnabled = this.options.anaglyph;
+			textureFX2.onTick();
 			this.imageData.clear();
-			this.imageData.put(var2.imageData);
-			this.imageData.position(0).limit(var2.imageData.length);
-			var2.bindImage(this);
+			this.imageData.put(textureFX2.imageData);
+			this.imageData.position(0).limit(textureFX2.imageData.length);
+			textureFX2.bindImage(this);
 
-			for(var3 = 0; var3 < var2.tileSize; ++var3) {
-				for(var4 = 0; var4 < var2.tileSize; ++var4) {
-					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var2.iconIndex % 16 * 16 + var3 * 16, var2.iconIndex / 16 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+			for(var3 = 0; var3 < textureFX2.tileSize; ++var3) {
+				for(var4 = 0; var4 < textureFX2.tileSize; ++var4) {
+					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, textureFX2.iconIndex % 16 * 16 + var3 * 16, textureFX2.iconIndex / 16 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 					if(useMipmaps) {
 						for(var5 = 1; var5 <= 4; ++var5) {
 							var6 = 16 >> var5 - 1;
@@ -252,7 +263,7 @@
 								}
 							}
 
-							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var5, var2.iconIndex % 16 * var7, var2.iconIndex / 16 * var7, var7, var7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var5, textureFX2.iconIndex % 16 * var7, textureFX2.iconIndex / 16 * var7, var7, var7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 						}
 					}
 				}
@@ -260,13 +271,13 @@
 		}
 
 		for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-			var2 = (TextureFX)this.textureList.get(var1);
-			if(var2.textureId > 0) {
+			textureFX2 = (TextureFX)this.textureList.get(var1);
+			if(textureFX2.textureId > 0) {
 				this.imageData.clear();
-				this.imageData.put(var2.imageData);
-				this.imageData.position(0).limit(var2.imageData.length);
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2.textureId);
-				GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+				this.imageData.put(textureFX2.imageData);
+				this.imageData.position(0).limit(textureFX2.imageData.length);
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureFX2.textureId);
+				GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 				if(useMipmaps) {
 					for(var3 = 1; var3 <= 4; ++var3) {
 						var4 = 16 >> var3 - 1;
@@ -283,7 +294,7 @@
 							}
 						}
 
-						GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var3, 0, 0, var5, var5, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+						GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var3, 0, 0, var5, var5, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 					}
 				}
 			}
@@ -292,19 +303,19 @@
 	}
 
 	private int averageColor(int var1, int var2) {
-		int var3 = (var1 & -16777216) >> 24 & 255;
-		int var4 = (var2 & -16777216) >> 24 & 255;
+		int var3 = (var1 & 0xFF000000) >> 24 & 255;
+		int var4 = (var2 & 0xFF000000) >> 24 & 255;
 		return (var3 + var4 >> 1 << 24) + ((var1 & 16711422) + (var2 & 16711422) >> 1);
 	}
 
 	private int alphaBlend(int var1, int var2) {
-		int var3 = (var1 & -16777216) >> 24 & 255;
-		int var4 = (var2 & -16777216) >> 24 & 255;
-		short var5 = 255;
+		int var3 = (var1 & 0xFF000000) >> 24 & 255;
+		int var4 = (var2 & 0xFF000000) >> 24 & 255;
+		short s5 = 255;
 		if(var3 + var4 == 0) {
 			var3 = 1;
 			var4 = 1;
-			var5 = 0;
+			s5 = 0;
 		}
 
 		int var6 = (var1 >> 16 & 255) * var3;
@@ -316,44 +327,44 @@
 		int var12 = (var6 + var9) / (var3 + var4);
 		int var13 = (var7 + var10) / (var3 + var4);
 		int var14 = (var8 + var11) / (var3 + var4);
-		return var5 << 24 | var12 << 16 | var13 << 8 | var14;
+		return s5 << 24 | var12 << 16 | var13 << 8 | var14;
 	}
 
 	public void refreshTextures() {
-		Iterator var1 = this.textureContentsMap.keySet().iterator();
-
-		BufferedImage var3;
-		while(var1.hasNext()) {
-			int var2 = ((Integer)var1.next()).intValue();
-			var3 = (BufferedImage)this.textureContentsMap.get(Integer.valueOf(var2));
-			this.setupTexture(var3, var2);
-		}
-
-		ThreadDownloadImageData var6;
-		for(var1 = this.urlToImageDataMap.values().iterator(); var1.hasNext(); var6.textureSetupComplete = false) {
-			var6 = (ThreadDownloadImageData)var1.next();
-		}
-
-		var1 = this.textureMap.keySet().iterator();
-
-		while(var1.hasNext()) {
-			String var7 = (String)var1.next();
+		Iterator iterator1 = this.textureContentsMap.keySet().iterator();
+
+		BufferedImage bufferedImage3;
+		while(iterator1.hasNext()) {
+			int var2 = ((Integer)iterator1.next()).intValue();
+			bufferedImage3 = (BufferedImage)this.textureContentsMap.get(var2);
+			this.setupTexture(bufferedImage3, var2);
+		}
+
+		ThreadDownloadImageData threadDownloadImageData6;
+		for(iterator1 = this.urlToImageDataMap.values().iterator(); iterator1.hasNext(); threadDownloadImageData6.textureSetupComplete = false) {
+			threadDownloadImageData6 = (ThreadDownloadImageData)iterator1.next();
+		}
+
+		iterator1 = this.textureMap.keySet().iterator();
+
+		while(iterator1.hasNext()) {
+			String var7 = (String)iterator1.next();
 
 			try {
 				if(var7.startsWith("##")) {
-					var3 = this.unwrapImageByColumns(ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2))));
+					bufferedImage3 = this.unwrapImageByColumns(ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2))));
 				} else if(var7.startsWith("%%")) {
 					this.clampTexture = true;
-					var3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2)));
+					bufferedImage3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2)));
 					this.clampTexture = false;
 				} else {
-					var3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7));
+					bufferedImage3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7));
 				}
 
 				int var4 = ((Integer)this.textureMap.get(var7)).intValue();
-				this.setupTexture(var3, var4);
-			} catch (IOException var5) {
-				var5.printStackTrace();
+				this.setupTexture(bufferedImage3, var4);
+			} catch (IOException iOException5) {
+				iOException5.printStackTrace();
 			}
 		}
 
--- net/minecraft/src/ThreadDownloadImage.java
+++ net/minecraft/src/ThreadDownloadImage.java
@@ -9,35 +9,34 @@
 	final ImageBuffer buffer;
 	final ThreadDownloadImageData imageData;
 
-	ThreadDownloadImage(ThreadDownloadImageData var1, String var2, ImageBuffer var3) {
-		this.imageData = var1;
-		this.location = var2;
-		this.buffer = var3;
+	ThreadDownloadImage(ThreadDownloadImageData downloadImageData, String location, ImageBuffer imageBuffer) {
+		this.imageData = downloadImageData;
+		this.location = location;
+		this.buffer = imageBuffer;
 	}
 
 	public void run() {
-		HttpURLConnection var1 = null;
+		HttpURLConnection httpURLConnection1 = null;
 
 		try {
-			URL var2 = new URL(this.location);
-			var1 = (HttpURLConnection)var2.openConnection();
-			var1.setDoInput(true);
-			var1.setDoOutput(false);
-			var1.connect();
-			if(var1.getResponseCode() != 404) {
-				if(this.buffer == null) {
-					this.imageData.image = ImageIO.read(var1.getInputStream());
-				} else {
-					this.imageData.image = this.buffer.parseUserSkin(ImageIO.read(var1.getInputStream()));
-				}
-
+			URL uRL2 = new URL(this.location);
+			httpURLConnection1 = (HttpURLConnection)uRL2.openConnection();
+			httpURLConnection1.setDoInput(true);
+			httpURLConnection1.setDoOutput(false);
+			httpURLConnection1.connect();
+			if(httpURLConnection1.getResponseCode() == 404) {
 				return;
 			}
-		} catch (Exception var6) {
-			var6.printStackTrace();
-			return;
+
+			if(this.buffer == null) {
+				this.imageData.image = ImageIO.read(httpURLConnection1.getInputStream());
+			} else {
+				this.imageData.image = this.buffer.parseUserSkin(ImageIO.read(httpURLConnection1.getInputStream()));
+			}
+		} catch (Exception exception6) {
+			exception6.printStackTrace();
 		} finally {
-			var1.disconnect();
+			httpURLConnection1.disconnect();
 		}
 
 	}
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -8,61 +8,15 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumOS;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.OSMap;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerCreative;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldRenderer;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import net.minecraft.src.*;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -73,6 +27,8 @@
 import org.lwjgl.util.glu.GLU;
 
 public abstract class Minecraft implements Runnable {
+	public static final String version = "Minecraft Diverge v0.2.0_02";
+
 	public PlayerController playerController;
 	private boolean fullscreen = false;
 	public int displayWidth;
@@ -124,20 +80,22 @@
 	public boolean isRaining = false;
 	long systemTime = System.currentTimeMillis();
 	private int joinPlayerCounter = 0;
+	public boolean creativeDebugEnabled = false;
+	public boolean showHud = true;
 
-	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
-		this.tempDisplayWidth = var4;
-		this.tempDisplayHeight = var5;
-		this.fullscreen = var6;
-		this.mcApplet = var3;
+	public Minecraft(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		this.tempDisplayWidth = width;
+		this.tempDisplayHeight = height;
+		this.fullscreen = fullscreen;
+		this.mcApplet = mcApplet;
 		new ThreadSleepForever(this, "Timer hack thread");
-		this.mcCanvas = var2;
-		this.displayWidth = var4;
-		this.displayHeight = var5;
-		this.fullscreen = var6;
+		this.mcCanvas = canvas;
+		this.displayWidth = width;
+		this.displayHeight = height;
+		this.fullscreen = fullscreen;
 	}
 
-	public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
+	public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable1);
 
 	public void setServer(String var1, int var2) {
 		this.serverName = var1;
@@ -146,11 +104,11 @@
 
 	public void startGame() throws LWJGLException {
 		if(this.mcCanvas != null) {
-			Graphics var1 = this.mcCanvas.getGraphics();
-			if(var1 != null) {
-				var1.setColor(Color.BLACK);
-				var1.fillRect(0, 0, this.displayWidth, this.displayHeight);
-				var1.dispose();
+			Graphics graphics1 = this.mcCanvas.getGraphics();
+			if(graphics1 != null) {
+				graphics1.setColor(Color.BLACK);
+				graphics1.fillRect(0, 0, this.displayWidth, this.displayHeight);
+				graphics1.dispose();
 			}
 
 			Display.setParent(this.mcCanvas);
@@ -169,16 +127,16 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Alpha v1.1.2_01");
+		Display.setTitle("Minecraft " + Minecraft.version);
 
 		try {
 			Display.create();
-		} catch (LWJGLException var6) {
-			var6.printStackTrace();
+		} catch (LWJGLException lWJGLException6) {
+			lWJGLException6.printStackTrace();
 
 			try {
 				Thread.sleep(1000L);
-			} catch (InterruptedException var5) {
+			} catch (InterruptedException interruptedException5) {
 			}
 
 			Display.create();
@@ -194,10 +152,12 @@
 		Mouse.create();
 		this.mouseHelper = new MouseHelper(this.mcCanvas);
 
+		Display.setVSyncEnabled(this.options.limitFramerate);
+
 		try {
 			Controllers.create();
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		this.checkGLError("Pre startup");
@@ -229,8 +189,10 @@
 		try {
 			this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
 			this.downloadResourcesThread.start();
-		} catch (Exception var3) {
+		} catch (Exception exception3) {
 		}
+
+		GuiScreen.setBgType(new Random().nextInt(4));
 
 		this.checkGLError("Post startup");
 		this.ingameGUI = new GuiIngame(this);
@@ -239,14 +201,13 @@
 		} else {
 			this.displayGuiScreen(new GuiMainMenu());
 		}
-
 	}
 
 	private void loadScreen() throws LWJGLException {
-		ScaledResolution var1 = new ScaledResolution(this.displayWidth, this.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
-		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.displayWidth, this.displayHeight);
+		int var2 = scaledResolution1.getScaledWidth();
+		int var3 = scaledResolution1.getScaledHeight();
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
 		GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
@@ -255,23 +216,23 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang.png"));
-		var4.startDrawingQuads();
-		var4.setColorOpaque_I(16777215);
-		var4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.draw();
-		short var5 = 256;
-		short var6 = 256;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang" + (new Random().nextInt(10) == 0 ? "-alt.png" : ".png")));
+		tessellator4.startDrawingQuads();
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		tessellator4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 2.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 2.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.draw();
+		short s5 = 256;
+		short s6 = 256;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
-		this.scaledTessellator((this.displayWidth / 2 - var5) / 2, (this.displayHeight / 2 - var6) / 2, 0, 0, var5, var6);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		this.scaledTessellator((this.displayWidth / 2 - s5) / 2, (this.displayHeight / 2 - s6) / 2, 0, 0, s5, s6);
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
@@ -280,15 +241,15 @@
 	}
 
 	public void scaledTessellator(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 1.0F / 256.0F;
-		float var8 = 1.0F / 256.0F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+		float var7 = 0.00390625F;
+		float var8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.startDrawingQuads();
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.draw();
 	}
 
 	public static File getMinecraftDir() {
@@ -301,31 +262,31 @@
 
 	public static File getAppDir(String var0) {
 		String var1 = System.getProperty("user.home", ".");
-		File var2;
-		switch(OSMap.osValues[getOs().ordinal()]) {
+		File file2;
+		switch(Minecraft.SyntheticClass_1.$SwitchMap$net$minecraft$src$EnumOS[getOs().ordinal()]) {
 		case 1:
 		case 2:
-			var2 = new File(var1, '.' + var0 + '/');
+			file2 = new File(var1, '.' + var0 + '/');
 			break;
 		case 3:
 			String var3 = System.getenv("APPDATA");
 			if(var3 != null) {
-				var2 = new File(var3, "." + var0 + '/');
+				file2 = new File(var3, "." + var0 + '/');
 			} else {
-				var2 = new File(var1, '.' + var0 + '/');
+				file2 = new File(var1, '.' + var0 + '/');
 			}
 			break;
 		case 4:
-			var2 = new File(var1, "Library/Application Support/" + var0);
+			file2 = new File(var1, "Library/Application Support/" + var0);
 			break;
 		default:
-			var2 = new File(var1, var0 + '/');
+			file2 = new File(var1, var0 + '/');
 		}
 
-		if(!var2.exists() && !var2.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var2);
+		if(!file2.exists() && !file2.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file2);
 		} else {
-			return var2;
+			return file2;
 		}
 	}
 
@@ -334,25 +295,25 @@
 		return var0.contains("win") ? EnumOS.windows : (var0.contains("mac") ? EnumOS.macos : (var0.contains("solaris") ? EnumOS.solaris : (var0.contains("sunos") ? EnumOS.solaris : (var0.contains("linux") ? EnumOS.linux : (var0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
 	}
 
-	public void displayGuiScreen(GuiScreen var1) {
+	public void displayGuiScreen(GuiScreen guiScreen1) {
 		if(!(this.currentScreen instanceof GuiErrorScreen)) {
 			if(this.currentScreen != null) {
 				this.currentScreen.onGuiClosed();
 			}
 
-			if(var1 == null && this.theWorld == null) {
-				var1 = new GuiMainMenu();
-			} else if(var1 == null && this.thePlayer.health <= 0) {
-				var1 = new GuiGameOver();
+			if(guiScreen1 == null && this.theWorld == null) {
+				guiScreen1 = new GuiMainMenu();
+			} else if(guiScreen1 == null && this.thePlayer.health <= 0) {
+				guiScreen1 = new GuiGameOver();
 			}
 
-			this.currentScreen = (GuiScreen)var1;
-			if(var1 != null) {
+			this.currentScreen = (GuiScreen)guiScreen1;
+			if(guiScreen1 != null) {
 				this.setIngameNotInFocus();
-				ScaledResolution var2 = new ScaledResolution(this.displayWidth, this.displayHeight);
-				int var3 = var2.getScaledWidth();
-				int var4 = var2.getScaledHeight();
-				((GuiScreen)var1).setWorldAndResolution(this, var3, var4);
+				ScaledResolution scaledResolution2 = new ScaledResolution(this.displayWidth, this.displayHeight);
+				int var3 = scaledResolution2.getScaledWidth();
+				int var4 = scaledResolution2.getScaledHeight();
+				((GuiScreen)guiScreen1).setWorldAndResolution(this, var3, var4);
 				this.skipRenderWorld = false;
 			} else {
 				this.setIngameFocus();
@@ -382,7 +343,7 @@
 			if(this.downloadResourcesThread != null) {
 				this.downloadResourcesThread.closeMinecraft();
 			}
-		} catch (Exception var8) {
+		} catch (Exception exception8) {
 		}
 
 		try {
@@ -391,7 +352,7 @@
 
 			try {
 				GLAllocation.deleteTexturesAndDisplayLists();
-			} catch (Exception var6) {
+			} catch (Exception exception6) {
 			}
 
 			this.sndManager.closeMinecraft();
@@ -409,9 +370,9 @@
 
 		try {
 			this.startGame();
-		} catch (Exception var13) {
-			var13.printStackTrace();
-			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", var13));
+		} catch (Exception exception13) {
+			exception13.printStackTrace();
+			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", exception13));
 			return;
 		}
 
@@ -440,7 +401,7 @@
 
 						try {
 							this.runTick();
-						} catch (MinecraftException var12) {
+						} catch (MinecraftException minecraftException12) {
 							this.theWorld = null;
 							this.changeWorld1((World)null);
 							this.displayGuiScreen(new GuiConflictWarning());
@@ -493,9 +454,9 @@
 						this.resize(this.displayWidth, this.displayHeight);
 					}
 
-					if(this.options.limitFramerate) {
-						Thread.sleep(5L);
-					}
+					// if(this.options.limitFramerate) {
+					//	 Thread.sleep(5L);
+					// }
 
 					this.checkGLError("Post render");
 					++var3;
@@ -506,11 +467,11 @@
 						var1 += 1000L;
 					}
 				}
-			} catch (MinecraftError var14) {
-			} catch (Throwable var15) {
+			} catch (MinecraftError minecraftError14) {
+			} catch (Throwable throwable15) {
 				this.theWorld = null;
-				var15.printStackTrace();
-				this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", var15));
+				throwable15.printStackTrace();
+				this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", throwable15));
 			}
 
 		} finally {
@@ -534,14 +495,14 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glLineWidth(1.0F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var3 = Tessellator.instance;
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(538968064);
-		var3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
-		var3.draw();
+		Tessellator tessellator3 = Tessellator.instance;
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20200000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.draw();
 		long var4 = 0L;
 
 		int var6;
@@ -550,14 +511,14 @@
 		}
 
 		var6 = (int)(var4 / 200000L / (long)frameTimes.length);
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(541065216);
-		var3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
-		var3.draw();
-		var3.startDrawing(1);
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20400000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
+		tessellator3.draw();
+		tessellator3.startDrawing(1);
 
 		for(int var7 = 0; var7 < frameTimes.length; ++var7) {
 			int var8 = (var7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
@@ -565,13 +526,13 @@
 			var9 = var9 * var9 / 255;
 			int var10 = var9 * var9 / 255;
 			var10 = var10 * var10 / 255;
-			var3.setColorOpaque_I(-16777216 + var10 + var9 * 256 + var8 * 65536);
+			tessellator3.setColorOpaque_I(0xFF000000 + var10 + var9 * 256 + var8 * 65536);
 			long var11 = frameTimes[var7] / 200000L;
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
 		}
 
-		var3.draw();
+		tessellator3.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
@@ -607,10 +568,10 @@
 		}
 	}
 
-	private void sendClickBlockToController(int var1, boolean var2) {
+	private void sendClickBlockToController(int button, boolean clicked) {
 		if(!this.playerController.isInTestMode) {
-			if(var1 != 0 || this.leftClickCounter <= 0) {
-				if(var2 && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && var1 == 0) {
+			if(button != 0 || this.leftClickCounter <= 0) {
+				if(clicked && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && button == 0) {
 					int var3 = this.objectMouseOver.blockX;
 					int var4 = this.objectMouseOver.blockY;
 					int var5 = this.objectMouseOver.blockZ;
@@ -624,23 +585,23 @@
 		}
 	}
 
-	private void clickMouse(int var1) {
-		if(var1 != 0 || this.leftClickCounter <= 0) {
-			if(var1 == 0) {
+	private void clickMouse(int button) {
+		if(button != 0 || this.leftClickCounter <= 0) {
+			if(button == 0) {
 				this.thePlayer.swingItem();
 			}
 
 			int var3;
 			if(this.objectMouseOver == null) {
-				if(var1 == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
+				if(button == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
 					this.leftClickCounter = 10;
 				}
 			} else if(this.objectMouseOver.typeOfHit == 1) {
-				if(var1 == 0) {
-					this.thePlayer.attackEntity(this.objectMouseOver.entityHit);
+				if(button == 0) {
+					this.playerController.attackEntity(this.thePlayer, this.objectMouseOver.entityHit);
 				}
 
-				if(var1 == 1) {
+				if(button == 1) {
 					this.thePlayer.interactWithEntity(this.objectMouseOver.entityHit);
 				}
 			} else if(this.objectMouseOver.typeOfHit == 0) {
@@ -649,7 +610,7 @@
 				int var4 = this.objectMouseOver.blockZ;
 				int var5 = this.objectMouseOver.sideHit;
 				Block var6 = Block.blocksList[this.theWorld.getBlockId(var2, var3, var4)];
-				if(var1 == 0) {
+				if(button == 0) {
 					this.theWorld.extinguishFire(var2, var3, var4, this.objectMouseOver.sideHit);
 					if(var6 != Block.bedrock || this.thePlayer.unusedMiningCooldown >= 100) {
 						this.playerController.clickBlock(var2, var3, var4, this.objectMouseOver.sideHit);
@@ -673,18 +634,10 @@
 				}
 			}
 
-			if(var1 == 1) {
+			if(button == 1) {
 				ItemStack var9 = this.thePlayer.inventory.getCurrentItem();
-				if(var9 != null) {
-					var3 = var9.stackSize;
-					ItemStack var10 = var9.useItemRightClick(this.theWorld, this.thePlayer);
-					if(var10 != var9 || var10 != null && var10.stackSize != var3) {
-						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var10;
-						this.entityRenderer.itemRenderer.resetEquippedProgress2();
-						if(var10.stackSize == 0) {
-							this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-						}
-					}
+				if(var9 != null && this.playerController.sendUseItem(this.thePlayer, this.theWorld, var9)) {
+					this.entityRenderer.itemRenderer.resetEquippedProgress2();
 				}
 			}
 
@@ -740,27 +693,27 @@
 			}
 
 			System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
 
-	private void resize(int var1, int var2) {
-		if(var1 <= 0) {
-			var1 = 1;
-		}
-
-		if(var2 <= 0) {
-			var2 = 1;
-		}
-
-		this.displayWidth = var1;
-		this.displayHeight = var2;
+	private void resize(int width, int height) {
+		if(width <= 0) {
+			width = 1;
+		}
+
+		if(height <= 0) {
+			height = 1;
+		}
+
+		this.displayWidth = width;
+		this.displayHeight = height;
 		if(this.currentScreen != null) {
-			ScaledResolution var3 = new ScaledResolution(var1, var2);
-			int var4 = var3.getScaledWidth();
-			int var5 = var3.getScaledHeight();
+			ScaledResolution scaledResolution3 = new ScaledResolution(width, height);
+			int var4 = scaledResolution3.getScaledWidth();
+			int var5 = scaledResolution3.getScaledHeight();
 			this.currentScreen.setWorldAndResolution(this, var4, var5);
 		}
 
@@ -787,6 +740,8 @@
 	}
 
 	public void runTick() {
+		GuiScreen.backgroundElapsedTicks++;
+
 		this.ingameGUI.updateTick();
 		this.entityRenderer.getMouseOver(1.0F);
 		if(this.thePlayer != null) {
@@ -870,6 +825,10 @@
 													this.options.thirdPersonView = !this.options.thirdPersonView;
 												}
 
+												if(Keyboard.getEventKey() == Keyboard.KEY_F3) {
+													this.options.debugMenu = !this.options.debugMenu;
+												}
+
 												if(Keyboard.getEventKey() == this.options.keyBindInventory.keyCode) {
 													this.displayGuiScreen(new GuiInventory(this.thePlayer.inventory, this.thePlayer.inventory.craftingInventory));
 												}
@@ -878,9 +837,21 @@
 													this.thePlayer.dropPlayerItemWithRandomChoice(this.thePlayer.inventory.decrStackSize(this.thePlayer.inventory.currentItem, 1), false);
 												}
 
+												if(Keyboard.getEventKey() == this.options.keyBindHideHud.keyCode) {
+													this.showHud = !this.showHud;
+												}
+
 												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.options.keyBindChat.keyCode) {
 													this.displayGuiScreen(new GuiChat());
 												}
+
+												if(Keyboard.getEventKey() == this.options.keyBindCreative.keyCode) {
+													this.thePlayer.displayGUICreative();
+												}
+
+												if(Keyboard.getEventKey() == this.options.keyBindRecipeGuide.keyCode) {
+													this.thePlayer.displayGUIRecipeGuide();
+												}
 											}
 
 											for(int var4 = 0; var4 < 9; ++var4) {
@@ -954,6 +925,9 @@
 			}
 
 			if(!this.isGamePaused || this.isMultiplayerWorld()) {
+				if (!this.options.caveSounds) {
+					this.theWorld.soundCounter = 0xDEAD;
+				}
 				this.theWorld.tick();
 			}
 
@@ -980,10 +954,15 @@
 		return this.theWorld != null && this.theWorld.multiplayerWorld;
 	}
 
-	public void startWorld(String var1) {
+	public void startWorld(String worldName) {
+		startWorld(worldName, null);
+	}
+
+	public void startWorld(String worldName, CreateWorldInfo info) {
+		this.sndManager.fadeOutTitleMusic();
 		this.changeWorld1((World)null);
 		System.gc();
-		World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
+		World var2 = new World(new File(getMinecraftDir(), "saves"), worldName, info == null ? 0 : info.seed, info);
 		if(var2.isNewWorld) {
 			this.changeWorld(var2, "Generating level");
 		} else {
@@ -992,54 +971,55 @@
 
 	}
 
-	public void changeWorld1(World var1) {
-		this.changeWorld(var1, "");
+	public void changeWorld1(World world) {
+		this.changeWorld(world, "");
 	}
 
-	public void changeWorld(World var1, String var2) {
-		this.sndManager.playStreaming((String)null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+	public void changeWorld(World world, String title) {
+		this.sndManager.playStreaming(null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
 		if(this.theWorld != null) {
 			this.theWorld.saveWorldIndirectly(this.loadingScreen);
 		}
 
-		this.theWorld = var1;
-		if(var1 != null) {
-			this.playerController.onWorldChange(var1);
-			var1.fontRenderer = this.fontRenderer;
+		this.theWorld = world;
+		if(world != null) {
+			this.playerController.onWorldChange(world);
+			world.fontRenderer = this.fontRenderer;
 			if(!this.isMultiplayerWorld()) {
-				this.thePlayer = (EntityPlayerSP)var1.createDebugPlayer(EntityPlayerSP.class);
+				this.thePlayer = (EntityPlayerSP)world.createDebugPlayer(EntityPlayerSP.class);
 			} else if(this.thePlayer != null) {
 				this.thePlayer.preparePlayerToSpawn();
-				if(var1 != null) {
-					var1.spawnEntityInWorld(this.thePlayer);
+				if(world != null) {
+					world.spawnEntityInWorld(this.thePlayer);
 				}
 			}
 
-			if(!var1.multiplayerWorld) {
-				this.preloadWorld(var2);
+			if(!world.multiplayerWorld) {
+				this.preloadWorld(title);
 			}
 
 			if(this.thePlayer == null) {
-				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1);
+				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(world);
 				this.thePlayer.preparePlayerToSpawn();
 				this.playerController.flipPlayer(this.thePlayer);
 			}
 
 			this.thePlayer.movementInput = new MovementInputFromOptions(this.options);
 			if(this.renderGlobal != null) {
-				this.renderGlobal.changeWorld(var1);
+				this.renderGlobal.changeWorld(world);
 			}
 
 			if(this.effectRenderer != null) {
-				this.effectRenderer.clearEffects(var1);
+				this.effectRenderer.clearEffects(world);
 			}
 
 			this.playerController.onRespawn(this.thePlayer);
-			var1.spawnPlayerWithLoadedChunks(this.thePlayer);
-			if(var1.isNewWorld) {
-				var1.saveWorldIndirectly(this.loadingScreen);
+			world.spawnPlayerWithLoadedChunks(this.thePlayer);
+			if(world.isNewWorld) {
+				world.saveWorldIndirectly(this.loadingScreen);
 			}
 		} else {
+			this.sndManager.fadeOutBackgroundMusic();
 			this.thePlayer = null;
 		}
 
@@ -1047,15 +1027,15 @@
 		this.systemTime = 0L;
 	}
 
-	private void preloadWorld(String var1) {
-		this.loadingScreen.resetProgressAndMessage(var1);
+	private void preloadWorld(String title) {
+		this.loadingScreen.resetProgressAndMessage(title);
 		this.loadingScreen.displayLoadingString("Building terrain");
-		short var2 = 128;
+		short s2 = 128;
 		int var3 = 0;
-		int var4 = var2 * 2 / 16 + 1;
+		int var4 = s2 * 2 / 16 + 1;
 		var4 *= var4;
 
-		for(int var5 = -var2; var5 <= var2; var5 += 16) {
+		for(int var5 = -s2; var5 <= s2; var5 += 16) {
 			int var6 = this.theWorld.spawnX;
 			int var7 = this.theWorld.spawnZ;
 			if(this.thePlayer != null) {
@@ -1063,7 +1043,7 @@
 				var7 = (int)this.thePlayer.posZ;
 			}
 
-			for(int var8 = -var2; var8 <= var2; var8 += 16) {
+			for(int var8 = -s2; var8 <= s2; var8 += 16) {
 				this.loadingScreen.setLoadingProgress(var3++ * 100 / var4);
 				this.theWorld.getBlockId(var6 + var5, 64, var7 + var8);
 
@@ -1077,20 +1057,26 @@
 		this.theWorld.dropOldChunks();
 	}
 
-	public void installResource(String var1, File var2) {
-		int var3 = var1.indexOf("/");
-		String var4 = var1.substring(0, var3);
-		var1 = var1.substring(var3 + 1);
+	public void installResource(String name, File file) {
+		int var3 = name.indexOf("/");
+		String var4 = name.substring(0, var3);
+		name = name.substring(var3 + 1);
 		if(var4.equalsIgnoreCase("sound")) {
-			this.sndManager.addSound(var1, var2);
+			this.sndManager.addSound(name, file);
 		} else if(var4.equalsIgnoreCase("newsound")) {
-			this.sndManager.addSound(var1, var2);
+			this.sndManager.addSound(name, file);
 		} else if(var4.equalsIgnoreCase("streaming")) {
-			this.sndManager.addStreaming(var1, var2);
-		} else if(var4.equalsIgnoreCase("music")) {
-			this.sndManager.addMusic(var1, var2);
+			this.sndManager.addStreaming(name, file);
 		} else if(var4.equalsIgnoreCase("newmusic")) {
-			this.sndManager.addMusic(var1, var2);
+			if (name.contains("cave")) {
+				this.sndManager.addCaveMusic(name, file);
+			} else if (name.contains("title")) {
+				this.sndManager.addTitleMusic(name, file);
+			} else {
+				this.sndManager.addMusic(name, file);
+			}
+		} else if(var4.equalsIgnoreCase("music")) {
+			this.sndManager.addMusic(name, file);
 		}
 
 	}
@@ -1099,6 +1085,12 @@
 		return this.glCapabilities;
 	}
 
+	public String debugInfoLocation() {
+		return "X: " + Math.floor(this.thePlayer.posX * 100.0F) / 100.0F
+			   + ", Y: " + Math.floor(this.thePlayer.posY * 100.0F) / 100.0F
+			   + ", Z: " + Math.floor(this.thePlayer.posZ * 100.0F) / 100.0F;
+	}
+
 	public String debugInfoRenders() {
 		return this.renderGlobal.getDebugInfoRenders();
 	}
@@ -1111,6 +1103,15 @@
 		return "P: " + this.effectRenderer.getStatistics() + ". T: " + this.theWorld.getDebugLoadedEntities();
 	}
 
+	public String debugInfoSeed() {
+		return "Seed: " + this.theWorld.randomSeed;
+	}
+
+	public String debugInfoWorld() {
+		return "T: " + this.theWorld.worldType.name()
+				   + ". GM: " + (this.theWorld.creative ? 1 : 0);
+	}
+
 	public void respawn() {
 		this.theWorld.setSpawnLocation();
 		if(this.thePlayer != null) {
@@ -1126,51 +1127,78 @@
 		this.preloadWorld("Respawning");
 	}
 
-	public static void startMainThread(String var0, String var1) {
-		startMainThread(var0, var1, (String)null);
+	public static void startMainThread(String username, String sessionId) {
+		startMainThread(username, sessionId, null);
 	}
 
-	public static void startMainThread(String var0, String var1, String var2) {
+	public static void startMainThread(String username, String sessionId, String server) {
 		boolean var3 = false;
-		Frame var5 = new Frame("Minecraft");
-		Canvas var6 = new Canvas();
-		var5.setLayout(new BorderLayout());
-		var5.add(var6, "Center");
-		var6.setPreferredSize(new Dimension(854, 480));
-		var5.pack();
-		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
-		Thread var8 = new Thread(var7, "Minecraft main thread");
-		var8.setPriority(10);
-		var7.appletMode = false;
-		var7.minecraftUri = "www.minecraft.net";
-		if(var0 != null && var1 != null) {
-			var7.session = new Session(var0, var1);
+		Frame frame5 = new Frame("Minecraft");
+		Canvas canvas6 = new Canvas();
+		frame5.setLayout(new BorderLayout());
+		frame5.add(canvas6, "Center");
+		canvas6.setPreferredSize(new Dimension(854, 480));
+		frame5.pack();
+		frame5.setLocationRelativeTo(null);
+		MinecraftImpl minecraftImpl7 = new MinecraftImpl(frame5, canvas6, null, 854, 480, var3, frame5);
+		Thread thread8 = new Thread(minecraftImpl7, "Minecraft main thread");
+		thread8.setPriority(10);
+		minecraftImpl7.appletMode = false;
+		minecraftImpl7.minecraftUri = "www.minecraft.net";
+		if(username != null && sessionId != null) {
+			minecraftImpl7.session = new Session(username, sessionId);
 		} else {
-			var7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
-		}
-
-		if(var2 != null) {
-			String[] var9 = var2.split(":");
-			var7.setServer(var9[0], Integer.parseInt(var9[1]));
-		}
-
-		var5.setVisible(true);
-		var5.addWindowListener(new GameWindowListener(var7, var8));
-		var8.start();
+			minecraftImpl7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
+		}
+
+		if(server != null) {
+			String[] var9 = server.split(":");
+			minecraftImpl7.setServer(var9[0], Integer.parseInt(var9[1]));
+		}
+
+		frame5.setVisible(true);
+		frame5.addWindowListener(new GameWindowListener(minecraftImpl7, thread8));
+		thread8.start();
 	}
 
-	public static void main(String[] var0) {
+	public static void main(String[] args) {
 		String var1 = "Player" + System.currentTimeMillis() % 1000L;
-		if(var0.length > 0) {
-			var1 = var0[0];
+		if(args.length > 0) {
+			var1 = args[0];
 		}
 
 		String var2 = "-";
-		if(var0.length > 1) {
-			var2 = var0[1];
+		if(args.length > 1) {
+			var2 = args[1];
 		}
 
 		startMainThread(var1, var2);
+	}
+
+	static final class SyntheticClass_1 {
+		public static final int[] $SwitchMap$net$minecraft$src$EnumOS = new int[EnumOS.values().length];
+
+		static {
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.linux.ordinal()] = 1;
+			} catch (NoSuchFieldError noSuchFieldError4) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.solaris.ordinal()] = 2;
+			} catch (NoSuchFieldError noSuchFieldError3) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.windows.ordinal()] = 3;
+			} catch (NoSuchFieldError noSuchFieldError2) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.macos.ordinal()] = 4;
+			} catch (NoSuchFieldError noSuchFieldError1) {
+			}
+
+		}
 	}
 }
--- net/minecraft/src/Packet4UpdateTime.java
+++ net/minecraft/src/Packet4UpdateTime.java
@@ -10,23 +10,23 @@
 	public Packet4UpdateTime() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.time = var1.readLong();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeLong(this.time);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleUpdateTime(this);
+	public Packet4UpdateTime(long time) {
+		this.time = time;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.time = dataInputStream.readLong();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeLong(this.time);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleUpdateTime(this);
 	}
 
 	public int getPacketSize() {
 		return 8;
-	}
-
-	public Packet4UpdateTime(long var1) {
-		this.time = var1;
 	}
 }
--- net/minecraft/src/CraftingInventoryWorkbenchCB.java
+++ net/minecraft/src/CraftingInventoryWorkbenchCB.java
@@ -4,8 +4,9 @@
 	public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
 	public IInventory craftResult = new InventoryCraftResult();
 
-	public void onCraftMatrixChanged(IInventory var1) {
+	public void onCraftMatrixChanged(IInventory inventory) {
 		int[] var2 = new int[9];
+		int[] metaMap = new int[9];
 
 		for(int var3 = 0; var3 < 3; ++var3) {
 			for(int var4 = 0; var4 < 3; ++var4) {
@@ -13,22 +14,24 @@
 				ItemStack var6 = this.craftMatrix.getStackInSlot(var5);
 				if(var6 == null) {
 					var2[var5] = -1;
+					metaMap[var5] = -1;
 				} else {
 					var2[var5] = var6.itemID;
+					metaMap[var5] = var6.itemMetadata;
 				}
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2, metaMap));
 	}
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		super.onCraftGuiClosed(var1);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		super.onCraftGuiClosed(entityPlayer);
 
 		for(int var2 = 0; var2 < 9; ++var2) {
 			ItemStack var3 = this.craftMatrix.getStackInSlot(var2);
 			if(var3 != null) {
-				var1.dropPlayerItem(var3);
+				entityPlayer.dropPlayerItem(var3);
 			}
 		}
 
--- net/minecraft/src/CanvasCrashReport.java
+++ net/minecraft/src/CanvasCrashReport.java
@@ -4,8 +4,8 @@
 import java.awt.Dimension;
 
 class CanvasCrashReport extends Canvas {
-	public CanvasCrashReport(int var1) {
-		this.setPreferredSize(new Dimension(var1, var1));
-		this.setMinimumSize(new Dimension(var1, var1));
+	public CanvasCrashReport(int size) {
+		this.setPreferredSize(new Dimension(size, size));
+		this.setMinimumSize(new Dimension(size, size));
 	}
 }
--- net/minecraft/src/ModelCreeper.java
+++ net/minecraft/src/ModelCreeper.java
@@ -46,8 +46,8 @@
 	}
 
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.head.rotateAngleX = var5 / (180.0F / (float)Math.PI);
+		this.head.rotateAngleY = var4 / 57.295776F;
+		this.head.rotateAngleX = var5 / 57.295776F;
 		this.leg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
 		this.leg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
 		this.leg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
--- net/minecraft/src/Packet50PreChunk.java
+++ net/minecraft/src/Packet50PreChunk.java
@@ -12,30 +12,30 @@
 	public Packet50PreChunk() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.mode = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.write(this.mode ? 1 : 0);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePreChunk(this);
+	public Packet50PreChunk(int xPosition, int yPosition, boolean mode) {
+		this.isChunkDataPacket = true;
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.mode = mode;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.mode = dataInputStream.read() != 0;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.write(this.mode ? 1 : 0);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePreChunk(this);
 	}
 
 	public int getPacketSize() {
 		return 9;
-	}
-
-	public Packet50PreChunk(int var1, int var2, boolean var3) {
-		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.mode = var3;
 	}
 }
--- net/minecraft/src/EntityPickupFX.java
+++ net/minecraft/src/EntityPickupFX.java
@@ -9,35 +9,35 @@
 	private int maxAge = 0;
 	private float yOffs;
 
-	public EntityPickupFX(World var1, Entity var2, Entity var3, float var4) {
-		super(var1, var2.posX, var2.posY, var2.posZ, var2.motionX, var2.motionY, var2.motionZ);
-		this.entityToPickUp = var2;
-		this.entityPickingUp = var3;
+	public EntityPickupFX(World worldObj, Entity entityToPickUp, Entity entityPickingUp, float yOffset) {
+		super(worldObj, entityToPickUp.posX, entityToPickUp.posY, entityToPickUp.posZ, entityToPickUp.motionX, entityToPickUp.motionY, entityToPickUp.motionZ);
+		this.entityToPickUp = entityToPickUp;
+		this.entityPickingUp = entityPickingUp;
 		this.maxAge = 3;
-		this.yOffs = var4;
+		this.yOffs = yOffset;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.age + var2) / (float)this.maxAge;
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float var8 = ((float)this.age + renderPartialTick) / (float)this.maxAge;
 		var8 *= var8;
 		double var9 = this.entityToPickUp.posX;
 		double var11 = this.entityToPickUp.posY;
 		double var13 = this.entityToPickUp.posZ;
-		double var15 = this.entityPickingUp.lastTickPosX + (this.entityPickingUp.posX - this.entityPickingUp.lastTickPosX) * (double)var2;
-		double var17 = this.entityPickingUp.lastTickPosY + (this.entityPickingUp.posY - this.entityPickingUp.lastTickPosY) * (double)var2 + (double)this.yOffs;
-		double var19 = this.entityPickingUp.lastTickPosZ + (this.entityPickingUp.posZ - this.entityPickingUp.lastTickPosZ) * (double)var2;
+		double var15 = this.entityPickingUp.lastTickPosX + (this.entityPickingUp.posX - this.entityPickingUp.lastTickPosX) * (double)renderPartialTick;
+		double var17 = this.entityPickingUp.lastTickPosY + (this.entityPickingUp.posY - this.entityPickingUp.lastTickPosY) * (double)renderPartialTick + (double)this.yOffs;
+		double var19 = this.entityPickingUp.lastTickPosZ + (this.entityPickingUp.posZ - this.entityPickingUp.lastTickPosZ) * (double)renderPartialTick;
 		double var21 = var9 + (var15 - var9) * (double)var8;
 		double var23 = var11 + (var17 - var11) * (double)var8;
 		double var25 = var13 + (var19 - var13) * (double)var8;
 		int var27 = MathHelper.floor_double(var21);
 		int var28 = MathHelper.floor_double(var23 + (double)(this.yOffset / 2.0F));
 		int var29 = MathHelper.floor_double(var25);
-		float var30 = this.worldObj.getBrightness(var27, var28, var29);
+		float var30 = this.worldObj.getBrightness(var27, var28, var29) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		var21 -= interpPosX;
 		var23 -= interpPosY;
 		var25 -= interpPosZ;
 		GL11.glColor4f(var30, var30, var30, 1.0F);
-		RenderManager.instance.renderEntityWithPosYaw(this.entityToPickUp, (double)((float)var21), (double)((float)var23), (double)((float)var25), this.entityToPickUp.rotationYaw, var2);
+		RenderManager.instance.renderEntityWithPosYaw(this.entityToPickUp, (double)((float)var21), (double)((float)var23), (double)((float)var25), this.entityToPickUp.rotationYaw, renderPartialTick);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -1,50 +1,78 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
 public class GuiOptions extends GuiScreen {
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Options";
 	private GameSettings options;
+	private final int maxPages;
+	private int currentPage;
 
-	public GuiOptions(GuiScreen var1, GameSettings var2) {
-		this.parentScreen = var1;
-		this.options = var2;
+	public GuiOptions(GuiScreen guiScreen1, GameSettings gameSettings2) {
+		this.parentScreen = guiScreen1;
+		this.options = gameSettings2;
+		this.maxPages = Math.floorDiv(this.options.numberOfOptions, 10) + 1;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.numberOfOptions; ++var1) {
-			int var2 = this.options.isSlider(var1);
-			if(var2 == 0) {
-				this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var1)));
-			} else {
-				this.controlList.add(new GuiSlider(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var1, this.options.getOptionDisplayString(var1), this.options.getOptionFloatValue(var1)));
-			}
-		}
-
-		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
+		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 132, "Controls..."));
 		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id < 100) {
-				this.options.setOptionValue(var1.id, 1);
-				var1.displayString = this.options.getOptionDisplayString(var1.id);
-			}
-
-			if(var1.id == 100) {
+		this.controlList.add(new GuiButton(300, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(301, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		initPage();
+	}
+
+	private void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 100).collect(Collectors.toList());
+		for(int var1 = 0; var1 < Math.min(this.options.numberOfOptions - currentPage * 10, 10); ++var1) {
+			int var11 = var1 + currentPage * 10;
+			if(this.options.isSlider(var11) == 0) {
+				this.controlList.add(new GuiSmallButton(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var11)));
+			} else {
+				this.controlList.add(new GuiSlider(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var11, this.options.getOptionDisplayString(var11), this.options.getOptionFloatValue(var11)));
+			}
+		}
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id < 100) {
+				this.options.setOptionValue(button.id, 1);
+				button.displayString = this.options.getOptionDisplayString(button.id);
+			}
+
+			if(button.id == 100) {
 				this.mc.displayGuiScreen(new GuiControls(this, this.options));
 			}
 
-			if(var1.id == 200) {
+			if(button.id == 200) {
 				this.mc.displayGuiScreen(this.parentScreen);
 			}
 
+			if(button.id == 300) {
+				this.currentPage--;
+				if (this.currentPage < 0) {
+					this.currentPage = maxPages - 1;
+				}
+				this.initPage();
+			}
+
+			if(button.id == 301) {
+				this.currentPage++;
+				if (this.currentPage >= maxPages) {
+					this.currentPage = 0;
+				}
+				this.initPage();
+			}
 		}
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/ServerGuiCommandListener.java
+++ net/minecraft/src/ServerGuiCommandListener.java
@@ -8,12 +8,12 @@
 	final JTextField textField;
 	final ServerGUI mcServerGui;
 
-	ServerGuiCommandListener(ServerGUI var1, JTextField var2) {
-		this.mcServerGui = var1;
-		this.textField = var2;
+	ServerGuiCommandListener(ServerGUI serverGUI1, JTextField jTextField2) {
+		this.mcServerGui = serverGUI1;
+		this.textField = jTextField2;
 	}
 
-	public void actionPerformed(ActionEvent var1) {
+	public void actionPerformed(ActionEvent actionEvent1) {
 		String var2 = this.textField.getText().trim();
 		if(var2.length() > 0) {
 			ServerGUI.getMinecraftServer(this.mcServerGui).addCommand(var2, this.mcServerGui);
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -2,7 +2,7 @@
 
 public class InventoryPlayer implements IInventory {
 	public ItemStack[] mainInventory = new ItemStack[37];
-	public ItemStack[] armorInventory = new ItemStack[4];
+	public ItemStack[] armorInventory = new ItemStack[5];
 	public ItemStack[] craftingInventory = new ItemStack[4];
 	public int currentItem = 0;
 	private EntityPlayer player;
@@ -27,9 +27,13 @@
 		return -1;
 	}
 
-	private int storeItemStack(int var1) {
+	private int storeItemStack(int var1, int metadata) {
 		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1 && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
+			if(this.mainInventory[var2] != null
+				&& this.mainInventory[var2].itemID == var1
+				&& this.mainInventory[var2].itemMetadata == metadata
+				&& this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize()
+				&& this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
 				return var2;
 			}
 		}
@@ -72,8 +76,8 @@
 
 	}
 
-	private int storePartialItemStack(int var1, int var2) {
-		int var3 = this.storeItemStack(var1);
+	private int storePartialItemStack(int var1, int var2, int metadata) {
+		int var3 = this.storeItemStack(var1, metadata);
 		if(var3 < 0) {
 			var3 = this.getFirstEmptyStack();
 		}
@@ -82,7 +86,7 @@
 			return var2;
 		} else {
 			if(this.mainInventory[var3] == null) {
-				this.mainInventory[var3] = new ItemStack(var1, 0);
+				this.mainInventory[var3] = new ItemStack(var1, 0).withMetadata(metadata);
 			}
 
 			int var4 = var2;
@@ -129,7 +133,7 @@
 
 	public boolean addItemStackToInventory(ItemStack var1) {
 		if(var1.itemDmg == 0) {
-			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize);
+			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize, var1.itemMetadata);
 			if(var1.stackSize == 0) {
 				return true;
 			}
@@ -145,23 +149,23 @@
 		}
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
+	public ItemStack decrStackSize(int slot, int stackSize) {
 		ItemStack[] var3 = this.mainInventory;
-		if(var1 >= this.mainInventory.length) {
+		if(slot >= this.mainInventory.length) {
 			var3 = this.armorInventory;
-			var1 -= this.mainInventory.length;
+			slot -= this.mainInventory.length;
 		}
 
-		if(var3[var1] != null) {
+		if(var3[slot] != null) {
 			ItemStack var4;
-			if(var3[var1].stackSize <= var2) {
-				var4 = var3[var1];
-				var3[var1] = null;
+			if(var3[slot].stackSize <= stackSize) {
+				var4 = var3[slot];
+				var3[slot] = null;
 				return var4;
 			} else {
-				var4 = var3[var1].splitStack(var2);
-				if(var3[var1].stackSize == 0) {
-					var3[var1] = null;
+				var4 = var3[slot].splitStack(stackSize);
+				if(var3[slot].stackSize == 0) {
+					var3[slot] = null;
 				}
 
 				return var4;
@@ -171,19 +175,19 @@
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
 		ItemStack[] var3 = this.mainInventory;
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
+		if(slot >= var3.length) {
+			slot -= var3.length;
 			var3 = this.armorInventory;
 		}
 
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
+		if(slot >= var3.length) {
+			slot -= var3.length;
 			var3 = this.craftingInventory;
 		}
 
-		var3[var1] = var2;
+		var3[slot] = itemStack;
 	}
 
 	public float getStrVsBlock(Block var1) {
@@ -191,83 +195,82 @@
 		if(this.mainInventory[this.currentItem] != null) {
 			var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
 		}
-
 		return var2;
 	}
 
-	public NBTTagList writeToNBT(NBTTagList var1) {
+	public NBTTagList writeToNBT(NBTTagList nBTTagList1) {
 		int var2;
-		NBTTagCompound var3;
+		NBTTagCompound nBTTagCompound3;
 		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
 			if(this.mainInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)var2);
-				this.mainInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)var2);
+				this.mainInventory[var2].writeToNBT(nBTTagCompound3);
+				nBTTagList1.setTag(nBTTagCompound3);
 			}
 		}
 
 		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
 			if(this.armorInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 100));
-				this.armorInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(var2 + 100));
+				this.armorInventory[var2].writeToNBT(nBTTagCompound3);
+				nBTTagList1.setTag(nBTTagCompound3);
 			}
 		}
 
 		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
 			if(this.craftingInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 80));
-				this.craftingInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(var2 + 80));
+				this.craftingInventory[var2].writeToNBT(nBTTagCompound3);
+				nBTTagList1.setTag(nBTTagCompound3);
 			}
 		}
 
-		return var1;
+		return nBTTagList1;
 	}
 
-	public void readFromNBT(NBTTagList var1) {
+	public void readFromNBT(NBTTagList nBTTagList1) {
 		this.mainInventory = new ItemStack[36];
-		this.armorInventory = new ItemStack[4];
+		this.armorInventory = new ItemStack[5];
 		this.craftingInventory = new ItemStack[4];
 
-		for(int var2 = 0; var2 < var1.tagCount(); ++var2) {
-			NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
-			int var4 = var3.getByte("Slot") & 255;
-			if(var4 >= 0 && var4 < this.mainInventory.length) {
-				this.mainInventory[var4] = new ItemStack(var3);
+		for(int var2 = 0; var2 < nBTTagList1.tagCount(); ++var2) {
+			NBTTagCompound nBTTagCompound3 = (NBTTagCompound)nBTTagList1.tagAt(var2);
+			int var4 = nBTTagCompound3.getByte("Slot") & 255;
+			if(var4 < this.mainInventory.length) {
+				this.mainInventory[var4] = new ItemStack(nBTTagCompound3);
 			}
 
 			if(var4 >= 80 && var4 < this.craftingInventory.length + 80) {
-				this.craftingInventory[var4 - 80] = new ItemStack(var3);
+				this.craftingInventory[var4 - 80] = new ItemStack(nBTTagCompound3);
 			}
 
 			if(var4 >= 100 && var4 < this.armorInventory.length + 100) {
-				this.armorInventory[var4 - 100] = new ItemStack(var3);
+				this.armorInventory[var4 - 100] = new ItemStack(nBTTagCompound3);
 			}
 		}
 
 	}
 
 	public int getSizeInventory() {
-		return this.mainInventory.length + 4;
+		return this.mainInventory.length + 5;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
+	public ItemStack getStackInSlot(int slot) {
 		ItemStack[] var2 = this.mainInventory;
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
+		if(slot >= var2.length) {
+			slot -= var2.length;
 			var2 = this.armorInventory;
 		}
 
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
+		if(slot >= var2.length) {
+			slot -= var2.length;
 			var2 = this.craftingInventory;
 		}
 
-		return var2[var1];
+		return var2[slot];
 	}
 
 	public String getInvName() {
@@ -298,26 +301,12 @@
 
 	public int getTotalArmorValue() {
 		int var1 = 0;
-		int var2 = 0;
-		int var3 = 0;
-
-		for(int var4 = 0; var4 < this.armorInventory.length; ++var4) {
-			if(this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
-				int var5 = this.armorInventory[var4].getMaxDamage();
-				int var6 = this.armorInventory[var4].itemDmg;
-				int var7 = var5 - var6;
-				var2 += var7;
-				var3 += var5;
-				int var8 = ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
-				var1 += var8;
+		for (int var4 = 0; var4 < this.armorInventory.length; ++var4) {
+			if (this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
+				var1 += ((ItemArmor) this.armorInventory[var4].getItem()).defense;
 			}
 		}
-
-		if(var3 == 0) {
-			return 0;
-		} else {
-			return (var1 - 1) * var2 / var3 + 1;
-		}
+		return var1;
 	}
 
 	public void damageArmor(int var1) {
@@ -355,22 +344,22 @@
 		this.inventoryChanged = true;
 	}
 
-	public boolean getInventoryEqual(InventoryPlayer var1) {
+	public boolean getInventoryEqual(InventoryPlayer inventoryPlayer1) {
 		int var2;
 		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.mainInventory[var2], this.mainInventory[var2])) {
+			if(!this.getItemStacksEqual(inventoryPlayer1.mainInventory[var2], this.mainInventory[var2])) {
 				return false;
 			}
 		}
 
 		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.armorInventory[var2], this.armorInventory[var2])) {
+			if(!this.getItemStacksEqual(inventoryPlayer1.armorInventory[var2], this.armorInventory[var2])) {
 				return false;
 			}
 		}
 
 		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.craftingInventory[var2], this.craftingInventory[var2])) {
+			if(!this.getItemStacksEqual(inventoryPlayer1.craftingInventory[var2], this.craftingInventory[var2])) {
 				return false;
 			}
 		}
@@ -383,21 +372,21 @@
 	}
 
 	public InventoryPlayer copyInventory() {
-		InventoryPlayer var1 = new InventoryPlayer((EntityPlayer)null);
+		InventoryPlayer inventoryPlayer1 = new InventoryPlayer((EntityPlayer)null);
 
 		int var2;
 		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			var1.mainInventory[var2] = this.mainInventory[var2] != null ? this.mainInventory[var2].copy() : null;
+			inventoryPlayer1.mainInventory[var2] = this.mainInventory[var2] != null ? this.mainInventory[var2].copy() : null;
 		}
 
 		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			var1.armorInventory[var2] = this.armorInventory[var2] != null ? this.armorInventory[var2].copy() : null;
+			inventoryPlayer1.armorInventory[var2] = this.armorInventory[var2] != null ? this.armorInventory[var2].copy() : null;
 		}
 
 		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			var1.craftingInventory[var2] = this.craftingInventory[var2] != null ? this.craftingInventory[var2].copy() : null;
+			inventoryPlayer1.craftingInventory[var2] = this.craftingInventory[var2] != null ? this.craftingInventory[var2].copy() : null;
 		}
 
-		return var1;
+		return inventoryPlayer1;
 	}
 }
--- net/minecraft/src/Session.java
+++ net/minecraft/src/Session.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Random;
 
 public class Session {
 	public static List registeredBlocksList = new ArrayList();
@@ -12,37 +13,9 @@
 	public Session(String var1, String var2) {
 		this.username = var1;
 		this.sessionId = var2;
-	}
 
-	static {
-		registeredBlocksList.add(Block.stone);
-		registeredBlocksList.add(Block.cobblestone);
-		registeredBlocksList.add(Block.brick);
-		registeredBlocksList.add(Block.dirt);
-		registeredBlocksList.add(Block.planks);
-		registeredBlocksList.add(Block.wood);
-		registeredBlocksList.add(Block.leaves);
-		registeredBlocksList.add(Block.torch);
-		registeredBlocksList.add(Block.stairSingle);
-		registeredBlocksList.add(Block.glass);
-		registeredBlocksList.add(Block.cobblestoneMossy);
-		registeredBlocksList.add(Block.sapling);
-		registeredBlocksList.add(Block.plantYellow);
-		registeredBlocksList.add(Block.plantRed);
-		registeredBlocksList.add(Block.mushroomBrown);
-		registeredBlocksList.add(Block.mushroomRed);
-		registeredBlocksList.add(Block.sand);
-		registeredBlocksList.add(Block.gravel);
-		registeredBlocksList.add(Block.sponge);
-		registeredBlocksList.add(Block.cloth);
-		registeredBlocksList.add(Block.oreCoal);
-		registeredBlocksList.add(Block.oreIron);
-		registeredBlocksList.add(Block.oreGold);
-		registeredBlocksList.add(Block.blockSteel);
-		registeredBlocksList.add(Block.blockGold);
-		registeredBlocksList.add(Block.bookshelf);
-		registeredBlocksList.add(Block.tnt);
-		registeredBlocksList.add(Block.obsidian);
-		System.out.println(registeredBlocksList.size());
+		if (this.username.equals("Player")) {
+			this.username = "Player" + new Random().nextInt(1000);
+		}
 	}
 }
--- net/minecraft/src/TextureFX.java
+++ net/minecraft/src/TextureFX.java
@@ -10,18 +10,18 @@
 	public int tileSize = 1;
 	public int tileImage = 0;
 
-	public TextureFX(int var1) {
-		this.iconIndex = var1;
+	public TextureFX(int index) {
+		this.iconIndex = index;
 	}
 
 	public void onTick() {
 	}
 
-	public void bindImage(RenderEngine var1) {
+	public void bindImage(RenderEngine renderEngine) {
 		if(this.tileImage == 0) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.getTexture("/terrain.png"));
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture("/terrain.png"));
 		} else if(this.tileImage == 1) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.getTexture("/gui/items.png"));
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture("/gui/items.png"));
 		}
 
 	}
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -1,27 +1,37 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.GuiCreative;
+import io.github.bluestaggo.mcdiverge.GuiRecipeGuide;
+import io.github.bluestaggo.mcdiverge.GuiRefabricator;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
 import net.minecraft.client.Minecraft;
 
 public class EntityPlayerSP extends EntityPlayer {
 	public MovementInput movementInput;
 	private Minecraft mc;
+	private boolean wasJumping;
 
-	public EntityPlayerSP(Minecraft var1, World var2, Session var3) {
-		super(var2);
-		this.mc = var1;
-		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var3.username + ".png";
-			System.out.println("Loading texture " + this.skinUrl);
+	public EntityPlayerSP(Minecraft mc, World worldObj, Session session) {
+		super(worldObj);
+		this.mc = mc;
+		if (session != null && session.username != null && session.username.length() > 0) {
+			boolean useBlueStagSkin = session.username.matches("Player[0-9]{0,4}");
+			if (useBlueStagSkin) {
+				this.skinUrl = "https://raw.githubusercontent.com/BlueStaggo/BlueStaggo/main/skin-mc-diverge.png";
+			} else {
+				this.skinUrl = "http://www.minecraft.net/skin/" + session.username + ".png";
+			}
+			this.username = session.username;
 		}
-
-		this.username = var3.username;
 	}
 
 	public void updateEntityActionState() {
 		super.updateEntityActionState();
 		this.moveStrafing = this.movementInput.moveStrafe;
 		this.moveForward = this.movementInput.moveForward;
+		this.wasJumping = this.isJumping;
 		this.isJumping = this.movementInput.jump;
+		this.justJumped = this.movementInput.jump && !this.wasJumping;
 	}
 
 	public void onLivingUpdate() {
@@ -41,61 +51,78 @@
 		this.movementInput.checkKeyForMovementInput(var1, var2);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Score", this.score);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.score = var1.getInteger("Score");
-	}
-
-	public void displayGUIChest(IInventory var1) {
-		this.mc.displayGuiScreen(new GuiChest(this.inventory, var1));
-	}
-
-	public void displayGUIEditSign(TileEntitySign var1) {
-		this.mc.displayGuiScreen(new GuiEditSign(var1));
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setInteger("Score", this.score);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		this.score = compoundTag.getInteger("Score");
+	}
+
+	public void displayGUIChest(IInventory inventory) {
+		this.mc.displayGuiScreen(new GuiChest(this.inventory, inventory));
+	}
+
+	public void displayGUIEditSign(TileEntitySign signTileEntity) {
+		this.mc.displayGuiScreen(new GuiEditSign(signTileEntity));
 	}
 
 	public void displayWorkbenchGUI() {
 		this.mc.displayGuiScreen(new GuiCrafting(this.inventory));
 	}
 
-	public void displayGUIFurnace(TileEntityFurnace var1) {
-		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, var1));
-	}
-
-	public void attackEntity(Entity var1) {
-		int var2 = this.inventory.getDamageVsEntity(var1);
+	public void displayGUIFurnace(TileEntityFurnace furnaceTileEntity) {
+		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, furnaceTileEntity));
+	}
+
+	public void displayGUIRefabricator(TileEntityRefabricator refabricatorTileEntity) {
+		this.mc.displayGuiScreen(new GuiRefabricator(this.inventory, refabricatorTileEntity));
+	}
+
+	public void displayGUIRecipeGuide() {
+		this.mc.displayGuiScreen(new GuiRecipeGuide());
+	}
+
+	public void displayGUIRecipeGuide(ItemStack itemStack) {
+		this.mc.displayGuiScreen(new GuiRecipeGuide(itemStack));
+	}
+
+	public void displayGUICreative() {
+		if (this.creative || this.mc.options.creativeDebug) {
+			this.mc.displayGuiScreen(new GuiCreative(this.inventory, this.mc));
+		}
+	}
+
+	public void attackEntity(Entity entity) {
+		int var2 = this.inventory.getDamageVsEntity(entity);
 		if(var2 > 0) {
-			var1.attackEntityFrom(this, var2);
+			entity.attackEntityFrom(this, var2);
 			ItemStack var3 = this.getCurrentEquippedItem();
-			if(var3 != null && var1 instanceof EntityLiving) {
-				var3.hitEntity((EntityLiving)var1);
+			if(var3 != null && entity instanceof EntityLiving) {
+				var3.hitEntity((EntityLiving)entity);
 				if(var3.stackSize <= 0) {
 					var3.onItemDestroyedByUse(this);
 					this.destroyCurrentEquippedItem();
 				}
 			}
 		}
-
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
-		this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, var1, this, -0.5F));
+	public void onItemPickup(Entity entity, int var2) {
+		this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, entity, this, -0.5F));
 	}
 
 	public int getPlayerArmorValue() {
 		return this.inventory.getTotalArmorValue();
 	}
 
-	public void interactWithEntity(Entity var1) {
-		if(!var1.interact(this)) {
+	public void interactWithEntity(Entity entity) {
+		if(!entity.interact(this)) {
 			ItemStack var2 = this.getCurrentEquippedItem();
-			if(var2 != null && var1 instanceof EntityLiving) {
-				var2.useItemOnEntity((EntityLiving)var1);
+			if(var2 != null && entity instanceof EntityLiving) {
+				var2.useItemOnEntity((EntityLiving)entity);
 				if(var2.stackSize <= 0) {
 					var2.onItemDestroyedByUse(this);
 					this.destroyCurrentEquippedItem();
@@ -105,7 +132,7 @@
 		}
 	}
 
-	public void sendChatMessage(String var1) {
+	public void sendChatMessage(String chatMessage) {
 	}
 
 	public void onPlayerUpdate() {
@@ -113,5 +140,30 @@
 
 	public boolean isSneaking() {
 		return this.movementInput.sneak;
+	}
+
+	public boolean isRunning() {
+		return this.movementInput.run && !this.energyRegen;
+	}
+
+	public void setHealth(int var1) {
+		int var2 = this.health - var1;
+		if(var2 <= 0) {
+			this.health = var1;
+			if(var2 < 0) {
+				this.heartsLife = this.heartsHalvesLife / 2;
+			}
+		} else {
+			this.prevDamage = var2;
+			this.prevHealth = this.health;
+			this.heartsLife = this.heartsHalvesLife;
+			this.damageEntity(var2);
+			this.hurtTime = this.maxHurtTime = 10;
+			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+		}
+	}
+
+	public void respawnPlayer() {
+		this.mc.respawn();
 	}
 }
--- net/minecraft/src/Packet52MultiBlockChange.java
+++ net/minecraft/src/Packet52MultiBlockChange.java
@@ -16,61 +16,61 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.size = var1.readShort() & '\uffff';
+	public Packet52MultiBlockChange(int xPosition, int zPosition, short[] data, int size, World world) {
+		this.isChunkDataPacket = true;
+		this.xPosition = xPosition;
+		this.zPosition = zPosition;
+		this.size = size;
+		this.coordinateArray = new short[size];
+		this.typeArray = new byte[size];
+		this.metadataArray = new byte[size];
+		Chunk chunk6 = world.getChunkFromChunkCoords(xPosition, zPosition);
+
+		for(int var7 = 0; var7 < size; ++var7) {
+			int var8 = data[var7] >> 12 & 15;
+			int var9 = data[var7] >> 8 & 15;
+			int var10 = data[var7] & 255;
+			this.coordinateArray[var7] = data[var7];
+			this.typeArray[var7] = (byte)chunk6.getBlockID(var8, var10, var9);
+			this.metadataArray[var7] = (byte)chunk6.getBlockMetadata(var8, var10, var9);
+		}
+
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.size = dataInputStream.readShort() & 65535;
 		this.coordinateArray = new short[this.size];
 		this.typeArray = new byte[this.size];
 		this.metadataArray = new byte[this.size];
 
 		for(int var2 = 0; var2 < this.size; ++var2) {
-			this.coordinateArray[var2] = var1.readShort();
+			this.coordinateArray[var2] = dataInputStream.readShort();
 		}
 
-		var1.readFully(this.typeArray);
-		var1.readFully(this.metadataArray);
+		dataInputStream.readFully(this.typeArray);
+		dataInputStream.readFully(this.metadataArray);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeShort((short)this.size);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeShort((short)this.size);
 
 		for(int var2 = 0; var2 < this.size; ++var2) {
-			var1.writeShort(this.coordinateArray[var2]);
+			dataOutputStream.writeShort(this.coordinateArray[var2]);
 		}
 
-		var1.write(this.typeArray);
-		var1.write(this.metadataArray);
+		dataOutputStream.write(this.typeArray);
+		dataOutputStream.write(this.metadataArray);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleMultiBlockChange(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMultiBlockChange(this);
 	}
 
 	public int getPacketSize() {
 		return 10 + this.size * 4;
-	}
-
-	public Packet52MultiBlockChange(int var1, int var2, short[] var3, int var4, World var5) {
-		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.zPosition = var2;
-		this.size = var4;
-		this.coordinateArray = new short[var4];
-		this.typeArray = new byte[var4];
-		this.metadataArray = new byte[var4];
-		Chunk var6 = var5.getChunkFromChunkCoords(var1, var2);
-
-		for(int var7 = 0; var7 < var4; ++var7) {
-			int var8 = var3[var7] >> 12 & 15;
-			int var9 = var3[var7] >> 8 & 15;
-			int var10 = var3[var7] & 255;
-			this.coordinateArray[var7] = var3[var7];
-			this.typeArray[var7] = (byte)var6.getBlockID(var8, var10, var9);
-			this.metadataArray[var7] = (byte)var6.getBlockMetadata(var8, var10, var9);
-		}
-
 	}
 }
--- net/minecraft/src/GuiConflictWarning.java
+++ net/minecraft/src/GuiConflictWarning.java
@@ -12,22 +12,22 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Back to title screen"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 0) {
 				this.mc.displayGuiScreen(new GuiMainMenu());
 			}
 
 		}
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, "Level save conflict", this.width / 2, this.height / 4 - 60 + 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Level save conflict", this.width / 2, this.height / 4 - 60 + 20, 0xFFFFFF);
 		this.drawString(this.fontRenderer, "Minecraft detected a conflict in the level save data.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
 		this.drawString(this.fontRenderer, "This could be caused by two copies of the game", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
 		this.drawString(this.fontRenderer, "accessing the same level.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 27, 10526880);
 		this.drawString(this.fontRenderer, "To prevent level corruption, the current game has quit.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 45, 10526880);
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -5,31 +5,31 @@
 public class BlockSand extends Block {
 	public static boolean fallInstantly = false;
 
-	public BlockSand(int var1, int var2) {
-		super(var1, var2, Material.sand);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.tryToFall(var1, var2, var3, var4);
-	}
-
-	private void tryToFall(World var1, int var2, int var3, int var4) {
-		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-			EntityFallingSand var8 = new EntityFallingSand(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F, this.blockID);
+	public BlockSand(int id, int tex) {
+		super(id, tex, Material.sand);
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		this.tryToFall(worldObj, x, y, z);
+	}
+
+	private void tryToFall(World worldObj, int x, int y, int z) {
+		if(canFallBelow(worldObj, x, y - 1, z) && y >= 0) {
+			EntityFallingSand entityFallingSand8 = new EntityFallingSand(worldObj, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, this.blockID);
 			if(fallInstantly) {
-				while(!var8.isDead) {
-					var8.onUpdate();
+				while(!entityFallingSand8.isDead) {
+					entityFallingSand8.onUpdate();
 				}
 			} else {
-				var1.spawnEntityInWorld(var8);
+				worldObj.spawnEntityInWorld(entityFallingSand8);
 			}
 		}
 
@@ -39,15 +39,15 @@
 		return 3;
 	}
 
-	public static boolean canFallBelow(World var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
+	public static boolean canFallBelow(World worldObj, int x, int y, int z) {
+		int var4 = worldObj.getBlockId(x, y, z);
 		if(var4 == 0) {
 			return true;
 		} else if(var4 == Block.fire.blockID) {
 			return true;
 		} else {
-			Material var5 = Block.blocksList[var4].material;
-			return var5 == Material.water ? true : var5 == Material.lava;
+			Material material5 = Block.blocksList[var4].material;
+			return material5 == Material.water ? true : material5 == Material.lava;
 		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TreePopulator.java
@@ -1,0 +1,97 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.WorldGenTrees;
+import net.minecraft.src.WorldGenerator;
+
+public class TreePopulator {
+	private WorldGenerator tree = new WorldGenTrees();
+
+	private WorldGenerator bigTree = null;
+	private int bigTreeDamp;
+	private int bigTreeMax;
+
+	private WorldGenerator highTree = null;
+	private int highTreeMinY;
+	private int highTreeMaxY;
+
+	private WorldGenerator shrub = null;
+	private int shrubRarity;
+
+	private double densityMin = 4.0F;
+	private double densityMax = 8.0F;
+	private double densityDamp = 2.0F;
+
+	public void populate(PopulatorHost host) {
+		double treeDensity = (host.noise.generateNoiseOctaves((double)host.x * 0.5D, (double)host.z * 0.5D) / 8.0D
+				+ host.rand.nextDouble() * (densityMax - densityMin) + densityMin) / densityDamp;
+		if (Double.isInfinite(treeDensity)) {
+			treeDensity = 10.0D;
+		}
+		int densityInt = (int)treeDensity;
+		if(densityInt < 0) {
+			densityInt = 0;
+		}
+
+		if(host.rand.nextInt(10) == 0) {
+			++densityInt;
+		}
+
+		WorldGenerator placedTree = tree;
+		if(bigTree != null && (densityInt >= bigTreeMax
+				|| host.rand.nextInt(Math.max((bigTreeMax - densityInt) / bigTreeDamp, 1)) == 0)) {
+			placedTree = bigTree;
+		} else if (densityInt > 0) {
+			int s = host.rand.nextInt(densityInt);
+			placedTree.setScale(s / 3.0 - 1, s / 2.0, s / 3.0);
+		}
+
+		for(int count = 0; count < Math.min(densityInt, 8); ++count) {
+			int x = host.x + host.rand.nextInt(16) + 8;
+			int z = host.z + host.rand.nextInt(16) + 8;
+			int y = host.worldObj.getHeightValue(x, z);
+
+			if (highTree != null && y > host.rand.nextInt(highTreeMaxY - highTreeMinY) + highTreeMinY)
+				placedTree = highTree;
+
+			placedTree.generate(host.worldObj, host.rand, x, y, z);
+		}
+
+		if (shrub != null && host.rand.nextInt(Math.max(densityInt + shrubRarity, 1)) == 0) {
+			int x = host.x + host.rand.nextInt(16) + 8;
+			int z = host.z + host.rand.nextInt(16) + 8;
+			shrub.generate(host.worldObj, host.rand, x, host.worldObj.getHeightValue(x, z), z);
+		}
+	}
+
+	public TreePopulator withTree(WorldGenerator tree) {
+		this.tree = tree;
+		return this;
+	}
+
+	public TreePopulator withBigTree(WorldGenerator bigTree, int bigTreeMax, int bigTreeDamp) {
+		this.bigTree = bigTree;
+		this.bigTreeMax = bigTreeMax;
+		this.bigTreeDamp = bigTreeDamp;
+		return this;
+	}
+
+	public TreePopulator withDensity(double densityMin, double densityMax, double densityDamp) {
+		this.densityMin = densityMin;
+		this.densityMax = densityMax;
+		this.densityDamp = densityDamp;
+		return this;
+	}
+
+	public TreePopulator withShrub(WorldGenerator shrub, int shrubRarity) {
+		this.shrub = shrub;
+		this.shrubRarity = shrubRarity;
+		return this;
+	}
+
+	public TreePopulator withHighTree(WorldGenerator highTree, int highTreeMinY, int highTreeMaxY) {
+		this.highTree = highTree;
+		this.highTreeMinY = highTreeMinY;
+		this.highTreeMaxY = highTreeMaxY;
+		return this;
+	}
+}
--- net/minecraft/src/ThreadServerApplication.java
+++ net/minecraft/src/ThreadServerApplication.java
@@ -5,9 +5,9 @@
 public final class ThreadServerApplication extends Thread {
 	final MinecraftServer mcServer;
 
-	public ThreadServerApplication(String var1, MinecraftServer var2) {
-		super(var1);
-		this.mcServer = var2;
+	public ThreadServerApplication(String threadName, MinecraftServer minecraftServer) {
+		super(threadName);
+		this.mcServer = minecraftServer;
 	}
 
 	public void run() {
--- net/minecraft/src/RenderGiantZombie.java
+++ net/minecraft/src/RenderGiantZombie.java
@@ -10,7 +10,7 @@
 		this.scale = var3;
 	}
 
-	protected void preRenderScale(EntityGiantZombie var1, float var2) {
+	protected void preRenderScale(EntityGiantZombie entityGiantZombie1, float var2) {
 		GL11.glScalef(this.scale, this.scale, this.scale);
 	}
 
--- net/minecraft/src/BlockPressurePlate.java
+++ net/minecraft/src/BlockPressurePlate.java
@@ -6,19 +6,19 @@
 public class BlockPressurePlate extends Block {
 	private EnumMobType triggerMobType;
 
-	protected BlockPressurePlate(int var1, int var2, EnumMobType var3) {
-		super(var1, var2, Material.rock);
-		this.triggerMobType = var3;
+	protected BlockPressurePlate(int id, int tex, EnumMobType triggerMobType) {
+		super(id, tex, Material.rock);
+		this.triggerMobType = triggerMobType;
 		this.setTickOnLoad(true);
-		float var4 = 1.0F / 16.0F;
-		this.setBlockBounds(var4, 0.0F, var4, 1.0F - var4, 1.0F / 32.0F, 1.0F - var4);
+		float var4 = 0.0625F;
+		this.setBlockBounds(var4, 0.0F, var4, 1.0F - var4, 0.03125F, 1.0F - var4);
 	}
 
 	public int tickRate() {
 		return 20;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -30,108 +30,108 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
 		boolean var6 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+		if(!worldObj.isBlockNormalCube(x, y - 1, z)) {
 			var6 = true;
 		}
 
 		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 0) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 1) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	private void setStateIfMobInteractsWithPlate(World var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockMetadata(x, y, z) != 0) {
+			this.setStateIfMobInteractsWithPlate(worldObj, x, y, z);
+		}
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(world.getBlockMetadata(x, y, z) != 1) {
+			this.setStateIfMobInteractsWithPlate(world, x, y, z);
+		}
+	}
+
+	private void setStateIfMobInteractsWithPlate(World worldObj, int x, int y, int z) {
+		boolean var5 = worldObj.getBlockMetadata(x, y, z) == 1;
 		boolean var6 = false;
-		float var7 = 2.0F / 16.0F;
-		List var8 = null;
+		float var7 = 0.125F;
+		List list8 = null;
 		if(this.triggerMobType == EnumMobType.everything) {
-			var8 = var1.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = worldObj.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + var7), (double)y, (double)((float)z + var7), (double)((float)(x + 1) - var7), (double)y + 0.25D, (double)((float)(z + 1) - var7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.mobs) {
-			var8 = var1.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = worldObj.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + var7), (double)y, (double)((float)z + var7), (double)((float)(x + 1) - var7), (double)y + 0.25D, (double)((float)(z + 1) - var7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.players) {
-			var8 = var1.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = worldObj.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + var7), (double)y, (double)((float)z + var7), (double)((float)(x + 1) - var7), (double)y + 0.25D, (double)((float)(z + 1) - var7)));
 		}
 
-		if(var8.size() > 0) {
+		if(list8.size() > 0) {
 			var6 = true;
 		}
 
 		if(var6 && !var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
+			worldObj.setBlockMetadataWithNotify(x, y, z, 1);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			worldObj.markBlocksDirty(x, y, z, x, y, z);
+			worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
 		}
 
 		if(!var6 && var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
+			worldObj.setBlockMetadataWithNotify(x, y, z, 0);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			worldObj.markBlocksDirty(x, y, z, x, y, z);
+			worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
 		}
 
 		if(var6) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+			worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
 		if(var5 > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
+		super.onBlockRemoval(worldObj, x, y, z);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-		float var6 = 1.0F / 16.0F;
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		boolean var5 = blockAccess.getBlockMetadata(x, y, z) == 1;
+		float var6 = 0.0625F;
 		if(var5) {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 1.0F / 32.0F, 1.0F - var6);
+			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.03125F, 1.0F - var6);
 		} else {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 1.0F / 16.0F, 1.0F - var6);
+			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.0625F, 1.0F - var6);
 		}
 
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) > 0;
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
+		return blockAccess.getBlockMetadata(x, y, z) > 0;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) == 0 ? false : var5 == 1;
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
+		return worldObj.getBlockMetadata(x, y, z) == 0 ? false : side == 1;
 	}
 
 	public boolean canProvidePower() {
@@ -140,7 +140,7 @@
 
 	public void setBlockBoundsForItemRender() {
 		float var1 = 0.5F;
-		float var2 = 2.0F / 16.0F;
+		float var2 = 0.125F;
 		float var3 = 0.5F;
 		this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
 	}
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -1,5 +1,8 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemCharm;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+
 import java.util.List;
 
 public class EntityPlayer extends EntityLiving {
@@ -12,6 +15,17 @@
 	public int swingProgressInt = 0;
 	public String username;
 	private int damageRemainder = 0;
+	public float energy = 20.0F;
+	public float energyBoost = 0.0F;
+	public boolean energyRegen;
+	public float mana = 20.0F;
+	public boolean showMana = false;
+	public boolean creative;
+	private int slowHealTick = 0;
+	public boolean slowHealing = false;
+	public float bounce = 0.0F;
+	private float bounceHeight = 0.0F;
+	protected boolean justJumped = false;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -22,6 +36,19 @@
 		this.unusedRotation = 180.0F;
 		this.fireResistance = 20;
 		this.texture = "/char.png";
+		this.creative = var1.creative;
+	}
+
+	public boolean justJumped() {
+		return this.justJumped;
+	}
+
+	public void midairJump() {
+		this.motionY = this.isSneaking() ? 0.32D : 0.64D;
+		this.motionX *= 2.0D;
+		this.motionZ *= 2.0D;
+		this.fallDistance = -1.0F;
+		this.playSound("diverge.wings", 1.0F, 1.0F);
 	}
 
 	public void updateRidden() {
@@ -53,13 +80,80 @@
 	}
 
 	public void onLivingUpdate() {
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 4 == 0) {
+		this.preUpdateCharms();
+
+		for (ItemStack armor : this.inventory.armorInventory) {
+			if (armor == null) continue;
+			Item item = Item.itemsList[armor.itemID];
+			if (item instanceof ItemCharm) {
+				((ItemCharm) item).updateCharm(this, armor);
+				if (armor.itemID == Item.slimeShoes.shiftedIndex && this.bounceHeight > 0.0F) {
+					this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+					armor.damageItem(1);
+					this.motionX *= 2.0;
+					this.motionZ *= 2.0;
+					this.motionY = Math.sqrt(2 * 0.08 * this.bounceHeight); // Thanks https://qr.ae/prhm4v
+					this.bounceHeight = 0.0F;
+				}
+			}
+		}
+
+		if((this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 4 == 0)
+			|| this.ticksExisted % 5 == 0 && this.healthRegen > 0) {
 			this.heal(1);
-		}
+			this.healthRegen--;
+		}
+
+		if (this.slowHealing && this.health < 20) {
+			if (--this.slowHealTick <= 0) {
+				this.heal(1);
+				this.slowHealTick = 1200;
+			}
+		} else {
+			this.slowHealTick = 1200;
+		}
+
+		ItemStack currentItem = this.inventory.getCurrentItem();
+		this.showMana = (currentItem != null && Item.itemsList[currentItem.itemID].isMagic()) || this.mana < 20;
+
+		if (currentItem != null && this.creative) {
+			currentItem.itemDmg = 0;
+		}
+		for (int i = 0; i < 5; i++) {
+			currentItem = this.inventory.armorItemInSlot(i);
+			if (currentItem != null && this.creative) {
+				currentItem.itemDmg = 0;
+			}
+		}
+
+		this.mana += (this.mana / 50.0F) + 0.1F;
+		this.mana = MathHelper.clamp(this.mana, 0.0F, 20.0F);
 
 		this.inventory.decrementAnimations();
 		this.prevCameraYaw = this.cameraYaw;
 		super.onLivingUpdate();
+
+		if (this.creative) {
+			this.health = 20;
+			this.energy = 20.0F;
+			this.mana = 20.0F;
+			this.hurtTime = 0;
+		}
+
+		if (this.noClip) {
+			if (this.moveForward != 0 || this.moveStrafing != 0) {
+				this.motionX *= 1.8F;
+				this.motionZ *= 1.8F;
+			} else {
+				this.motionX = 0;
+				this.motionZ = 0;
+			}
+
+			this.motionY = this.isSneaking() ? -1 : this.isJumping ? 1 : 0;
+			this.health = 20;
+			this.energy = 20;
+		}
+
 		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
 		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
 		if(var1 > 0.1F) {
@@ -77,34 +171,75 @@
 		this.cameraYaw += (var1 - this.cameraYaw) * 0.4F;
 		this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
 		if(this.health > 0) {
-			List var3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
-			if(var3 != null) {
-				for(int var4 = 0; var4 < var3.size(); ++var4) {
-					this.collideWithPlayer((Entity)var3.get(var4));
+			List list3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
+			if(list3 != null) {
+				for (Object o : list3) {
+					this.collideWithPlayer((Entity) o);
 				}
 			}
 		}
 
-	}
-
-	private void collideWithPlayer(Entity var1) {
-		var1.onCollideWithPlayer(this);
+		if (this.isRunning()) {
+			this.energy -= 0.2F;
+		} else {
+			this.energy += 0.1F;
+		}
+		this.energy += this.energyBoost;
+		this.energy = MathHelper.clamp(this.energy, 0.0F, 20.0F);
+		this.energyRegen = this.energyRegen ? this.energy < 20 : this.energy == 0;
+
+		if (this.rand.nextInt(5) == 0) {
+			this.energyBoost -= 0.001F;
+		}
+		if (this.energyBoost < 0.0F) {
+			this.energyBoost = 0.0F;
+		}
+	}
+
+	public void preUpdateCharms() {
+		this.slowHealing = false;
+		this.bounce = 0.0F;
+		this.runSpeed = (this.creative ? 3.5F : 1.4F) * (1.0F + energyBoost);
+	}
+
+	protected void jump() {
+		super.jump();
+		if (this.creative && this.isRunning()) {
+			this.motionY *= 2.5F;
+		}
+		this.justJumped = false;
+	}
+
+	protected void fall(float distance) {
+		if (this.bounce > 0.0F && distance > 1.5F) {
+			this.bounceHeight = distance * this.bounce;
+			super.fall(distance * (1.0F - this.bounce));
+		} else {
+			super.fall(distance);
+		}
+	}
+
+	private void collideWithPlayer(Entity entity) {
+		entity.onCollideWithPlayer(this);
 	}
 
 	public int getScore() {
 		return this.score;
 	}
 
-	public void onDeath(Entity var1) {
+	public void onDeath(Entity entity) {
 		this.setSize(0.2F, 0.2F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.motionY = (double)0.1F;
 		if(this.username.equals("Notch")) {
 			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
 		}
+		if(this.username.equals("BlueStag256")) {
+			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.cookie, 1), true);
+		}
 
 		this.inventory.dropAllItems();
-		if(var1 != null) {
+		if(entity != null) {
 			this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 			this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 		} else {
@@ -114,49 +249,49 @@
 		this.yOffset = 0.1F;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
-		this.score += var2;
-	}
-
-	public void dropPlayerItem(ItemStack var1) {
-		this.dropPlayerItemWithRandomChoice(var1, false);
-	}
-
-	public void dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
-		if(var1 != null) {
-			EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, var1);
-			var3.delayBeforeCanPickup = 40;
+	public void addToPlayerScore(Entity entity, int score) {
+		this.score += score;
+	}
+
+	public void dropPlayerItem(ItemStack itemStack) {
+		this.dropPlayerItemWithRandomChoice(itemStack, false);
+	}
+
+	public void dropPlayerItemWithRandomChoice(ItemStack itemStack, boolean isRandom) {
+		if(itemStack != null) {
+			EntityItem entityItem3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, itemStack);
+			entityItem3.delayBeforeCanPickup = 40;
 			float var4 = 0.1F;
 			float var5;
-			if(var2) {
+			if(isRandom) {
 				var5 = this.rand.nextFloat() * 0.5F;
 				float var6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-				var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-				var3.motionY = (double)0.2F;
+				entityItem3.motionX = (double)(-MathHelper.sin(var6) * var5);
+				entityItem3.motionZ = (double)(MathHelper.cos(var6) * var5);
+				entityItem3.motionY = (double)0.2F;
 			} else {
 				var4 = 0.3F;
-				var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
+				entityItem3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
+				entityItem3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
+				entityItem3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
 				var4 = 0.02F;
 				var5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
 				var4 *= this.rand.nextFloat();
-				var3.motionX += Math.cos((double)var5) * (double)var4;
-				var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var3.motionZ += Math.sin((double)var5) * (double)var4;
+				entityItem3.motionX += Math.cos((double)var5) * (double)var4;
+				entityItem3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem3.motionZ += Math.sin((double)var5) * (double)var4;
 			}
 
-			this.joinEntityItemWithWorld(var3);
+			this.joinEntityItemWithWorld(entityItem3);
 		}
 	}
 
-	protected void joinEntityItemWithWorld(EntityItem var1) {
-		this.worldObj.spawnEntityInWorld(var1);
+	protected void joinEntityItemWithWorld(EntityItem entityItem) {
+		this.worldObj.spawnEntityInWorld(entityItem);
 	}
 
-	public float getCurrentPlayerStrVsBlock(Block var1) {
-		float var2 = this.inventory.getStrVsBlock(var1);
+	public float getCurrentPlayerStrVsBlock(Block block) {
+		float var2 = this.inventory.getStrVsBlock(block);
 		if(this.isInsideOfMaterial(Material.water)) {
 			var2 /= 5.0F;
 		}
@@ -165,74 +300,99 @@
 			var2 /= 5.0F;
 		}
 
+		if(block.blockID == Block.wood.blockID && this.isSneaking()) {
+			var2 /= 4.0F;
+		}
+
 		return var2;
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		return this.inventory.canHarvestBlock(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Inventory");
-		this.inventory.readFromNBT(var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
-	}
-
-	public void displayGUIChest(IInventory var1) {
+	public boolean canHarvestBlock(Block block) {
+		return this.inventory.canHarvestBlock(block) && !this.creative;
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		NBTTagList nBTTagList2 = compoundTag.getTagList("Inventory");
+		this.inventory.readFromNBT(nBTTagList2);
+		this.energy = compoundTag.hasKey("Energy") ? compoundTag.getFloat("Energy") : 20.0F;
+		this.energyBoost = compoundTag.getFloat("EnergyBoost");
+		this.energyRegen = compoundTag.getBoolean("RegeneratingEnergy");
+		this.noClip = compoundTag.getBoolean("NoClip");
+		this.mana = compoundTag.hasKey("Mana") ? compoundTag.getFloat("Mana") : 20.0F;
+
+		int chunkVersion = compoundTag.getInteger("ChunkVersion");
+		if (chunkVersion < Chunk.CHUNK_VERSION_CURRENT) {
+			this.inventory.onChunkUpdate(chunkVersion);
+		}
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
+		compoundTag.setFloat("Energy", this.energy);
+		compoundTag.setFloat("EnergyBoost", this.energyBoost);
+		compoundTag.setBoolean("RegeneratingEnergy", this.energyRegen);
+		compoundTag.setBoolean("NoClip", this.noClip);
+		compoundTag.setFloat("Mana", this.mana);
+		compoundTag.setInteger("ChunkVersion", Chunk.CHUNK_VERSION_CURRENT);
+	}
+
+	public void displayGUIChest(IInventory inventory) {
 	}
 
 	public void displayWorkbenchGUI() {
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
+	public void onItemPickup(Entity entity, int var2) {
 	}
 
 	protected float getEyeHeight() {
 		return 0.12F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.entityAge = 0;
-		if(this.health <= 0) {
-			return false;
-		} else if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
+		if(this.creative || this.health <= 0 || (float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
 			return false;
 		} else {
-			if(var1 instanceof EntityMob || var1 instanceof EntityArrow) {
+			if(entity instanceof EntityMob || entity instanceof EntityArrow) {
 				if(this.worldObj.difficultySetting == 0) {
-					var2 = 0;
+					damage = 0;
 				}
 
 				if(this.worldObj.difficultySetting == 1) {
-					var2 = var2 / 3 + 1;
+					damage = damage / 3 + 1;
 				}
 
 				if(this.worldObj.difficultySetting == 3) {
-					var2 = var2 * 3 / 2;
+					damage = damage * 3 / 2;
 				}
 			}
 
-			int var3 = 25 - this.inventory.getTotalArmorValue();
-			int var4 = var2 * var3 + this.damageRemainder;
-			this.inventory.damageArmor(var2);
-			var2 = var4 / 25;
-			this.damageRemainder = var4 % 25;
-			return var2 == 0 ? false : super.attackEntityFrom(var1, var2);
+			return damage != 0 && super.attackEntityFrom(entity, damage);
 		}
 	}
 
-	public void displayGUIFurnace(TileEntityFurnace var1) {
-	}
-
-	public void displayGUIEditSign(TileEntitySign var1) {
-	}
-
-	public void interactWithEntity(Entity var1) {
+	public void displayGUIFurnace(TileEntityFurnace furnaceTileEntity) {
+	}
+
+	public void displayGUIEditSign(TileEntitySign signTileEntity) {
+	}
+
+	public void displayGUIRefabricator(TileEntityRefabricator refabricatorTileEntity) {
+	}
+
+	public void displayGUIRecipeGuide() {
+	}
+
+	public void displayGUIRecipeGuide(ItemStack itemStack) {
+	}
+
+	public void displayGUICreative() {
+	}
+
+	public void interactWithEntity(Entity entity) {
 	}
 
 	public ItemStack getCurrentEquippedItem() {
@@ -250,5 +410,40 @@
 	public void swingItem() {
 		this.swingProgressInt = -1;
 		this.isSwinging = true;
+	}
+
+	public boolean useMana(float var1) {
+		if (this.mana >= var1) {
+			this.mana -= var1;
+			return true;
+		}
+		return false;
+	}
+
+	public void attackEntity(Entity entity) {
+		int var2 = this.inventory.getDamageVsEntity(entity);
+		if(var2 > 0) {
+			entity.attackEntityFrom(this, var2);
+			ItemStack var3 = this.getCurrentEquippedItem();
+			if(var3 != null && entity instanceof EntityLiving) {
+				var3.hitEntity((EntityLiving)entity);
+				if(var3.stackSize <= 0) {
+					var3.onItemDestroyedByUse(this);
+					this.destroyCurrentEquippedItem();
+				}
+			}
+		}
+	}
+
+	protected void damageEntity(int var1) {
+		int var2 = 25 - this.inventory.getTotalArmorValue();
+		int var3 = var1 * var2 + this.damageRemainder;
+		this.inventory.damageArmor(var1);
+		var1 = var3 / 25;
+		this.damageRemainder = var3 % 25;
+		super.damageEntity(var1);
+	}
+
+	public void respawnPlayer() {
 	}
 }
--- net/minecraft/src/Packet11PlayerPosition.java
+++ net/minecraft/src/Packet11PlayerPosition.java
@@ -9,29 +9,29 @@
 		this.moving = true;
 	}
 
-	public Packet11PlayerPosition(double var1, double var3, double var5, double var7, boolean var9) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.stance = var5;
-		this.zPosition = var7;
-		this.onGround = var9;
+	public Packet11PlayerPosition(double x, double minY, double y, double z, boolean onGround) {
+		this.xPosition = x;
+		this.yPosition = minY;
+		this.stance = y;
+		this.zPosition = z;
+		this.onGround = onGround;
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/GameWindowListener.java
+++ net/minecraft/src/GameWindowListener.java
@@ -2,24 +2,25 @@
 
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+
 import net.minecraft.client.Minecraft;
 
 public final class GameWindowListener extends WindowAdapter {
 	final Minecraft mc;
 	final Thread thread;
 
-	public GameWindowListener(Minecraft var1, Thread var2) {
+	public GameWindowListener(Minecraft var1, Thread thread2) {
 		this.mc = var1;
-		this.thread = var2;
+		this.thread = thread2;
 	}
 
-	public void windowClosing(WindowEvent var1) {
+	public void windowClosing(WindowEvent windowEvent1) {
 		this.mc.shutdown();
 
 		try {
 			this.thread.join();
-		} catch (InterruptedException var3) {
-			var3.printStackTrace();
+		} catch (InterruptedException interruptedException3) {
+			interruptedException3.printStackTrace();
 		}
 
 		System.exit(0);
--- net/minecraft/src/Packet.java
+++ net/minecraft/src/Packet.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -11,24 +13,24 @@
 	private static Map packetClassToIdMap = new HashMap();
 	public boolean isChunkDataPacket = false;
 
-	static void addIdClassMapping(int var0, Class var1) {
-		if(packetIdToClassMap.containsKey(Integer.valueOf(var0))) {
-			throw new IllegalArgumentException("Duplicate packet id:" + var0);
-		} else if(packetClassToIdMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate packet class:" + var1);
+	static void addIdClassMapping(int id, Class packetClass) {
+		if(packetIdToClassMap.containsKey(id)) {
+			throw new IllegalArgumentException("Duplicate packet id:" + id);
+		} else if(packetClassToIdMap.containsKey(packetClass)) {
+			throw new IllegalArgumentException("Duplicate packet class:" + packetClass);
 		} else {
-			packetIdToClassMap.put(Integer.valueOf(var0), var1);
-			packetClassToIdMap.put(var1, Integer.valueOf(var0));
+			packetIdToClassMap.put(id, packetClass);
+			packetClassToIdMap.put(packetClass, id);
 		}
 	}
 
-	public static Packet getNewPacket(int var0) {
+	public static Packet getNewPacket(int id) {
 		try {
-			Class var1 = (Class)packetIdToClassMap.get(Integer.valueOf(var0));
-			return var1 == null ? null : (Packet)var1.newInstance();
-		} catch (Exception var2) {
-			var2.printStackTrace();
-			System.out.println("Skipping packet with id " + var0);
+			Class class1 = (Class)packetIdToClassMap.get(id);
+			return class1 == null ? null : (Packet)class1.newInstance();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
+			System.out.println("Skipping packet with id " + id);
 			return null;
 		}
 	}
@@ -37,31 +39,31 @@
 		return ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
 	}
 
-	public static Packet readPacket(DataInputStream var0) throws IOException {
-		int var1 = var0.read();
+	public static Packet readPacket(DataInputStream dataInputStream) throws IOException {
+		int var1 = dataInputStream.read();
 		if(var1 == -1) {
 			return null;
 		} else {
-			Packet var2 = getNewPacket(var1);
-			if(var2 == null) {
+			Packet packet2 = getNewPacket(var1);
+			if(packet2 == null) {
 				throw new IOException("Bad packet id " + var1);
 			} else {
-				var2.readPacketData(var0);
-				return var2;
+				packet2.readPacketData(dataInputStream);
+				return packet2;
 			}
 		}
 	}
 
-	public static void writePacket(Packet var0, DataOutputStream var1) throws IOException {
-		var1.write(var0.getPacketId());
-		var0.writePacket(var1);
+	public static void writePacket(Packet packet, DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(packet.getPacketId());
+		packet.writePacket(dataOutputStream);
 	}
 
-	public abstract void readPacketData(DataInputStream var1) throws IOException;
-
-	public abstract void writePacket(DataOutputStream var1) throws IOException;
-
-	public abstract void processPacket(NetHandler var1);
+	public abstract void readPacketData(DataInputStream dataInputStream1) throws IOException;
+
+	public abstract void writePacket(DataOutputStream dataOutputStream1) throws IOException;
+
+	public abstract void processPacket(NetHandler netHandler1);
 
 	public abstract int getPacketSize();
 
@@ -73,6 +75,9 @@
 		addIdClassMapping(4, Packet4UpdateTime.class);
 		addIdClassMapping(5, Packet5PlayerInventory.class);
 		addIdClassMapping(6, Packet6SpawnPosition.class);
+		addIdClassMapping(7, Packet7UseEntity.class);
+		addIdClassMapping(8, Packet8UpdateHealth.class);
+		addIdClassMapping(9, Packet9Respawn.class);
 		addIdClassMapping(10, Packet10Flying.class);
 		addIdClassMapping(11, Packet11PlayerPosition.class);
 		addIdClassMapping(12, Packet12PlayerLook.class);
@@ -82,6 +87,7 @@
 		addIdClassMapping(16, Packet16BlockItemSwitch.class);
 		addIdClassMapping(17, Packet17AddToInventory.class);
 		addIdClassMapping(18, Packet18ArmAnimation.class);
+		addIdClassMapping(19, Packet19WorldType.class);
 		addIdClassMapping(20, Packet20NamedEntitySpawn.class);
 		addIdClassMapping(21, Packet21PickupSpawn.class);
 		addIdClassMapping(22, Packet22Collect.class);
@@ -93,6 +99,7 @@
 		addIdClassMapping(32, Packet32EntityLook.class);
 		addIdClassMapping(33, Packet33RelEntityMoveLook.class);
 		addIdClassMapping(34, Packet34EntityTeleport.class);
+		addIdClassMapping(38, Packet38EntityStatus.class);
 		addIdClassMapping(50, Packet50PreChunk.class);
 		addIdClassMapping(51, Packet51MapChunk.class);
 		addIdClassMapping(52, Packet52MultiBlockChange.class);
--- /dev/null
+++ net/minecraft/src/GuiTextField.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+public class GuiTextField extends Gui {
+	private final FontRenderer fontRenderer;
+	private final int xPos;
+	private final int yPos;
+	private final int width;
+	private final int height;
+	private String text;
+	private int maxStringLength;
+	private int cursorCounter;
+	public boolean isFocused = false;
+	public boolean isEnabled = true;
+	private GuiScreen parentGuiScreen;
+
+	public GuiTextField(GuiScreen guiScreen1, FontRenderer fontRenderer2, int var3, int var4, int var5, int var6, String var7) {
+		this.parentGuiScreen = guiScreen1;
+		this.fontRenderer = fontRenderer2;
+		this.xPos = var3;
+		this.yPos = var4;
+		this.width = var5;
+		this.height = var6;
+		this.setText(var7);
+	}
+
+	public void setText(String var1) {
+		this.text = var1;
+	}
+
+	public String getText() {
+		return this.text;
+	}
+
+	public void updateCursorCounter() {
+		++this.cursorCounter;
+	}
+
+	public void textboxKeyTyped(char c1, int var2) {
+		if(this.isEnabled && this.isFocused) {
+//			if(c1 == 9) {
+//				this.parentGuiScreen.selectNextField();
+//			}
+
+			if(c1 == 22) {
+				String var3 = GuiScreen.getClipboardString();
+				if(var3 == null) {
+					var3 = "";
+				}
+
+				int var4 = 32 - this.text.length();
+				if(var4 > var3.length()) {
+					var4 = var3.length();
+				}
+
+				if(var4 > 0) {
+					this.text = this.text + var3.substring(0, var4);
+				}
+			}
+
+			if(var2 == 14 && this.text.length() > 0) {
+				this.text = this.text.substring(0, this.text.length() - 1);
+			}
+
+			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb"
+					.indexOf(c1) >= 0 && (this.text.length() < this.maxStringLength || this.maxStringLength == 0)) {
+				this.text = this.text + c1;
+			}
+
+		}
+	}
+
+	public void mouseClicked(int var1, int var2, int var3) {
+		boolean var4 = this.isEnabled && var1 >= this.xPos && var1 < this.xPos + this.width && var2 >= this.yPos && var2 < this.yPos + this.height;
+		this.setFocused(var4);
+	}
+
+	public void setFocused(boolean var1) {
+		if(var1 && !this.isFocused) {
+			this.cursorCounter = 0;
+		}
+
+		this.isFocused = var1;
+	}
+
+	public void drawTextBox() {
+		this.drawRect(this.xPos - 1, this.yPos - 1, this.xPos + this.width + 1, this.yPos + this.height + 1, -6250336);
+		this.drawRect(this.xPos, this.yPos, this.xPos + this.width, this.yPos + this.height, 0xFF000000);
+		if(this.isEnabled) {
+			boolean var1 = this.isFocused && this.cursorCounter / 6 % 2 == 0;
+			this.drawString(this.fontRenderer, this.text + (var1 ? "_" : ""), this.xPos + 4, this.yPos + (this.height - 8) / 2, 14737632);
+		} else {
+			this.drawString(this.fontRenderer, this.text, this.xPos + 4, this.yPos + (this.height - 8) / 2, 7368816);
+		}
+
+	}
+
+	public void setMaxStringLength(int var1) {
+		this.maxStringLength = var1;
+	}
+}
--- net/minecraft/src/ItemSeeds.java
+++ net/minecraft/src/ItemSeeds.java
@@ -3,19 +3,19 @@
 public class ItemSeeds extends Item {
 	private int blockType;
 
-	public ItemSeeds(int var1, int var2) {
-		super(var1);
-		this.blockType = var2;
+	public ItemSeeds(int id, int type) {
+		super(id);
+		this.blockType = type;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			int var8 = var3.getBlockId(var4, var5, var6);
+			int var8 = worldObj.getBlockId(x, y, z);
 			if(var8 == Block.tilledField.blockID) {
-				var3.setBlockWithNotify(var4, var5 + 1, var6, this.blockType);
-				--var1.stackSize;
+				worldObj.setBlockWithNotify(x, y + 1, z, this.blockType);
+				--itemStack.stackSize;
 				return true;
 			} else {
 				return false;
--- net/minecraft/src/IChunkLoader.java
+++ net/minecraft/src/IChunkLoader.java
@@ -5,9 +5,9 @@
 public interface IChunkLoader {
 	Chunk loadChunk(World var1, int var2, int var3) throws IOException;
 
-	void saveChunk(World var1, Chunk var2) throws IOException;
+	void saveChunk(World var1, Chunk chunk2) throws IOException;
 
-	void saveExtraChunkData(World var1, Chunk var2);
+	void saveExtraChunkData(World var1, Chunk chunk2);
 
 	void chunkTick();
 
--- net/minecraft/src/BlockWorkbench.java
+++ net/minecraft/src/BlockWorkbench.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class BlockWorkbench extends Block {
-	protected BlockWorkbench(int var1) {
-		super(var1, Material.wood);
+	protected BlockWorkbench(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 59;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? Block.planks.getBlockTextureFromSide(0) : (side != 2 && side != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		var5.displayWorkbenchGUI();
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayWorkbenchGUI();
 		return true;
 	}
 }
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -6,7 +6,10 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.WorldType;
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL15;
@@ -41,7 +44,7 @@
 	private int countEntitiesTotal;
 	private int countEntitiesRendered;
 	private int countEntitiesHidden;
-	int[] dummyBuf50k = new int['\uc350'];
+	int[] dummyBuf50k = new int[50000];
 	IntBuffer occlusionResult = GLAllocation.createDirectIntBuffer(64);
 	private int renderersLoaded;
 	private int renderersBeingClipped;
@@ -57,6 +60,7 @@
 	double prevSortZ = -9999.0D;
 	public float damagePartialTime;
 	int frustumCheckOffset = 0;
+	public static float globalBrightness = 0.0F;
 
 	public RenderGlobal(Minecraft var1, RenderEngine var2) {
 		this.mc = var1;
@@ -79,7 +83,7 @@
 		this.renderStars();
 		GL11.glEndList();
 		GL11.glPopMatrix();
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		this.glSkyList = this.starGLCallList + 1;
 		GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
 		byte var6 = 64;
@@ -90,12 +94,12 @@
 		int var9;
 		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
 			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.startDrawingQuads();
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.draw();
+				tessellator4.startDrawingQuads();
+				tessellator4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
+				tessellator4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
+				tessellator4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+				tessellator4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
+				tessellator4.draw();
 			}
 		}
 
@@ -103,25 +107,25 @@
 		this.glSkyList2 = this.starGLCallList + 2;
 		GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
 		var5 = -16.0F;
-		var4.startDrawingQuads();
+		tessellator4.startDrawingQuads();
 
 		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
 			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+				tessellator4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
+				tessellator4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
+				tessellator4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
+				tessellator4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
 			}
 		}
 
-		var4.draw();
+		tessellator4.draw();
 		GL11.glEndList();
 	}
 
 	private void renderStars() {
 		Random var1 = new Random(10842L);
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawingQuads();
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.startDrawingQuads();
 
 		for(int var3 = 0; var3 < 1500; ++var3) {
 			double var4 = (double)(var1.nextFloat() * 2.0F - 1.0F);
@@ -157,12 +161,12 @@
 					double var55 = var39 * var28 - var47 * var30;
 					double var57 = var55 * var22 - var49 * var24;
 					double var61 = var49 * var22 + var55 * var24;
-					var2.addVertex(var14 + var57, var16 + var53, var18 + var61);
+					tessellator2.addVertex(var14 + var57, var16 + var53, var18 + var61);
 				}
 			}
 		}
 
-		var2.draw();
+		tessellator2.draw();
 	}
 
 	public void changeWorld(World var1) {
@@ -249,36 +253,36 @@
 		this.renderEntitiesStartupCounter = 2;
 	}
 
-	public void renderEntities(Vec3D var1, ICamera var2, float var3) {
+	public void renderEntities(Vec3D vector, ICamera camera, float renderPartialTick) {
 		if(this.renderEntitiesStartupCounter > 0) {
 			--this.renderEntitiesStartupCounter;
 		} else {
-			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, var3);
-			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, var3);
+			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, renderPartialTick);
+			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, renderPartialTick);
 			this.countEntitiesTotal = 0;
 			this.countEntitiesRendered = 0;
 			this.countEntitiesHidden = 0;
 			EntityPlayerSP var4 = this.mc.thePlayer;
-			RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			List var5 = this.theWorld.getLoadedEntityList();
-			this.countEntitiesTotal = var5.size();
+			RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)renderPartialTick;
+			RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)renderPartialTick;
+			RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)renderPartialTick;
+			List list5 = this.theWorld.getLoadedEntityList();
+			this.countEntitiesTotal = list5.size();
 
 			int var6;
-			for(var6 = 0; var6 < var5.size(); ++var6) {
-				Entity var7 = (Entity)var5.get(var6);
-				if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
+			for(var6 = 0; var6 < list5.size(); ++var6) {
+				Entity var7 = (Entity)list5.get(var6);
+				if(var7.isInRangeToRenderVec3D(vector) && camera.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
 					++this.countEntitiesRendered;
-					RenderManager.instance.renderEntity(var7, var3);
+					RenderManager.instance.renderEntity(var7, renderPartialTick);
 				}
 			}
 
 			for(var6 = 0; var6 < this.tileEntities.size(); ++var6) {
-				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), var3);
+				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), renderPartialTick);
 			}
 
 		}
@@ -349,11 +353,11 @@
 						this.maxBlockY = var13;
 					}
 
-					WorldRenderer var14 = this.worldRenderers[(var9 * this.renderChunksTall + var12) * this.renderChunksWide + var6];
-					boolean var15 = var14.needsUpdate;
-					var14.setPosition(var7, var13, var10);
-					if(!var15 && var14.needsUpdate) {
-						this.worldRenderersToUpdate.add(var14);
+					WorldRenderer worldRenderer14 = this.worldRenderers[(var9 * this.renderChunksTall + var12) * this.renderChunksWide + var6];
+					boolean var15 = worldRenderer14.needsUpdate;
+					worldRenderer14.setPosition(var7, var13, var10);
+					if(!var15 && worldRenderer14.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer14);
 					}
 				}
 			}
@@ -432,10 +436,10 @@
 							float var24 = MathHelper.sqrt_float(this.sortedWorldRenderers[var23].distanceToEntitySquared(var1));
 							int var25 = (int)(1.0F + var24 / 128.0F);
 							if(this.cloudTickCounter % var25 == var23 % var25) {
-								WorldRenderer var26 = this.sortedWorldRenderers[var23];
-								float var27 = (float)((double)var26.posXMinus - var5);
-								float var28 = (float)((double)var26.posYMinus - var7);
-								float var29 = (float)((double)var26.posZMinus - var9);
+								WorldRenderer worldRenderer26 = this.sortedWorldRenderers[var23];
+								float var27 = (float)((double)worldRenderer26.posXMinus - var5);
+								float var28 = (float)((double)worldRenderer26.posYMinus - var7);
+								float var29 = (float)((double)worldRenderer26.posZMinus - var9);
 								float var30 = var27 - var35;
 								float var31 = var28 - var21;
 								float var32 = var29 - var22;
@@ -525,21 +529,21 @@
 		}
 
 		for(var15 = 0; var15 < this.glRenderLists.size(); ++var15) {
-			WorldRenderer var16 = (WorldRenderer)this.glRenderLists.get(var15);
+			WorldRenderer worldRenderer16 = (WorldRenderer)this.glRenderLists.get(var15);
 			int var17 = -1;
 
 			for(int var18 = 0; var18 < var14; ++var18) {
-				if(this.allRenderLists[var18].isRenderedAt(var16.posXMinus, var16.posYMinus, var16.posZMinus)) {
+				if(this.allRenderLists[var18].isRenderedAt(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus)) {
 					var17 = var18;
 				}
 			}
 
 			if(var17 < 0) {
 				var17 = var14++;
-				this.allRenderLists[var17].setLocation(var16.posXMinus, var16.posYMinus, var16.posZMinus, var20, var10, var12);
+				this.allRenderLists[var17].setLocation(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus, var20, var10, var12);
 			}
 
-			this.allRenderLists[var17].render(var16.getGLCallListForPass(var3));
+			this.allRenderLists[var17].render(worldRenderer16.getGLCallListForPass(var3));
 		}
 
 		this.renderAllRenderLists(var3, var4);
@@ -557,12 +561,12 @@
 		++this.cloudTickCounter;
 	}
 
-	public void renderSky(float var1) {
+	public void renderSky(float renderPartialTick) {
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Vec3D var2 = this.theWorld.getSkyColor(var1);
-		float var3 = (float)var2.xCoord;
-		float var4 = (float)var2.yCoord;
-		float var5 = (float)var2.zCoord;
+		Vec3D vec3D2 = this.theWorld.getSkyColor(renderPartialTick);
+		float var3 = (float)vec3D2.xCoord;
+		float var4 = (float)vec3D2.yCoord;
+		float var5 = (float)vec3D2.zCoord;
 		float var7;
 		float var8;
 		if(this.mc.options.anaglyph) {
@@ -575,7 +579,7 @@
 		}
 
 		GL11.glColor3f(var3, var4, var5);
-		Tessellator var12 = Tessellator.instance;
+		Tessellator tessellator12 = Tessellator.instance;
 		GL11.glDepthMask(false);
 		GL11.glEnable(GL11.GL_FOG);
 		GL11.glColor3f(var3, var4, var5);
@@ -592,25 +596,37 @@
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glTranslatef(var7, var8, var9);
 		GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
-		GL11.glRotatef(this.theWorld.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(this.theWorld.getCelestialAngle(renderPartialTick) * 360.0F, 1.0F, 0.0F, 0.0F);
 		float var10 = 30.0F;
+		if (this.theWorld.worldType == WorldType.ARID) {
+			var10 = 50.0F;
+		}
+		if (this.theWorld.worldType == WorldType.TROPICAL) {
+			var10 = 40.0F;
+		}
+		if (this.theWorld.worldType == WorldType.WINTER) {
+			var10 = 20.0F;
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)var10, 0.0D, 1.0D);
-		var12.draw();
+		tessellator12.startDrawingQuads();
+		tessellator12.addVertexWithUV((double)(-var10), 100.0D, (double)(-var10), 0.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)var10, 100.0D, (double)(-var10), 1.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)var10, 100.0D, (double)var10, 1.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)(-var10), 100.0D, (double)var10, 0.0D, 1.0D);
+		tessellator12.draw();
 		var10 = 20.0F;
+		if (this.theWorld.worldType == WorldType.WINTER) {
+			var10 = 30.0F;
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)var10, 0.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.draw();
+		tessellator12.startDrawingQuads();
+		tessellator12.addVertexWithUV((double)(-var10), -100.0D, (double)var10, 1.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)var10, -100.0D, (double)var10, 0.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)var10, -100.0D, (double)(-var10), 0.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)(-var10), -100.0D, (double)(-var10), 1.0D, 0.0D);
+		tessellator12.draw();
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		float var11 = this.theWorld.getStarBrightness(var1);
+		float var11 = this.theWorld.getStarBrightness(renderPartialTick);
 		if(var11 > 0.0F) {
 			GL11.glColor4f(var11, var11, var11, var11);
 			GL11.glCallList(this.starGLCallList);
@@ -636,14 +652,14 @@
 			float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
 			byte var3 = 32;
 			int var4 = 256 / var3;
-			Tessellator var5 = Tessellator.instance;
+			Tessellator tessellator5 = Tessellator.instance;
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			Vec3D var6 = this.theWorld.getCloudColor(var1);
-			float var7 = (float)var6.xCoord;
-			float var8 = (float)var6.yCoord;
-			float var9 = (float)var6.zCoord;
+			Vec3D vec3D6 = this.theWorld.getCloudColor(var1);
+			float var7 = (float)vec3D6.xCoord;
+			float var8 = (float)vec3D6.yCoord;
+			float var9 = (float)vec3D6.zCoord;
 			float var10;
 			if(this.mc.options.anaglyph) {
 				var10 = (var7 * 30.0F + var8 * 59.0F + var9 * 11.0F) / 100.0F;
@@ -654,7 +670,7 @@
 				var9 = var12;
 			}
 
-			var10 = 0.5F / 1024.0F;
+			var10 = 4.8828125E-4F;
 			double var22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F);
 			double var13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1;
 			int var15 = MathHelper.floor_double(var22 / 2048.0D);
@@ -664,19 +680,19 @@
 			float var17 = 120.0F - var2 + 0.33F;
 			float var18 = (float)(var22 * (double)var10);
 			float var19 = (float)(var13 * (double)var10);
-			var5.startDrawingQuads();
-			var5.setColorRGBA_F(var7, var8, var9, 0.8F);
+			tessellator5.startDrawingQuads();
+			tessellator5.setColorRGBA_F(var7, var8, var9, 0.8F);
 
 			for(int var20 = -var3 * var4; var20 < var3 * var4; var20 += var3) {
 				for(int var21 = -var3 * var4; var21 < var3 * var4; var21 += var3) {
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + var3), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + var3), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + 0), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + 0), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
+					tessellator5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + var3), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
+					tessellator5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + var3), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
+					tessellator5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + 0), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
+					tessellator5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + 0), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
 				}
 			}
 
-			var5.draw();
+			tessellator5.draw();
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL11.GL_CULL_FACE);
@@ -686,7 +702,7 @@
 	public void renderCloudsFancy(float var1) {
 		GL11.glDisable(GL11.GL_CULL_FACE);
 		float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-		Tessellator var3 = Tessellator.instance;
+		Tessellator tessellator3 = Tessellator.instance;
 		float var4 = 12.0F;
 		float var5 = 4.0F;
 		double var6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F)) / (double)var4;
@@ -699,10 +715,10 @@
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		Vec3D var13 = this.theWorld.getCloudColor(var1);
-		float var14 = (float)var13.xCoord;
-		float var15 = (float)var13.yCoord;
-		float var16 = (float)var13.zCoord;
+		Vec3D vec3D13 = this.theWorld.getCloudColor(var1);
+		float var14 = (float)vec3D13.xCoord;
+		float var15 = (float)vec3D13.yCoord;
+		float var16 = (float)vec3D13.zCoord;
 		float var17;
 		float var18;
 		float var19;
@@ -717,14 +733,14 @@
 
 		var17 = (float)(var6 * 0.0D);
 		var18 = (float)(var8 * 0.0D);
-		var19 = 1.0F / 256.0F;
+		var19 = 0.00390625F;
 		var17 = (float)MathHelper.floor_double(var6) * var19;
 		var18 = (float)MathHelper.floor_double(var8) * var19;
 		float var20 = (float)(var6 - (double)MathHelper.floor_double(var6));
 		float var21 = (float)(var8 - (double)MathHelper.floor_double(var8));
 		byte var22 = 8;
 		byte var23 = 3;
-		float var24 = 1.0F / 1024.0F;
+		float var24 = 9.765625E-4F;
 		GL11.glScalef(var4, 1.0F, var4);
 
 		for(int var25 = 0; var25 < 2; ++var25) {
@@ -736,77 +752,77 @@
 
 			for(int var26 = -var23 + 1; var26 <= var23; ++var26) {
 				for(int var27 = -var23 + 1; var27 <= var23; ++var27) {
-					var3.startDrawingQuads();
+					tessellator3.startDrawingQuads();
 					float var28 = (float)(var26 * var22);
 					float var29 = (float)(var27 * var22);
 					float var30 = var28 - var20;
 					float var31 = var29 - var21;
 					if(var10 > -var5 - 1.0F) {
-						var3.setColorRGBA_F(var14 * 0.7F, var15 * 0.7F, var16 * 0.7F, 0.8F);
-						var3.setNormal(0.0F, -1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+						tessellator3.setColorRGBA_F(var14 * 0.7F, var15 * 0.7F, var16 * 0.7F, 0.8F);
+						tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
 					}
 
 					if(var10 <= var5 + 1.0F) {
-						var3.setColorRGBA_F(var14, var15, var16, 0.8F);
-						var3.setNormal(0.0F, 1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+						tessellator3.setColorRGBA_F(var14, var15, var16, 0.8F);
+						tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+						tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
 					}
 
-					var3.setColorRGBA_F(var14 * 0.9F, var15 * 0.9F, var16 * 0.9F, 0.8F);
+					tessellator3.setColorRGBA_F(var14 * 0.9F, var15 * 0.9F, var16 * 0.9F, 0.8F);
 					int var32;
 					if(var26 > -1) {
-						var3.setNormal(-1.0F, 0.0F, 0.0F);
+						tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
 
 						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
 						}
 					}
 
 					if(var26 <= 1) {
-						var3.setNormal(1.0F, 0.0F, 0.0F);
+						tessellator3.setNormal(1.0F, 0.0F, 0.0F);
 
 						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
 						}
 					}
 
-					var3.setColorRGBA_F(var14 * 0.8F, var15 * 0.8F, var16 * 0.8F, 0.8F);
+					tessellator3.setColorRGBA_F(var14 * 0.8F, var15 * 0.8F, var16 * 0.8F, 0.8F);
 					if(var27 > -1) {
-						var3.setNormal(0.0F, 0.0F, -1.0F);
+						tessellator3.setNormal(0.0F, 0.0F, -1.0F);
 
 						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
 						}
 					}
 
 					if(var27 <= 1) {
-						var3.setNormal(0.0F, 0.0F, 1.0F);
+						tessellator3.setNormal(0.0F, 0.0F, 1.0F);
 
 						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
+							tessellator3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
 						}
 					}
 
-					var3.draw();
+					tessellator3.draw();
 				}
 			}
 		}
@@ -822,10 +838,10 @@
 		int var4 = this.worldRenderersToUpdate.size();
 
 		for(int var5 = 0; var5 < var4; ++var5) {
-			WorldRenderer var6 = (WorldRenderer)this.worldRenderersToUpdate.get(var3 - var5);
+			WorldRenderer worldRenderer6 = (WorldRenderer)this.worldRenderersToUpdate.get(var3 - var5);
 			if(!var2) {
-				if(var6.distanceToEntitySquared(var1) > 1024.0F) {
-					if(var6.isInFrustum) {
+				if(worldRenderer6.distanceToEntitySquared(var1) > 1024.0F) {
+					if(worldRenderer6.isInFrustum) {
 						if(var5 >= 3) {
 							return false;
 						}
@@ -833,20 +849,20 @@
 						return false;
 					}
 				}
-			} else if(!var6.isInFrustum) {
+			} else if(!worldRenderer6.isInFrustum) {
 				continue;
 			}
 
-			var6.updateRenderer();
-			this.worldRenderersToUpdate.remove(var6);
-			var6.needsUpdate = false;
+			worldRenderer6.updateRenderer();
+			this.worldRenderersToUpdate.remove(worldRenderer6);
+			worldRenderer6.needsUpdate = false;
 		}
 
 		return this.worldRenderersToUpdate.size() == 0;
 	}
 
-	public void drawBlockBreaking(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		Tessellator var6 = Tessellator.instance;
+	public void drawBlockBreaking(EntityPlayer var1, MovingObjectPosition movingObjectPosition2, int var3, ItemStack var4, float var5) {
+		Tessellator tessellator6 = Tessellator.instance;
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
@@ -859,24 +875,24 @@
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
 				GL11.glPushMatrix();
-				var8 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
+				var8 = this.theWorld.getBlockId(movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
 				Block var9 = var8 > 0 ? Block.blocksList[var8] : null;
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				GL11.glPolygonOffset(-3.0F, -3.0F);
 				GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
-				var6.startDrawingQuads();
+				tessellator6.startDrawingQuads();
 				double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
 				double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
 				double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				var6.setTranslationD(-var10, -var12, -var14);
-				var6.disableColor();
+				tessellator6.setTranslationD(-var10, -var12, -var14);
+				tessellator6.disableColor();
 				if(var9 == null) {
 					var9 = Block.stone;
 				}
 
-				this.globalRenderBlocks.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
-				var6.draw();
-				var6.setTranslationD(0.0D, 0.0D, 0.0D);
+				this.globalRenderBlocks.renderBlockUsingTexture(var9, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
+				tessellator6.draw();
+				tessellator6.setTranslationD(0.0D, 0.0D, 0.0D);
 				GL11.glPolygonOffset(0.0F, 0.0F);
 				GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
@@ -889,30 +905,30 @@
 			GL11.glColor4f(var16, var16, var16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
 			var8 = this.renderEngine.getTexture("/terrain.png");
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-			int var17 = var2.blockX;
-			int var18 = var2.blockY;
-			int var11 = var2.blockZ;
-			if(var2.sideHit == 0) {
+			int var17 = movingObjectPosition2.blockX;
+			int var18 = movingObjectPosition2.blockY;
+			int var11 = movingObjectPosition2.blockZ;
+			if(movingObjectPosition2.sideHit == 0) {
 				--var18;
 			}
 
-			if(var2.sideHit == 1) {
+			if(movingObjectPosition2.sideHit == 1) {
 				++var18;
 			}
 
-			if(var2.sideHit == 2) {
+			if(movingObjectPosition2.sideHit == 2) {
 				--var11;
 			}
 
-			if(var2.sideHit == 3) {
+			if(movingObjectPosition2.sideHit == 3) {
 				++var11;
 			}
 
-			if(var2.sideHit == 4) {
+			if(movingObjectPosition2.sideHit == 4) {
 				--var17;
 			}
 
-			if(var2.sideHit == 5) {
+			if(movingObjectPosition2.sideHit == 5) {
 				++var17;
 			}
 		}
@@ -921,8 +937,8 @@
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 	}
 
-	public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		if(var3 == 0 && var2.typeOfHit == 0) {
+	public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition movingObjectPosition2, int var3, ItemStack var4, float var5) {
+		if(var3 == 0 && movingObjectPosition2.typeOfHit == 0) {
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
@@ -930,13 +946,13 @@
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(false);
 			float var6 = 0.002F;
-			int var7 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
+			int var7 = this.theWorld.getBlockId(movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
 			if(var7 > 0) {
-				Block.blocksList[var7].setBlockBoundsBasedOnState(this.theWorld, var2.blockX, var2.blockY, var2.blockZ);
+				Block.blocksList[var7].setBlockBoundsBasedOnState(this.theWorld, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
 				double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
 				double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
 				double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.theWorld, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.theWorld, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
 			}
 
 			GL11.glDepthMask(true);
@@ -946,32 +962,32 @@
 
 	}
 
-	private void drawOutlinedBoundingBox(AxisAlignedBB var1) {
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(1);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.draw();
+	private void drawOutlinedBoundingBox(AxisAlignedBB axisAlignedBB1) {
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.startDrawing(3);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.draw();
+		tessellator2.startDrawing(3);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.draw();
+		tessellator2.startDrawing(1);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.draw();
 	}
 
 	public void markBlocksForUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
@@ -1001,96 +1017,103 @@
 					}
 
 					int var19 = (var18 * this.renderChunksTall + var16) * this.renderChunksWide + var14;
-					WorldRenderer var20 = this.worldRenderers[var19];
-					if(!var20.needsUpdate) {
-						this.worldRenderersToUpdate.add(var20);
+					WorldRenderer worldRenderer20 = this.worldRenderers[var19];
+					if(!worldRenderer20.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer20);
 					}
 
-					var20.markDirty();
+					worldRenderer20.markDirty();
 				}
 			}
 		}
 
 	}
 
-	public void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var1 + 1, var2 + 1, var3 + 1);
-	}
-
-	public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var4 + 1, var5 + 1, var6 + 1);
-	}
-
-	public void clipRenderersByFrustum(ICamera var1, float var2) {
+	public void markBlockAndNeighborsNeedsUpdate(int x, int y, int z) {
+		this.markBlocksForUpdate(x - 1, y - 1, z - 1, x + 1, y + 1, z + 1);
+	}
+
+	public void markBlockRangeNeedsUpdate(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.markBlocksForUpdate(minX - 1, minY - 1, minZ - 1, maxX + 1, maxY + 1, maxZ + 1);
+	}
+
+	public void clipRenderersByFrustum(ICamera iCamera1, float var2) {
 		for(int var3 = 0; var3 < this.worldRenderers.length; ++var3) {
 			if(!this.worldRenderers[var3].skipAllRenderPasses() && (!this.worldRenderers[var3].isInFrustum || (var3 + this.frustumCheckOffset & 15) == 0)) {
-				this.worldRenderers[var3].updateInFrustum(var1);
+				this.worldRenderers[var3].updateInFrustum(iCamera1);
 			}
 		}
 
 		++this.frustumCheckOffset;
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		if(var1 != null) {
-			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + var1);
+	public void playRecord(String name, int x, int y, int z, String title) {
+		if(title != null) {
+			this.mc.ingameGUI.setRecordPlayingMessage(title);
 		}
 
-		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
+		this.mc.sndManager.playStreaming(name, (float)x, (float)y, (float)z, 1.0F, 1.0F);
 	}
 
-	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
+	public void playSound(String sound, double posX, double posY, double posZ, float volume, float pitch) {
+		if (sound.equals("ambient.cave.cave") && !this.mc.options.caveSounds) {
+			return;
+		}
+		if (sound.equals("diverge.mob.bluefoxdeath")) {
+			sound = "ambient.cave.cave";
+		}
+
 		float var10 = 16.0F;
-		if(var8 > 1.0F) {
-			var10 *= var8;
+		if(volume > 1.0F) {
+			var10 *= volume;
 		}
 
-		if(this.mc.thePlayer.getDistanceSq(var2, var4, var6) < (double)(var10 * var10)) {
-			this.mc.sndManager.playSound(var1, (float)var2, (float)var4, (float)var6, var8, var9);
+		if(this.mc.thePlayer.getDistanceSq(posX, posY, posZ) < (double)(var10 * var10)) {
+			this.mc.sndManager.playSound(sound, (float)posX, (float)posY, (float)posZ, volume, pitch);
 		}
 
 	}
 
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		double var14 = this.mc.thePlayer.posX - var2;
-		double var16 = this.mc.thePlayer.posY - var4;
-		double var18 = this.mc.thePlayer.posZ - var6;
+	public void spawnParticle(String particle, double posX, double posY, double posZ, double motionX, double motionY, double motionZ) {
+		double var14 = this.mc.thePlayer.posX - posX;
+		double var16 = this.mc.thePlayer.posY - posY;
+		double var18 = this.mc.thePlayer.posZ - posZ;
 		if(var14 * var14 + var16 * var16 + var18 * var18 <= 256.0D) {
-			if(var1 == "bubble") {
-				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "smoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "explode") {
-				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "flame") {
-				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "lava") {
-				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "splash") {
-				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "largesmoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6, 2.5F));
-			} else if(var1 == "reddust") {
-				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "snowballpoof") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.snowball));
-			} else if(var1 == "slime") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.slimeBall));
+			if(particle == "bubble") {
+				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "smoke") {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "explode") {
+				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "flame") {
+				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "lava") {
+				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "splash") {
+				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "largesmoke") {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, posX, posY, posZ, 2.5F));
+			} else if(particle == "reddust") {
+				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "snowballpoof") {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, posX, posY, posZ, Item.snowball));
+			} else if(particle == "slime") {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, posX, posY, posZ, Item.slimeBall));
 			}
 
 		}
 	}
 
-	public void obtainEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.obtainImageData(var1.skinUrl, new ImageBufferDownload());
+	public void obtainEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.obtainImageData(entity.skinUrl, new ImageBufferDownload());
 		}
 
 	}
 
-	public void releaseEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.releaseImageData(var1.skinUrl);
+	public void releaseEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.releaseImageData(entity.skinUrl);
 		}
 
 	}
@@ -1108,6 +1131,18 @@
 
 	}
 
-	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
+	public void doNothingWithTileEntity(int x, int y, int z, TileEntity tileEntity) {
+	}
+
+	private boolean fullBright = false;
+
+	public void toggleFullbright() {
+		fullBright = !fullBright;
+		if (fullBright) {
+			RenderGlobal.globalBrightness = 1.0F;
+		} else {
+			RenderGlobal.globalBrightness = this.mc.options.brightness * 0.2F;
+		}
+		this.loadRenderers();
 	}
 }
--- net/minecraft/src/CodecMus.java
+++ net/minecraft/src/CodecMus.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+
 import paulscode.sound.codecs.CodecJOrbis;
 
 public class CodecMus extends CodecJOrbis {
--- net/minecraft/src/ChunkProviderClient.java
+++ net/minecraft/src/ChunkProviderClient.java
@@ -12,45 +12,45 @@
 	private List chunkListing = new ArrayList();
 	private World worldObj;
 
-	public ChunkProviderClient(World var1) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderClient(World worldObj) {
+		this.blankChunk = new Chunk(worldObj, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
-		this.worldObj = var1;
-	}
-
-	public boolean chunkExists(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		return this.chunkMapping.containsKey(var3);
-	}
-
-	public void unloadChunk(int var1, int var2) {
-		Chunk var3 = this.provideChunk(var1, var2);
-		if(!var3.isChunkRendered) {
-			var3.onChunkUnload();
+		this.worldObj = worldObj;
+	}
+
+	public boolean chunkExists(int chunkX, int chunkZ) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(chunkX, chunkZ);
+		return this.chunkMapping.containsKey(chunkCoordinates3);
+	}
+
+	public void unloadChunk(int chunkX, int chunkZ) {
+		Chunk chunk3 = this.provideChunk(chunkX, chunkZ);
+		if(!chunk3.isChunkRendered) {
+			chunk3.onChunkUnload();
 		}
 
-		this.chunkMapping.remove(new ChunkCoordinates(var1, var2));
-		this.chunkListing.remove(var3);
-	}
-
-	public Chunk loadChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		byte[] var4 = new byte[-Short.MIN_VALUE];
-		Chunk var5 = new Chunk(this.worldObj, var4, var1, var2);
-		Arrays.fill(var5.skylightMap.data, (byte)-1);
-		this.chunkMapping.put(var3, var5);
-		var5.isChunkLoaded = true;
-		return var5;
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		Chunk var4 = (Chunk)this.chunkMapping.get(var3);
-		return var4 == null ? this.blankChunk : var4;
-	}
-
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+		this.chunkMapping.remove(new ChunkCoordinates(chunkX, chunkZ));
+		this.chunkListing.remove(chunk3);
+	}
+
+	public Chunk loadChunk(int chunkX, int chunkZ) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(chunkX, chunkZ);
+		byte[] var4 = new byte[32768];
+		Chunk chunk5 = new Chunk(this.worldObj, var4, chunkX, chunkZ);
+		Arrays.fill(chunk5.skylightMap.data, (byte)-1);
+		this.chunkMapping.put(chunkCoordinates3, chunk5);
+		chunk5.isChunkLoaded = true;
+		return chunk5;
+	}
+
+	public Chunk provideChunk(int chunkX, int chunkZ) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(chunkX, chunkZ);
+		Chunk chunk4 = (Chunk)this.chunkMapping.get(chunkCoordinates3);
+		return chunk4 == null ? this.blankChunk : chunk4;
+	}
+
+	public boolean saveChunks(boolean var1, IProgressUpdate progressUpdate) {
 		return true;
 	}
 
@@ -62,6 +62,6 @@
 		return false;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int chunkX, int chunkZ) {
 	}
 }
--- net/minecraft/src/IMobs.java
+++ net/minecraft/src/IMobs.java
@@ -1,4 +1,4 @@
 package net.minecraft.src;
 
-public interface IMobs extends IAnimals {
+public interface IMobs extends IAnimal {
 }
--- net/minecraft/src/ThreadDownloadResources.java
+++ net/minecraft/src/ThreadDownloadResources.java
@@ -1,14 +1,13 @@
 package net.minecraft.src;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.*;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
+
 import net.minecraft.client.Minecraft;
+
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -19,11 +18,11 @@
 	private Minecraft mc;
 	private boolean closing = false;
 
-	public ThreadDownloadResources(File var1, Minecraft var2) {
-		this.mc = var2;
+	public ThreadDownloadResources(File file, Minecraft minecraft) {
+		this.mc = minecraft;
 		this.setName("Resource download thread");
 		this.setDaemon(true);
-		this.resourcesFolder = new File(var1, "resources/");
+		this.resourcesFolder = new File(file, "resources-dvge/");
 		if(!this.resourcesFolder.exists() && !this.resourcesFolder.mkdirs()) {
 			throw new RuntimeException("The working directory could not be created: " + this.resourcesFolder);
 		}
@@ -31,21 +30,21 @@
 
 	public void run() {
 		try {
-			URL var1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
-			DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance();
-			DocumentBuilder var3 = var2.newDocumentBuilder();
-			Document var4 = var3.parse(var1.openStream());
-			NodeList var5 = var4.getElementsByTagName("Contents");
+			URL uRL1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
+			DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
+			DocumentBuilder documentBuilder3 = documentBuilderFactory2.newDocumentBuilder();
+			Document document4 = documentBuilder3.parse(uRL1.openStream());
+			NodeList nodeList5 = document4.getElementsByTagName("Contents");
 
 			for(int var6 = 0; var6 < 2; ++var6) {
-				for(int var7 = 0; var7 < var5.getLength(); ++var7) {
-					Node var8 = var5.item(var7);
-					if(var8.getNodeType() == 1) {
-						Element var9 = (Element)var8;
-						String var10 = ((Element)var9.getElementsByTagName("Key").item(0)).getChildNodes().item(0).getNodeValue();
-						long var11 = Long.parseLong(((Element)var9.getElementsByTagName("Size").item(0)).getChildNodes().item(0).getNodeValue());
+				for(int var7 = 0; var7 < nodeList5.getLength(); ++var7) {
+					Node node8 = nodeList5.item(var7);
+					if(node8.getNodeType() == 1) {
+						Element element9 = (Element)node8;
+						String var10 = ((Element)element9.getElementsByTagName("Key").item(0)).getChildNodes().item(0).getNodeValue();
+						long var11 = Long.parseLong(((Element)element9.getElementsByTagName("Size").item(0)).getChildNodes().item(0).getNodeValue());
 						if(var11 > 0L) {
-							this.downloadAndInstallResource(var1, var10, var11, var6);
+							this.downloadAndInstallResource(uRL1, var10, var11, var6);
 							if(this.closing) {
 								return;
 							}
@@ -53,78 +52,100 @@
 					}
 				}
 			}
-		} catch (Exception var13) {
-			this.loadResource(this.resourcesFolder, "");
-			var13.printStackTrace();
-		}
-
+
+			InputStream customResStream = this.getClass().getResourceAsStream("/customres.txt");
+			assert customResStream != null;
+			BufferedReader customResReader = new BufferedReader(new InputStreamReader(customResStream));
+			String customResLine;
+
+			while ((customResLine = customResReader.readLine()) != null) {
+				this.unpackCustomResource(customResLine);
+			}
+
+			this.loadResource(this.resourcesFolder, "");
+		} catch (Exception exception13) {
+			this.loadResource(this.resourcesFolder, "");
+			exception13.printStackTrace();
+		}
+	}
+
+	private void unpackCustomResource(String path) throws IOException {
+		if (!path.equals("")) {
+			InputStream resStream = this.getClass().getResourceAsStream(path);
+			if (resStream == null) {
+				throw new IOException("Resource " + path + " is invalid.");
+			}
+			File res = new File(this.resourcesFolder, path.replaceFirst("/resources/", "/"));
+			res.mkdirs();
+			Files.copy(resStream, res.toPath(), StandardCopyOption.REPLACE_EXISTING);
+		}
 	}
 
 	public void reloadResources() {
 		this.loadResource(this.resourcesFolder, "");
 	}
 
-	private void loadResource(File var1, String var2) {
-		File[] var3 = var1.listFiles();
+	private void loadResource(File file, String path) {
+		File[] file3 = file.listFiles();
 
-		for(int var4 = 0; var4 < var3.length; ++var4) {
-			if(var3[var4].isDirectory()) {
-				this.loadResource(var3[var4], var2 + var3[var4].getName() + "/");
+		for(int var4 = 0; var4 < file3.length; ++var4) {
+			if(file3[var4].isDirectory()) {
+				this.loadResource(file3[var4], path + file3[var4].getName() + "/");
 			} else {
 				try {
-					this.mc.installResource(var2 + var3[var4].getName(), var3[var4]);
-				} catch (Exception var6) {
-					System.out.println("Failed to add " + var2 + var3[var4].getName());
+					this.mc.installResource(path + file3[var4].getName(), file3[var4]);
+				} catch (Exception exception6) {
+					System.out.println("Failed to add " + path + file3[var4].getName());
 				}
 			}
 		}
 
 	}
 
-	private void downloadAndInstallResource(URL var1, String var2, long var3, int var5) {
+	private void downloadAndInstallResource(URL url, String key, long size, int integer) {
 		try {
-			int var6 = var2.indexOf("/");
-			String var7 = var2.substring(0, var6);
+			int var6 = key.indexOf("/");
+			String var7 = key.substring(0, var6);
 			if(!var7.equals("sound") && !var7.equals("newsound")) {
-				if(var5 != 1) {
+				if(integer != 1) {
 					return;
 				}
-			} else if(var5 != 0) {
+			} else if(integer != 0) {
 				return;
 			}
 
-			File var8 = new File(this.resourcesFolder, var2);
-			if(!var8.exists() || var8.length() != var3) {
-				var8.getParentFile().mkdirs();
-				String var9 = var2.replaceAll(" ", "%20");
-				this.downloadResource(new URL(var1, var9), var8, var3);
+			File file8 = new File(this.resourcesFolder, key);
+			if(!file8.exists() || file8.length() != size) {
+				file8.getParentFile().mkdirs();
+				String var9 = key.replaceAll(" ", "%20");
+				this.downloadResource(new URL(url, var9), file8, size);
 				if(this.closing) {
 					return;
 				}
 			}
 
-			this.mc.installResource(var2, var8);
-		} catch (Exception var10) {
-			var10.printStackTrace();
+			this.mc.installResource(key, file8);
+		} catch (Exception exception10) {
+			exception10.printStackTrace();
 		}
 
 	}
 
-	private void downloadResource(URL var1, File var2, long var3) throws IOException {
+	private void downloadResource(URL url, File file, long size) throws IOException {
 		byte[] var5 = new byte[4096];
-		DataInputStream var6 = new DataInputStream(var1.openStream());
-		DataOutputStream var7 = new DataOutputStream(new FileOutputStream(var2));
+		DataInputStream dataInputStream6 = new DataInputStream(url.openStream());
+		DataOutputStream dataOutputStream7 = new DataOutputStream(new FileOutputStream(file));
 		boolean var8 = false;
 
 		do {
-			int var9 = var6.read(var5);
-			if(var9 < 0) {
-				var6.close();
-				var7.close();
+			int var9;
+			if((var9 = dataInputStream6.read(var5)) < 0) {
+				dataInputStream6.close();
+				dataOutputStream7.close();
 				return;
 			}
 
-			var7.write(var5, 0, var9);
+			dataOutputStream7.write(var5, 0, var9);
 		} while(!this.closing);
 
 	}
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -5,11 +5,11 @@
 public abstract class BlockFluid extends Block {
 	protected int fluidType = 1;
 
-	protected BlockFluid(int var1, Material var2) {
-		super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
+	protected BlockFluid(int var1, Material material2) {
+		super(var1, (material2 == Material.lava ? 14 : 12) * 16 + 13, material2);
 		float var3 = 0.0F;
 		float var4 = 0.0F;
-		if(var2 == Material.lava) {
+		if(material2 == Material.lava) {
 			this.fluidType = 2;
 		}
 
@@ -26,19 +26,19 @@
 		return var1;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-	}
-
-	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4) != this.material ? -1 : var1.getBlockMetadata(var2, var3, var4);
-	}
-
-	protected int getEffectiveFlowDecay(IBlockAccess var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2, var3, var4) != this.material) {
+	public int getBlockTextureFromSide(int side) {
+		return side != 0 && side != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	protected int getFlowDecay(World worldObj, int x, int y, int z) {
+		return worldObj.getBlockMaterial(x, y, z) != this.material ? -1 : worldObj.getBlockMetadata(x, y, z);
+	}
+
+	protected int getEffectiveFlowDecay(IBlockAccess blockAccess, int x, int y, int z) {
+		if(blockAccess.getBlockMaterial(x, y, z) != this.material) {
 			return -1;
 		} else {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
+			int var5 = blockAccess.getBlockMetadata(x, y, z);
 			if(var5 >= 8) {
 				var5 = 0;
 			}
@@ -55,16 +55,16 @@
 		return false;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return var2 && var1 == 0;
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var6 == this.material ? false : (var6 == Material.ice ? false : (var5 == 1 ? true : super.shouldSideBeRendered(var1, var2, var3, var4, var5)));
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public boolean canCollideCheck(int metadata, boolean var2) {
+		return var2 && metadata == 0;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return material6 == this.material ? false : (material6 == Material.ice ? false : (side == 1 ? true : super.shouldSideBeRendered(blockAccess, x, y, z, side)));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -72,17 +72,17 @@
 		return 4;
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return 0;
-	}
-
-	public int quantityDropped(Random var1) {
-		return 0;
-	}
-
-	private Vec3D getFlowVector(IBlockAccess var1, int var2, int var3, int var4) {
-		Vec3D var5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-		int var6 = this.getEffectiveFlowDecay(var1, var2, var3, var4);
+	public int idDropped(int metadata, Random rand) {
+		return 0;
+	}
+
+	public int quantityDropped(Random rand) {
+		return 0;
+	}
+
+	private Vec3D getFlowVector(IBlockAccess iBlockAccess1, int var2, int var3, int var4) {
+		Vec3D vec3D5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+		int var6 = this.getEffectiveFlowDecay(iBlockAccess1, var2, var3, var4);
 
 		for(int var7 = 0; var7 < 4; ++var7) {
 			int var8 = var2;
@@ -103,126 +103,126 @@
 				++var10;
 			}
 
-			int var11 = this.getEffectiveFlowDecay(var1, var8, var3, var10);
+			int var11 = this.getEffectiveFlowDecay(iBlockAccess1, var8, var3, var10);
 			int var12;
 			if(var11 < 0) {
-				if(!var1.getBlockMaterial(var8, var3, var10).getIsSolid()) {
-					var11 = this.getEffectiveFlowDecay(var1, var8, var3 - 1, var10);
+				if(!iBlockAccess1.getBlockMaterial(var8, var3, var10).getIsSolid()) {
+					var11 = this.getEffectiveFlowDecay(iBlockAccess1, var8, var3 - 1, var10);
 					if(var11 >= 0) {
 						var12 = var11 - (var6 - 8);
-						var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+						vec3D5 = vec3D5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
 					}
 				}
 			} else if(var11 >= 0) {
 				var12 = var11 - var6;
-				var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+				vec3D5 = vec3D5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
 			}
 		}
 
-		if(var1.getBlockMetadata(var2, var3, var4) >= 8) {
+		if(iBlockAccess1.getBlockMetadata(var2, var3, var4) >= 8) {
 			boolean var13 = false;
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3 + 1, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3 + 1, var4, 5)) {
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2, var3, var4 - 1, 2)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2, var3, var4 + 1, 3)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2 - 1, var3, var4, 4)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2 + 1, var3, var4, 5)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2, var3 + 1, var4 - 1, 2)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2, var3 + 1, var4 + 1, 3)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2 - 1, var3 + 1, var4, 4)) {
+				var13 = true;
+			}
+
+			if(var13 || this.shouldSideBeRendered(iBlockAccess1, var2 + 1, var3 + 1, var4, 5)) {
 				var13 = true;
 			}
 
 			if(var13) {
-				var5 = var5.normalize().addVector(0.0D, -6.0D, 0.0D);
+				vec3D5 = vec3D5.normalize().addVector(0.0D, -6.0D, 0.0D);
 			}
 		}
 
-		var5 = var5.normalize();
-		return var5;
+		vec3D5 = vec3D5.normalize();
+		return vec3D5;
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		Vec3D var7 = this.getFlowVector(var1, var2, var3, var4);
-		var6.xCoord += var7.xCoord;
-		var6.yCoord += var7.yCoord;
-		var6.zCoord += var7.zCoord;
+	public void velocityToAddToEntity(World worldObj, int x, int y, int z, Entity entity, Vec3D velocityVector) {
+		Vec3D vec3D7 = this.getFlowVector(worldObj, x, y, z);
+		velocityVector.xCoord += vec3D7.xCoord;
+		velocityVector.yCoord += vec3D7.yCoord;
+		velocityVector.zCoord += vec3D7.zCoord;
 	}
 
 	public int tickRate() {
 		return this.material == Material.water ? 5 : (this.material == Material.lava ? 30 : 0);
 	}
 
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		float var5 = var1.getBrightness(var2, var3, var4);
-		float var6 = var1.getBrightness(var2, var3 + 1, var4);
+	public float getBlockBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		float var5 = blockAccess.getBrightness(x, y, z);
+		float var6 = blockAccess.getBrightness(x, y + 1, z);
 		return var5 > var6 ? var5 : var6;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		super.updateTick(worldObj, x, y, z, rand);
 	}
 
 	public int getRenderBlockPass() {
 		return this.material == Material.water ? 1 : 0;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(this.material == Material.water && var5.nextInt(64) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(this.material == Material.water && rand.nextInt(64) == 0) {
+			int var6 = worldObj.getBlockMetadata(x, y, z);
 			if(var6 > 0 && var6 < 8) {
-				var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "liquid.water", var5.nextFloat() * 0.25F + 12.0F / 16.0F, var5.nextFloat() * 1.0F + 0.5F);
+				worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "liquid.water", rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() * 1.0F + 0.5F);
 			}
 		}
 
-		if(this.material == Material.lava && var1.getBlockMaterial(var2, var3 + 1, var4) == Material.air && !var1.isBlockNormalCube(var2, var3 + 1, var4) && var5.nextInt(100) == 0) {
-			double var12 = (double)((float)var2 + var5.nextFloat());
-			double var8 = (double)var3 + this.maxY;
-			double var10 = (double)((float)var4 + var5.nextFloat());
-			var1.spawnParticle("lava", var12, var8, var10, 0.0D, 0.0D, 0.0D);
-		}
-
-	}
-
-	public static double getFlowDirection(IBlockAccess var0, int var1, int var2, int var3, Material var4) {
-		Vec3D var5 = null;
-		if(var4 == Material.water) {
-			var5 = ((BlockFluid)Block.waterMoving).getFlowVector(var0, var1, var2, var3);
-		}
-
-		if(var4 == Material.lava) {
-			var5 = ((BlockFluid)Block.lavaMoving).getFlowVector(var0, var1, var2, var3);
-		}
-
-		return var5.xCoord == 0.0D && var5.zCoord == 0.0D ? -1000.0D : Math.atan2(var5.zCoord, var5.xCoord) - Math.PI * 0.5D;
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkForHarden(var1, var2, var3, var4);
+		if(this.material == Material.lava && worldObj.getBlockMaterial(x, y + 1, z) == Material.air && !worldObj.isBlockNormalCube(x, y + 1, z) && rand.nextInt(100) == 0) {
+			double var12 = (double)((float)x + rand.nextFloat());
+			double var8 = (double)y + this.maxY;
+			double var10 = (double)((float)z + rand.nextFloat());
+			worldObj.spawnParticle("lava", var12, var8, var10, 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+
+	public static double getFlowDirection(IBlockAccess iBlockAccess0, int var1, int var2, int var3, Material material4) {
+		Vec3D vec3D5 = null;
+		if(material4 == Material.water) {
+			vec3D5 = ((BlockFluid)Block.waterMoving).getFlowVector(iBlockAccess0, var1, var2, var3);
+		}
+
+		if(material4 == Material.lava) {
+			vec3D5 = ((BlockFluid)Block.lavaMoving).getFlowVector(iBlockAccess0, var1, var2, var3);
+		}
+
+		return vec3D5.xCoord == 0.0D && vec3D5.zCoord == 0.0D ? -1000.0D : Math.atan2(vec3D5.zCoord, vec3D5.xCoord) - Math.PI / 2D;
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		this.checkForHarden(worldObj, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		this.checkForHarden(worldObj, x, y, z);
 	}
 
 	private void checkForHarden(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/Packet33RelEntityMoveLook.java
+++ net/minecraft/src/Packet33RelEntityMoveLook.java
@@ -9,35 +9,35 @@
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public Packet33RelEntityMoveLook(int entityID, byte xPosition, byte yPosition, byte zPosition, byte yaw, byte pitch) {
+		super(entityID);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.rotating = true;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
 		return 9;
-	}
-
-	public Packet33RelEntityMoveLook(int var1, byte var2, byte var3, byte var4, byte var5, byte var6) {
-		super(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.yaw = var5;
-		this.pitch = var6;
-		this.rotating = true;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet7UseEntity.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet7UseEntity extends Packet {
+	public int playerEntityId;
+	public int targetEntity;
+	public int isLeftClick;
+
+	public Packet7UseEntity() {
+	}
+
+	public Packet7UseEntity(int var1, int var2, int var3) {
+		this.playerEntityId = var1;
+		this.targetEntity = var2;
+		this.isLeftClick = var3;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.playerEntityId = dataInputStream1.readInt();
+		this.targetEntity = dataInputStream1.readInt();
+		this.isLeftClick = dataInputStream1.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeInt(this.playerEntityId);
+		dataOutputStream1.writeInt(this.targetEntity);
+		dataOutputStream1.writeByte(this.isLeftClick);
+	}
+
+	public void processPacket(NetHandler netHandler1) {
+		netHandler1.handleUseEntity(this);
+	}
+
+	public int getPacketSize() {
+		return 9;
+	}
+}
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -9,190 +9,210 @@
 	private File saveDir;
 	private boolean createIfNecessary;
 
-	public ChunkLoader(File var1, boolean var2) {
-		this.saveDir = var1;
-		this.createIfNecessary = var2;
-	}
-
-	private File chunkFileForXZ(int var1, int var2) {
-		String var3 = "c." + Integer.toString(var1, 36) + "." + Integer.toString(var2, 36) + ".dat";
-		String var4 = Integer.toString(var1 & 63, 36);
-		String var5 = Integer.toString(var2 & 63, 36);
-		File var6 = new File(this.saveDir, var4);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var5);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var3);
-		return !var6.exists() && !this.createIfNecessary ? null : var6;
-	}
-
-	public Chunk loadChunk(World var1, int var2, int var3) {
-		File var4 = this.chunkFileForXZ(var2, var3);
-		if(var4 != null && var4.exists()) {
+	public ChunkLoader(File saveDir, boolean createIfNecessary) {
+		this.saveDir = saveDir;
+		this.createIfNecessary = createIfNecessary;
+	}
+
+	private File chunkFileForXZ(int chunkX, int chunkZ) {
+		String var3 = "c." + Integer.toString(chunkX, 36) + "." + Integer.toString(chunkZ, 36) + ".dat";
+		String var4 = Integer.toString(chunkX & 63, 36);
+		String var5 = Integer.toString(chunkZ & 63, 36);
+		File file6 = new File(this.saveDir, var4);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, var5);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, var3);
+		return !file6.exists() && !this.createIfNecessary ? null : file6;
+	}
+
+	public Chunk loadChunk(World worldObj, int chunkX, int chunkZ) {
+		File file4 = this.chunkFileForXZ(chunkX, chunkZ);
+		if(file4 != null && file4.exists()) {
 			try {
-				FileInputStream var5 = new FileInputStream(var4);
-				NBTTagCompound var6 = CompressedStreamTools.readCompressed(var5);
-				if(!var6.hasKey("Level")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
-					return null;
-				}
-
-				if(!var6.getCompoundTag("Level").hasKey("Blocks")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
-					return null;
-				}
-
-				Chunk var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				if(!var7.isAtLocation(var2, var3)) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var7.xPosition + ", " + var7.zPosition + ")");
-					var6.setInteger("xPos", var2);
-					var6.setInteger("zPos", var3);
-					var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				}
-
-				return var7;
-			} catch (Exception var8) {
-				var8.printStackTrace();
+				FileInputStream fileInputStream5 = new FileInputStream(file4);
+				NBTTagCompound nBTTagCompound6 = CompressedStreamTools.readCompressed(fileInputStream5);
+				if(!nBTTagCompound6.hasKey("Level")) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is missing level data, skipping");
+					return null;
+				}
+
+				if(!nBTTagCompound6.getCompoundTag("Level").hasKey("Blocks")) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is missing block data, skipping");
+					return null;
+				}
+
+				Chunk chunk7 = loadChunkIntoWorldFromCompound(worldObj, nBTTagCompound6.getCompoundTag("Level"));
+				if(!chunk7.isAtLocation(chunkX, chunkZ)) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is in the wrong location; relocating. (Expected " + chunkX + ", " + chunkZ + ", got " + chunk7.xPosition + ", " + chunk7.zPosition + ")");
+					nBTTagCompound6.setInteger("xPos", chunkX);
+					nBTTagCompound6.setInteger("zPos", chunkZ);
+					chunk7 = loadChunkIntoWorldFromCompound(worldObj, nBTTagCompound6.getCompoundTag("Level"));
+				}
+
+				return chunk7;
+			} catch (Exception exception8) {
+				exception8.printStackTrace();
 			}
 		}
 
 		return null;
 	}
 
-	public void saveChunk(World var1, Chunk var2) {
-		var1.checkSessionLock();
-		File var3 = this.chunkFileForXZ(var2.xPosition, var2.zPosition);
-		if(var3.exists()) {
-			var1.sizeOnDisk -= var3.length();
+	public void saveChunk(World worldObj, Chunk chunk) {
+		worldObj.checkSessionLock();
+		File file3 = this.chunkFileForXZ(chunk.xPosition, chunk.zPosition);
+		if(file3.exists()) {
+			worldObj.sizeOnDisk -= file3.length();
 		}
 
 		try {
-			File var4 = new File(this.saveDir, "tmp_chunk.dat");
-			FileOutputStream var5 = new FileOutputStream(var4);
-			NBTTagCompound var6 = new NBTTagCompound();
-			NBTTagCompound var7 = new NBTTagCompound();
-			var6.setTag("Level", var7);
-			this.storeChunkInCompound(var2, var1, var7);
-			CompressedStreamTools.writeCompressed(var6, var5);
-			var5.close();
-			if(var3.exists()) {
-				var3.delete();
+			File file4 = new File(this.saveDir, "tmp_chunk.dat");
+			FileOutputStream fileOutputStream5 = new FileOutputStream(file4);
+			NBTTagCompound nBTTagCompound6 = new NBTTagCompound();
+			NBTTagCompound nBTTagCompound7 = new NBTTagCompound();
+			nBTTagCompound6.setTag("Level", nBTTagCompound7);
+			this.storeChunkInCompound(chunk, worldObj, nBTTagCompound7);
+			CompressedStreamTools.writeCompressed(nBTTagCompound6, fileOutputStream5);
+			fileOutputStream5.close();
+			if(file3.exists()) {
+				file3.delete();
 			}
 
-			var4.renameTo(var3);
-			var1.sizeOnDisk += var3.length();
-		} catch (Exception var8) {
-			var8.printStackTrace();
+			file4.renameTo(file3);
+			worldObj.sizeOnDisk += file3.length();
+		} catch (Exception exception8) {
+			exception8.printStackTrace();
 		}
 
 	}
 
-	public void storeChunkInCompound(Chunk var1, World var2, NBTTagCompound var3) {
-		var2.checkSessionLock();
-		var3.setInteger("xPos", var1.xPosition);
-		var3.setInteger("zPos", var1.zPosition);
-		var3.setLong("LastUpdate", var2.worldTime);
-		var3.setByteArray("Blocks", var1.blocks);
-		var3.setByteArray("Data", var1.data.data);
-		var3.setByteArray("SkyLight", var1.skylightMap.data);
-		var3.setByteArray("BlockLight", var1.blocklightMap.data);
-		var3.setByteArray("HeightMap", var1.heightMap);
-		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
-		var1.hasEntities = false;
-		NBTTagList var4 = new NBTTagList();
-
-		Iterator var6;
-		NBTTagCompound var8;
-		for(int var5 = 0; var5 < var1.entities.length; ++var5) {
-			var6 = var1.entities[var5].iterator();
-
-			while(var6.hasNext()) {
-				Entity var7 = (Entity)var6.next();
-				var1.hasEntities = true;
-				var8 = new NBTTagCompound();
-				if(var7.addEntityID(var8)) {
-					var4.setTag(var8);
+	public void storeChunkInCompound(Chunk chunk, World worldObj, NBTTagCompound nbtCompound) {
+		worldObj.checkSessionLock();
+		nbtCompound.setInteger("xPos", chunk.xPosition);
+		nbtCompound.setInteger("zPos", chunk.zPosition);
+		nbtCompound.setLong("LastUpdate", worldObj.worldTime);
+		nbtCompound.setByteArray("Blocks", chunk.blocks);
+		nbtCompound.setByteArray("Data", chunk.data.data);
+		nbtCompound.setByteArray("SkyLight", chunk.skylightMap.data);
+		nbtCompound.setByteArray("BlockLight", chunk.blocklightMap.data);
+		nbtCompound.setByteArray("HeightMap", chunk.heightMap);
+		nbtCompound.setBoolean("TerrainPopulated", chunk.isTerrainPopulated);
+		nbtCompound.setInteger("ChunkVersion", Chunk.CHUNK_VERSION_CURRENT);
+		chunk.hasEntities = false;
+		NBTTagList nBTTagList4 = new NBTTagList();
+
+		Iterator iterator6;
+		NBTTagCompound nBTTagCompound8;
+		for(int var5 = 0; var5 < chunk.entities.length; ++var5) {
+			iterator6 = chunk.entities[var5].iterator();
+
+			while(iterator6.hasNext()) {
+				Entity var7 = (Entity)iterator6.next();
+				chunk.hasEntities = true;
+				nBTTagCompound8 = new NBTTagCompound();
+				if(var7.addEntityID(nBTTagCompound8)) {
+					nBTTagList4.setTag(nBTTagCompound8);
 				}
 			}
 		}
 
-		var3.setTag("Entities", var4);
-		NBTTagList var9 = new NBTTagList();
-		var6 = var1.chunkTileEntityMap.values().iterator();
+		nbtCompound.setTag("Entities", nBTTagList4);
+		NBTTagList nBTTagList9 = new NBTTagList();
+		iterator6 = chunk.chunkTileEntityMap.values().iterator();
 
-		while(var6.hasNext()) {
-			TileEntity var10 = (TileEntity)var6.next();
-			var8 = new NBTTagCompound();
-			var10.writeToNBT(var8);
-			var9.setTag(var8);
+		while(iterator6.hasNext()) {
+			TileEntity tileEntity10 = (TileEntity)iterator6.next();
+			nBTTagCompound8 = new NBTTagCompound();
+			tileEntity10.writeToNBT(nBTTagCompound8);
+			nBTTagList9.setTag(nBTTagCompound8);
 		}
 
-		var3.setTag("TileEntities", var9);
+		nbtCompound.setTag("TileEntities", nBTTagList9);
 	}
 
-	public static Chunk loadChunkIntoWorldFromCompound(World var0, NBTTagCompound var1) {
-		int var2 = var1.getInteger("xPos");
-		int var3 = var1.getInteger("zPos");
-		Chunk var4 = new Chunk(var0, var2, var3);
-		var4.blocks = var1.getByteArray("Blocks");
-		var4.data = new NibbleArray(var1.getByteArray("Data"));
-		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
-		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
-		var4.heightMap = var1.getByteArray("HeightMap");
-		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
-		if(!var4.data.isValid()) {
-			var4.data = new NibbleArray(var4.blocks.length);
-		}
-
-		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
-			var4.skylightMap = new NibbleArray(var4.blocks.length);
-			var4.generateSkylightMap();
-		}
-
-		if(!var4.blocklightMap.isValid()) {
-			var4.blocklightMap = new NibbleArray(var4.blocks.length);
-			var4.doNothing();
-		}
-
-		NBTTagList var5 = var1.getTagList("Entities");
-		if(var5 != null) {
-			for(int var6 = 0; var6 < var5.tagCount(); ++var6) {
-				NBTTagCompound var7 = (NBTTagCompound)var5.tagAt(var6);
-				Entity var8 = EntityList.createEntityFromNBT(var7, var0);
-				var4.hasEntities = true;
+	public static Chunk loadChunkIntoWorldFromCompound(World worldObj, NBTTagCompound nbtCompound) {
+		int var2 = nbtCompound.getInteger("xPos");
+		int var3 = nbtCompound.getInteger("zPos");
+		Chunk chunk4 = new Chunk(worldObj, var2, var3);
+		chunk4.blocks = nbtCompound.getByteArray("Blocks");
+		chunk4.data = new NibbleArray(nbtCompound.getByteArray("Data"));
+		chunk4.skylightMap = new NibbleArray(nbtCompound.getByteArray("SkyLight"));
+		chunk4.blocklightMap = new NibbleArray(nbtCompound.getByteArray("BlockLight"));
+		chunk4.heightMap = nbtCompound.getByteArray("HeightMap");
+		chunk4.isTerrainPopulated = nbtCompound.getBoolean("TerrainPopulated");
+		if(!chunk4.data.isValid()) {
+			chunk4.data = new NibbleArray(chunk4.blocks.length);
+		}
+
+		if(chunk4.heightMap == null || !chunk4.skylightMap.isValid()) {
+			chunk4.heightMap = new byte[256];
+			chunk4.skylightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.generateSkylightMap();
+		}
+
+		if(!chunk4.blocklightMap.isValid()) {
+			chunk4.blocklightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.doNothing();
+		}
+
+		NBTTagList nBTTagList5 = nbtCompound.getTagList("Entities");
+		if(nBTTagList5 != null) {
+			for(int var6 = 0; var6 < nBTTagList5.tagCount(); ++var6) {
+				NBTTagCompound nBTTagCompound7 = (NBTTagCompound)nBTTagList5.tagAt(var6);
+				Entity var8 = EntityList.createEntityFromNBT(nBTTagCompound7, worldObj);
+				chunk4.hasEntities = true;
 				if(var8 != null) {
-					var4.addEntity(var8);
-				}
-			}
-		}
-
-		NBTTagList var10 = var1.getTagList("TileEntities");
-		if(var10 != null) {
-			for(int var11 = 0; var11 < var10.tagCount(); ++var11) {
-				NBTTagCompound var12 = (NBTTagCompound)var10.tagAt(var11);
-				TileEntity var9 = TileEntity.createAndLoadEntity(var12);
-				if(var9 != null) {
-					var4.addTileEntity(var9);
-				}
-			}
-		}
-
-		return var4;
+					chunk4.addEntity(var8);
+				}
+			}
+		}
+
+		NBTTagList nBTTagList10 = nbtCompound.getTagList("TileEntities");
+		if(nBTTagList10 != null) {
+			for(int var11 = 0; var11 < nBTTagList10.tagCount(); ++var11) {
+				NBTTagCompound nBTTagCompound12 = (NBTTagCompound)nBTTagList10.tagAt(var11);
+				TileEntity tileEntity9 = TileEntity.createAndLoadEntity(nBTTagCompound12);
+				if(tileEntity9 != null) {
+					chunk4.addTileEntity(tileEntity9);
+				}
+			}
+		}
+
+		int chunkVersion = nbtCompound.getInteger("ChunkVersion");
+		if (chunkVersion < Chunk.CHUNK_VERSION_CURRENT) {
+			for (int x = 0; x < 16; x++)
+				for (int z = 0; z < 16; z++)
+					for (int y = 0; y < 128; y++) {
+						int blockId = chunk4.getBlockID(x, y, z);
+						int meta = chunk4.getBlockMetadata(x, y, z);
+						Block block = Block.blocksList[blockId];
+						if (block != null) {
+							block.onChunkUpdate(chunk4, chunkVersion, x, y, z, meta);
+						}
+
+						TileEntity tileEntity = chunk4.getChunkBlockTileEntity(x, y, z);
+						if (tileEntity instanceof IInventory) {
+							((IInventory) tileEntity).onChunkUpdate(chunkVersion);
+						}
+					}
+		}
+
+		return chunk4;
 	}
 
 	public void chunkTick() {
@@ -201,6 +221,6 @@
 	public void saveExtraData() {
 	}
 
-	public void saveExtraChunkData(World var1, Chunk var2) {
+	public void saveExtraChunkData(World worldObj, Chunk chunk) {
 	}
 }
--- net/minecraft/src/BlockSnowBlock.java
+++ net/minecraft/src/BlockSnowBlock.java
@@ -3,23 +3,23 @@
 import java.util.Random;
 
 public class BlockSnowBlock extends Block {
-	protected BlockSnowBlock(int var1, int var2) {
-		super(var1, var2, Material.craftedSnow);
+	protected BlockSnowBlock(int id, int tex) {
+		super(id, tex, Material.craftedSnow);
 		this.setTickOnLoad(true);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.snowball.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 4;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
--- net/minecraft/src/CanvasMinecraftApplet.java
+++ net/minecraft/src/CanvasMinecraftApplet.java
@@ -1,13 +1,14 @@
 package net.minecraft.src;
 
 import java.awt.Canvas;
+
 import net.minecraft.client.MinecraftApplet;
 
 public class CanvasMinecraftApplet extends Canvas {
 	final MinecraftApplet mcApplet;
 
-	public CanvasMinecraftApplet(MinecraftApplet var1) {
-		this.mcApplet = var1;
+	public CanvasMinecraftApplet(MinecraftApplet mcApplet) {
+		this.mcApplet = mcApplet;
 	}
 
 	public synchronized void addNotify() {
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -1,59 +1,108 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.BlockStepType;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStep extends Block {
-	private boolean blockType;
-
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
-		this.blockType = var2;
-		if(!var2) {
+	public final boolean blockType;
+	protected final BlockStepType[] slabTypes;
+
+	public BlockStep(int id, Material material, boolean blockType, BlockStepType[] slabTypes) {
+		super(id, 6, material);
+		if (slabTypes.length > 16) {
+			throw new IllegalArgumentException("Too many slab types! 16 maximum!");
+		}
+
+		this.slabTypes = slabTypes;
+		this.blockType = blockType;
+		this.blockIndexInTexture = slabTypes[0].topTexture;
+		if(!blockType) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
 
 		this.setLightOpacity(255);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 6 : 5;
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+//		switch (metadata) {
+//			case 0: return textureXY(0, 1);
+//			case 1: return textureXY(11, 6);
+//			case 2: return textureXY(11, 7);
+//			case 3: return textureXY(1, 0);
+//			case 4: return textureXY(8, 6);
+//			case 5: return textureXY(8, 7);
+//			case 6: return side <= 1 ? textureXY(6, 0) : textureXY(5, 0);
+//			case 7: return side <= 1 ? textureXY(10, 6) : textureXY(9, 6);
+//			case 8: return side <= 1 ? textureXY(10, 7) : textureXY(9, 7);
+//			case 9: return textureXY(7, 0);
+//			default: return side <= 1 ? 6 : 5;
+//		}
+		if (metadata < slabTypes.length) {
+			return slabTypes[metadata].getTextureFromSide(side);
+		}
+		return side <= 1 ? 6 : 5;
 	}
 
 	public boolean isOpaqueCube() {
 		return this.blockType;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this == Block.stairSingle) {
-		}
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(this != Block.stairSingle) {
-			super.onBlockAdded(var1, var2, var3, var4);
-		}
-
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		if(var5 == stairSingle.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID);
-		}
-
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Block.stairSingle.blockID;
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(this.blockType) {
+			super.onBlockAdded(worldObj, x, y, z);
+			return;
+		}
+
+		int metadata = worldObj.getBlockMetadata(x, y, z);
+		int var5 = worldObj.getBlockId(x, y - 1, z);
+		int var5Metadata = worldObj.getBlockMetadata(x, y - 1, z);
+
+		if(var5 == blockID && var5Metadata == metadata) {
+			worldObj.setBlockWithNotify(x, y, z, 0);
+			worldObj.setBlockAndMetadataWithNotify(x, y - 1, z, blockID - 1, metadata);
+		}
+	}
+
+	public int idDropped(int metadata, Random rand) {
+		return blockType ? this.blockID + 1 : this.blockID;
+	}
+
+	public int quantityDropped(Random rand) {
+		return blockType ? 2 : 1;
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
 	}
 
 	public boolean renderAsNormalBlock() {
 		return this.blockType;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(this != Block.stairSingle) {
-			super.shouldSideBeRendered(var1, var2, var3, var4, var5);
-		}
-
-		return var5 == 1 ? true : (!super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? false : (var5 == 0 ? true : var1.getBlockId(var2, var3, var4) != this.blockID));
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(this.blockType) {
+			super.shouldSideBeRendered(blockAccess, x, y, z, side);
+		}
+
+		return side == 1 || (super.shouldSideBeRendered(blockAccess, x, y, z, side) && (side == 0 || blockAccess.getBlockId(x, y, z) != this.blockID));
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, this.slabTypes.length).toArray();
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		if (version < Chunk.CHUNK_VERSION_0_2) {
+			if (this.blockID == Block.stairDouble.blockID && metadata == 9) {
+				chunk.blocks[x << 11 | z << 7 | y] = (byte)Block.brickStairDouble.blockID;
+				chunk.setBlockMetadata(x, y, z, 0);
+			}
+			if (this.blockID == Block.stairSingle.blockID && metadata == 9) {
+				chunk.blocks[x << 11 | z << 7 | y] = (byte)Block.brickStairSingle.blockID;
+				chunk.setBlockMetadata(x, y, z, 0);
+			}
+		}
 	}
 }
--- net/minecraft/src/RecipesTools.java
+++ net/minecraft/src/RecipesTools.java
@@ -2,15 +2,20 @@
 
 public class RecipesTools {
 	private String[][] recipePatterns = new String[][]{{"XXX", " # ", " # "}, {"X", "#", "#"}, {"XX", "X#", " #"}, {"XX", " #", " #"}};
-	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold}, {Item.shovelWood, Item.shovelStone, Item.shovel, Item.shovelDiamond, Item.shovelGold}, {Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold}, {Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
+	private Object[][] recipeItems = new Object[][]{
+	{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold},
+	{Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold},
+	{Item.shovelWood, Item.shovelStone, Item.shovel, Item.shovelDiamond, Item.shovelGold},
+	{Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold},
+	{Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), this.recipePatterns[var4], '#', Item.stick, 'X', var3);
 			}
 		}
 
--- net/minecraft/src/SoundPoolEntry.java
+++ net/minecraft/src/SoundPoolEntry.java
@@ -6,8 +6,8 @@
 	public String soundName;
 	public URL soundUrl;
 
-	public SoundPoolEntry(String var1, URL var2) {
+	public SoundPoolEntry(String var1, URL uRL2) {
 		this.soundName = var1;
-		this.soundUrl = var2;
+		this.soundUrl = uRL2;
 	}
 }
--- net/minecraft/src/MCHashTable2.java
+++ net/minecraft/src/MCHashTable2.java
@@ -4,11 +4,11 @@
 	private transient MCHashEntry2[] slots = new MCHashEntry2[16];
 	private transient int count;
 	private int threshold = 12;
-	private final float growFactor = 12.0F / 16.0F;
+	private final float growFactor = 0.75F;
 	private transient volatile int versionStamp;
 
-	private static int computeHash(long var0) {
-		return computeHash((int)(var0 ^ var0 >>> 32));
+	private static int computeHash(long hash) {
+		return computeHash((int)(hash ^ hash >>> 32));
 	}
 
 	private static int computeHash(int var0) {
@@ -23,9 +23,9 @@
 	public Object lookup(long var1) {
 		int var3 = computeHash(var1);
 
-		for(MCHashEntry2 var4 = this.slots[getSlotIndex(var3, this.slots.length)]; var4 != null; var4 = var4.nextEntry) {
-			if(var4.hashEntry == var1) {
-				return var4.valueEntry;
+		for(MCHashEntry2 mCHashEntry24 = this.slots[getSlotIndex(var3, this.slots.length)]; mCHashEntry24 != null; mCHashEntry24 = mCHashEntry24.nextEntry) {
+			if(mCHashEntry24.hashEntry == var1) {
+				return mCHashEntry24.valueEntry;
 			}
 		}
 
@@ -36,9 +36,9 @@
 		int var4 = computeHash(var1);
 		int var5 = getSlotIndex(var4, this.slots.length);
 
-		for(MCHashEntry2 var6 = this.slots[var5]; var6 != null; var6 = var6.nextEntry) {
-			if(var6.hashEntry == var1) {
-				var6.valueEntry = var3;
+		for(MCHashEntry2 mCHashEntry26 = this.slots[var5]; mCHashEntry26 != null; mCHashEntry26 = mCHashEntry26.nextEntry) {
+			if(mCHashEntry26.hashEntry == var1) {
+				mCHashEntry26.valueEntry = var3;
 			}
 		}
 
@@ -47,75 +47,75 @@
 	}
 
 	private void grow(int var1) {
-		MCHashEntry2[] var2 = this.slots;
-		int var3 = var2.length;
+		MCHashEntry2[] mCHashEntry22 = this.slots;
+		int var3 = mCHashEntry22.length;
 		if(var3 == 1073741824) {
 			this.threshold = Integer.MAX_VALUE;
 		} else {
-			MCHashEntry2[] var4 = new MCHashEntry2[var1];
-			this.copyTo(var4);
-			this.slots = var4;
+			MCHashEntry2[] mCHashEntry24 = new MCHashEntry2[var1];
+			this.copyTo(mCHashEntry24);
+			this.slots = mCHashEntry24;
 			this.threshold = (int)((float)var1 * this.growFactor);
 		}
 	}
 
-	private void copyTo(MCHashEntry2[] var1) {
-		MCHashEntry2[] var2 = this.slots;
-		int var3 = var1.length;
-
-		for(int var4 = 0; var4 < var2.length; ++var4) {
-			MCHashEntry2 var5 = var2[var4];
-			if(var5 != null) {
-				var2[var4] = null;
-
-				MCHashEntry2 var6;
+	private void copyTo(MCHashEntry2[] mCHashEntry21) {
+		MCHashEntry2[] mCHashEntry22 = this.slots;
+		int var3 = mCHashEntry21.length;
+
+		for(int var4 = 0; var4 < mCHashEntry22.length; ++var4) {
+			MCHashEntry2 mCHashEntry25 = mCHashEntry22[var4];
+			if(mCHashEntry25 != null) {
+				mCHashEntry22[var4] = null;
+
+				MCHashEntry2 mCHashEntry26;
 				do {
-					var6 = var5.nextEntry;
-					int var7 = getSlotIndex(var5.slotHash, var3);
-					var5.nextEntry = var1[var7];
-					var1[var7] = var5;
-					var5 = var6;
-				} while(var6 != null);
+					mCHashEntry26 = mCHashEntry25.nextEntry;
+					int var7 = getSlotIndex(mCHashEntry25.slotHash, var3);
+					mCHashEntry25.nextEntry = mCHashEntry21[var7];
+					mCHashEntry21[var7] = mCHashEntry25;
+					mCHashEntry25 = mCHashEntry26;
+				} while(mCHashEntry26 != null);
 			}
 		}
 
 	}
 
 	public Object removeObject(long var1) {
-		MCHashEntry2 var3 = this.removeEntry(var1);
-		return var3 == null ? null : var3.valueEntry;
+		MCHashEntry2 mCHashEntry23 = this.removeEntry(var1);
+		return mCHashEntry23 == null ? null : mCHashEntry23.valueEntry;
 	}
 
 	final MCHashEntry2 removeEntry(long var1) {
 		int var3 = computeHash(var1);
 		int var4 = getSlotIndex(var3, this.slots.length);
-		MCHashEntry2 var5 = this.slots[var4];
+		MCHashEntry2 mCHashEntry25 = this.slots[var4];
 
-		MCHashEntry2 var6;
-		MCHashEntry2 var7;
-		for(var6 = var5; var6 != null; var6 = var7) {
-			var7 = var6.nextEntry;
-			if(var6.hashEntry == var1) {
+		MCHashEntry2 mCHashEntry26;
+		MCHashEntry2 mCHashEntry27;
+		for(mCHashEntry26 = mCHashEntry25; mCHashEntry26 != null; mCHashEntry26 = mCHashEntry27) {
+			mCHashEntry27 = mCHashEntry26.nextEntry;
+			if(mCHashEntry26.hashEntry == var1) {
 				++this.versionStamp;
 				--this.count;
-				if(var5 == var6) {
-					this.slots[var4] = var7;
+				if(mCHashEntry25 == mCHashEntry26) {
+					this.slots[var4] = mCHashEntry27;
 				} else {
-					var5.nextEntry = var7;
+					mCHashEntry25.nextEntry = mCHashEntry27;
 				}
 
-				return var6;
+				return mCHashEntry26;
 			}
 
-			var5 = var6;
+			mCHashEntry25 = mCHashEntry26;
 		}
 
-		return var6;
+		return mCHashEntry26;
 	}
 
 	private void insert(int var1, long var2, Object var4, int var5) {
-		MCHashEntry2 var6 = this.slots[var5];
-		this.slots[var5] = new MCHashEntry2(var1, var2, var4, var6);
+		MCHashEntry2 mCHashEntry26 = this.slots[var5];
+		this.slots[var5] = new MCHashEntry2(var1, var2, var4, mCHashEntry26);
 		if(this.count++ >= this.threshold) {
 			this.grow(2 * this.slots.length);
 		}
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -29,33 +29,33 @@
 		super.onLivingUpdate();
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(var2 < 10.0F) {
-			double var3 = var1.posX - this.posX;
-			double var5 = var1.posZ - this.posZ;
+	protected void attackEntity(Entity entity, float distance) {
+		if(distance < 10.0F) {
+			double var3 = entity.posX - this.posX;
+			double var5 = entity.posZ - this.posZ;
 			if(this.attackTime == 0) {
-				EntityArrow var7 = new EntityArrow(this.worldObj, this);
-				var7.posY += (double)1.4F;
-				double var8 = var1.posY - (double)0.2F - var7.posY;
+				EntityArrow entityArrow7 = new EntityArrow(this.worldObj, this);
+				++entityArrow7.posY;
+				double var8 = entity.posY - (double)0.2F - entityArrow7.posY;
 				float var10 = MathHelper.sqrt_double(var3 * var3 + var5 * var5) * 0.2F;
 				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
-				this.worldObj.spawnEntityInWorld(var7);
-				var7.setArrowHeading(var3, var8 + (double)var10, var5, 0.6F, 12.0F);
+				this.worldObj.spawnEntityInWorld(entityArrow7);
+				entityArrow7.setArrowHeading(var3, var8 + (double)var10, var5, 0.6F, 12.0F);
 				this.attackTime = 30;
 			}
 
-			this.rotationYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			this.rotationYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)(float)Math.PI) - 90.0F;
 			this.hasAttacked = true;
 		}
 
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	protected int getDropItemId() {
--- net/minecraft/src/IChunkProvider.java
+++ net/minecraft/src/IChunkProvider.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+
 public interface IChunkProvider {
 	boolean chunkExists(int var1, int var2);
 
@@ -7,9 +9,11 @@
 
 	void populate(IChunkProvider var1, int var2, int var3);
 
-	boolean saveChunks(boolean var1, IProgressUpdate var2);
+	boolean saveChunks(boolean var1, IProgressUpdate iProgressUpdate2);
 
 	boolean unload100OldestChunks();
 
 	boolean canSave();
+
+	default Biome getBiome(int x, int z) { return Biome.PLAINS; }
 }
--- net/minecraft/src/BlockSign.java
+++ net/minecraft/src/BlockSign.java
@@ -6,33 +6,33 @@
 	private Class signEntityClass;
 	private boolean isFreestanding;
 
-	protected BlockSign(int var1, Class var2, boolean var3) {
-		super(var1, Material.wood);
-		this.isFreestanding = var3;
+	protected BlockSign(int id, Class signEntityClass, boolean isFreestanding) {
+		super(id, Material.wood);
+		this.isFreestanding = isFreestanding;
 		this.blockIndexInTexture = 4;
-		this.signEntityClass = var2;
+		this.signEntityClass = signEntityClass;
 		float var4 = 0.25F;
 		float var5 = 1.0F;
 		this.setBlockBounds(0.5F - var4, 0.0F, 0.5F - var4, 0.5F + var4, var5, 0.5F + var4);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
 		if(!this.isFreestanding) {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			float var6 = 9.0F / 32.0F;
-			float var7 = 25.0F / 32.0F;
+			int var5 = blockAccess.getBlockMetadata(x, y, z);
+			float var6 = 0.28125F;
+			float var7 = 0.78125F;
 			float var8 = 0.0F;
 			float var9 = 1.0F;
-			float var10 = 2.0F / 16.0F;
+			float var10 = 0.125F;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			if(var5 == 2) {
 				this.setBlockBounds(var8, var6, 1.0F - var10, var9, var7, 1.0F);
@@ -68,46 +68,46 @@
 	protected TileEntity getBlockEntity() {
 		try {
 			return (TileEntity)this.signEntityClass.newInstance();
-		} catch (Exception var2) {
-			throw new RuntimeException(var2);
+		} catch (Exception exception2) {
+			throw new RuntimeException(exception2);
 		}
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.sign.shiftedIndex;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
 		boolean var6 = false;
 		if(this.isFreestanding) {
-			if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+			if(!worldObj.getBlockMaterial(x, y - 1, z).isSolid()) {
 				var6 = true;
 			}
 		} else {
-			int var7 = var1.getBlockMetadata(var2, var3, var4);
+			int var7 = worldObj.getBlockMetadata(x, y, z);
 			var6 = true;
-			if(var7 == 2 && var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 3 && var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 4 && var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 5 && var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
+			if(var7 == 2 && worldObj.getBlockMaterial(x, y, z + 1).isSolid()) {
+				var6 = false;
+			}
+
+			if(var7 == 3 && worldObj.getBlockMaterial(x, y, z - 1).isSolid()) {
+				var6 = false;
+			}
+
+			if(var7 == 4 && worldObj.getBlockMaterial(x + 1, y, z).isSolid()) {
+				var6 = false;
+			}
+
+			if(var7 == 5 && worldObj.getBlockMaterial(x - 1, y, z).isSolid()) {
 				var6 = false;
 			}
 		}
 
 		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
 	}
 }
--- net/minecraft/src/MovingObjectPosition.java
+++ net/minecraft/src/MovingObjectPosition.java
@@ -9,18 +9,18 @@
 	public Vec3D hitVec;
 	public Entity entityHit;
 
-	public MovingObjectPosition(int var1, int var2, int var3, int var4, Vec3D var5) {
+	public MovingObjectPosition(int x, int y, int z, int side, Vec3D vector) {
 		this.typeOfHit = 0;
-		this.blockX = var1;
-		this.blockY = var2;
-		this.blockZ = var3;
-		this.sideHit = var4;
-		this.hitVec = Vec3D.createVector(var5.xCoord, var5.yCoord, var5.zCoord);
+		this.blockX = x;
+		this.blockY = y;
+		this.blockZ = z;
+		this.sideHit = side;
+		this.hitVec = Vec3D.createVector(vector.xCoord, vector.yCoord, vector.zCoord);
 	}
 
-	public MovingObjectPosition(Entity var1) {
+	public MovingObjectPosition(Entity entity) {
 		this.typeOfHit = 1;
-		this.entityHit = var1;
-		this.hitVec = Vec3D.createVector(var1.posX, var1.posY, var1.posZ);
+		this.entityHit = entity;
+		this.hitVec = Vec3D.createVector(entity.posX, entity.posY, entity.posZ);
 	}
 }
--- net/minecraft/src/InventoryCrafting.java
+++ net/minecraft/src/InventoryCrafting.java
@@ -5,42 +5,42 @@
 	private int gridSize;
 	private CraftingInventoryCB craftingInventory;
 
-	public InventoryCrafting(CraftingInventoryCB var1, int var2, int var3) {
+	public InventoryCrafting(CraftingInventoryCB craftingInventoryCB1, int var2, int var3) {
 		this.gridSize = var2 * var3;
 		this.stackList = new ItemStack[this.gridSize];
-		this.craftingInventory = var1;
+		this.craftingInventory = craftingInventoryCB1;
 	}
 
-	public InventoryCrafting(CraftingInventoryCB var1, ItemStack[] var2) {
+	public InventoryCrafting(CraftingInventoryCB craftingInventoryCB1, ItemStack[] var2) {
 		this.gridSize = var2.length;
 		this.stackList = var2;
-		this.craftingInventory = var1;
+		this.craftingInventory = craftingInventoryCB1;
 	}
 
 	public int getSizeInventory() {
 		return this.gridSize;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.stackList[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackList[slot];
 	}
 
 	public String getInvName() {
 		return "Crafting";
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.stackList[var1] != null) {
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackList[slot] != null) {
 			ItemStack var3;
-			if(this.stackList[var1].stackSize <= var2) {
-				var3 = this.stackList[var1];
-				this.stackList[var1] = null;
+			if(this.stackList[slot].stackSize <= stackSize) {
+				var3 = this.stackList[slot];
+				this.stackList[slot] = null;
 				this.craftingInventory.onCraftMatrixChanged(this);
 				return var3;
 			} else {
-				var3 = this.stackList[var1].splitStack(var2);
-				if(this.stackList[var1].stackSize == 0) {
-					this.stackList[var1] = null;
+				var3 = this.stackList[slot].splitStack(stackSize);
+				if(this.stackList[slot].stackSize == 0) {
+					this.stackList[slot] = null;
 				}
 
 				this.craftingInventory.onCraftMatrixChanged(this);
@@ -51,8 +51,8 @@
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.stackList[var1] = var2;
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackList[slot] = itemStack;
 		this.craftingInventory.onCraftMatrixChanged(this);
 	}
 
--- net/minecraft/src/GuiStatsComponent.java
+++ net/minecraft/src/GuiStatsComponent.java
@@ -27,29 +27,29 @@
 		this.repaint();
 	}
 
-	public void paint(Graphics var1) {
-		var1.setColor(new Color(16777215));
-		var1.fillRect(0, 0, 256, 192);
+	public void paint(Graphics graphics) {
+		graphics.setColor(new Color(0xFFFFFF));
+		graphics.fillRect(0, 0, 256, 192);
 
 		int var2;
 		for(var2 = 0; var2 < 256; ++var2) {
 			int var3 = this.memoryUse[var2 + this.updateCounter & 255];
-			var1.setColor(new Color(var3 + 28 << 16));
-			var1.fillRect(var2, 100 - var3, 1, var3);
+			graphics.setColor(new Color(var3 + 28 << 16));
+			graphics.fillRect(var2, 100 - var3, 1, var3);
 		}
 
-		var1.setColor(Color.BLACK);
+		graphics.setColor(Color.BLACK);
 
 		for(var2 = 0; var2 < this.displayStrings.length; ++var2) {
 			String var4 = this.displayStrings[var2];
 			if(var4 != null) {
-				var1.drawString(var4, 32, 116 + var2 * 16);
+				graphics.drawString(var4, 32, 116 + var2 * 16);
 			}
 		}
 
 	}
 
-	static void update(GuiStatsComponent var0) {
-		var0.update();
+	static void update(GuiStatsComponent component) {
+		component.update();
 	}
 }
--- net/minecraft/client/MinecraftApplet.java
+++ net/minecraft/client/MinecraftApplet.java
@@ -3,6 +3,7 @@
 import java.applet.Applet;
 import java.awt.BorderLayout;
 import java.awt.Canvas;
+
 import net.minecraft.src.CanvasMinecraftApplet;
 import net.minecraft.src.MinecraftAppletImpl;
 import net.minecraft.src.Session;
@@ -80,11 +81,11 @@
 
 			try {
 				this.mcThread.join(10000L);
-			} catch (InterruptedException var4) {
+			} catch (InterruptedException interruptedException4) {
 				try {
 					this.mc.shutdownMinecraftApplet();
-				} catch (Exception var3) {
-					var3.printStackTrace();
+				} catch (Exception exception3) {
+					exception3.printStackTrace();
 				}
 			}
 
@@ -100,7 +101,7 @@
 		try {
 			this.removeAll();
 			this.validate();
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 		}
 
 	}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -3,22 +3,34 @@
 import java.util.Random;
 
 public class WorldGenMinable extends WorldGenerator {
-	private int minableBlockId;
-	private int numberOfBlocks;
+	private final int minableBlockId;
+	private final int numberOfBlocks;
+	private final int metadata;
+	private boolean mergeWithStone;
 
 	public WorldGenMinable(int var1, int var2) {
+		this(var1, var2, 0);
+	}
+
+	public WorldGenMinable(int var1, int var2, int var3) {
 		this.minableBlockId = var1;
 		this.numberOfBlocks = var2;
+		this.metadata = var3;
+	}
+
+	public WorldGenMinable mergeWithStone() {
+		this.mergeWithStone = true;
+		return this;
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var15 = (double)(var4 + var2.nextInt(3) + 2);
-		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+		double var7 = ((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = ((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = ((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = ((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (var4 + var2.nextInt(3) + 2);
+		double var17 = (var4 + var2.nextInt(3) + 2);
 
 		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
 			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
@@ -35,7 +47,9 @@
 						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
 						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
 						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.stone.blockID) {
+							int metadata = this.mergeWithStone ? var1.getBlockMetadata(var32, var33, var34) : this.metadata;
 							var1.setBlock(var32, var33, var34, this.minableBlockId);
+							var1.setBlockMetadata(var32, var33, var34, metadata);
 						}
 					}
 				}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiCredits.java
@@ -1,0 +1,48 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class GuiCredits extends GuiScreen {
+	private final GuiScreen parent;
+	private List<String> lines = new ArrayList<>();
+
+	public GuiCredits(GuiScreen parent) {
+		this.parent = parent;
+
+		try {
+			BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(GuiCredits.class.getResourceAsStream("/credits.txt")));
+			String var3;
+
+			while((var3 = bufferedReader2.readLine()) != null) {
+				var3 = var3.trim();
+				if(var3.length() > 0) {
+					this.lines.add(var3);
+				}
+			}
+		} catch (IOException e) {
+			this.lines.add("Failed to get credits");
+		}
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(1, this.width / 2 - 50, this.height - 30, 100, 20, "Exit"));
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		this.mc.displayGuiScreen(this.parent);
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		for (int i = 0; i < lines.size(); i++) {
+			this.drawString(this.fontRenderer, lines.get(i), 10, 10 + i * 10, 0xFFFFFF);
+		}
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- net/minecraft/src/ItemRedstone.java
+++ net/minecraft/src/ItemRedstone.java
@@ -5,37 +5,37 @@
 		super(var1);
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		if(var3.getBlockId(var4, var5, var6) != 0) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		if(worldObj.getBlockId(x, y, z) != 0) {
 			return false;
 		} else {
-			if(Block.redstoneWire.canPlaceBlockAt(var3, var4, var5, var6)) {
-				--var1.stackSize;
-				var3.setBlockWithNotify(var4, var5, var6, Block.redstoneWire.blockID);
+			if(Block.redstoneWire.canPlaceBlockAt(worldObj, x, y, z)) {
+				--itemStack.stackSize;
+				worldObj.setBlockWithNotify(x, y, z, Block.redstoneWire.blockID);
 			}
 
 			return true;
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemQuiver.java
@@ -1,0 +1,39 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemQuiver extends ItemCharm {
+	public ItemQuiver(int var1) {
+		super(var1, 256, "quiver");
+		this.startingDamage = this.maxDamage;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		InventoryPlayer inventory = var3.inventory;
+
+		for (int i = 0; i < inventory.getSizeInventory(); ++i) {
+			ItemStack stack = inventory.getStackInSlot(i);
+			if (stack != null && stack.itemID == Item.arrow.shiftedIndex) {
+				while (var1.itemDmg > 0 && var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
+					var1.itemDmg--;
+				}
+				var3.swingItem();
+				return var1;
+			}
+		}
+
+		if (var1.itemDmg < this.maxDamage) {
+			for (int i = this.maxDamage - var1.itemDmg; i > 0; i -= 16) {
+				var3.dropPlayerItem(new ItemStack(Item.arrow, Math.min(i, 16)));
+			}
+			var1.itemDmg = this.maxDamage;
+			var3.swingItem();
+		}
+
+		return var1;
+	}
+
+	public boolean allowRepair() {
+		return false;
+	}
+}
--- net/minecraft/src/EffectRenderer.java
+++ net/minecraft/src/EffectRenderer.java
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 
 public class EffectRenderer {
@@ -11,12 +12,12 @@
 	private RenderEngine renderEngine;
 	private Random rand = new Random();
 
-	public EffectRenderer(World var1, RenderEngine var2) {
-		if(var1 != null) {
-			this.worldObj = var1;
+	public EffectRenderer(World world, RenderEngine renderEngine) {
+		if(world != null) {
+			this.worldObj = world;
 		}
 
-		this.renderEngine = var2;
+		this.renderEngine = renderEngine;
 
 		for(int var3 = 0; var3 < 4; ++var3) {
 			this.fxLayers[var3] = new ArrayList();
@@ -24,17 +25,17 @@
 
 	}
 
-	public void addEffect(EntityFX var1) {
-		int var2 = var1.getFXLayer();
-		this.fxLayers[var2].add(var1);
+	public void addEffect(EntityFX entityFX) {
+		int var2 = entityFX.getFXLayer();
+		this.fxLayers[var2].add(entityFX);
 	}
 
 	public void updateEffects() {
 		for(int var1 = 0; var1 < 4; ++var1) {
 			for(int var2 = 0; var2 < this.fxLayers[var1].size(); ++var2) {
-				EntityFX var3 = (EntityFX)this.fxLayers[var1].get(var2);
-				var3.onUpdate();
-				if(var3.isDead) {
+				EntityFX entityFX3 = (EntityFX)this.fxLayers[var1].get(var2);
+				entityFX3.onUpdate();
+				if(entityFX3.isDead) {
 					this.fxLayers[var1].remove(var2--);
 				}
 			}
@@ -42,15 +43,15 @@
 
 	}
 
-	public void renderParticles(Entity var1, float var2) {
-		float var3 = MathHelper.cos(var1.rotationYaw * (float)Math.PI / 180.0F);
-		float var4 = MathHelper.sin(var1.rotationYaw * (float)Math.PI / 180.0F);
-		float var5 = -var4 * MathHelper.sin(var1.rotationPitch * (float)Math.PI / 180.0F);
-		float var6 = var3 * MathHelper.sin(var1.rotationPitch * (float)Math.PI / 180.0F);
-		float var7 = MathHelper.cos(var1.rotationPitch * (float)Math.PI / 180.0F);
-		EntityFX.interpPosX = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var2;
-		EntityFX.interpPosY = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var2;
-		EntityFX.interpPosZ = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var2;
+	public void renderParticles(Entity viewerEntity, float renderPartialTick) {
+		float var3 = MathHelper.cos(viewerEntity.rotationYaw * (float)Math.PI / 180.0F);
+		float var4 = MathHelper.sin(viewerEntity.rotationYaw * (float)Math.PI / 180.0F);
+		float var5 = -var4 * MathHelper.sin(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		float var6 = var3 * MathHelper.sin(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		float var7 = MathHelper.cos(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		EntityFX.interpPosX = viewerEntity.lastTickPosX + (viewerEntity.posX - viewerEntity.lastTickPosX) * (double)renderPartialTick;
+		EntityFX.interpPosY = viewerEntity.lastTickPosY + (viewerEntity.posY - viewerEntity.lastTickPosY) * (double)renderPartialTick;
+		EntityFX.interpPosZ = viewerEntity.lastTickPosZ + (viewerEntity.posZ - viewerEntity.lastTickPosZ) * (double)renderPartialTick;
 
 		for(int var8 = 0; var8 < 3; ++var8) {
 			if(this.fxLayers[var8].size() != 0) {
@@ -68,35 +69,35 @@
 				}
 
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var9);
-				Tessellator var10 = Tessellator.instance;
-				var10.startDrawingQuads();
+				Tessellator tessellator10 = Tessellator.instance;
+				tessellator10.startDrawingQuads();
 
 				for(int var11 = 0; var11 < this.fxLayers[var8].size(); ++var11) {
-					EntityFX var12 = (EntityFX)this.fxLayers[var8].get(var11);
-					var12.renderParticle(var10, var2, var3, var7, var4, var5, var6);
+					EntityFX entityFX12 = (EntityFX)this.fxLayers[var8].get(var11);
+					entityFX12.renderParticle(tessellator10, renderPartialTick, var3, var7, var4, var5, var6);
 				}
 
-				var10.draw();
+				tessellator10.draw();
 			}
 		}
 
 	}
 
-	public void renderLitParticles(Entity var1, float var2) {
+	public void renderLitParticles(Entity entity, float renderPartialTick) {
 		byte var3 = 3;
 		if(this.fxLayers[var3].size() != 0) {
-			Tessellator var4 = Tessellator.instance;
+			Tessellator tessellator4 = Tessellator.instance;
 
 			for(int var5 = 0; var5 < this.fxLayers[var3].size(); ++var5) {
-				EntityFX var6 = (EntityFX)this.fxLayers[var3].get(var5);
-				var6.renderParticle(var4, var2, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+				EntityFX entityFX6 = (EntityFX)this.fxLayers[var3].get(var5);
+				entityFX6.renderParticle(tessellator4, renderPartialTick, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
 			}
 
 		}
 	}
 
-	public void clearEffects(World var1) {
-		this.worldObj = var1;
+	public void clearEffects(World worldObj) {
+		this.worldObj = worldObj;
 
 		for(int var2 = 0; var2 < 4; ++var2) {
 			this.fxLayers[var2].clear();
@@ -104,8 +105,8 @@
 
 	}
 
-	public void addBlockDestroyEffects(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getBlockId(var1, var2, var3);
+	public void addBlockDestroyEffects(int x, int y, int z) {
+		int var4 = this.worldObj.getBlockId(x, y, z);
 		if(var4 != 0) {
 			Block var5 = Block.blocksList[var4];
 			byte var6 = 4;
@@ -113,10 +114,10 @@
 			for(int var7 = 0; var7 < var6; ++var7) {
 				for(int var8 = 0; var8 < var6; ++var8) {
 					for(int var9 = 0; var9 < var6; ++var9) {
-						double var10 = (double)var1 + ((double)var7 + 0.5D) / (double)var6;
-						double var12 = (double)var2 + ((double)var8 + 0.5D) / (double)var6;
-						double var14 = (double)var3 + ((double)var9 + 0.5D) / (double)var6;
-						this.addEffect(new EntityDiggingFX(this.worldObj, var10, var12, var14, var10 - (double)var1 - 0.5D, var12 - (double)var2 - 0.5D, var14 - (double)var3 - 0.5D, var5));
+						double var10 = (double)x + ((double)var7 + 0.5D) / (double)var6;
+						double var12 = (double)y + ((double)var8 + 0.5D) / (double)var6;
+						double var14 = (double)z + ((double)var9 + 0.5D) / (double)var6;
+						this.addEffect(new EntityDiggingFX(this.worldObj, var10, var12, var14, var10 - (double)x - 0.5D, var12 - (double)y - 0.5D, var14 - (double)z - 0.5D, var5, this.worldObj.getBlockMetadata(x, y, z)));
 					}
 				}
 			}
@@ -124,39 +125,40 @@
 		}
 	}
 
-	public void addBlockHitEffects(int var1, int var2, int var3, int var4) {
-		int var5 = this.worldObj.getBlockId(var1, var2, var3);
+	public void addBlockHitEffects(int x, int y, int z, int face) {
+		int var5 = this.worldObj.getBlockId(x, y, z);
 		if(var5 != 0) {
 			Block var6 = Block.blocksList[var5];
 			float var7 = 0.1F;
-			double var8 = (double)var1 + this.rand.nextDouble() * (var6.maxX - var6.minX - (double)(var7 * 2.0F)) + (double)var7 + var6.minX;
-			double var10 = (double)var2 + this.rand.nextDouble() * (var6.maxY - var6.minY - (double)(var7 * 2.0F)) + (double)var7 + var6.minY;
-			double var12 = (double)var3 + this.rand.nextDouble() * (var6.maxZ - var6.minZ - (double)(var7 * 2.0F)) + (double)var7 + var6.minZ;
-			if(var4 == 0) {
-				var10 = (double)var2 + var6.minY - (double)var7;
-			}
-
-			if(var4 == 1) {
-				var10 = (double)var2 + var6.maxY + (double)var7;
-			}
-
-			if(var4 == 2) {
-				var12 = (double)var3 + var6.minZ - (double)var7;
-			}
-
-			if(var4 == 3) {
-				var12 = (double)var3 + var6.maxZ + (double)var7;
-			}
-
-			if(var4 == 4) {
-				var8 = (double)var1 + var6.minX - (double)var7;
-			}
-
-			if(var4 == 5) {
-				var8 = (double)var1 + var6.maxX + (double)var7;
-			}
-
-			this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6)).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
+			double var8 = (double)x + this.rand.nextDouble() * (var6.maxX - var6.minX - (double)(var7 * 2.0F)) + (double)var7 + var6.minX;
+			double var10 = (double)y + this.rand.nextDouble() * (var6.maxY - var6.minY - (double)(var7 * 2.0F)) + (double)var7 + var6.minY;
+			double var12 = (double)z + this.rand.nextDouble() * (var6.maxZ - var6.minZ - (double)(var7 * 2.0F)) + (double)var7 + var6.minZ;
+			if(face == 0) {
+				var10 = (double)y + var6.minY - (double)var7;
+			}
+
+			if(face == 1) {
+				var10 = (double)y + var6.maxY + (double)var7;
+			}
+
+			if(face == 2) {
+				var12 = (double)z + var6.minZ - (double)var7;
+			}
+
+			if(face == 3) {
+				var12 = (double)z + var6.maxZ + (double)var7;
+			}
+
+			if(face == 4) {
+				var8 = (double)x + var6.minX - (double)var7;
+			}
+
+			if(face == 5) {
+				var8 = (double)x + var6.maxX + (double)var7;
+			}
+
+			this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6, this.worldObj.getBlockMetadata(x, y, z)))
+					.multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
 		}
 	}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemCharm.java
@@ -1,0 +1,31 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemEquipable;
+import net.minecraft.src.ItemStack;
+
+public class ItemCharm extends ItemEquipable {
+	public final String textureName;
+
+	public ItemCharm(int id) {
+		super(id, 4);
+		this.textureName = null;
+	}
+
+	public ItemCharm(int id, String renderName) {
+		super(id, 4);
+		this.textureName = renderName;
+	}
+
+	public ItemCharm(int id, int durability) {
+		super(id, 4, durability);
+		this.textureName = null;
+	}
+
+	public ItemCharm(int id, int durability, String renderName) {
+		super(id, 4, durability);
+		this.textureName = renderName;
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemWings.java
@@ -1,0 +1,22 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+import net.minecraft.src.Material;
+
+public class ItemWings extends ItemCharm {
+	public ItemWings(int id) {
+		super(id, 256, "wings");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		if (player.justJumped()
+				&& !player.onGround
+				&& !player.isInsideOfMaterial(Material.water)
+				&& !player.isInsideOfMaterial(Material.lava)
+				&& player.useMana(10.0F)) {
+			player.midairJump();
+			stack.damageItem(1);
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockPlanks.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+import java.util.stream.IntStream;
+
+public class BlockPlanks extends Block {
+	public BlockPlanks(int id, int tex, Material material) {
+		super(id, tex, material);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata == 0 ? this.blockIndexInTexture : textureXY(8, 8 + metadata);
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+}
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -1,52 +1,64 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public final class ItemStack {
 	public int stackSize;
 	public int animationsToGo;
 	public int itemID;
 	public int itemDmg;
-
-	public ItemStack(Block var1) {
-		this((Block)var1, 1);
-	}
-
-	public ItemStack(Block var1, int var2) {
-		this(var1.blockID, var2);
-	}
-
-	public ItemStack(Item var1) {
-		this((Item)var1, 1);
-	}
-
-	public ItemStack(Item var1, int var2) {
-		this(var1.shiftedIndex, var2);
-	}
-
-	public ItemStack(int var1) {
-		this(var1, 1);
-	}
-
-	public ItemStack(int var1, int var2) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-	}
-
-	public ItemStack(int var1, int var2, int var3) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-		this.itemDmg = var3;
-	}
-
-	public ItemStack(NBTTagCompound var1) {
-		this.stackSize = 0;
-		this.readFromNBT(var1);
-	}
-
-	public ItemStack splitStack(int var1) {
-		this.stackSize -= var1;
-		return new ItemStack(this.itemID, var1, this.itemDmg);
+	public int itemMetadata;
+
+	public ItemStack(Block block) {
+		this(block, 1);
+	}
+
+	public ItemStack(Block block, int stackSize) {
+		this(block, stackSize, 0);
+	}
+
+	public ItemStack(Block block, int stackSize, int metadata) {
+		this(block.blockID, stackSize);
+		this.itemMetadata = metadata;
+	}
+
+	public ItemStack(Item item) {
+		this(item, 1);
+	}
+
+	public ItemStack(Item item, int stackSize) {
+		this(item.shiftedIndex, stackSize);
+	}
+
+	public ItemStack(int itemID) {
+		this(itemID, 1);
+	}
+
+	public ItemStack(int itemID, int stackSize) {
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+		if (Item.itemsList[itemID] != null)
+			this.itemDmg = Item.itemsList[itemID].startingDamage;
+	}
+
+	public ItemStack(int itemID, int stackSize, int itemDmg) {
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+		this.itemDmg = itemDmg;
+	}
+
+	public ItemStack(NBTTagCompound nbtCompound) {
+		this.readFromNBT(nbtCompound);
+	}
+
+	public ItemStack withMetadata(int metadata) {
+		this.itemMetadata = metadata;
+		return this;
+	}
+
+	public ItemStack splitStack(int stackSize) {
+		this.stackSize -= stackSize;
+		return new ItemStack(this.itemID, stackSize, this.itemDmg).withMetadata(this.itemMetadata);
 	}
 
 	public Item getItem() {
@@ -57,29 +69,31 @@
 		return this.getItem().getIconIndex(this);
 	}
 
-	public boolean useItem(EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
-		return this.getItem().onItemUse(this, var1, var2, var3, var4, var5, var6);
-	}
-
-	public float getStrVsBlock(Block var1) {
-		return this.getItem().getStrVsBlock(this, var1);
-	}
-
-	public ItemStack useItemRightClick(World var1, EntityPlayer var2) {
-		return this.getItem().onItemRightClick(this, var1, var2);
-	}
-
-	public NBTTagCompound writeToNBT(NBTTagCompound var1) {
-		var1.setShort("id", (short)this.itemID);
-		var1.setByte("Count", (byte)this.stackSize);
-		var1.setShort("Damage", (short)this.itemDmg);
-		return var1;
-	}
-
-	public void readFromNBT(NBTTagCompound var1) {
-		this.itemID = var1.getShort("id");
-		this.stackSize = var1.getByte("Count");
-		this.itemDmg = var1.getShort("Damage");
+	public boolean useItem(EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		return this.getItem().onItemUse(this, entityPlayer, worldObj, x, y, z, side);
+	}
+
+	public float getStrVsBlock(Block block) {
+		return this.getItem().getStrVsBlock(this, block);
+	}
+
+	public ItemStack useItemRightClick(World worldObj, EntityPlayer entityPlayer) {
+		return this.getItem().onItemRightClick(this, worldObj, entityPlayer);
+	}
+
+	public NBTTagCompound writeToNBT(NBTTagCompound nbtCompound) {
+		nbtCompound.setShort("id", (short)this.itemID);
+		nbtCompound.setByte("Count", (byte)this.stackSize);
+		nbtCompound.setShort("Damage", (short)this.itemDmg);
+		nbtCompound.setShort("Metadata", (byte)this.itemMetadata);
+		return nbtCompound;
+	}
+
+	public void readFromNBT(NBTTagCompound nbtCompound) {
+		this.itemID = nbtCompound.getShort("id");
+		this.stackSize = nbtCompound.getByte("Count");
+		this.itemDmg = nbtCompound.getShort("Damage");
+		this.itemMetadata = nbtCompound.getShort("Metadata");
 	}
 
 	public int getMaxStackSize() {
@@ -90,8 +104,8 @@
 		return Item.itemsList[this.itemID].getMaxDamage();
 	}
 
-	public void damageItem(int var1) {
-		this.itemDmg += var1;
+	public void damageItem(int damage) {
+		this.itemDmg += damage;
 		if(this.itemDmg > this.getMaxDamage()) {
 			--this.stackSize;
 			if(this.stackSize < 0) {
@@ -103,30 +117,60 @@
 
 	}
 
-	public void hitEntity(EntityLiving var1) {
-		Item.itemsList[this.itemID].hitEntity(this, var1);
-	}
-
-	public void onDestroyBlock(int var1, int var2, int var3, int var4) {
-		Item.itemsList[this.itemID].onBlockDestroyed(this, var1, var2, var3, var4);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
-		return Item.itemsList[this.itemID].getDamageVsEntity(var1);
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return Item.itemsList[this.itemID].canHarvestBlock(var1);
-	}
-
-	public void onItemDestroyedByUse(EntityPlayer var1) {
-	}
-
-	public void useItemOnEntity(EntityLiving var1) {
-		Item.itemsList[this.itemID].saddleEntity(this, var1);
+	public void hitEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].hitEntity(this, entityLiving);
+	}
+
+	public void onDestroyBlock(int id, int x, int y, int z) {
+		Item.itemsList[this.itemID].onBlockDestroyed(this, id, x, y, z);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return Item.itemsList[this.itemID].getDamageVsEntity(entity);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return Item.itemsList[this.itemID].canHarvestBlock(block);
+	}
+
+	public void onItemDestroyedByUse(EntityPlayer entityPlayer) {
+	}
+
+	public void useItemOnEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].saddleEntity(this, entityLiving);
 	}
 
 	public ItemStack copy() {
-		return new ItemStack(this.itemID, this.stackSize, this.itemDmg);
+		return new ItemStack(this.itemID, this.stackSize, this.itemDmg).withMetadata(this.itemMetadata);
+	}
+
+	public ItemTooltip getTooltip() {
+		if (ItemTooltip.fromMetadata[this.itemID] != null && ItemTooltip.fromMetadata[this.itemID][Math.max(this.itemMetadata, 0)] != null) {
+			return ItemTooltip.fromMetadata[this.itemID][Math.max(this.itemMetadata, 0)];
+		}
+		return Item.itemsList[this.itemID].getTooltip();
+	}
+
+	public void onChunkUpdate(int version) {
+		if (version < Chunk.CHUNK_VERSION_0_2) {
+			if (this.itemID < 256) {
+				if (this.itemID == Block.stairDouble.blockID && this.itemMetadata == 9) {
+					this.itemID = Block.brickStairDouble.blockID;
+					this.itemMetadata = 0;
+				}
+
+				if (this.itemID == Block.stairSingle.blockID && this.itemMetadata == 9) {
+					this.itemID = Block.brickStairSingle.blockID;
+					this.itemMetadata = 0;
+				}
+
+				Block block = Block.blocksList[this.itemID];
+				if (block != null) {
+					if (block instanceof BlockOre && this.itemMetadata == 1) {
+						this.itemMetadata = 2;
+					}
+				}
+			}
+		}
 	}
 }
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -67,13 +67,13 @@
 	public int serverPosY;
 	public int serverPosZ;
 
-	public Entity(World var1) {
-		this.worldObj = var1;
+	public Entity(World world) {
+		this.worldObj = world;
 		this.setPosition(0.0D, 0.0D, 0.0D);
 	}
 
-	public boolean equals(Object var1) {
-		return var1 instanceof Entity ? ((Entity)var1).entityID == this.entityID : false;
+	public boolean equals(Object entity) {
+		return entity instanceof Entity ? ((Entity)entity).entityID == this.entityID : false;
 	}
 
 	public int hashCode() {
@@ -100,30 +100,30 @@
 		this.isDead = true;
 	}
 
-	protected void setSize(float var1, float var2) {
-		this.width = var1;
-		this.height = var2;
-	}
-
-	protected void setRotation(float var1, float var2) {
-		this.rotationYaw = var1;
-		this.rotationPitch = var2;
-	}
-
-	public void setPosition(double var1, double var3, double var5) {
-		this.posX = var1;
-		this.posY = var3;
-		this.posZ = var5;
+	protected void setSize(float width, float height) {
+		this.width = width;
+		this.height = height;
+	}
+
+	protected void setRotation(float rotationYaw, float rotationPitch) {
+		this.rotationYaw = rotationYaw;
+		this.rotationPitch = rotationPitch;
+	}
+
+	public void setPosition(double posX, double posY, double posZ) {
+		this.posX = posX;
+		this.posY = posY;
+		this.posZ = posZ;
 		float var7 = this.width / 2.0F;
 		float var8 = this.height;
-		this.boundingBox.setBounds(var1 - (double)var7, var3 - (double)this.yOffset + (double)this.ySize, var5 - (double)var7, var1 + (double)var7, var3 - (double)this.yOffset + (double)this.ySize + (double)var8, var5 + (double)var7);
+		this.boundingBox.setBounds(posX - (double)var7, posY - (double)this.yOffset + (double)this.ySize, posZ - (double)var7, posX + (double)var7, posY - (double)this.yOffset + (double)this.ySize + (double)var8, posZ + (double)var7);
 	}
 
-	public void setAngles(float var1, float var2) {
+	public void setAngles(float yaw, float pitch) {
 		float var3 = this.rotationPitch;
 		float var4 = this.rotationYaw;
-		this.rotationYaw = (float)((double)this.rotationYaw + (double)var1 * 0.15D);
-		this.rotationPitch = (float)((double)this.rotationPitch - (double)var2 * 0.15D);
+		this.rotationYaw = (float)((double)this.rotationYaw + (double)yaw * 0.15D);
+		this.rotationPitch = (float)((double)this.rotationPitch - (double)pitch * 0.15D);
 		if(this.rotationPitch < -90.0F) {
 			this.rotationPitch = -90.0F;
 		}
@@ -209,139 +209,139 @@
 		this.setEntityDead();
 	}
 
-	public boolean isOffsetPositionInLiquid(double var1, double var3, double var5) {
-		AxisAlignedBB var7 = this.boundingBox.getOffsetBoundingBox(var1, var3, var5);
-		List var8 = this.worldObj.getCollidingBoundingBoxes(this, var7);
-		return var8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(var7);
+	public boolean isOffsetPositionInLiquid(double offsetX, double offsetY, double offsetZ) {
+		AxisAlignedBB axisAlignedBB7 = this.boundingBox.getOffsetBoundingBox(offsetX, offsetY, offsetZ);
+		List list8 = this.worldObj.getCollidingBoundingBoxes(this, axisAlignedBB7);
+		return list8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(axisAlignedBB7);
 	}
 
-	public void moveEntity(double var1, double var3, double var5) {
+	public void moveEntity(double moveX, double moveY, double moveZ) {
 		if(this.noClip) {
-			this.boundingBox.offset(var1, var3, var5);
+			this.boundingBox.offset(moveX, moveY, moveZ);
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
 		} else {
 			double var7 = this.posX;
 			double var9 = this.posZ;
-			double var11 = var1;
-			double var13 = var3;
-			double var15 = var5;
-			AxisAlignedBB var17 = this.boundingBox.copy();
+			double var11 = moveX;
+			double var13 = moveY;
+			double var15 = moveZ;
+			AxisAlignedBB axisAlignedBB17 = this.boundingBox.copy();
 			boolean var18 = this.onGround && this.isSneaking();
 			if(var18) {
 				double var19;
-				for(var19 = 0.05D; var1 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(var1, -1.0D, 0.0D)).size() == 0; var11 = var1) {
-					if(var1 < var19 && var1 >= -var19) {
-						var1 = 0.0D;
-					} else if(var1 > 0.0D) {
-						var1 -= var19;
-					} else {
-						var1 += var19;
-					}
-				}
-
-				for(; var5 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, var5)).size() == 0; var15 = var5) {
-					if(var5 < var19 && var5 >= -var19) {
-						var5 = 0.0D;
-					} else if(var5 > 0.0D) {
-						var5 -= var19;
-					} else {
-						var5 += var19;
-					}
-				}
-			}
-
-			List var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var1, var3, var5));
-
-			for(int var20 = 0; var20 < var35.size(); ++var20) {
-				var3 = ((AxisAlignedBB)var35.get(var20)).calculateYOffset(this.boundingBox, var3);
-			}
-
-			this.boundingBox.offset(0.0D, var3, 0.0D);
-			if(!this.surfaceCollision && var13 != var3) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			boolean var36 = this.onGround || var13 != var3 && var13 < 0.0D;
+				for(var19 = 0.05D; moveX != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(moveX, -1.0D, 0.0D)).size() == 0; var11 = moveX) {
+					if(moveX < var19 && moveX >= -var19) {
+						moveX = 0.0D;
+					} else if(moveX > 0.0D) {
+						moveX -= var19;
+					} else {
+						moveX += var19;
+					}
+				}
+
+				for(; moveZ != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, moveZ)).size() == 0; var15 = moveZ) {
+					if(moveZ < var19 && moveZ >= -var19) {
+						moveZ = 0.0D;
+					} else if(moveZ > 0.0D) {
+						moveZ -= var19;
+					} else {
+						moveZ += var19;
+					}
+				}
+			}
+
+			List list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(moveX, moveY, moveZ));
+
+			for(int var20 = 0; var20 < list35.size(); ++var20) {
+				moveY = ((AxisAlignedBB)list35.get(var20)).calculateYOffset(this.boundingBox, moveY);
+			}
+
+			this.boundingBox.offset(0.0D, moveY, 0.0D);
+			if(!this.surfaceCollision && var13 != moveY) {
+				moveZ = 0.0D;
+				moveY = 0.0D;
+				moveX = 0.0D;
+			}
+
+			boolean var36 = this.onGround || var13 != moveY && var13 < 0.0D;
 
 			int var21;
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var1 = ((AxisAlignedBB)var35.get(var21)).calculateXOffset(this.boundingBox, var1);
-			}
-
-			this.boundingBox.offset(var1, 0.0D, 0.0D);
-			if(!this.surfaceCollision && var11 != var1) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var5 = ((AxisAlignedBB)var35.get(var21)).calculateZOffset(this.boundingBox, var5);
-			}
-
-			this.boundingBox.offset(0.0D, 0.0D, var5);
-			if(!this.surfaceCollision && var15 != var5) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
+			for(var21 = 0; var21 < list35.size(); ++var21) {
+				moveX = ((AxisAlignedBB)list35.get(var21)).calculateXOffset(this.boundingBox, moveX);
+			}
+
+			this.boundingBox.offset(moveX, 0.0D, 0.0D);
+			if(!this.surfaceCollision && var11 != moveX) {
+				moveZ = 0.0D;
+				moveY = 0.0D;
+				moveX = 0.0D;
+			}
+
+			for(var21 = 0; var21 < list35.size(); ++var21) {
+				moveZ = ((AxisAlignedBB)list35.get(var21)).calculateZOffset(this.boundingBox, moveZ);
+			}
+
+			this.boundingBox.offset(0.0D, 0.0D, moveZ);
+			if(!this.surfaceCollision && var15 != moveZ) {
+				moveZ = 0.0D;
+				moveY = 0.0D;
+				moveX = 0.0D;
 			}
 
 			double var23;
 			int var28;
 			double var37;
-			if(this.stepHeight > 0.0F && var36 && this.ySize < 0.05F && (var11 != var1 || var15 != var5)) {
-				var37 = var1;
-				var23 = var3;
-				double var25 = var5;
-				var1 = var11;
-				var3 = (double)this.stepHeight;
-				var5 = var15;
-				AxisAlignedBB var27 = this.boundingBox.copy();
-				this.boundingBox.setBB(var17);
-				var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var11, var3, var15));
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var3 = ((AxisAlignedBB)var35.get(var28)).calculateYOffset(this.boundingBox, var3);
-				}
-
-				this.boundingBox.offset(0.0D, var3, 0.0D);
-				if(!this.surfaceCollision && var13 != var3) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var1 = ((AxisAlignedBB)var35.get(var28)).calculateXOffset(this.boundingBox, var1);
-				}
-
-				this.boundingBox.offset(var1, 0.0D, 0.0D);
-				if(!this.surfaceCollision && var11 != var1) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var5 = ((AxisAlignedBB)var35.get(var28)).calculateZOffset(this.boundingBox, var5);
-				}
-
-				this.boundingBox.offset(0.0D, 0.0D, var5);
-				if(!this.surfaceCollision && var15 != var5) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				if(var37 * var37 + var25 * var25 >= var1 * var1 + var5 * var5) {
-					var1 = var37;
-					var3 = var23;
-					var5 = var25;
-					this.boundingBox.setBB(var27);
+			if(this.stepHeight > 0.0F && var36 && this.ySize < 0.05F && (var11 != moveX || var15 != moveZ)) {
+				var37 = moveX;
+				var23 = moveY;
+				double var25 = moveZ;
+				moveX = var11;
+				moveY = (double)this.stepHeight;
+				moveZ = var15;
+				AxisAlignedBB axisAlignedBB27 = this.boundingBox.copy();
+				this.boundingBox.setBB(axisAlignedBB17);
+				list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var11, moveY, var15));
+
+				for(var28 = 0; var28 < list35.size(); ++var28) {
+					moveY = ((AxisAlignedBB)list35.get(var28)).calculateYOffset(this.boundingBox, moveY);
+				}
+
+				this.boundingBox.offset(0.0D, moveY, 0.0D);
+				if(!this.surfaceCollision && var13 != moveY) {
+					moveZ = 0.0D;
+					moveY = 0.0D;
+					moveX = 0.0D;
+				}
+
+				for(var28 = 0; var28 < list35.size(); ++var28) {
+					moveX = ((AxisAlignedBB)list35.get(var28)).calculateXOffset(this.boundingBox, moveX);
+				}
+
+				this.boundingBox.offset(moveX, 0.0D, 0.0D);
+				if(!this.surfaceCollision && var11 != moveX) {
+					moveZ = 0.0D;
+					moveY = 0.0D;
+					moveX = 0.0D;
+				}
+
+				for(var28 = 0; var28 < list35.size(); ++var28) {
+					moveZ = ((AxisAlignedBB)list35.get(var28)).calculateZOffset(this.boundingBox, moveZ);
+				}
+
+				this.boundingBox.offset(0.0D, 0.0D, moveZ);
+				if(!this.surfaceCollision && var15 != moveZ) {
+					moveZ = 0.0D;
+					moveY = 0.0D;
+					moveX = 0.0D;
+				}
+
+				if(var37 * var37 + var25 * var25 >= moveX * moveX + moveZ * moveZ) {
+					moveX = var37;
+					moveY = var23;
+					moveZ = var25;
+					this.boundingBox.setBB(axisAlignedBB27);
 				} else {
 					this.ySize = (float)((double)this.ySize + 0.5D);
 				}
@@ -350,50 +350,45 @@
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
-			this.isCollidedHorizontally = var11 != var1 || var15 != var5;
-			this.isCollidedVertically = var13 != var3;
-			this.onGround = var13 != var3 && var13 < 0.0D;
+			this.isCollidedHorizontally = var11 != moveX || var15 != moveZ;
+			this.isCollidedVertically = var13 != moveY;
+			this.onGround = var13 != moveY && var13 < 0.0D;
 			this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
-			if(this.onGround) {
-				if(this.fallDistance > 0.0F) {
-					this.fall(this.fallDistance);
-					this.fallDistance = 0.0F;
-				}
-			} else if(var3 < 0.0D) {
-				this.fallDistance = (float)((double)this.fallDistance - var3);
-			}
+			this.updateFallState(moveY, this.onGround);
 
-			if(var11 != var1) {
+			if(var11 != moveX) {
 				this.motionX = 0.0D;
 			}
 
-			if(var13 != var3) {
+			if(var13 != moveY) {
 				this.motionY = 0.0D;
 			}
 
-			if(var15 != var5) {
+			if(var15 != moveZ) {
 				this.motionZ = 0.0D;
 			}
 
 			var37 = this.posX - var7;
 			var23 = this.posZ - var9;
 			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(var37 * var37 + var23 * var23) * 0.6D);
-			int var26;
-			int var38;
-			int var40;
+			int var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
+			int var38 = MathHelper.floor_double(this.posX);
+			int var40 = MathHelper.floor_double(this.posZ);
+			var28 = this.worldObj.getBlockId(var38, var26, var40);
+
+			if (var28 == 0) {
+				this.nextStepDistance = (int)this.distanceWalkedModified;
+			}
+
 			if(this.canTriggerWalking && !var18) {
-				var38 = MathHelper.floor_double(this.posX);
-				var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
-				var40 = MathHelper.floor_double(this.posZ);
-				var28 = this.worldObj.getBlockId(var38, var26, var40);
 				if(this.distanceWalkedModified > (float)this.nextStepDistance && var28 > 0) {
 					++this.nextStepDistance;
-					StepSound var29 = Block.blocksList[var28].stepSound;
+					StepSound stepSound29 = Block.blocksList[var28].stepSound;
 					if(this.worldObj.getBlockId(var38, var26 + 1, var40) == Block.snow.blockID) {
-						var29 = Block.snow.stepSound;
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+						stepSound29 = Block.snow.stepSound;
+						this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15F, stepSound29.getPitch());
 					} else if(!Block.blocksList[var28].material.getIsLiquid()) {
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+						this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15F, stepSound29.getPitch());
 					}
 
 					Block.blocksList[var28].onEntityWalking(this.worldObj, var38, var26, var40, this);
@@ -440,33 +435,48 @@
 		}
 	}
 
+	protected void updateFallState(double moveY, boolean onGround) {
+		if(onGround) {
+			if(this.fallDistance > 0.0F) {
+				this.fall(this.fallDistance);
+				this.fallDistance = 0.0F;
+			}
+		} else if(moveY < 0.0D) {
+			this.fallDistance = (float)((double)this.fallDistance - moveY);
+		}
+	}
+
 	public boolean isSneaking() {
 		return false;
 	}
 
+	public boolean isRunning() {
+		return false;
+	}
+
 	public AxisAlignedBB getBoundingBox() {
 		return null;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int damage) {
+		this.attackEntityFrom((Entity)null, damage);
 	}
 
-	protected void fall(float var1) {
+	protected void fall(float distance) {
 	}
 
 	public boolean handleWaterMovement() {
-		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.water, this);
+		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.water, this);
 	}
 
-	public boolean isInsideOfMaterial(Material var1) {
+	public boolean isInsideOfMaterial(Material material) {
 		double var2 = this.posY + (double)this.getEyeHeight();
 		int var4 = MathHelper.floor_double(this.posX);
 		int var5 = MathHelper.floor_float((float)MathHelper.floor_double(var2));
 		int var6 = MathHelper.floor_double(this.posZ);
 		int var7 = this.worldObj.getBlockId(var4, var5, var6);
-		if(var7 != 0 && Block.blocksList[var7].material == var1) {
-			float var8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 1.0F / 9.0F;
+		if(var7 != 0 && Block.blocksList[var7].material == material) {
+			float var8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 0.11111111F;
 			float var9 = (float)(var5 + 1) - var8;
 			return var2 < (double)var9;
 		} else {
@@ -479,46 +489,46 @@
 	}
 
 	public boolean handleLavaMovement() {
-		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.lava);
+		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.lava);
 	}
 
-	public void moveFlying(float var1, float var2, float var3) {
-		float var4 = MathHelper.sqrt_float(var1 * var1 + var2 * var2);
+	public void moveFlying(float moveX, float moveZ, float moveY) {
+		float var4 = MathHelper.sqrt_float(moveX * moveX + moveZ * moveZ);
 		if(var4 >= 0.01F) {
 			if(var4 < 1.0F) {
 				var4 = 1.0F;
 			}
 
-			var4 = var3 / var4;
-			var1 *= var4;
-			var2 *= var4;
+			var4 = moveY / var4;
+			moveX *= var4;
+			moveZ *= var4;
 			float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
 			float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
-			this.motionX += (double)(var1 * var6 - var2 * var5);
-			this.motionZ += (double)(var2 * var6 + var1 * var5);
+			this.motionX += (double)(moveX * var6 - moveZ * var5);
+			this.motionZ += (double)(moveZ * var6 + moveX * var5);
 		}
 	}
 
-	public float getBrightness(float var1) {
+	public float getBrightness(float renderPartialTick) {
 		int var2 = MathHelper.floor_double(this.posX);
 		double var3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
 		int var5 = MathHelper.floor_double(this.posY - (double)this.yOffset + var3);
 		int var6 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBrightness(var2, var5, var6);
-	}
-
-	public void setWorld(World var1) {
-		this.worldObj = var1;
-	}
-
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+		return this.worldObj.getBrightness(var2, var5, var6) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
+	}
+
+	public void setWorld(World world) {
+		this.worldObj = world;
+	}
+
+	public void setPositionAndRotation(double posX, double posY, double posZ, float rotationYaw, float rotationPitch) {
+		this.prevPosX = this.posX = posX;
+		this.prevPosY = this.posY = posY;
+		this.prevPosZ = this.posZ = posZ;
+		this.rotationYaw = rotationYaw;
+		this.rotationPitch = rotationPitch;
 		this.ySize = 0.0F;
-		double var9 = (double)(this.prevRotationYaw - var7);
+		double var9 = (double)(this.prevRotationYaw - rotationYaw);
 		if(var9 < -180.0D) {
 			this.prevRotationYaw += 360.0F;
 		}
@@ -530,50 +540,50 @@
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void setLocationAndAngles(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3 + (double)this.yOffset;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+	public void setLocationAndAngles(double posX, double posY, double posZ, float rotationYaw, float rotationPitch) {
+		this.prevPosX = this.posX = posX;
+		this.prevPosY = this.posY = posY + (double)this.yOffset;
+		this.prevPosZ = this.posZ = posZ;
+		this.rotationYaw = rotationYaw;
+		this.rotationPitch = rotationPitch;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public float getDistanceToEntity(Entity var1) {
-		float var2 = (float)(this.posX - var1.posX);
-		float var3 = (float)(this.posY - var1.posY);
-		float var4 = (float)(this.posZ - var1.posZ);
+	public float getDistanceToEntity(Entity entity) {
+		float var2 = (float)(this.posX - entity.posX);
+		float var3 = (float)(this.posY - entity.posY);
+		float var4 = (float)(this.posZ - entity.posZ);
 		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
 	}
 
-	public double getDistanceSq(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
+	public double getDistanceSq(double x, double y, double z) {
+		double var7 = this.posX - x;
+		double var9 = this.posY - y;
+		double var11 = this.posZ - z;
 		return var7 * var7 + var9 * var9 + var11 * var11;
 	}
 
-	public double getDistance(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
+	public double getDistance(double x, double y, double z) {
+		double var7 = this.posX - x;
+		double var9 = this.posY - y;
+		double var11 = this.posZ - z;
 		return (double)MathHelper.sqrt_double(var7 * var7 + var9 * var9 + var11 * var11);
 	}
 
-	public double getDistanceSqToEntity(Entity var1) {
-		double var2 = this.posX - var1.posX;
-		double var4 = this.posY - var1.posY;
-		double var6 = this.posZ - var1.posZ;
+	public double getDistanceSqToEntity(Entity entity) {
+		double var2 = this.posX - entity.posX;
+		double var4 = this.posY - entity.posY;
+		double var6 = this.posZ - entity.posZ;
 		return var2 * var2 + var4 * var4 + var6 * var6;
 	}
 
-	public void onCollideWithPlayer(EntityPlayer var1) {
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
 	}
 
-	public void applyEntityCollision(Entity var1) {
-		if(var1.riddenByEntity != this && var1.ridingEntity != this) {
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
+	public void applyEntityCollision(Entity entity) {
+		if(entity.riddenByEntity != this && entity.ridingEntity != this) {
+			double var2 = entity.posX - this.posX;
+			double var4 = entity.posZ - this.posZ;
 			double var6 = MathHelper.abs_max(var2, var4);
 			if(var6 >= (double)0.01F) {
 				var6 = (double)MathHelper.sqrt_double(var6);
@@ -591,19 +601,19 @@
 				var2 *= (double)(1.0F - this.entityCollisionReduction);
 				var4 *= (double)(1.0F - this.entityCollisionReduction);
 				this.addVelocity(-var2, 0.0D, -var4);
-				var1.addVelocity(var2, 0.0D, var4);
+				entity.addVelocity(var2, 0.0D, var4);
 			}
 
 		}
 	}
 
-	public void addVelocity(double var1, double var3, double var5) {
-		this.motionX += var1;
-		this.motionY += var3;
-		this.motionZ += var5;
+	public void addVelocity(double motionX, double motionY, double motionZ) {
+		this.motionX += motionX;
+		this.motionY += motionY;
+		this.motionZ += motionZ;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return false;
 	}
 
@@ -615,102 +625,102 @@
 		return false;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
+	public void addToPlayerScore(Entity entity, int score) {
 	}
 
-	public boolean isInRangeToRenderVec3D(Vec3D var1) {
-		double var2 = this.posX - var1.xCoord;
-		double var4 = this.posY - var1.yCoord;
-		double var6 = this.posZ - var1.zCoord;
+	public boolean isInRangeToRenderVec3D(Vec3D vector) {
+		double var2 = this.posX - vector.xCoord;
+		double var4 = this.posY - vector.yCoord;
+		double var6 = this.posZ - vector.zCoord;
 		double var8 = var2 * var2 + var4 * var4 + var6 * var6;
 		return this.isInRangeToRenderDist(var8);
 	}
 
-	public boolean isInRangeToRenderDist(double var1) {
+	public boolean isInRangeToRenderDist(double distance) {
 		double var3 = this.boundingBox.getAverageEdgeLength();
 		var3 *= 64.0D * this.renderDistanceWeight;
-		return var1 < var3 * var3;
+		return distance < var3 * var3;
 	}
 
 	public String getTexture() {
 		return null;
 	}
 
-	public boolean addEntityID(NBTTagCompound var1) {
+	public boolean addEntityID(NBTTagCompound nbtCompound) {
 		String var2 = this.getEntityString();
 		if(!this.isDead && var2 != null) {
-			var1.setString("id", var2);
-			this.writeToNBT(var1);
+			nbtCompound.setString("id", var2);
+			this.writeToNBT(nbtCompound);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		var1.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
-		var1.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
-		var1.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
-		var1.setFloat("FallDistance", this.fallDistance);
-		var1.setShort("Fire", (short)this.fire);
-		var1.setShort("Air", (short)this.air);
-		var1.setBoolean("OnGround", this.onGround);
-		this.writeEntityToNBT(var1);
+	public void writeToNBT(NBTTagCompound nbtCompound) {
+		nbtCompound.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
+		nbtCompound.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
+		nbtCompound.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
+		nbtCompound.setFloat("FallDistance", this.fallDistance);
+		nbtCompound.setShort("Fire", (short)this.fire);
+		nbtCompound.setShort("Air", (short)this.air);
+		nbtCompound.setBoolean("OnGround", this.onGround);
+		this.writeEntityToNBT(nbtCompound);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		NBTTagList var2 = var1.getTagList("Pos");
-		NBTTagList var3 = var1.getTagList("Motion");
-		NBTTagList var4 = var1.getTagList("Rotation");
+	public void readFromNBT(NBTTagCompound nbtCompound) {
+		NBTTagList nBTTagList2 = nbtCompound.getTagList("Pos");
+		NBTTagList nBTTagList3 = nbtCompound.getTagList("Motion");
+		NBTTagList nBTTagList4 = nbtCompound.getTagList("Rotation");
 		this.setPosition(0.0D, 0.0D, 0.0D);
-		this.motionX = ((NBTTagDouble)var3.tagAt(0)).doubleValue;
-		this.motionY = ((NBTTagDouble)var3.tagAt(1)).doubleValue;
-		this.motionZ = ((NBTTagDouble)var3.tagAt(2)).doubleValue;
-		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)var2.tagAt(0)).doubleValue;
-		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)var2.tagAt(1)).doubleValue;
-		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)var2.tagAt(2)).doubleValue;
-		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)var4.tagAt(0)).floatValue;
-		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)var4.tagAt(1)).floatValue;
-		this.fallDistance = var1.getFloat("FallDistance");
-		this.fire = var1.getShort("Fire");
-		this.air = var1.getShort("Air");
-		this.onGround = var1.getBoolean("OnGround");
+		this.motionX = ((NBTTagDouble)nBTTagList3.tagAt(0)).doubleValue;
+		this.motionY = ((NBTTagDouble)nBTTagList3.tagAt(1)).doubleValue;
+		this.motionZ = ((NBTTagDouble)nBTTagList3.tagAt(2)).doubleValue;
+		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)nBTTagList2.tagAt(0)).doubleValue;
+		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)nBTTagList2.tagAt(1)).doubleValue;
+		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)nBTTagList2.tagAt(2)).doubleValue;
+		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)nBTTagList4.tagAt(0)).floatValue;
+		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)nBTTagList4.tagAt(1)).floatValue;
+		this.fallDistance = nbtCompound.getFloat("FallDistance");
+		this.fire = nbtCompound.getShort("Fire");
+		this.air = nbtCompound.getShort("Air");
+		this.onGround = nbtCompound.getBoolean("OnGround");
 		this.setPosition(this.posX, this.posY, this.posZ);
-		this.readEntityFromNBT(var1);
+		this.readEntityFromNBT(nbtCompound);
 	}
 
 	protected final String getEntityString() {
 		return EntityList.getEntityString(this);
 	}
 
-	protected abstract void readEntityFromNBT(NBTTagCompound var1);
-
-	protected abstract void writeEntityToNBT(NBTTagCompound var1);
-
-	protected NBTTagList newDoubleNBTList(double... var1) {
-		NBTTagList var2 = new NBTTagList();
-		double[] var3 = var1;
-		int var4 = var1.length;
+	protected abstract void readEntityFromNBT(NBTTagCompound nBTTagCompound1);
+
+	protected abstract void writeEntityToNBT(NBTTagCompound nBTTagCompound1);
+
+	protected NBTTagList newDoubleNBTList(double... doubleArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		double[] var3 = doubleArray;
+		int var4 = doubleArray.length;
 
 		for(int var5 = 0; var5 < var4; ++var5) {
 			double var6 = var3[var5];
-			var2.setTag(new NBTTagDouble(var6));
+			nBTTagList2.setTag(new NBTTagDouble(var6));
 		}
 
-		return var2;
+		return nBTTagList2;
 	}
 
-	protected NBTTagList newFloatNBTList(float... var1) {
-		NBTTagList var2 = new NBTTagList();
-		float[] var3 = var1;
-		int var4 = var1.length;
+	protected NBTTagList newFloatNBTList(float... floatArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		float[] var3 = floatArray;
+		int var4 = floatArray.length;
 
 		for(int var5 = 0; var5 < var4; ++var5) {
 			float var6 = var3[var5];
-			var2.setTag(new NBTTagFloat(var6));
+			nBTTagList2.setTag(new NBTTagFloat(var6));
 		}
 
-		return var2;
+		return nBTTagList2;
 	}
 
 	public float getShadowSize() {
@@ -722,10 +732,10 @@
 	}
 
 	public EntityItem entityDropItem(int var1, int var2, float var3) {
-		EntityItem var4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)var3, this.posZ, new ItemStack(var1, var2));
-		var4.delayBeforeCanPickup = 10;
-		this.worldObj.spawnEntityInWorld(var4);
-		return var4;
+		EntityItem entityItem4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)var3, this.posZ, new ItemStack(var1, var2));
+		entityItem4.delayBeforeCanPickup = 10;
+		this.worldObj.spawnEntityInWorld(entityItem4);
+		return entityItem4;
 	}
 
 	public boolean isEntityAlive() {
@@ -736,14 +746,14 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.isBlockNormalCube(var1, var2, var3);
+		return this.worldObj.isBlockNormalCube(var1, var2, var3) && !this.noClip;
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		return false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
+	public AxisAlignedBB getCollisionBox(Entity entity) {
 		return null;
 	}
 
@@ -811,29 +821,36 @@
 		return (double)this.height * 0.75D;
 	}
 
-	public void mountEntity(Entity var1) {
+	public void mountEntity(Entity entity) {
 		this.entityRiderPitchDelta = 0.0D;
 		this.entityRiderYawDelta = 0.0D;
-		if(this.ridingEntity == var1) {
+		if(this.ridingEntity == entity) {
 			this.ridingEntity.riddenByEntity = null;
 			this.ridingEntity = null;
-			this.setLocationAndAngles(var1.posX, var1.boundingBox.minY + (double)var1.height, var1.posZ, this.rotationYaw, this.rotationPitch);
+			this.setLocationAndAngles(entity.posX, entity.boundingBox.minY + (double)entity.height, entity.posZ, this.rotationYaw, this.rotationPitch);
 		} else {
 			if(this.ridingEntity != null) {
 				this.ridingEntity.riddenByEntity = null;
 			}
 
-			if(var1.riddenByEntity != null) {
-				var1.riddenByEntity.ridingEntity = null;
+			if(entity.riddenByEntity != null) {
+				entity.riddenByEntity.ridingEntity = null;
 			}
 
-			this.ridingEntity = var1;
-			var1.riddenByEntity = this;
+			this.ridingEntity = entity;
+			entity.riddenByEntity = this;
 		}
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
-		this.setPosition(var1, var3, var5);
-		this.setRotation(var7, var8);
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
+		this.setPosition(x, y, z);
+		this.setRotation(rotationYaw, rotationPitch);
+	}
+
+	public void playSound(String sound, float volume, float pitch) {
+		this.worldObj.playSoundAtEntity(this, sound, volume, pitch);
+	}
+
+	public void handleHealthUpdate(byte entityStatus) {
 	}
 }
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -40,7 +40,7 @@
 		}
 
 		this.wingRotation += this.moveWings * 2.0F;
-		if(!this.worldObj.multiplayerWorld && --this.timeUntilNextEgg <= 0) {
+		if(this.worldObj.canDoClientAction() && --this.timeUntilNextEgg <= 0) {
 			this.worldObj.playSoundAtEntity(this, "mob.chickenplop", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			this.dropItem(Item.egg.shiftedIndex, 1);
 			this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
@@ -48,15 +48,15 @@
 
 	}
 
-	protected void fall(float var1) {
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected void fall(float distance) {
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
 	}
 
 	protected String getLivingSound() {
@@ -71,7 +71,7 @@
 		return "mob.chickenhurt";
 	}
 
-	protected int getDropItemId() {
-		return Item.feather.shiftedIndex;
+	protected int[] getDropItems() {
+		return new int[] { Item.feather.shiftedIndex, Item.chickenRaw.shiftedIndex };
 	}
 }
--- net/minecraft/src/ChunkPosition.java
+++ net/minecraft/src/ChunkPosition.java
@@ -5,18 +5,18 @@
 	public final int y;
 	public final int z;
 
-	public ChunkPosition(int var1, int var2, int var3) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
+	public ChunkPosition(int x, int y, int z) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkPosition)) {
+	public boolean equals(Object chunkPosition) {
+		if(!(chunkPosition instanceof ChunkPosition)) {
 			return false;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)var1;
-			return var2.x == this.x && var2.y == this.y && var2.z == this.z;
+			ChunkPosition chunkPosition2 = (ChunkPosition)chunkPosition;
+			return chunkPosition2.x == this.x && chunkPosition2.y == this.y && chunkPosition2.z == this.z;
 		}
 	}
 
--- net/minecraft/src/GuiEditSign.java
+++ net/minecraft/src/GuiEditSign.java
@@ -9,8 +9,8 @@
 	private int updateCounter;
 	private int editLine = 0;
 
-	public GuiEditSign(TileEntitySign var1) {
-		this.entitySign = var1;
+	public GuiEditSign(TileEntitySign tileEntitySign1) {
+		this.entitySign = tileEntitySign1;
 	}
 
 	public void initGui() {
@@ -27,9 +27,9 @@
 		++this.updateCounter;
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 0) {
 				this.entitySign.onInventoryChanged();
 				this.mc.displayGuiScreen((GuiScreen)null);
 			}
@@ -37,28 +37,28 @@
 		}
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 200) {
+	protected void keyTyped(char character, int key) {
+		if(key == 200) {
 			this.editLine = this.editLine - 1 & 3;
 		}
 
-		if(var2 == 208 || var2 == 28) {
+		if(key == 208 || key == 28) {
 			this.editLine = this.editLine + 1 & 3;
 		}
 
-		if(var2 == 14 && this.entitySign.signText[this.editLine].length() > 0) {
+		if(key == 14 && this.entitySign.signText[this.editLine].length() > 0) {
 			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine].substring(0, this.entitySign.signText[this.editLine].length() - 1);
 		}
 
-		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.entitySign.signText[this.editLine].length() < 15) {
-			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine] + var1;
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.entitySign.signText[this.editLine].length() < 15) {
+			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine] + character;
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 40, 16777215);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 40, 0xFFFFFF);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)(this.width / 2), (float)(this.height / 2), 50.0F);
 		float var4 = 93.75F;
@@ -84,7 +84,7 @@
 			}
 
 			GL11.glRotatef(var7, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, 5.0F / 16.0F, 0.0F);
+			GL11.glTranslatef(0.0F, 0.3125F, 0.0F);
 		}
 
 		if(this.updateCounter / 6 % 2 == 0) {
@@ -94,6 +94,6 @@
 		TileEntityRenderer.instance.renderTileEntityAt(this.entitySign, -0.5D, -0.75D, -0.5D, 0.0F);
 		this.entitySign.lineBeingEdited = -1;
 		GL11.glPopMatrix();
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -14,4 +14,13 @@
 	int getInventoryStackLimit();
 
 	void onInventoryChanged();
+
+	default void onChunkUpdate(int version) {
+		for (int i = 0; i < getSizeInventory(); i++) {
+			ItemStack item = getStackInSlot(i);
+			if (item != null) {
+				item.onChunkUpdate(version);
+			}
+		}
+	}
 }
--- net/minecraft/src/BlockSponge.java
+++ net/minecraft/src/BlockSponge.java
@@ -1,18 +1,19 @@
 package net.minecraft.src;
 
 public class BlockSponge extends Block {
-	protected BlockSponge(int var1) {
-		super(var1, Material.sponge);
+	protected BlockSponge(int id) {
+		super(id, Material.sponge);
 		this.blockIndexInTexture = 48;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
 		byte var5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					if(var1.getBlockMaterial(var6, var7, var8) == Material.water) {
+		for(int var6 = x - var5; var6 <= x + var5; ++var6) {
+			for(int var7 = y - var5; var7 <= y + var5; ++var7) {
+				for(int var8 = z - var5; var8 <= z + var5; ++var8) {
+					if(worldObj.getBlockMaterial(var6, var7, var8) == Material.water) {
+						worldObj.setBlock(var6, var7, var8, 0);
 					}
 				}
 			}
@@ -20,13 +21,13 @@
 
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
 		byte var5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					var1.notifyBlocksOfNeighborChange(var6, var7, var8, var1.getBlockId(var6, var7, var8));
+		for(int var6 = x - var5; var6 <= x + var5; ++var6) {
+			for(int var7 = y - var5; var7 <= y + var5; ++var7) {
+				for(int var8 = z - var5; var8 <= z + var5; ++var8) {
+					worldObj.notifyBlocksOfNeighborChange(var6, var7, var8, worldObj.getBlockId(var6, var7, var8));
 				}
 			}
 		}
--- net/minecraft/src/NBTTagByteArray.java
+++ net/minecraft/src/NBTTagByteArray.java
@@ -10,19 +10,19 @@
 	public NBTTagByteArray() {
 	}
 
-	public NBTTagByteArray(byte[] var1) {
-		this.byteArray = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.byteArray.length);
-		var1.write(this.byteArray);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		int var2 = var1.readInt();
+	public NBTTagByteArray(byte[] value) {
+		this.byteArray = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.byteArray.length);
+		dataOutput.write(this.byteArray);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		int var2 = dataInput.readInt();
 		this.byteArray = new byte[var2];
-		var1.readFully(this.byteArray);
+		dataInput.readFully(this.byteArray);
 	}
 
 	public byte getType() {
--- net/minecraft/src/EntitySmokeFX.java
+++ net/minecraft/src/EntitySmokeFX.java
@@ -13,7 +13,7 @@
 		this.motionY *= (double)0.1F;
 		this.motionZ *= (double)0.1F;
 		this.particleRed = this.particleGreen = this.particleBlue = (float)(Math.random() * (double)0.3F);
-		this.particleScale *= 12.0F / 16.0F;
+		this.particleScale *= 0.75F;
 		this.particleScale *= var8;
 		this.smokeParticleScale = this.particleScale;
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
@@ -21,8 +21,8 @@
 		this.noClip = false;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge * 32.0F;
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float var8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge * 32.0F;
 		if(var8 < 0.0F) {
 			var8 = 0.0F;
 		}
@@ -32,7 +32,7 @@
 		}
 
 		this.particleScale = this.smokeParticleScale * var8;
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/NetClientHandler.java
+++ net/minecraft/src/NetClientHandler.java
@@ -7,6 +7,8 @@
 import java.net.Socket;
 import java.net.URL;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.*;
 import net.minecraft.client.Minecraft;
 
 public class NetClientHandler extends NetHandler {
@@ -18,10 +20,10 @@
 	private boolean posUpdated = false;
 	Random rand = new Random();
 
-	public NetClientHandler(Minecraft var1, String var2, int var3) throws IOException {
-		this.mc = var1;
-		Socket var4 = new Socket(InetAddress.getByName(var2), var3);
-		this.netManager = new NetworkManager(var4, "Client", this);
+	public NetClientHandler(Minecraft minecraft, String ip, int port) throws IOException {
+		this.mc = minecraft;
+		Socket socket4 = new Socket(InetAddress.getByName(ip), port);
+		this.netManager = new NetworkManager(socket4, "Client", this);
 	}
 
 	public void processReadPackets() {
@@ -30,7 +32,7 @@
 		}
 	}
 
-	public void handleLogin(Packet1Login var1) {
+	public void handleLogin(Packet1Login packet) {
 		this.mc.playerController = new PlayerControllerMP(this.mc, this);
 		this.worldClient = new WorldClient(this);
 		this.worldClient.multiplayerWorld = true;
@@ -38,134 +40,134 @@
 		this.mc.displayGuiScreen(new GuiDownloadTerrain(this));
 	}
 
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.worldClient, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
-		var8.motionX = (double)var1.rotation / 128.0D;
-		var8.motionY = (double)var1.pitch / 128.0D;
-		var8.motionZ = (double)var1.roll / 128.0D;
-		var8.serverPosX = var1.xPosition;
-		var8.serverPosY = var1.yPosition;
-		var8.serverPosZ = var1.zPosition;
-		this.worldClient.addEntityToWorld(var1.entityId, var8);
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		double var2 = (double)packet.xPosition / 32.0D;
+		double var4 = (double)packet.yPosition / 32.0D;
+		double var6 = (double)packet.zPosition / 32.0D;
+		EntityItem entityItem8 = new EntityItem(this.worldClient, var2, var4, var6, new ItemStack(packet.itemID, packet.count).withMetadata(packet.itemMetadata));
+		entityItem8.motionX = (double)packet.rotation / 128.0D;
+		entityItem8.motionY = (double)packet.pitch / 128.0D;
+		entityItem8.motionZ = (double)packet.roll / 128.0D;
+		entityItem8.serverPosX = packet.xPosition;
+		entityItem8.serverPosY = packet.yPosition;
+		entityItem8.serverPosZ = packet.zPosition;
+		this.worldClient.addEntityToWorld(packet.entityId, entityItem8);
 	}
 
-	public void handleVehicleSpawn(Packet23VehicleSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
+	public void handleVehicleSpawn(Packet23VehicleSpawn packet) {
+		double var2 = (double)packet.xPosition / 32.0D;
+		double var4 = (double)packet.yPosition / 32.0D;
+		double var6 = (double)packet.zPosition / 32.0D;
 		Object var8 = null;
-		if(var1.type == 10) {
+		if(packet.type == 10) {
 			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 0);
 		}
 
-		if(var1.type == 11) {
+		if(packet.type == 11) {
 			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 1);
 		}
 
-		if(var1.type == 12) {
+		if(packet.type == 12) {
 			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 2);
 		}
 
-		if(var1.type == 1) {
+		if(packet.type == 1) {
 			var8 = new EntityBoat(this.worldClient, var2, var4, var6);
 		}
 
 		if(var8 != null) {
-			((Entity)var8).serverPosX = var1.xPosition;
-			((Entity)var8).serverPosY = var1.yPosition;
-			((Entity)var8).serverPosZ = var1.zPosition;
+			((Entity)var8).serverPosX = packet.xPosition;
+			((Entity)var8).serverPosY = packet.yPosition;
+			((Entity)var8).serverPosZ = packet.zPosition;
 			((Entity)var8).rotationYaw = 0.0F;
 			((Entity)var8).rotationPitch = 0.0F;
-			((Entity)var8).entityID = var1.entityId;
-			this.worldClient.addEntityToWorld(var1.entityId, (Entity)var8);
+			((Entity)var8).entityID = packet.entityId;
+			this.worldClient.addEntityToWorld(packet.entityId, (Entity)var8);
 		}
 
 	}
 
-	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		float var8 = (float)(var1.rotation * 360) / 256.0F;
-		float var9 = (float)(var1.pitch * 360) / 256.0F;
-		EntityOtherPlayerMP var10 = new EntityOtherPlayerMP(this.mc.theWorld, var1.name);
-		var10.serverPosX = var1.xPosition;
-		var10.serverPosY = var1.yPosition;
-		var10.serverPosZ = var1.zPosition;
-		int var11 = var1.currentItem;
+	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn packet) {
+		double var2 = (double)packet.xPosition / 32.0D;
+		double var4 = (double)packet.yPosition / 32.0D;
+		double var6 = (double)packet.zPosition / 32.0D;
+		float var8 = (float)(packet.rotation * 360) / 256.0F;
+		float var9 = (float)(packet.pitch * 360) / 256.0F;
+		EntityOtherPlayerMP entityOtherPlayerMP10 = new EntityOtherPlayerMP(this.mc.theWorld, packet.name);
+		entityOtherPlayerMP10.serverPosX = packet.xPosition;
+		entityOtherPlayerMP10.serverPosY = packet.yPosition;
+		entityOtherPlayerMP10.serverPosZ = packet.zPosition;
+		int var11 = packet.currentItem;
 		if(var11 == 0) {
-			var10.inventory.mainInventory[var10.inventory.currentItem] = null;
+			entityOtherPlayerMP10.inventory.mainInventory[entityOtherPlayerMP10.inventory.currentItem] = null;
 		} else {
-			var10.inventory.mainInventory[var10.inventory.currentItem] = new ItemStack(var11);
-		}
-
-		var10.setPositionAndRotation(var2, var4, var6, var8, var9);
-		this.worldClient.addEntityToWorld(var1.entityId, var10);
-	}
-
-	public void handleEntityTeleport(Packet34EntityTeleport var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			var2.serverPosX = var1.xPosition;
-			var2.serverPosY = var1.yPosition;
-			var2.serverPosZ = var1.zPosition;
-			double var3 = (double)var2.serverPosX / 32.0D;
-			double var5 = (double)var2.serverPosY / 32.0D;
-			double var7 = (double)var2.serverPosZ / 32.0D;
-			float var9 = (float)(var1.yaw * 360) / 256.0F;
-			float var10 = (float)(var1.pitch * 360) / 256.0F;
-			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
-		}
-	}
-
-	public void handleEntity(Packet30Entity var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			var2.serverPosX += var1.xPosition;
-			var2.serverPosY += var1.yPosition;
-			var2.serverPosZ += var1.zPosition;
-			double var3 = (double)var2.serverPosX / 32.0D;
-			double var5 = (double)var2.serverPosY / 32.0D;
-			double var7 = (double)var2.serverPosZ / 32.0D;
-			float var9 = var1.rotating ? (float)(var1.yaw * 360) / 256.0F : var2.rotationYaw;
-			float var10 = var1.rotating ? (float)(var1.pitch * 360) / 256.0F : var2.rotationPitch;
-			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
-		}
-	}
-
-	public void handleDestroyEntity(Packet29DestroyEntity var1) {
-		this.worldClient.removeEntityFromWorld(var1.entityId);
-	}
-
-	public void handleFlying(Packet10Flying var1) {
+			entityOtherPlayerMP10.inventory.mainInventory[entityOtherPlayerMP10.inventory.currentItem] = new ItemStack(var11);
+		}
+
+		entityOtherPlayerMP10.setPositionAndRotation(var2, var4, var6, var8, var9);
+		this.worldClient.addEntityToWorld(packet.entityId, entityOtherPlayerMP10);
+	}
+
+	public void handleEntityTeleport(Packet34EntityTeleport packet) {
+		Entity var2 = this.worldClient.getEntityByID(packet.entityId);
+		if(var2 != null) {
+			var2.serverPosX = packet.xPosition;
+			var2.serverPosY = packet.yPosition;
+			var2.serverPosZ = packet.zPosition;
+			double var3 = (double)var2.serverPosX / 32.0D;
+			double var5 = (double)var2.serverPosY / 32.0D;
+			double var7 = (double)var2.serverPosZ / 32.0D;
+			float var9 = (float)(packet.yaw * 360) / 256.0F;
+			float var10 = (float)(packet.pitch * 360) / 256.0F;
+			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
+		}
+	}
+
+	public void handleEntity(Packet30Entity packet) {
+		Entity var2 = this.worldClient.getEntityByID(packet.entityId);
+		if(var2 != null) {
+			var2.serverPosX += packet.xPosition;
+			var2.serverPosY += packet.yPosition;
+			var2.serverPosZ += packet.zPosition;
+			double var3 = (double)var2.serverPosX / 32.0D;
+			double var5 = (double)var2.serverPosY / 32.0D;
+			double var7 = (double)var2.serverPosZ / 32.0D;
+			float var9 = packet.rotating ? (float)(packet.yaw * 360) / 256.0F : var2.rotationYaw;
+			float var10 = packet.rotating ? (float)(packet.pitch * 360) / 256.0F : var2.rotationPitch;
+			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
+		}
+	}
+
+	public void handleDestroyEntity(Packet29DestroyEntity packet) {
+		this.worldClient.removeEntityFromWorld(packet.entityId);
+	}
+
+	public void handleFlying(Packet10Flying packet) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
 		double var3 = var2.posX;
 		double var5 = var2.posY;
 		double var7 = var2.posZ;
 		float var9 = var2.rotationYaw;
 		float var10 = var2.rotationPitch;
-		if(var1.moving) {
-			var3 = var1.xPosition;
-			var5 = var1.yPosition;
-			var7 = var1.zPosition;
+		if(packet.moving) {
+			var3 = packet.xPosition;
+			var5 = packet.yPosition;
+			var7 = packet.zPosition;
 		}
 
-		if(var1.rotating) {
-			var9 = var1.yaw;
-			var10 = var1.pitch;
+		if(packet.rotating) {
+			var9 = packet.yaw;
+			var10 = packet.pitch;
 		}
 
 		var2.ySize = 0.0F;
 		var2.motionX = var2.motionY = var2.motionZ = 0.0D;
 		var2.setPositionAndRotation(var3, var5, var7, var9, var10);
-		var1.xPosition = var2.posX;
-		var1.yPosition = var2.boundingBox.minY;
-		var1.zPosition = var2.posZ;
-		var1.stance = var2.posY;
-		this.netManager.addToSendQueue(var1);
+		packet.xPosition = var2.posX;
+		packet.yPosition = var2.boundingBox.minY;
+		packet.zPosition = var2.posZ;
+		packet.stance = var2.posY;
+		this.netManager.addToSendQueue(packet);
 		if(!this.posUpdated) {
 			this.mc.thePlayer.prevPosX = this.mc.thePlayer.posX;
 			this.mc.thePlayer.prevPosY = this.mc.thePlayer.posY;
@@ -176,79 +178,79 @@
 
 	}
 
-	public void handlePreChunk(Packet50PreChunk var1) {
-		this.worldClient.doPreChunk(var1.xPosition, var1.yPosition, var1.mode);
+	public void handlePreChunk(Packet50PreChunk packet) {
+		this.worldClient.doPreChunk(packet.xPosition, packet.yPosition, packet.mode);
 	}
 
-	public void handleMultiBlockChange(Packet52MultiBlockChange var1) {
-		Chunk var2 = this.worldClient.getChunkFromChunkCoords(var1.xPosition, var1.zPosition);
-		int var3 = var1.xPosition * 16;
-		int var4 = var1.zPosition * 16;
+	public void handleMultiBlockChange(Packet52MultiBlockChange packet) {
+		Chunk chunk2 = this.worldClient.getChunkFromChunkCoords(packet.xPosition, packet.zPosition);
+		int var3 = packet.xPosition * 16;
+		int var4 = packet.zPosition * 16;
 
-		for(int var5 = 0; var5 < var1.size; ++var5) {
-			short var6 = var1.coordinateArray[var5];
-			int var7 = var1.typeArray[var5] & 255;
-			byte var8 = var1.metadataArray[var5];
-			int var9 = var6 >> 12 & 15;
-			int var10 = var6 >> 8 & 15;
-			int var11 = var6 & 255;
-			var2.setBlockIDWithMetadata(var9, var11, var10, var7, var8);
+		for(int var5 = 0; var5 < packet.size; ++var5) {
+			short s6 = packet.coordinateArray[var5];
+			int var7 = packet.typeArray[var5] & 255;
+			byte var8 = packet.metadataArray[var5];
+			int var9 = s6 >> 12 & 15;
+			int var10 = s6 >> 8 & 15;
+			int var11 = s6 & 255;
+			chunk2.setBlockIDWithMetadata(var9, var11, var10, var7, var8);
 			this.worldClient.invalidateBlockReceiveRegion(var9 + var3, var11, var10 + var4, var9 + var3, var11, var10 + var4);
 			this.worldClient.markBlocksDirty(var9 + var3, var11, var10 + var4, var9 + var3, var11, var10 + var4);
 		}
 
 	}
 
-	public void handleMapChunk(Packet51MapChunk var1) {
-		this.worldClient.invalidateBlockReceiveRegion(var1.xPosition, var1.yPosition, var1.zPosition, var1.xPosition + var1.xSize - 1, var1.yPosition + var1.ySize - 1, var1.zPosition + var1.zSize - 1);
-		this.worldClient.setChunkData(var1.xPosition, var1.yPosition, var1.zPosition, var1.xSize, var1.ySize, var1.zSize, var1.chunkData);
-	}
-
-	public void handleBlockChange(Packet53BlockChange var1) {
-		this.worldClient.handleBlockChange(var1.xPosition, var1.yPosition, var1.zPosition, var1.type, var1.metadata);
-	}
-
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
+	public void handleMapChunk(Packet51MapChunk packet) {
+		this.worldClient.invalidateBlockReceiveRegion(packet.xPosition, packet.yPosition, packet.zPosition, packet.xPosition + packet.xSize - 1, packet.yPosition + packet.ySize - 1, packet.zPosition + packet.zSize - 1);
+		this.worldClient.setChunkData(packet.xPosition, packet.yPosition, packet.zPosition, packet.xSize, packet.ySize, packet.zSize, packet.chunkData);
+	}
+
+	public void handleBlockChange(Packet53BlockChange packet) {
+		this.worldClient.handleBlockChange(packet.xPosition, packet.yPosition, packet.zPosition, packet.type, packet.metadata);
+	}
+
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
 		this.netManager.networkShutdown("Got kicked");
 		this.disconnected = true;
 		this.mc.changeWorld1((World)null);
-		this.mc.displayGuiScreen(new GuiConnectFailed("Disconnected by server", var1.reason));
+		this.mc.displayGuiScreen(new GuiConnectFailed("Disconnected by server", packet.reason));
 	}
 
-	public void handleErrorMessage(String var1) {
+	public void handleErrorMessage(String message) {
 		if(!this.disconnected) {
 			this.disconnected = true;
 			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiConnectFailed("Connection lost", var1));
+			this.mc.displayGuiScreen(new GuiConnectFailed("Connection lost", message));
 		}
 	}
 
-	public void addToSendQueue(Packet var1) {
+	public void addToSendQueue(Packet packet) {
 		if(!this.disconnected) {
-			this.netManager.addToSendQueue(var1);
+			this.netManager.addToSendQueue(packet);
 		}
 	}
 
-	public void handleCollect(Packet22Collect var1) {
-		EntityItem var2 = (EntityItem)this.worldClient.getEntityByID(var1.collectedEntityId);
-		Object var3 = (EntityLiving)this.worldClient.getEntityByID(var1.collectorEntityId);
+	public void handleCollect(Packet22Collect packet) {
+		EntityItem entityItem2 = (EntityItem)this.worldClient.getEntityByID(packet.collectedEntityId);
+		Object var3 = (EntityLiving)this.worldClient.getEntityByID(packet.collectorEntityId);
 		if(var3 == null) {
 			var3 = this.mc.thePlayer;
 		}
 
-		if(var2 != null) {
-			this.worldClient.playSoundAtEntity(var2, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, var2, (Entity)var3, -0.5F));
-			this.worldClient.removeEntityFromWorld(var1.collectedEntityId);
+		if(entityItem2 != null) {
+			this.worldClient.playSoundAtEntity(entityItem2, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, entityItem2, (Entity)var3, -0.5F));
+			this.worldClient.removeEntityFromWorld(packet.collectedEntityId);
 		}
 
 	}
 
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		Entity var2 = this.worldClient.getEntityByID(packet.entityId);
 		if(var2 != null) {
 			EntityPlayer var3 = (EntityPlayer)var2;
-			int var4 = var1.id;
+			int var4 = packet.id;
 			if(var4 == 0) {
 				var3.inventory.mainInventory[var3.inventory.currentItem] = null;
 			} else {
@@ -258,39 +260,39 @@
 		}
 	}
 
-	public void handleChat(Packet3Chat var1) {
-		this.mc.ingameGUI.addChatMessage(var1.message);
+	public void handleChat(Packet3Chat packet) {
+		this.mc.ingameGUI.addChatMessage(packet.message);
 	}
 
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		Entity var2 = this.worldClient.getEntityByID(packet.entityId);
 		if(var2 != null) {
 			EntityPlayer var3 = (EntityPlayer)var2;
 			var3.swingItem();
 		}
 	}
 
-	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(var1.itemID, var1.count, var1.itemDamage));
+	public void handleAddToInventory(Packet17AddToInventory packet) {
+		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(packet.itemID, packet.count, packet.itemDamage).withMetadata(packet.itemMetadata));
 	}
 
-	public void handleHandshake(Packet2Handshake var1) {
-		if(var1.username.equals("-")) {
-			this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+	public void handleHandshake(Packet2Handshake packet) {
+		if(packet.username.equals("-")) {
+			this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 85000001));
 		} else {
 			try {
-				URL var2 = new URL("http://www.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + var1.username);
-				BufferedReader var3 = new BufferedReader(new InputStreamReader(var2.openStream()));
-				String var4 = var3.readLine();
-				var3.close();
+				URL uRL2 = new URL("http://www.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + packet.username);
+				BufferedReader bufferedReader3 = new BufferedReader(new InputStreamReader(uRL2.openStream()));
+				String var4 = bufferedReader3.readLine();
+				bufferedReader3.close();
 				if(var4.equalsIgnoreCase("ok")) {
-					this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+					this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 85000001));
 				} else {
 					this.netManager.networkShutdown("Failed to login: " + var4);
 				}
-			} catch (Exception var5) {
-				var5.printStackTrace();
-				this.netManager.networkShutdown("Internal client error: " + var5.toString());
+			} catch (Exception exception5) {
+				exception5.printStackTrace();
+				this.netManager.networkShutdown("Internal client error: " + exception5.toString());
 			}
 		}
 
@@ -301,53 +303,79 @@
 		this.netManager.networkShutdown("Closed");
 	}
 
-	public void handleMobSpawn(Packet24MobSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		float var8 = (float)(var1.yaw * 360) / 256.0F;
-		float var9 = (float)(var1.pitch * 360) / 256.0F;
-		EntityLiving var10 = (EntityLiving)EntityList.createEntityByID(var1.type, this.mc.theWorld);
-		var10.serverPosX = var1.xPosition;
-		var10.serverPosY = var1.yPosition;
-		var10.serverPosZ = var1.zPosition;
+	public void handleMobSpawn(Packet24MobSpawn packet) {
+		double var2 = (double)packet.xPosition / 32.0D;
+		double var4 = (double)packet.yPosition / 32.0D;
+		double var6 = (double)packet.zPosition / 32.0D;
+		float var8 = (float)(packet.yaw * 360) / 256.0F;
+		float var9 = (float)(packet.pitch * 360) / 256.0F;
+		EntityLiving var10 = (EntityLiving)EntityList.createEntityByID(packet.type, this.mc.theWorld);
+		var10.serverPosX = packet.xPosition;
+		var10.serverPosY = packet.yPosition;
+		var10.serverPosZ = packet.zPosition;
+		var10.entityID = packet.entityId;
 		var10.setPositionAndRotation(var2, var4, var6, var8, var9);
 		var10.isAIEnabled = true;
-		this.worldClient.addEntityToWorld(var1.entityId, var10);
-	}
-
-	public void handleUpdateTime(Packet4UpdateTime var1) {
-		this.mc.theWorld.setWorldTime(var1.time);
-	}
-
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
+		this.worldClient.addEntityToWorld(packet.entityId, var10);
+	}
+
+	public void handleUpdateTime(Packet4UpdateTime packet) {
+		this.mc.theWorld.setWorldTime(packet.time);
+	}
+
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
-		if(var1.inventoryType == -1) {
-			var2.inventory.mainInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -2) {
-			var2.inventory.craftingInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -3) {
-			var2.inventory.armorInventory = var1.inventory;
-		}
-
-	}
-
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		TileEntity var2 = this.worldClient.getBlockTileEntity(var1.xCoord, var1.yCoord, var1.zCoord);
-		if(var2 != null) {
-			var2.readFromNBT(var1.tileEntityNBT);
-			this.worldClient.markBlocksDirty(var1.xCoord, var1.yCoord, var1.zCoord, var1.xCoord, var1.yCoord, var1.zCoord);
-		}
-
-	}
-
-	public void handleSpawnPosition(Packet6SpawnPosition var1) {
-		this.worldClient.spawnX = var1.xPosition;
-		this.worldClient.spawnY = var1.yPosition;
-		this.worldClient.spawnZ = var1.zPosition;
+		if(packet.inventoryType == -1) {
+			var2.inventory.mainInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -2) {
+			var2.inventory.craftingInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -3) {
+			var2.inventory.armorInventory = packet.inventory;
+		}
+
+	}
+
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		TileEntity tileEntity2 = this.worldClient.getBlockTileEntity(packet.xCoord, packet.yCoord, packet.zCoord);
+		if(tileEntity2 != null) {
+			tileEntity2.readFromNBT(packet.tileEntityNBT);
+			this.worldClient.markBlocksDirty(packet.xCoord, packet.yCoord, packet.zCoord, packet.xCoord, packet.yCoord, packet.zCoord);
+		}
+
+	}
+
+	public void handleSpawnPosition(Packet6SpawnPosition packet) {
+		this.worldClient.spawnX = packet.xPosition;
+		this.worldClient.spawnY = packet.yPosition;
+		this.worldClient.spawnZ = packet.zPosition;
+	}
+
+	public void handleWorldType(Packet19WorldType packet) {
+		this.worldClient.setWorldType(WorldType.values()[packet.worldType]);
+		this.worldClient.creative = packet.creative;
+		this.mc.thePlayer.creative = packet.creative;
+	}
+
+	public void handleEntityStatus(Packet38EntityStatus packet) {
+		Entity entity = this.getEntityByID(packet.entityId);
+		if (entity != null) {
+			entity.handleHealthUpdate(packet.entityStatus);
+		}
+	}
+
+	public void handleHealth(Packet8UpdateHealth packet) {
+		this.mc.thePlayer.setHealth(packet.healthMP);
+	}
+
+	public Entity getEntityByID(int id) {
+		return (Entity)(id == this.mc.thePlayer.entityID ? this.mc.thePlayer : this.worldClient.getEntityByID(id));
+	}
+
+	public void handleRespawnPacket(Packet9Respawn var1) {
+		this.mc.respawn();
 	}
 }
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -1,5 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
@@ -10,10 +14,10 @@
 	private Class[] entities;
 	private Set eligibleChunksForSpawning = new HashSet();
 
-	public SpawnerAnimals(int var1, Class var2, Class[] var3) {
+	public SpawnerAnimals(int var1, Class class2, Class[] class3) {
 		this.maxSpawns = var1;
-		this.entityType = var2;
-		this.entities = var3;
+		this.entityType = class2;
+		this.entities = class3;
 	}
 
 	public void onUpdate(World var1) {
@@ -33,7 +37,7 @@
 		return new ChunkPosition(var4, var5, var6);
 	}
 
-	private int performSpawning(World var1, int var2, IProgressUpdate var3) {
+	private int performSpawning(World var1, int var2, IProgressUpdate iProgressUpdate3) {
 		this.eligibleChunksForSpawning.clear();
 
 		int var4;
@@ -54,23 +58,23 @@
 		}
 
 		var4 = 0;
-		Iterator var26 = this.eligibleChunksForSpawning.iterator();
+		Iterator iterator26 = this.eligibleChunksForSpawning.iterator();
 
 		while(true) {
-			ChunkCoordIntPair var27;
+			ChunkCoordIntPair chunkCoordIntPair27;
 			do {
-				if(!var26.hasNext()) {
+				if(!iterator26.hasNext()) {
 					return var4;
 				}
 
-				var27 = (ChunkCoordIntPair)var26.next();
+				chunkCoordIntPair27 = (ChunkCoordIntPair)iterator26.next();
 			} while(var1.rand.nextInt(10) != 0);
 
 			var7 = var1.rand.nextInt(this.entities.length);
-			ChunkPosition var28 = this.getRandomSpawningPointInChunk(var1, var27.chunkXPos * 16, var27.chunkZPos * 16);
-			var9 = var28.x;
-			var10 = var28.y;
-			int var11 = var28.z;
+			ChunkPosition chunkPosition28 = this.getRandomSpawningPointInChunk(var1, chunkCoordIntPair27.chunkXPos * 16, chunkCoordIntPair27.chunkZPos * 16);
+			var9 = chunkPosition28.x;
+			var10 = chunkPosition28.y;
+			int var11 = chunkPosition28.z;
 			if(var1.isBlockNormalCube(var9, var10, var11)) {
 				return 0;
 			}
@@ -81,17 +85,15 @@
 
 			for(int var12 = 0; var12 < 3; ++var12) {
 				int var13 = var9;
-				int var14 = var10;
 				int var15 = var11;
 				byte var16 = 6;
 
 				for(int var17 = 0; var17 < 2; ++var17) {
 					var13 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					var14 += var1.rand.nextInt(1) - var1.rand.nextInt(1);
 					var15 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					if(var1.isBlockNormalCube(var13, var14 - 1, var15) && !var1.isBlockNormalCube(var13, var14, var15) && !var1.getBlockMaterial(var13, var14, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var14 + 1, var15)) {
+					if(var1.isBlockNormalCube(var13, var10 - 1, var15) && !var1.isBlockNormalCube(var13, var10, var15) && !var1.getBlockMaterial(var13, var10, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var10 + 1, var15)) {
 						float var18 = (float)var13 + 0.5F;
-						float var19 = (float)var14;
+						float var19 = (float) var10;
 						float var20 = (float)var15 + 0.5F;
 						if(var1.getClosestPlayer((double)var18, (double)var19, (double)var20, 24.0D) == null) {
 							float var21 = var18 - (float)var1.spawnX;
@@ -102,8 +104,8 @@
 								EntityLiving var29;
 								try {
 									var29 = (EntityLiving)this.entities[var7].getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-								} catch (Exception var25) {
-									var25.printStackTrace();
+								} catch (Exception exception25) {
+									exception25.printStackTrace();
 									return var4;
 								}
 
@@ -112,10 +114,18 @@
 									++var4;
 									var1.spawnEntityInWorld(var29);
 									if(var29 instanceof EntitySpider && var1.rand.nextInt(100) == 0) {
-										EntitySkeleton var30 = new EntitySkeleton(var1);
-										var30.setLocationAndAngles((double)var18, (double)var19, (double)var20, var29.rotationYaw, 0.0F);
-										var1.spawnEntityInWorld(var30);
-										var30.mountEntity(var29);
+										EntitySkeleton entitySkeleton30 = new EntitySkeleton(var1);
+										entitySkeleton30.setLocationAndAngles((double)var18, (double)var19, (double)var20, var29.rotationYaw, 0.0F);
+										var1.spawnEntityInWorld(entitySkeleton30);
+										entitySkeleton30.mountEntity(var29);
+									}
+									if(var29 instanceof EntityFox
+											&& (var1.worldType == WorldType.WINTER
+											|| var1.getBlockId((int) (var18 + 0.5F),
+																(int) (var19 + 0.5F),
+																(int) (var20 + 0.5F)) == Block.snow.blockID
+											|| var1.getBiome((int) var18, (int) var20) == Biome.TUNDRA)) {
+										((EntityFox) var29).setArctic(true);
 									}
 								}
 							}
--- net/minecraft/src/ModelZombie.java
+++ net/minecraft/src/ModelZombie.java
@@ -9,8 +9,8 @@
 		this.bipedLeftArm.rotateAngleZ = 0.0F;
 		this.bipedRightArm.rotateAngleY = -(0.1F - var7 * 0.6F);
 		this.bipedLeftArm.rotateAngleY = 0.1F - var7 * 0.6F;
-		this.bipedRightArm.rotateAngleX = (float)Math.PI * -0.5F;
-		this.bipedLeftArm.rotateAngleX = (float)Math.PI * -0.5F;
+		this.bipedRightArm.rotateAngleX = -1.5707964F;
+		this.bipedLeftArm.rotateAngleX = -1.5707964F;
 		this.bipedRightArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;
 		this.bipedLeftArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;
 		this.bipedRightArm.rotateAngleZ += MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
--- net/minecraft/src/RenderChicken.java
+++ net/minecraft/src/RenderChicken.java
@@ -5,13 +5,13 @@
 		super(var1, var2);
 	}
 
-	public void renderChicken(EntityChicken var1, double var2, double var4, double var6, float var8, float var9) {
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+	public void renderChicken(EntityChicken entityChicken1, double var2, double var4, double var6, float var8, float var9) {
+		super.doRenderLiving(entityChicken1, var2, var4, var6, var8, var9);
 	}
 
-	protected float getWingRotation(EntityChicken var1, float var2) {
-		float var3 = var1.prevWingRotation + (var1.wingRotation - var1.prevWingRotation) * var2;
-		float var4 = var1.prevDestPos + (var1.destPos - var1.prevDestPos) * var2;
+	protected float getWingRotation(EntityChicken entityChicken1, float var2) {
+		float var3 = entityChicken1.prevWingRotation + (entityChicken1.wingRotation - entityChicken1.prevWingRotation) * var2;
+		float var4 = entityChicken1.prevDestPos + (entityChicken1.destPos - entityChicken1.prevDestPos) * var2;
 		return (MathHelper.sin(var3) + 1.0F) * var4;
 	}
 
--- net/minecraft/src/ModelMinecart.java
+++ net/minecraft/src/ModelMinecart.java
@@ -26,11 +26,11 @@
 		this.sideModels[3].setRotationPoint(0.0F, (float)(0 + var4), (float)(-var3 / 2 + 1));
 		this.sideModels[4].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
 		this.sideModels[4].setRotationPoint(0.0F, (float)(0 + var4), (float)(var3 / 2 - 1));
-		this.sideModels[0].rotateAngleX = (float)Math.PI * 0.5F;
-		this.sideModels[1].rotateAngleY = (float)Math.PI * 3.0F / 2.0F;
-		this.sideModels[2].rotateAngleY = (float)Math.PI * 0.5F;
+		this.sideModels[0].rotateAngleX = (float)Math.PI / 2F;
+		this.sideModels[1].rotateAngleY = 4.712389F;
+		this.sideModels[2].rotateAngleY = (float)Math.PI / 2F;
 		this.sideModels[3].rotateAngleY = (float)Math.PI;
-		this.sideModels[5].rotateAngleX = (float)Math.PI * -0.5F;
+		this.sideModels[5].rotateAngleX = -1.5707964F;
 	}
 
 	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
--- net/minecraft/src/ThreadRunIsoClient.java
+++ net/minecraft/src/ThreadRunIsoClient.java
@@ -3,8 +3,8 @@
 class ThreadRunIsoClient extends Thread {
 	final CanvasIsomPreview isomPreview;
 
-	ThreadRunIsoClient(CanvasIsomPreview var1) {
-		this.isomPreview = var1;
+	ThreadRunIsoClient(CanvasIsomPreview canvas) {
+		this.isomPreview = canvas;
 	}
 
 	public void run() {
@@ -13,7 +13,7 @@
 
 			try {
 				Thread.sleep(1L);
-			} catch (Exception var2) {
+			} catch (Exception exception2) {
 			}
 		}
 
--- net/minecraft/src/TileEntityRenderer.java
+++ net/minecraft/src/TileEntityRenderer.java
@@ -3,6 +3,9 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricatorRender;
 import org.lwjgl.opengl.GL11;
 
 public class TileEntityRenderer {
@@ -24,58 +27,59 @@
 	private TileEntityRenderer() {
 		this.specialRendererMap.put(TileEntitySign.class, new TileEntitySignRenderer());
 		this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
-		Iterator var1 = this.specialRendererMap.values().iterator();
-
-		while(var1.hasNext()) {
-			TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)var1.next();
-			var2.setTileEntityRenderer(this);
-		}
-
-	}
-
-	public TileEntitySpecialRenderer getSpecialRendererForClass(Class var1) {
-		TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)this.specialRendererMap.get(var1);
-		if(var2 == null && var1 != TileEntity.class) {
-			var2 = this.getSpecialRendererForClass(var1.getSuperclass());
-			this.specialRendererMap.put(var1, var2);
-		}
-
-		return var2;
-	}
-
-	public boolean hasSpecialRenderer(TileEntity var1) {
-		return this.getSpecialRendererForEntity(var1) != null;
-	}
-
-	public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity var1) {
-		return this.getSpecialRendererForClass(var1.getClass());
-	}
-
-	public void cacheActiveRenderInfo(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, float var5) {
-		this.worldObj = var1;
-		this.renderEngine = var2;
-		this.entityPlayer = var4;
-		this.fontRenderer = var3;
-		this.playerYaw = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var5;
-		this.playerPitch = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var5;
-		this.playerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var5;
-		this.playerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var5;
-		this.playerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var5;
-	}
-
-	public void renderTileEntity(TileEntity var1, float var2) {
-		if(var1.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0D) {
-			float var3 = this.worldObj.getBrightness(var1.xCoord, var1.yCoord, var1.zCoord);
+		this.specialRendererMap.put(TileEntityRefabricator.class, new TileEntityRefabricatorRender());
+		Iterator iterator1 = this.specialRendererMap.values().iterator();
+
+		while(iterator1.hasNext()) {
+			TileEntitySpecialRenderer tileEntitySpecialRenderer2 = (TileEntitySpecialRenderer)iterator1.next();
+			tileEntitySpecialRenderer2.setTileEntityRenderer(this);
+		}
+
+	}
+
+	public TileEntitySpecialRenderer getSpecialRendererForClass(Class tileClass) {
+		TileEntitySpecialRenderer tileEntitySpecialRenderer2 = (TileEntitySpecialRenderer)this.specialRendererMap.get(tileClass);
+		if(tileEntitySpecialRenderer2 == null && tileClass != TileEntity.class) {
+			tileEntitySpecialRenderer2 = this.getSpecialRendererForClass(tileClass.getSuperclass());
+			this.specialRendererMap.put(tileClass, tileEntitySpecialRenderer2);
+		}
+
+		return tileEntitySpecialRenderer2;
+	}
+
+	public boolean hasSpecialRenderer(TileEntity tileEntity) {
+		return this.getSpecialRendererForEntity(tileEntity) != null;
+	}
+
+	public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity tileEntity) {
+		return this.getSpecialRendererForClass(tileEntity.getClass());
+	}
+
+	public void cacheActiveRenderInfo(World world, RenderEngine renderEngine, FontRenderer fontRenderer, EntityPlayer entityPlayer, float renderPartialTick) {
+		this.worldObj = world;
+		this.renderEngine = renderEngine;
+		this.entityPlayer = entityPlayer;
+		this.fontRenderer = fontRenderer;
+		this.playerYaw = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * renderPartialTick;
+		this.playerPitch = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * renderPartialTick;
+		this.playerX = entityPlayer.lastTickPosX + (entityPlayer.posX - entityPlayer.lastTickPosX) * (double)renderPartialTick;
+		this.playerY = entityPlayer.lastTickPosY + (entityPlayer.posY - entityPlayer.lastTickPosY) * (double)renderPartialTick;
+		this.playerZ = entityPlayer.lastTickPosZ + (entityPlayer.posZ - entityPlayer.lastTickPosZ) * (double)renderPartialTick;
+	}
+
+	public void renderTileEntity(TileEntity tileEntity, float renderPartialTick) {
+		if(tileEntity.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0D) {
+			float var3 = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord);
 			GL11.glColor3f(var3, var3, var3);
-			this.renderTileEntityAt(var1, (double)var1.xCoord - staticPlayerX, (double)var1.yCoord - staticPlayerY, (double)var1.zCoord - staticPlayerZ, var2);
+			this.renderTileEntityAt(tileEntity, (double)tileEntity.xCoord - staticPlayerX, (double)tileEntity.yCoord - staticPlayerY, (double)tileEntity.zCoord - staticPlayerZ, renderPartialTick);
 		}
 
 	}
 
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		TileEntitySpecialRenderer var9 = this.getSpecialRendererForEntity(var1);
-		if(var9 != null) {
-			var9.renderTileEntityAt(var1, var2, var4, var6, var8);
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		TileEntitySpecialRenderer tileEntitySpecialRenderer9 = this.getSpecialRendererForEntity(tileEntity);
+		if(tileEntitySpecialRenderer9 != null) {
+			tileEntitySpecialRenderer9.renderTileEntityAt(tileEntity, x, y, z, renderPartialTick);
 		}
 
 	}
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -6,8 +6,22 @@
 		this.maxStackSize = 1;
 	}
 
+	private boolean canShootArrow(EntityPlayer var1) {
+		ItemStack bodyArmor = var1.inventory.armorItemInSlot(0);
+		if (bodyArmor != null && bodyArmor.itemID == Item.quiver.shiftedIndex
+			&& bodyArmor.itemDmg < bodyArmor.getMaxDamage()) {
+			bodyArmor.itemDmg += 1;
+			return true;
+		}
+
+		if (var1.inventory.consumeInventoryItem(Item.arrow.shiftedIndex))
+			return true;
+
+		return false;
+	}
+
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
+		if (canShootArrow(var3)) {
 			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
 			var2.spawnEntityInWorld(new EntityArrow(var2, var3));
 		}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RecipesDyes.java
@@ -1,0 +1,38 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class RecipesDyes {
+	public void addRecipes(CraftingManager craftingManager) {
+		for (int i = 0; i < 15; i++) {
+			craftingManager.addRecipe(new ItemStack(Block.cloth, 1, i), "X#", 'X', new Pair<>(Item.dye, i), '#', Block.cloth);
+		}
+
+		createDyeSource(craftingManager, ItemDye.CAPRI, Block.plantBlue);
+		createDyeSource(craftingManager, ItemDye.YELLOW, Block.plantYellow);
+		createDyeSource(craftingManager, ItemDye.RED, Block.plantRed);
+		createDyeSource(craftingManager, ItemDye.WHITE, Item.sugar);
+		createDyeSource(craftingManager, ItemDye.BLACK, Item.coal);
+
+		createDyeMix(craftingManager, ItemDye.RED, ItemDye.YELLOW, ItemDye.ORANGE);
+		createDyeMix(craftingManager, ItemDye.YELLOW, ItemDye.CAPRI, ItemDye.GREEN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.RED, ItemDye.VIOLET);
+		createDyeMix(craftingManager, ItemDye.YELLOW, ItemDye.GREEN, ItemDye.CHARTREUSE);
+		createDyeMix(craftingManager, ItemDye.GREEN, ItemDye.CAPRI, ItemDye.SPRING_GREEN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.WHITE, ItemDye.CYAN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.VIOLET, ItemDye.ULTRAMARINE);
+		createDyeMix(craftingManager, ItemDye.VIOLET, ItemDye.WHITE, ItemDye.PURPLE);
+		createDyeMix(craftingManager, ItemDye.RED, ItemDye.VIOLET, ItemDye.ROSE);
+		createDyeMix(craftingManager, ItemDye.ROSE, ItemDye.WHITE, ItemDye.MAGENTA);
+		createDyeMix(craftingManager, ItemDye.BLACK, ItemDye.WHITE, ItemDye.GRAY);
+	}
+
+	private void createDyeSource(CraftingManager craftingManager, int type, Object source) {
+		craftingManager.addRecipe(new ItemStack(Item.dye, 4).withMetadata(type), "X", 'X', source);
+	}
+
+	private void createDyeMix(CraftingManager craftingManager, int a, int b, int out) {
+		craftingManager.addRecipe(new ItemStack(Item.dye, 2).withMetadata(out), "AB", 'A', new Pair<>(Item.dye, a), 'B', new Pair<>(Item.dye, b));
+		craftingManager.addRecipe(new ItemStack(Item.dye, 2).withMetadata(out), "BA", 'A', new Pair<>(Item.dye, a), 'B', new Pair<>(Item.dye, b));
+	}
+}
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Packet7UseEntity;
 import net.minecraft.client.Minecraft;
 
 public class PlayerControllerMP extends PlayerController {
@@ -14,23 +15,23 @@
 	private NetClientHandler netClientHandler;
 	private int currentPlayerItem = 0;
 
-	public PlayerControllerMP(Minecraft var1, NetClientHandler var2) {
-		super(var1);
-		this.netClientHandler = var2;
-	}
-
-	public void flipPlayer(EntityPlayer var1) {
-		var1.rotationYaw = -180.0F;
-	}
-
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(3, var1, var2, var3, var4));
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
-		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
+	public PlayerControllerMP(Minecraft minecraft, NetClientHandler netClientHandler) {
+		super(minecraft);
+		this.netClientHandler = netClientHandler;
+	}
+
+	public void flipPlayer(EntityPlayer entityPlayer) {
+		entityPlayer.rotationYaw = -180.0F;
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(3, x, y, z, side));
+		int var5 = this.mc.theWorld.getBlockId(x, y, z);
+		int var6 = this.mc.theWorld.getBlockMetadata(x, y, z);
+		boolean var7 = super.sendBlockRemoved(x, y, z, side);
 		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
 		if(var8 != null) {
-			var8.onDestroyBlock(var5, var1, var2, var3);
+			var8.onDestroyBlock(var5, x, y, z);
 			if(var8.stackSize == 0) {
 				var8.onItemDestroyedByUse(this.mc.thePlayer);
 				this.mc.thePlayer.destroyCurrentEquippedItem();
@@ -38,22 +39,22 @@
 		}
 
 		if(var7 && this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5])) {
-			Block.blocksList[var5].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var6);
+			Block.blocksList[var5].dropBlockAsItem(this.mc.theWorld, x, y, z, var6);
 		}
 
 		return var7;
 	}
 
-	public void clickBlock(int var1, int var2, int var3, int var4) {
+	public void clickBlock(int x, int y, int z, int side) {
 		this.isHittingBlock = true;
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, x, y, z, side));
+		int var5 = this.mc.theWorld.getBlockId(x, y, z);
 		if(var5 > 0 && this.curBlockDamageMP == 0.0F) {
-			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, var1, var2, var3, this.mc.thePlayer);
+			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, x, y, z, this.mc.thePlayer);
 		}
 
 		if(var5 > 0 && Block.blocksList[var5].blockStrength(this.mc.thePlayer) >= 1.0F) {
-			this.sendBlockRemoved(var1, var2, var3, var4);
+			this.sendBlockRemoved(x, y, z, side);
 		}
 
 	}
@@ -67,15 +68,15 @@
 		}
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 		this.isHittingBlock = true;
 		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, var1, var2, var3, var4));
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, x, y, z, side));
 		if(this.blockHitDelay > 0) {
 			--this.blockHitDelay;
 		} else {
-			if(var1 == this.currentBlockX && var2 == this.currentBlockY && var3 == this.currentBlockZ) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
+			if(x == this.currentBlockX && y == this.currentBlockY && z == this.currentBlockZ) {
+				int var5 = this.mc.theWorld.getBlockId(x, y, z);
 				if(var5 == 0) {
 					return;
 				}
@@ -83,12 +84,12 @@
 				Block var6 = Block.blocksList[var5];
 				this.curBlockDamageMP += var6.blockStrength(this.mc.thePlayer);
 				if(this.stepSoundTickCounter % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
 				}
 
 				++this.stepSoundTickCounter;
 				if(this.curBlockDamageMP >= 1.0F) {
-					this.sendBlockRemoved(var1, var2, var3, var4);
+					this.sendBlockRemoved(x, y, z, side);
 					this.curBlockDamageMP = 0.0F;
 					this.prevBlockDamageMP = 0.0F;
 					this.stepSoundTickCounter = 0.0F;
@@ -98,20 +99,20 @@
 				this.curBlockDamageMP = 0.0F;
 				this.prevBlockDamageMP = 0.0F;
 				this.stepSoundTickCounter = 0.0F;
-				this.currentBlockX = var1;
-				this.currentBlockY = var2;
-				this.currentBlockZ = var3;
+				this.currentBlockX = x;
+				this.currentBlockY = y;
+				this.currentBlockZ = z;
 			}
 
 		}
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 		if(this.curBlockDamageMP <= 0.0F) {
 			this.mc.ingameGUI.damageGuiPartialTime = 0.0F;
 			this.mc.renderGlobal.damagePartialTime = 0.0F;
 		} else {
-			float var2 = this.prevBlockDamageMP + (this.curBlockDamageMP - this.prevBlockDamageMP) * var1;
+			float var2 = this.prevBlockDamageMP + (this.curBlockDamageMP - this.prevBlockDamageMP) * renderPartialTick;
 			this.mc.ingameGUI.damageGuiPartialTime = var2;
 			this.mc.renderGlobal.damagePartialTime = var2;
 		}
@@ -122,8 +123,8 @@
 		return 4.0F;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
@@ -145,13 +146,27 @@
 
 	}
 
-	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
-		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet15Place(var3 != null ? var3.itemID : -1, var4, var5, var6, var7));
-		return super.onPlayerRightClick(var1, var2, var3, var4, var5, var6, var7);
-	}
-
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityClientPlayerMP(this.mc, var1, this.mc.session, this.netClientHandler);
+	public boolean onPlayerRightClick(EntityPlayer entityPlayer, World world, ItemStack itemStack, int x, int y, int z, int side) {
+		this.syncCurrentPlayItem();
+//		this.netClientHandler.addToSendQueue(new Packet15Place(itemStack != null ? itemStack.itemID : -1, itemStack != null ? itemStack.itemMetadata : 0, x, y, z, side));
+		this.netClientHandler.addToSendQueue(new Packet15Place(x, y, z, side, entityPlayer.inventory.getCurrentItem()));
+		return super.onPlayerRightClick(entityPlayer, world, itemStack, x, y, z, side);
+	}
+
+	public void attackEntity(EntityPlayer var1, Entity var2) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet7UseEntity(var1.entityID, var2.entityID, 1));
+		var1.attackEntity(var2);
+	}
+
+	public EntityPlayer createPlayer(World world) {
+		return new EntityClientPlayerMP(this.mc, world, this.mc.session, this.netClientHandler);
+	}
+
+	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet15Place(-1, -1, -1, 255, var1.inventory.getCurrentItem()));
+		boolean var4 = super.sendUseItem(var1, var2, var3);
+		return var4;
 	}
 }
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -1,15 +1,20 @@
 package net.minecraft.src;
 
 public class RecipesIngots {
-	private Object[][] recipeItems = new Object[][]{{Block.blockGold, Item.ingotGold}, {Block.blockSteel, Item.ingotIron}, {Block.blockDiamond, Item.diamond}};
+	private Object[][] recipeItems = new Object[][]{
+	{Block.blockGold, Item.ingotGold},
+	{Block.blockSteel, Item.ingotIron},
+	{Block.blockDiamond, Item.diamond},
+	{Block.blockRuby, Item.ruby},
+	{Block.blockSapphire, Item.sapphire}
+	};
 
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
-			Block var3 = (Block)this.recipeItems[var2][0];
-			Item var4 = (Item)this.recipeItems[var2][1];
-			var1.addRecipe(new ItemStack(var3), new Object[]{"###", "###", "###", Character.valueOf('#'), var4});
-			var1.addRecipe(new ItemStack(var4, 9), new Object[]{"#", Character.valueOf('#'), var3});
+	public void addRecipes(CraftingManager craftingManager) {
+		for (Object[] recipeItem : this.recipeItems) {
+			Block var3 = (Block) recipeItem[0];
+			Item var4 = (Item) recipeItem[1];
+			craftingManager.addRecipe(new ItemStack(var3), "###", "###", "###", '#', var4);
+			craftingManager.addRecipe(new ItemStack(var4, 9), "#", '#', var3);
 		}
-
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenSpeleothems.java
@@ -1,0 +1,45 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.World;
+import net.minecraft.src.WorldGenerator;
+
+import java.util.Random;
+
+public class WorldGenSpeleothems extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		boolean stalactite = var2.nextInt(2) == 0;
+		if (stalactite) {
+			var4 = findStalactiteAnchor(var1, var3, var4, var5);
+		} else {
+			var4 = findStalagmiteAnchor(var1, var3, var4, var5);
+		}
+		if (var4 == -1 || var4 > 64) {
+			return false;
+		}
+		int height = var2.nextInt(2) + 1;
+		for (int i = 0; i < height; i++) {
+			var4 += stalactite ? -1 : 1;
+			var1.setBlockWithNotify(var3, var4, var5, Block.speleothem.blockID);
+		}
+		return true;
+	}
+
+	private int findStalactiteAnchor(World var1, int x, int y, int z) {
+		for (++y; y < 128; y++) {
+			if (var1.isBlockNormalCube(x, y, z) && var1.getBlockId(x, y - 1, z) == 0) {
+				return y;
+			}
+		}
+		return -1;
+	}
+
+	private int findStalagmiteAnchor(World var1, int x, int y, int z) {
+		for (--y; y > 0; y--) {
+			if (var1.isBlockNormalCube(x, y, z) && var1.getBlockId(x, y + 1, z) == 0) {
+				return y;
+			}
+		}
+		return -1;
+	}
+}
--- net/minecraft/src/ServerGUI.java
+++ net/minecraft/src/ServerGUI.java
@@ -13,80 +13,81 @@
 import javax.swing.UIManager;
 import javax.swing.border.EtchedBorder;
 import javax.swing.border.TitledBorder;
+
 import net.minecraft.server.MinecraftServer;
 
 public class ServerGUI extends JComponent implements ICommandListener {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	private MinecraftServer mcServer;
 
-	public static void initGui(MinecraftServer var0) {
+	public static void initGui(MinecraftServer minecraftServer) {
 		try {
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-		} catch (Exception var3) {
+		} catch (Exception exception3) {
 		}
 
-		ServerGUI var1 = new ServerGUI(var0);
-		JFrame var2 = new JFrame("Minecraft server");
-		var2.add(var1);
-		var2.pack();
-		var2.setLocationRelativeTo((Component)null);
-		var2.setVisible(true);
-		var2.addWindowListener(new ServerWindowAdapter(var0));
+		ServerGUI serverGUI1 = new ServerGUI(minecraftServer);
+		JFrame jFrame2 = new JFrame("Minecraft server");
+		jFrame2.add(serverGUI1);
+		jFrame2.pack();
+		jFrame2.setLocationRelativeTo((Component)null);
+		jFrame2.setVisible(true);
+		jFrame2.addWindowListener(new ServerWindowAdapter(minecraftServer));
 	}
 
-	public ServerGUI(MinecraftServer var1) {
-		this.mcServer = var1;
+	public ServerGUI(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 		this.setPreferredSize(new Dimension(854, 480));
 		this.setLayout(new BorderLayout());
 
 		try {
 			this.add(this.getLogComponent(), "Center");
 			this.add(this.getStatsComponent(), "West");
-		} catch (Exception var3) {
-			var3.printStackTrace();
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
 	}
 
 	private JComponent getStatsComponent() {
-		JPanel var1 = new JPanel(new BorderLayout());
-		var1.add(new GuiStatsComponent(), "North");
-		var1.add(this.getPlayerListComponent(), "Center");
-		var1.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
-		return var1;
+		JPanel jPanel1 = new JPanel(new BorderLayout());
+		jPanel1.add(new GuiStatsComponent(), "North");
+		jPanel1.add(this.getPlayerListComponent(), "Center");
+		jPanel1.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
+		return jPanel1;
 	}
 
 	private JComponent getPlayerListComponent() {
-		PlayerListBox var1 = new PlayerListBox(this.mcServer);
-		JScrollPane var2 = new JScrollPane(var1, 22, 30);
-		var2.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
-		return var2;
+		PlayerListBox playerListBox1 = new PlayerListBox(this.mcServer);
+		JScrollPane jScrollPane2 = new JScrollPane(playerListBox1, 22, 30);
+		jScrollPane2.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
+		return jScrollPane2;
 	}
 
 	private JComponent getLogComponent() {
-		JPanel var1 = new JPanel(new BorderLayout());
-		JTextArea var2 = new JTextArea();
-		logger.addHandler(new GuiLogOutputHandler(var2));
-		JScrollPane var3 = new JScrollPane(var2, 22, 30);
-		var2.setEditable(false);
-		JTextField var4 = new JTextField();
-		var4.addActionListener(new ServerGuiCommandListener(this, var4));
-		var2.addFocusListener(new ServerGuiFocusadapter(this));
-		var1.add(var3, "Center");
-		var1.add(var4, "South");
-		var1.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
-		return var1;
+		JPanel jPanel1 = new JPanel(new BorderLayout());
+		JTextArea jTextArea2 = new JTextArea();
+		logger.addHandler(new GuiLogOutputHandler(jTextArea2));
+		JScrollPane jScrollPane3 = new JScrollPane(jTextArea2, 22, 30);
+		jTextArea2.setEditable(false);
+		JTextField jTextField4 = new JTextField();
+		jTextField4.addActionListener(new ServerGuiCommandListener(this, jTextField4));
+		jTextArea2.addFocusListener(new ServerGuiFocusadapter(this));
+		jPanel1.add(jScrollPane3, "Center");
+		jPanel1.add(jTextField4, "South");
+		jPanel1.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
+		return jPanel1;
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		logger.info(var1);
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		logger.info(helpCommandMessage);
 	}
 
 	public String getUsername() {
 		return "CONSOLE";
 	}
 
-	static MinecraftServer getMinecraftServer(ServerGUI var0) {
-		return var0.mcServer;
+	static MinecraftServer getMinecraftServer(ServerGUI gui) {
+		return gui.mcServer;
 	}
 }
--- net/minecraft/src/SlotArmor.java
+++ net/minecraft/src/SlotArmor.java
@@ -4,14 +4,14 @@
 	final int armorType;
 	final GuiInventory guiInventory;
 
-	SlotArmor(GuiInventory var1, GuiContainer var2, IInventory var3, int var4, int var5, int var6, int var7) {
-		super(var2, var3, var4, var5, var6);
-		this.guiInventory = var1;
+	SlotArmor(GuiInventory guiInventory1, GuiContainer guiContainer2, IInventory iInventory3, int var4, int var5, int var6, int var7) {
+		super(guiContainer2, iInventory3, var4, var5, var6);
+		this.guiInventory = guiInventory1;
 		this.armorType = var7;
 	}
 
-	public boolean isItemValid(ItemStack var1) {
-		return var1.getItem() instanceof ItemArmor ? ((ItemArmor)var1.getItem()).armorType == this.armorType : false;
+	public boolean isItemValid(ItemStack itemStack) {
+		return itemStack.getItem() instanceof ItemEquipable && ((ItemEquipable) itemStack.getItem()).armorType == this.armorType;
 	}
 
 	public int getBackgroundIconIndex() {
--- net/minecraft/src/ConsoleLogManager.java
+++ net/minecraft/src/ConsoleLogManager.java
@@ -9,18 +9,18 @@
 	public static Logger logger = Logger.getLogger("Minecraft");
 
 	public static void init() {
-		ConsoleLogFormatter var0 = new ConsoleLogFormatter();
+		ConsoleLogFormatter consoleLogFormatter0 = new ConsoleLogFormatter();
 		logger.setUseParentHandlers(false);
-		ConsoleHandler var1 = new ConsoleHandler();
-		var1.setFormatter(var0);
-		logger.addHandler(var1);
+		ConsoleHandler consoleHandler1 = new ConsoleHandler();
+		consoleHandler1.setFormatter(consoleLogFormatter0);
+		logger.addHandler(consoleHandler1);
 
 		try {
-			FileHandler var2 = new FileHandler("server.log");
-			var2.setFormatter(var0);
-			logger.addHandler(var2);
-		} catch (Exception var3) {
-			logger.log(Level.WARNING, "Failed to log to server.log", var3);
+			FileHandler fileHandler2 = new FileHandler("server.log");
+			fileHandler2.setFormatter(consoleLogFormatter0);
+			logger.addHandler(fileHandler2);
+		} catch (Exception exception3) {
+			logger.log(Level.WARNING, "Failed to log to server.log", exception3);
 		}
 
 	}
--- net/minecraft/src/ChunkProviderLoadOrGenerate.java
+++ net/minecraft/src/ChunkProviderLoadOrGenerate.java
@@ -12,136 +12,136 @@
 	int lastQueriedChunkZPos = -999999999;
 	private Chunk lastQueriedChunk;
 
-	public ChunkProviderLoadOrGenerate(World var1, IChunkLoader var2, IChunkProvider var3) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderLoadOrGenerate(World world, IChunkLoader chunkLoader, IChunkProvider chunkProvider) {
+		this.blankChunk = new Chunk(world, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
-		this.worldObj = var1;
-		this.chunkLoader = var2;
-		this.chunkProvider = var3;
+		this.worldObj = world;
+		this.chunkLoader = chunkLoader;
+		this.chunkProvider = chunkProvider;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public boolean chunkExists(int chunkX, int chunkZ) {
+		if(chunkX == this.lastQueriedChunkXPos && chunkZ == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return true;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
+			int var3 = chunkX & 31;
+			int var4 = chunkZ & 31;
 			int var5 = var3 + var4 * 32;
-			return this.chunks[var5] != null && (this.chunks[var5] == this.blankChunk || this.chunks[var5].isAtLocation(var1, var2));
+			return this.chunks[var5] != null && (this.chunks[var5] == this.blankChunk || this.chunks[var5].isAtLocation(chunkX, chunkZ));
 		}
 	}
 
-	public Chunk provideChunk(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public Chunk provideChunk(int chunkX, int chunkZ) {
+		if(chunkX == this.lastQueriedChunkXPos && chunkZ == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return this.lastQueriedChunk;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
+			int var3 = chunkX & 31;
+			int var4 = chunkZ & 31;
 			int var5 = var3 + var4 * 32;
-			if(!this.chunkExists(var1, var2)) {
+			if(!this.chunkExists(chunkX, chunkZ)) {
 				if(this.chunks[var5] != null) {
 					this.chunks[var5].onChunkUnload();
 					this.saveChunk(this.chunks[var5]);
 					this.saveExtraChunkData(this.chunks[var5]);
 				}
 
-				Chunk var6 = this.getChunkAt(var1, var2);
-				if(var6 == null) {
+				Chunk chunk6 = this.getChunkAt(chunkX, chunkZ);
+				if(chunk6 == null) {
 					if(this.chunkProvider == null) {
-						var6 = this.blankChunk;
+						chunk6 = this.blankChunk;
 					} else {
-						var6 = this.chunkProvider.provideChunk(var1, var2);
+						chunk6 = this.chunkProvider.provideChunk(chunkX, chunkZ);
 					}
 				}
 
-				this.chunks[var5] = var6;
+				this.chunks[var5] = chunk6;
 				if(this.chunks[var5] != null) {
 					this.chunks[var5].onChunkLoad();
 				}
 
-				if(!this.chunks[var5].isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2);
-				}
-
-				if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2);
-				}
-
-				if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2 - 1);
-				}
-
-				if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2 - 1);
+				if(!this.chunks[var5].isTerrainPopulated && this.chunkExists(chunkX + 1, chunkZ + 1) && this.chunkExists(chunkX, chunkZ + 1) && this.chunkExists(chunkX + 1, chunkZ)) {
+					this.populate(this, chunkX, chunkZ);
+				}
+
+				if(this.chunkExists(chunkX - 1, chunkZ) && !this.provideChunk(chunkX - 1, chunkZ).isTerrainPopulated && this.chunkExists(chunkX - 1, chunkZ + 1) && this.chunkExists(chunkX, chunkZ + 1) && this.chunkExists(chunkX - 1, chunkZ)) {
+					this.populate(this, chunkX - 1, chunkZ);
+				}
+
+				if(this.chunkExists(chunkX, chunkZ - 1) && !this.provideChunk(chunkX, chunkZ - 1).isTerrainPopulated && this.chunkExists(chunkX + 1, chunkZ - 1) && this.chunkExists(chunkX, chunkZ - 1) && this.chunkExists(chunkX + 1, chunkZ)) {
+					this.populate(this, chunkX, chunkZ - 1);
+				}
+
+				if(this.chunkExists(chunkX - 1, chunkZ - 1) && !this.provideChunk(chunkX - 1, chunkZ - 1).isTerrainPopulated && this.chunkExists(chunkX - 1, chunkZ - 1) && this.chunkExists(chunkX, chunkZ - 1) && this.chunkExists(chunkX - 1, chunkZ)) {
+					this.populate(this, chunkX - 1, chunkZ - 1);
 				}
 			}
 
-			this.lastQueriedChunkXPos = var1;
-			this.lastQueriedChunkZPos = var2;
+			this.lastQueriedChunkXPos = chunkX;
+			this.lastQueriedChunkZPos = chunkZ;
 			this.lastQueriedChunk = this.chunks[var5];
 			return this.chunks[var5];
 		}
 	}
 
-	private Chunk getChunkAt(int var1, int var2) {
+	private Chunk getChunkAt(int posX, int posZ) {
 		if(this.chunkLoader == null) {
 			return null;
 		} else {
 			try {
-				Chunk var3 = this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-				if(var3 != null) {
-					var3.lastSaveTime = this.worldObj.worldTime;
+				Chunk chunk3 = this.chunkLoader.loadChunk(this.worldObj, posX, posZ);
+				if(chunk3 != null) {
+					chunk3.lastSaveTime = this.worldObj.worldTime;
 				}
 
-				return var3;
-			} catch (Exception var4) {
-				var4.printStackTrace();
+				return chunk3;
+			} catch (Exception exception4) {
+				exception4.printStackTrace();
 				return null;
 			}
 		}
 	}
 
-	private void saveExtraChunkData(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				this.chunkLoader.saveExtraChunkData(this.worldObj, var1);
-			} catch (Exception var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	private void saveChunk(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				var1.lastSaveTime = this.worldObj.worldTime;
-				this.chunkLoader.saveChunk(this.worldObj, var1);
-			} catch (IOException var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	public void populate(IChunkProvider var1, int var2, int var3) {
-		Chunk var4 = this.provideChunk(var2, var3);
-		if(!var4.isTerrainPopulated) {
-			var4.isTerrainPopulated = true;
+	private void saveExtraChunkData(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				this.chunkLoader.saveExtraChunkData(this.worldObj, chunk);
+			} catch (Exception exception3) {
+				exception3.printStackTrace();
+			}
+
+		}
+	}
+
+	private void saveChunk(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				chunk.lastSaveTime = this.worldObj.worldTime;
+				this.chunkLoader.saveChunk(this.worldObj, chunk);
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+
+		}
+	}
+
+	public void populate(IChunkProvider chunkProvider, int chunkX, int chunkZ) {
+		Chunk chunk4 = this.provideChunk(chunkX, chunkZ);
+		if(!chunk4.isTerrainPopulated) {
+			chunk4.isTerrainPopulated = true;
 			if(this.chunkProvider != null) {
-				this.chunkProvider.populate(var1, var2, var3);
-				var4.setChunkModified();
+				this.chunkProvider.populate(chunkProvider, chunkX, chunkZ);
+				chunk4.setChunkModified();
 			}
 		}
 
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean var1, IProgressUpdate progressUpdate) {
 		int var3 = 0;
 		int var4 = 0;
 		int var5;
-		if(var2 != null) {
+		if(progressUpdate != null) {
 			for(var5 = 0; var5 < this.chunks.length; ++var5) {
 				if(this.chunks[var5] != null && this.chunks[var5].needsSaving(var1)) {
 					++var4;
@@ -165,10 +165,10 @@
 						return false;
 					}
 
-					if(var2 != null) {
+					if(progressUpdate != null) {
 						++var5;
 						if(var5 % 10 == 0) {
-							var2.setLoadingProgress(var5 * 100 / var4);
+							progressUpdate.setLoadingProgress(var5 * 100 / var4);
 						}
 					}
 				}
--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -6,8 +6,8 @@
 	private int[] chanceToEncourageFire = new int[256];
 	private int[] abilityToCatchFire = new int[256];
 
-	protected BlockFire(int var1, int var2) {
-		super(var1, var2, Material.fire);
+	protected BlockFire(int blockID, int tex) {
+		super(blockID, tex, Material.fire);
 		this.initializeBlock(Block.planks.blockID, 5, 20);
 		this.initializeBlock(Block.wood.blockID, 5, 5);
 		this.initializeBlock(Block.leaves.blockID, 30, 60);
@@ -17,12 +17,12 @@
 		this.setTickOnLoad(true);
 	}
 
-	private void initializeBlock(int var1, int var2, int var3) {
-		this.chanceToEncourageFire[var1] = var2;
-		this.abilityToCatchFire[var1] = var3;
+	private void initializeBlock(int blockID, int fireChance, int fireAbility) {
+		this.chanceToEncourageFire[blockID] = fireChance;
+		this.abilityToCatchFire[blockID] = fireAbility;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -38,7 +38,7 @@
 		return 3;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 
@@ -46,41 +46,41 @@
 		return 10;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if(var6 < 15) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+			worldObj.setBlockMetadataWithNotify(x, y, z, var6 + 1);
+			worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
-		if(!this.canNeighborBurn(var1, var2, var3, var4)) {
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) || var6 > 3) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+		if(!this.canNeighborBurn(worldObj, x, y, z)) {
+			if(!worldObj.isBlockNormalCube(x, y - 1, z) || var6 > 3) {
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 
-		} else if(!this.canBlockCatchFire(var1, var2, var3 - 1, var4) && var6 == 15 && var5.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+		} else if(!this.canBlockCatchFire(worldObj, x, y - 1, z) && var6 == 15 && rand.nextInt(4) == 0) {
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		} else {
 			if(var6 % 2 == 0 && var6 > 2) {
-				this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 200, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300, var5);
+				this.tryToCatchBlockOnFire(worldObj, x + 1, y, z, 300, rand);
+				this.tryToCatchBlockOnFire(worldObj, x - 1, y, z, 300, rand);
+				this.tryToCatchBlockOnFire(worldObj, x, y - 1, z, 200, rand);
+				this.tryToCatchBlockOnFire(worldObj, x, y + 1, z, 250, rand);
+				this.tryToCatchBlockOnFire(worldObj, x, y, z - 1, 300, rand);
+				this.tryToCatchBlockOnFire(worldObj, x, y, z + 1, 300, rand);
 
-				for(int var7 = var2 - 1; var7 <= var2 + 1; ++var7) {
-					for(int var8 = var4 - 1; var8 <= var4 + 1; ++var8) {
-						for(int var9 = var3 - 1; var9 <= var3 + 4; ++var9) {
-							if(var7 != var2 || var9 != var3 || var8 != var4) {
+				for(int var7 = x - 1; var7 <= x + 1; ++var7) {
+					for(int var8 = z - 1; var8 <= z + 1; ++var8) {
+						for(int var9 = y - 1; var9 <= y + 4; ++var9) {
+							if(var7 != x || var9 != y || var8 != z) {
 								int var10 = 100;
-								if(var9 > var3 + 1) {
-									var10 += (var9 - (var3 + 1)) * 100;
+								if(var9 > y + 1) {
+									var10 += (var9 - (y + 1)) * 100;
 								}
 
-								int var11 = this.getChanceOfNeighborsEncouragingFire(var1, var7, var9, var8);
-								if(var11 > 0 && var5.nextInt(var10) <= var11) {
-									var1.setBlockWithNotify(var7, var9, var8, this.blockID);
+								int var11 = this.getChanceOfNeighborsEncouragingFire(worldObj, var7, var9, var8);
+								if(var11 > 0 && rand.nextInt(var10) <= var11) {
+									worldObj.setBlockWithNotify(var7, var9, var8, this.blockID);
 								}
 							}
 						}
@@ -91,38 +91,38 @@
 		}
 	}
 
-	private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6) {
-		int var7 = this.abilityToCatchFire[var1.getBlockId(var2, var3, var4)];
-		if(var6.nextInt(var5) < var7) {
-			boolean var8 = var1.getBlockId(var2, var3, var4) == Block.tnt.blockID;
-			if(var6.nextInt(2) == 0) {
-				var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+	private void tryToCatchBlockOnFire(World worldObj, int x, int y, int z, int var5, Random rand) {
+		int var7 = this.abilityToCatchFire[worldObj.getBlockId(x, y, z)];
+		if(rand.nextInt(var5) < var7) {
+			boolean var8 = worldObj.getBlockId(x, y, z) == Block.tnt.blockID;
+			if(rand.nextInt(2) == 0) {
+				worldObj.setBlockWithNotify(x, y, z, this.blockID);
 			} else {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 
 			if(var8) {
-				Block.tnt.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
+				Block.tnt.onBlockDestroyedByPlayer(worldObj, x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean canNeighborBurn(World var1, int var2, int var3, int var4) {
-		return this.canBlockCatchFire(var1, var2 + 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2 - 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 - 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 + 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3, var4 - 1) ? true : this.canBlockCatchFire(var1, var2, var3, var4 + 1)))));
+	private boolean canNeighborBurn(World worldObj, int x, int y, int z) {
+		return this.canBlockCatchFire(worldObj, x + 1, y, z) ? true : (this.canBlockCatchFire(worldObj, x - 1, y, z) ? true : (this.canBlockCatchFire(worldObj, x, y - 1, z) ? true : (this.canBlockCatchFire(worldObj, x, y + 1, z) ? true : (this.canBlockCatchFire(worldObj, x, y, z - 1) ? true : this.canBlockCatchFire(worldObj, x, y, z + 1)))));
 	}
 
-	private int getChanceOfNeighborsEncouragingFire(World var1, int var2, int var3, int var4) {
+	private int getChanceOfNeighborsEncouragingFire(World worldObj, int x, int y, int z) {
 		byte var5 = 0;
-		if(var1.getBlockId(var2, var3, var4) != 0) {
+		if(worldObj.getBlockId(x, y, z) != 0) {
 			return 0;
 		} else {
-			int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5);
-			var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6);
+			int var6 = this.getChanceToEncourageFire(worldObj, x + 1, y, z, var5);
+			var6 = this.getChanceToEncourageFire(worldObj, x - 1, y, z, var6);
+			var6 = this.getChanceToEncourageFire(worldObj, x, y - 1, z, var6);
+			var6 = this.getChanceToEncourageFire(worldObj, x, y + 1, z, var6);
+			var6 = this.getChanceToEncourageFire(worldObj, x, y, z - 1, var6);
+			var6 = this.getChanceToEncourageFire(worldObj, x, y, z + 1, var6);
 			return var6;
 		}
 	}
@@ -131,93 +131,93 @@
 		return false;
 	}
 
-	public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)] > 0;
+	public boolean canBlockCatchFire(IBlockAccess blockAccess, int x, int y, int z) {
+		return this.chanceToEncourageFire[blockAccess.getBlockId(x, y, z)] > 0;
 	}
 
-	public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)];
+	public int getChanceToEncourageFire(World worldObj, int x, int y, int z, int var5) {
+		int var6 = this.chanceToEncourageFire[worldObj.getBlockId(x, y, z)];
 		return var6 > var5 ? var6 : var5;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4) || this.canNeighborBurn(var1, var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) || this.canNeighborBurn(world, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(!worldObj.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(worldObj, x, y, z)) {
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(!worldObj.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(worldObj, x, y, z)) {
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		} else {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+			worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(24) == 0) {
-			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "fire.fire", 1.0F + var5.nextFloat(), var5.nextFloat() * 0.7F + 0.3F);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(rand.nextInt(24) == 0) {
+			worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "fire.fire", 1.0F + rand.nextFloat(), rand.nextFloat() * 0.7F + 0.3F);
 		}
 
 		int var6;
 		float var7;
 		float var8;
 		float var9;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(var1, var2, var3 - 1, var4)) {
-			if(Block.fire.canBlockCatchFire(var1, var2 - 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2 + 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)(var2 + 1) - var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 - 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 + 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)(var4 + 1) - var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3 + 1, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)(var3 + 1) - var5.nextFloat() * 0.1F;
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+		if(!worldObj.isBlockNormalCube(x, y - 1, z) && !Block.fire.canBlockCatchFire(worldObj, x, y - 1, z)) {
+			if(Block.fire.canBlockCatchFire(worldObj, x - 1, y, z)) {
+				for(var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)x + rand.nextFloat() * 0.1F;
+					var8 = (float)y + rand.nextFloat();
+					var9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x + 1, y, z)) {
+				for(var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)(x + 1) - rand.nextFloat() * 0.1F;
+					var8 = (float)y + rand.nextFloat();
+					var9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z - 1)) {
+				for(var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)x + rand.nextFloat();
+					var8 = (float)y + rand.nextFloat();
+					var9 = (float)z + rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z + 1)) {
+				for(var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)x + rand.nextFloat();
+					var8 = (float)y + rand.nextFloat();
+					var9 = (float)(z + 1) - rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y + 1, z)) {
+				for(var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)x + rand.nextFloat();
+					var8 = (float)(y + 1) - rand.nextFloat() * 0.1F;
+					var9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
 				}
 			}
 		} else {
 			for(var6 = 0; var6 < 3; ++var6) {
-				var7 = (float)var2 + var5.nextFloat();
-				var8 = (float)var3 + var5.nextFloat() * 0.5F + 0.5F;
-				var9 = (float)var4 + var5.nextFloat();
-				var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				var7 = (float)x + rand.nextFloat();
+				var8 = (float)y + rand.nextFloat() * 0.5F + 0.5F;
+				var9 = (float)z + rand.nextFloat();
+				worldObj.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
 			}
 		}
 
--- net/minecraft/src/ServerCommand.java
+++ net/minecraft/src/ServerCommand.java
@@ -4,8 +4,8 @@
 	public final String command;
 	public final ICommandListener commandListener;
 
-	public ServerCommand(String var1, ICommandListener var2) {
-		this.command = var1;
-		this.commandListener = var2;
+	public ServerCommand(String command, ICommandListener commandListener) {
+		this.command = command;
+		this.commandListener = commandListener;
 	}
 }
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -1,10 +1,13 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Packet8UpdateHealth;
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.client.Minecraft;
 
 public class EntityClientPlayerMP extends EntityPlayerSP {
 	private NetClientHandler sendQueue;
 	private int motionUpdateCounter = 0;
+	private boolean healthReady = false;
 	private double oldPosX;
 	private double oldBasePos;
 	private double oldPosY;
@@ -13,9 +16,9 @@
 	private float oldRotationPitch;
 	private InventoryPlayer serverSideInventory = new InventoryPlayer((EntityPlayer)null);
 
-	public EntityClientPlayerMP(Minecraft var1, World var2, Session var3, NetClientHandler var4) {
-		super(var1, var2, var3);
-		this.sendQueue = var4;
+	public EntityClientPlayerMP(Minecraft minecraft, World worldObj, Session session, NetClientHandler sendQueue) {
+		super(minecraft, worldObj, session);
+		this.sendQueue = sendQueue;
 	}
 
 	public void onUpdate() {
@@ -71,24 +74,44 @@
 
 	}
 
-	protected void joinEntityItemWithWorld(EntityItem var1) {
+	protected void joinEntityItemWithWorld(EntityItem entityItem) {
 		System.out.println("Dropping?");
-		Packet21PickupSpawn var2 = new Packet21PickupSpawn(var1);
-		this.sendQueue.addToSendQueue(var2);
-		var1.posX = (double)var2.xPosition / 32.0D;
-		var1.posY = (double)var2.yPosition / 32.0D;
-		var1.posZ = (double)var2.zPosition / 32.0D;
-		var1.motionX = (double)var2.rotation / 128.0D;
-		var1.motionY = (double)var2.pitch / 128.0D;
-		var1.motionZ = (double)var2.roll / 128.0D;
+		Packet21PickupSpawn packet21PickupSpawn2 = new Packet21PickupSpawn(entityItem);
+		this.sendQueue.addToSendQueue(packet21PickupSpawn2);
+		entityItem.posX = (double)packet21PickupSpawn2.xPosition / 32.0D;
+		entityItem.posY = (double)packet21PickupSpawn2.yPosition / 32.0D;
+		entityItem.posZ = (double)packet21PickupSpawn2.zPosition / 32.0D;
+		entityItem.motionX = (double)packet21PickupSpawn2.rotation / 128.0D;
+		entityItem.motionY = (double)packet21PickupSpawn2.pitch / 128.0D;
+		entityItem.motionZ = (double)packet21PickupSpawn2.roll / 128.0D;
 	}
 
-	public void sendChatMessage(String var1) {
-		this.sendQueue.addToSendQueue(new Packet3Chat(var1));
+	public void sendChatMessage(String chatMessage) {
+		this.sendQueue.addToSendQueue(new Packet3Chat(chatMessage));
 	}
 
 	public void swingItem() {
 		super.swingItem();
 		this.sendQueue.addToSendQueue(new Packet18ArmAnimation(this, 1));
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		return false;
+	}
+
+	public void setHealth(int var1) {
+		if (this.healthReady) {
+			super.setHealth(var1);
+		} else {
+			this.health = var1;
+			this.healthReady = true;
+		}
+	}
+
+	public void heal(int health) {
+	}
+
+	public void respawnPlayer() {
+		this.sendQueue.addToSendQueue(new Packet9Respawn());
 	}
 }
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -1,20 +1,31 @@
 package net.minecraft.src;
 
-public class ItemArmor extends Item {
-	private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
-	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
+public class ItemArmor extends ItemEquipable {
+	private static final int[] protectionValues = new int[] { 3, 8, 6, 3 };
+	private static final int[] maxDamageArray = new int[] { 11, 16, 15, 13 };
 	public final int armorLevel;
-	public final int armorType;
-	public final int damageReduceAmount;
+	public final int defense;
 	public final int renderIndex;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
-		super(var1);
+	public ItemArmor(int var1, int var2, int var3, int var4, double var5) {
+		super(var1, var4);
 		this.armorLevel = var2;
-		this.armorType = var4;
 		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
+		this.defense = (int) Math.round(protectionValues[var4] * var5);
 		this.maxDamage = maxDamageArray[var4] * 3 << var2;
-		this.maxStackSize = 1;
+		if (var2 > 1) {
+			this.maxDamage *= 1 << var2 - 1;
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				Integer.toString(this.maxDamage) + " max durability",
+				ItemTooltip.INFO_COL,
+				Integer.toString(this.defense) + " defense",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -19,6 +19,17 @@
 	int leafDistanceLimit = 4;
 	int[][] leafNodes;
 
+	private int altMetadata = 0;
+	private double altChance = 0.0D;
+
+	private int meta;
+
+	public WorldGenBigTree withAltForm(int altMetadata, double altChance) {
+		this.altMetadata = altMetadata;
+		this.altChance = altChance;
+		return this;
+	}
+
 	void generateLeafNodeList() {
 		this.height = (int)((double)this.heightLimit * this.heightAttenuation);
 		if(this.height >= this.heightLimit) {
@@ -116,7 +127,7 @@
 						if(var14 != 0 && var14 != 18) {
 							++var13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+							this.worldObj.setBlockAndMetadata(var11[0], var11[1], var11[2], var6, this.meta);
 							++var13;
 						}
 					}
@@ -191,7 +202,7 @@
 				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+				this.worldObj.setBlockAndMetadata(var14[0], var14[1], var14[2], var3, this.meta);
 			}
 
 		}
@@ -325,6 +336,8 @@
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		this.meta = var2.nextDouble() < this.altChance ? altMetadata : 0;
+
 		this.worldObj = var1;
 		long var6 = var2.nextLong();
 		this.rand.setSeed(var6);
--- net/minecraft/src/BlockRedstoneTorch.java
+++ net/minecraft/src/BlockRedstoneTorch.java
@@ -8,20 +8,20 @@
 	private boolean torchActive = false;
 	private static List torchUpdates = new ArrayList();
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? Block.redstoneWire.getBlockTextureFromSideAndMetadata(var1, var2) : super.getBlockTextureFromSideAndMetadata(var1, var2);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return side == 1 ? Block.redstoneWire.getBlockTextureFromSideAndMetadata(side, metadata) : super.getBlockTextureFromSideAndMetadata(side, metadata);
 	}
 
-	private boolean checkForBurnout(World var1, int var2, int var3, int var4, boolean var5) {
+	private boolean checkForBurnout(World worldObj, int x, int y, int z, boolean var5) {
 		if(var5) {
-			torchUpdates.add(new RedstoneUpdateInfo(var2, var3, var4, var1.worldTime));
+			torchUpdates.add(new RedstoneUpdateInfo(x, y, z, worldObj.worldTime));
 		}
 
 		int var6 = 0;
 
 		for(int var7 = 0; var7 < torchUpdates.size(); ++var7) {
-			RedstoneUpdateInfo var8 = (RedstoneUpdateInfo)torchUpdates.get(var7);
-			if(var8.x == var2 && var8.y == var3 && var8.z == var4) {
+			RedstoneUpdateInfo redstoneUpdateInfo8 = (RedstoneUpdateInfo)torchUpdates.get(var7);
+			if(redstoneUpdateInfo8.x == x && redstoneUpdateInfo8.y == y && redstoneUpdateInfo8.z == z) {
 				++var6;
 				if(var6 >= 8) {
 					return true;
@@ -32,9 +32,9 @@
 		return false;
 	}
 
-	protected BlockRedstoneTorch(int var1, int var2, boolean var3) {
-		super(var1, var2);
-		this.torchActive = var3;
+	protected BlockRedstoneTorch(int id, int tex, boolean torchActive) {
+		super(id, tex);
+		this.torchActive = torchActive;
 		this.setTickOnLoad(true);
 	}
 
@@ -42,85 +42,85 @@
 		return 2;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			super.onBlockAdded(var1, var2, var3, var4);
-		}
-
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(worldObj.getBlockMetadata(x, y, z) == 0) {
+			super.onBlockAdded(worldObj, x, y, z);
+		}
+
+		if(this.torchActive) {
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		if(this.torchActive) {
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
 		if(!this.torchActive) {
 			return false;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 == 5 && var5 == 1 ? false : (var6 == 3 && var5 == 3 ? false : (var6 == 4 && var5 == 2 ? false : (var6 == 1 && var5 == 5 ? false : var6 != 2 || var5 != 4)));
+			int var6 = blockAccess.getBlockMetadata(x, y, z);
+			return var6 == 5 && metadata == 1 ? false : (var6 == 3 && metadata == 3 ? false : (var6 == 4 && metadata == 2 ? false : (var6 == 1 && metadata == 5 ? false : var6 != 2 || metadata != 4)));
 		}
 	}
 
-	private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		return var5 == 5 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 - 1, var4, 0) ? true : (var5 == 3 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 - 1, 2) ? true : (var5 == 4 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 + 1, 3) ? true : (var5 == 1 && var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3, var4, 4) ? true : var5 == 2 && var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3, var4, 5))));
+	private boolean isIndirectlyPowered(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		return var5 == 5 && worldObj.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (var5 == 3 && worldObj.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (var5 == 4 && worldObj.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (var5 == 1 && worldObj.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : var5 == 2 && worldObj.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5))));
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		boolean var6 = this.isIndirectlyPowered(worldObj, x, y, z);
 
-		while(torchUpdates.size() > 0 && var1.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
+		while(torchUpdates.size() > 0 && worldObj.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
 			torchUpdates.remove(0);
 		}
 
 		if(this.torchActive) {
 			if(var6) {
-				var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneIdle.blockID, var1.getBlockMetadata(var2, var3, var4));
-				if(this.checkForBurnout(var1, var2, var3, var4, true)) {
-					var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+				worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneIdle.blockID, worldObj.getBlockMetadata(x, y, z));
+				if(this.checkForBurnout(worldObj, x, y, z, true)) {
+					worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.8F);
 
 					for(int var7 = 0; var7 < 5; ++var7) {
-						double var8 = (double)var2 + var5.nextDouble() * 0.6D + 0.2D;
-						double var10 = (double)var3 + var5.nextDouble() * 0.6D + 0.2D;
-						double var12 = (double)var4 + var5.nextDouble() * 0.6D + 0.2D;
-						var1.spawnParticle("smoke", var8, var10, var12, 0.0D, 0.0D, 0.0D);
+						double var8 = (double)x + rand.nextDouble() * 0.6D + 0.2D;
+						double var10 = (double)y + rand.nextDouble() * 0.6D + 0.2D;
+						double var12 = (double)z + rand.nextDouble() * 0.6D + 0.2D;
+						worldObj.spawnParticle("smoke", var8, var10, var12, 0.0D, 0.0D, 0.0D);
 					}
 				}
 			}
-		} else if(!var6 && !this.checkForBurnout(var1, var2, var3, var4, false)) {
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneActive.blockID, var1.getBlockMetadata(var2, var3, var4));
+		} else if(!var6 && !this.checkForBurnout(worldObj, x, y, z, false)) {
+			worldObj.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneActive.blockID, worldObj.getBlockMetadata(x, y, z));
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 ? this.isPoweringTo(var1, var2, var3, var4, var5) : false;
-	}
-
-	public int idDropped(int var1, Random var2) {
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
+		worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
+		return side == 0 ? this.isPoweringTo(worldObj, x, y, z, side) : false;
+	}
+
+	public int idDropped(int metadata, Random rand) {
 		return Block.torchRedstoneActive.blockID;
 	}
 
@@ -128,24 +128,24 @@
 		return true;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.torchActive) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			double var7 = (double)((float)var2 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var9 = (double)((float)var3 + 0.7F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var11 = (double)((float)var4 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
+			int var6 = worldObj.getBlockMetadata(x, y, z);
+			double var7 = (double)((float)x + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
+			double var9 = (double)((float)y + 0.7F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
+			double var11 = (double)((float)z + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
 			double var13 = (double)0.22F;
 			double var15 = (double)0.27F;
 			if(var6 == 1) {
-				var1.spawnParticle("reddust", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 2) {
-				var1.spawnParticle("reddust", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 3) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 4) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
 			} else {
-				var1.spawnParticle("reddust", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", var7, var9, var11, 0.0D, 0.0D, 0.0D);
 			}
 
 		}
--- net/minecraft/src/NetHandler.java
+++ net/minecraft/src/NetHandler.java
@@ -1,112 +1,134 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 public class NetHandler {
-	public void handleMapChunk(Packet51MapChunk var1) {
-	}
-
-	public void registerPacket(Packet var1) {
-	}
-
-	public void handleErrorMessage(String var1) {
-	}
-
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleLogin(Packet1Login var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleFlying(Packet10Flying var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMultiBlockChange(Packet52MultiBlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockDig(Packet14BlockDig var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockChange(Packet53BlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePreChunk(Packet50PreChunk var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntity(Packet30Entity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntityTeleport(Packet34EntityTeleport var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlace(Packet15Place var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleDestroyEntity(Packet29DestroyEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleCollect(Packet22Collect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleChat(Packet3Chat var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleVehicleSpawn(Packet23VehicleSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleHandshake(Packet2Handshake var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMobSpawn(Packet24MobSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleUpdateTime(Packet4UpdateTime var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleSpawnPosition(Packet6SpawnPosition var1) {
-		this.registerPacket(var1);
+	public void handleMapChunk(Packet51MapChunk packet) {
+	}
+
+	public void registerPacket(Packet packet) {
+	}
+
+	public void handleErrorMessage(String message) {
+	}
+
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleLogin(Packet1Login packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleFlying(Packet10Flying packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMultiBlockChange(Packet52MultiBlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockDig(Packet14BlockDig packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockChange(Packet53BlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePreChunk(Packet50PreChunk packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntity(Packet30Entity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntityTeleport(Packet34EntityTeleport packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlace(Packet15Place packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleDestroyEntity(Packet29DestroyEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleCollect(Packet22Collect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleChat(Packet3Chat packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleAddToInventory(Packet17AddToInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleVehicleSpawn(Packet23VehicleSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleHandshake(Packet2Handshake packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMobSpawn(Packet24MobSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleUpdateTime(Packet4UpdateTime packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleSpawnPosition(Packet6SpawnPosition packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleWorldType(Packet19WorldType packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntityStatus(Packet38EntityStatus packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleUseEntity(Packet7UseEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleHealth(Packet8UpdateHealth packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleRespawnPacket(Packet9Respawn packet) {
+		this.registerPacket(packet);
 	}
 }
--- net/minecraft/src/ModelSpider.java
+++ net/minecraft/src/ModelSpider.java
@@ -67,9 +67,9 @@
 	}
 
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.spiderHead.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.spiderHead.rotateAngleX = var5 / (180.0F / (float)Math.PI);
-		float var7 = (float)Math.PI * 0.25F;
+		this.spiderHead.rotateAngleY = var4 / 57.295776F;
+		this.spiderHead.rotateAngleX = var5 / 57.295776F;
+		float var7 = 0.7853982F;
 		this.spiderLeg1.rotateAngleZ = -var7;
 		this.spiderLeg2.rotateAngleZ = var7;
 		this.spiderLeg3.rotateAngleZ = -var7 * 0.74F;
@@ -79,7 +79,7 @@
 		this.spiderLeg7.rotateAngleZ = -var7;
 		this.spiderLeg8.rotateAngleZ = var7;
 		float var8 = -0.0F;
-		float var9 = (float)Math.PI * 0.125F;
+		float var9 = 0.3926991F;
 		this.spiderLeg1.rotateAngleY = var9 * 2.0F + var8;
 		this.spiderLeg2.rotateAngleY = -var9 * 2.0F - var8;
 		this.spiderLeg3.rotateAngleY = var9 * 1.0F + var8;
@@ -90,12 +90,12 @@
 		this.spiderLeg8.rotateAngleY = var9 * 2.0F - var8;
 		float var10 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + 0.0F) * 0.4F) * var2;
 		float var11 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI) * 0.4F) * var2;
-		float var12 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI * 0.5F) * 0.4F) * var2;
-		float var13 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI * 3.0F / 2.0F) * 0.4F) * var2;
+		float var12 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI / 2F) * 0.4F) * var2;
+		float var13 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + 4.712389F) * 0.4F) * var2;
 		float var14 = Math.abs(MathHelper.sin(var1 * 0.6662F + 0.0F) * 0.4F) * var2;
 		float var15 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI) * 0.4F) * var2;
-		float var16 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI * 0.5F) * 0.4F) * var2;
-		float var17 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI * 3.0F / 2.0F) * 0.4F) * var2;
+		float var16 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI / 2F) * 0.4F) * var2;
+		float var17 = Math.abs(MathHelper.sin(var1 * 0.6662F + 4.712389F) * 0.4F) * var2;
 		this.spiderLeg1.rotateAngleY += var10;
 		this.spiderLeg2.rotateAngleY += -var10;
 		this.spiderLeg3.rotateAngleY += var11;
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -6,10 +6,10 @@
 		this.maxStackSize = 16;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (rand.nextFloat() * 0.4F + 0.8F));
-		var2.spawnEntityInWorld(new EntitySnowball(var2, var3));
-		return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		--itemStack.stackSize;
+		worldObj.playSoundAtEntity(entityPlayer, "random.bow", 0.5F, 0.4F / (rand.nextFloat() * 0.4F + 0.8F));
+		worldObj.spawnEntityInWorld(new EntitySnowball(worldObj, entityPlayer, 14, 1));
+		return itemStack;
 	}
 }
--- net/minecraft/src/Frustum.java
+++ net/minecraft/src/Frustum.java
@@ -16,7 +16,7 @@
 		return this.clippingHelper.isBoxInFrustum(var1 - this.xPosition, var3 - this.yPosition, var5 - this.zPosition, var7 - this.xPosition, var9 - this.yPosition, var11 - this.zPosition);
 	}
 
-	public boolean isBoundingBoxInFrustum(AxisAlignedBB var1) {
-		return this.isBoxInFrustum(var1.minX, var1.minY, var1.minZ, var1.maxX, var1.maxY, var1.maxZ);
+	public boolean isBoundingBoxInFrustum(AxisAlignedBB axisAlignedBB1) {
+		return this.isBoxInFrustum(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ, axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
 	}
 }
--- net/minecraft/isom/IsomPreviewApplet.java
+++ net/minecraft/isom/IsomPreviewApplet.java
@@ -2,6 +2,7 @@
 
 import java.applet.Applet;
 import java.awt.BorderLayout;
+
 import net.minecraft.src.CanvasIsomPreview;
 
 public class IsomPreviewApplet extends Applet {
--- net/minecraft/src/MCHashEntry.java
+++ net/minecraft/src/MCHashEntry.java
@@ -6,9 +6,9 @@
 	MCHashEntry nextEntry;
 	final int slotHash;
 
-	MCHashEntry(int var1, int var2, Object var3, MCHashEntry var4) {
+	MCHashEntry(int var1, int var2, Object var3, MCHashEntry mCHashEntry4) {
 		this.valueEntry = var3;
-		this.nextEntry = var4;
+		this.nextEntry = mCHashEntry4;
 		this.hashEntry = var2;
 		this.slotHash = var1;
 	}
@@ -25,12 +25,12 @@
 		if(!(var1 instanceof MCHashEntry)) {
 			return false;
 		} else {
-			MCHashEntry var2 = (MCHashEntry)var1;
-			Integer var3 = Integer.valueOf(this.getHash());
-			Integer var4 = Integer.valueOf(var2.getHash());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
+			MCHashEntry mCHashEntry2 = (MCHashEntry)var1;
+			Integer integer3 = this.getHash();
+			Integer integer4 = mCHashEntry2.getHash();
+			if(integer3 == integer4 || integer3 != null && integer3.equals(integer4)) {
 				Object var5 = this.getValue();
-				Object var6 = var2.getValue();
+				Object var6 = mCHashEntry2.getValue();
 				if(var5 == var6 || var5 != null && var5.equals(var6)) {
 					return true;
 				}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/EntityFox.java
@@ -1,0 +1,54 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class EntityFox extends EntityAnimal {
+	private boolean arctic = false;
+
+	public EntityFox(World var1) {
+		super(var1);
+		this.texture = "/mob/fox.png";
+		this.setSize(0.6F, 0.7F);
+		if (var1.birthday) {
+			this.texture = "/mob/fox_blue.png";
+		}
+		this.moveSpeed = 1.0F;
+	}
+
+	public void setArctic(boolean arctic) {
+		this.arctic = arctic;
+		if (this.arctic) {
+			this.texture = "/mob/fox_arctic.png";
+		} else if (this.worldObj.birthday) {
+			this.texture = "/mob/fox_blue.png";
+		} else {
+			this.texture = "/mob/fox.png";
+		}
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		this.setArctic(compoundTag.getBoolean("Arctic"));
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setBoolean("Arctic", this.arctic);
+	}
+
+	protected String getLivingSound() {
+		return "diverge.mob.fox";
+	}
+
+	protected String getHurtSound() {
+		return "diverge.mob.foxhurt";
+	}
+
+	protected String getDeathSound() {
+		return this.worldObj.birthday ? "diverge.mob.bluefoxdeath" : "diverge.mob.foxdeath";
+	}
+
+	protected int getDropItemId() {
+		return Item.leather.shiftedIndex;
+	}
+}
--- net/minecraft/src/ItemBoat.java
+++ net/minecraft/src/ItemBoat.java
@@ -6,35 +6,35 @@
 		this.maxStackSize = 1;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
 		float var4 = 1.0F;
-		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
-		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
-		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4;
-		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
-		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
-		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var5 = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * var4;
+		float var6 = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * var4;
+		double var7 = entityPlayer.prevPosX + (entityPlayer.posX - entityPlayer.prevPosX) * (double)var4;
+		double var9 = entityPlayer.prevPosY + (entityPlayer.posY - entityPlayer.prevPosY) * (double)var4;
+		double var11 = entityPlayer.prevPosZ + (entityPlayer.posZ - entityPlayer.prevPosZ) * (double)var4;
+		Vec3D vec3D13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * 0.017453292F - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * 0.017453292F - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * 0.017453292F);
+		float var17 = MathHelper.sin(-var5 * 0.017453292F);
 		float var18 = var15 * var16;
 		float var20 = var14 * var16;
 		double var21 = 5.0D;
-		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
-		if(var24 == null) {
-			return var1;
+		Vec3D vec3D23 = vec3D13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition movingObjectPosition24 = worldObj.rayTraceBlocks_do(vec3D13, vec3D23, true);
+		if(movingObjectPosition24 == null) {
+			return itemStack;
 		} else {
-			if(var24.typeOfHit == 0) {
-				int var25 = var24.blockX;
-				int var26 = var24.blockY;
-				int var27 = var24.blockZ;
-				var2.spawnEntityInWorld(new EntityBoat(var2, (double)((float)var25 + 0.5F), (double)((float)var26 + 1.5F), (double)((float)var27 + 0.5F)));
-				--var1.stackSize;
+			if(movingObjectPosition24.typeOfHit == 0) {
+				int var25 = movingObjectPosition24.blockX;
+				int var26 = movingObjectPosition24.blockY;
+				int var27 = movingObjectPosition24.blockZ;
+				worldObj.spawnEntityInWorld(new EntityBoat(worldObj, (double)((float)var25 + 0.5F), (double)((float)var26 + 1.5F), (double)((float)var27 + 0.5F)));
+				--itemStack.stackSize;
 			}
 
-			return var1;
+			return itemStack;
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiCreateWorld.java
@@ -1,0 +1,138 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.WorldType;
+import org.lwjgl.input.Keyboard;
+
+public class GuiCreateWorld extends GuiScreen {
+	private final GuiScreen parent;
+	private GuiTextField textboxWorldName;
+	private GuiTextField textboxSeed;
+	private String displayName;
+	private boolean createClicked;
+	private final int index;
+	private byte worldType;
+	private boolean creative;
+
+	public GuiCreateWorld(GuiScreen guiScreen1, int index) {
+		this.parent = guiScreen1;
+		this.index = index;
+	}
+
+	public void updateScreen() {
+		this.textboxWorldName.updateCursorCounter();
+		this.textboxSeed.updateCursorCounter();
+	}
+
+	public void initGui() {
+		Keyboard.enableRepeatEvents(true);
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, "Create New World"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
+		this.textboxWorldName = new GuiTextField(this, this.fontRenderer, this.width / 4 - 100, 60, 200, 20, "World " + index);
+		this.textboxWorldName.isFocused = true;
+		this.textboxWorldName.setMaxStringLength(32);
+		this.textboxSeed = new GuiTextField(this, this.fontRenderer, this.width / 4 * 3 - 100, 60, 200, 20, "");
+		this.controlList.add(new GuiButton(2, this.width / 2 - 156, 100, 150, 20, "Type: NORMAL"));
+		this.controlList.add(new GuiButton(3, this.width / 2 + 6, 100, 150, 20, "Gamemode: SURVIVAL"));
+		this.func_22129_j();
+	}
+
+	private void func_22129_j() {
+		this.displayName = this.textboxWorldName.getText().trim();
+		if(this.displayName.isEmpty()) {
+			this.displayName = "World" + index;
+		}
+	}
+
+	public void onGuiClosed() {
+		Keyboard.enableRepeatEvents(false);
+	}
+
+	protected void actionPerformed(GuiButton guiButton1) {
+		if(!guiButton1.enabled) {
+			return;
+		}
+		switch (guiButton1.id) {
+			case 0:
+				this.mc.displayGuiScreen((GuiScreen)null);
+				if(this.createClicked) {
+					return;
+				}
+
+				this.createClicked = true;
+				long var2 = (new Random()).nextLong();
+				String var4 = this.textboxSeed.getText();
+				if(var4 != null && var4.length() > 0) {
+					try {
+						long var5 = Long.parseLong(var4);
+						if(var5 != 0L) {
+							var2 = var5;
+						}
+					} catch (NumberFormatException numberFormatException7) {
+						var2 = (long)var4.hashCode();
+					}
+				}
+
+				this.mc.playerController = new PlayerControllerSP(this.mc);
+				this.mc.startWorld("World" + index, new CreateWorldInfo()
+					.withName(this.displayName)
+					.withSeed(var2)
+					.withWorldType(WorldType.values()[this.worldType])
+					.withCreative(this.creative));
+				this.mc.displayGuiScreen((GuiScreen)null);
+				break;
+
+			case 1:
+				this.mc.displayGuiScreen(this.parent);
+				break;
+
+			case 2:
+				this.worldType++;
+				if (this.worldType >= WorldType.values().length) {
+					this.worldType = 0;
+				}
+				guiButton1.displayString = "Type: " + WorldType.values()[this.worldType].name();
+				break;
+
+			case 3:
+				this.creative = !this.creative;
+				guiButton1.displayString = "Gamemode: " + (this.creative ? "CREATIVE" : "SURVIVAL");
+				break;
+		}
+	}
+
+	protected void keyTyped(char c1, int var2) {
+		if(this.textboxWorldName.isFocused) {
+			this.textboxWorldName.textboxKeyTyped(c1, var2);
+		} else {
+			this.textboxSeed.textboxKeyTyped(c1, var2);
+		}
+
+		if(c1 == 13) {
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+		}
+
+		((GuiButton)this.controlList.get(0)).enabled = this.textboxWorldName.getText().length() > 0;
+		this.func_22129_j();
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		this.textboxWorldName.mouseClicked(var1, var2, var3);
+		this.textboxSeed.mouseClicked(var1, var2, var3);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, "Create new world", this.width / 2, this.height / 4 - 40, 0xFFFFFF);
+		this.drawString(this.fontRenderer, "World Name", this.width / 4 - 100, 47, 10526880);
+		this.drawString(this.fontRenderer, "Seed for the World Generator", this.width / 4 * 3 - 100, 47, 10526880);
+		this.drawString(this.fontRenderer, "Leave blank for a random seed", this.width / 4 * 3 - 100, 83, 10526880);
+		this.textboxWorldName.drawTextBox();
+		this.textboxSeed.drawTextBox();
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/BlockLadder.java
+++ net/minecraft/src/BlockLadder.java
@@ -3,52 +3,52 @@
 import java.util.Random;
 
 public class BlockLadder extends Block {
-	protected BlockLadder(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		float var6 = 2.0F / 16.0F;
-		if(var5 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
-		}
-
-		if(var5 == 4) {
-			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
-		}
-
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		float var6 = 2.0F / 16.0F;
-		if(var5 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
-		}
-
-		if(var5 == 4) {
-			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
-		}
-
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	protected BlockLadder(int blockID, int tex) {
+		super(blockID, tex, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		float var6 = 0.125F;
+		if(var5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(var5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
+		}
+
+		if(var5 == 4) {
+			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(var5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		float var6 = 0.125F;
+		if(var5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(var5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
+		}
+
+		if(var5 == 4) {
+			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(var5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
+		}
+
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
 	}
 
 	public boolean isOpaqueCube() {
@@ -63,59 +63,59 @@
 		return 8;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
 	}
 
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 == 0 || var5 == 2) && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+	public void onBlockPlaced(World worldObj, int x, int y, int z, int metadata) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
+		if((var6 == 0 || metadata == 2) && worldObj.isBlockNormalCube(x, y, z + 1)) {
 			var6 = 2;
 		}
 
-		if((var6 == 0 || var5 == 3) && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+		if((var6 == 0 || metadata == 3) && worldObj.isBlockNormalCube(x, y, z - 1)) {
 			var6 = 3;
 		}
 
-		if((var6 == 0 || var5 == 4) && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+		if((var6 == 0 || metadata == 4) && worldObj.isBlockNormalCube(x + 1, y, z)) {
 			var6 = 4;
 		}
 
-		if((var6 == 0 || var5 == 5) && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+		if((var6 == 0 || metadata == 5) && worldObj.isBlockNormalCube(x - 1, y, z)) {
 			var6 = 5;
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var6);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		boolean var7 = false;
-		if(var6 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+		if(var6 == 2 && worldObj.isBlockNormalCube(x, y, z + 1)) {
+			var7 = true;
+		}
+
+		if(var6 == 3 && worldObj.isBlockNormalCube(x, y, z - 1)) {
+			var7 = true;
+		}
+
+		if(var6 == 4 && worldObj.isBlockNormalCube(x + 1, y, z)) {
+			var7 = true;
+		}
+
+		if(var6 == 5 && worldObj.isBlockNormalCube(x - 1, y, z)) {
 			var7 = true;
 		}
 
 		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+			this.dropBlockAsItem(worldObj, x, y, z, var6);
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 }
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -10,17 +10,17 @@
 		float var7 = (float)(var5 >> 16 & 255) / 255.0F;
 		float var8 = (float)(var5 >> 8 & 255) / 255.0F;
 		float var9 = (float)(var5 & 255) / 255.0F;
-		Tessellator var10 = Tessellator.instance;
+		Tessellator tessellator10 = Tessellator.instance;
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glColor4f(var7, var8, var9, var6);
-		var10.startDrawingQuads();
-		var10.addVertex((double)var1, (double)var4, 0.0D);
-		var10.addVertex((double)var3, (double)var4, 0.0D);
-		var10.addVertex((double)var3, (double)var2, 0.0D);
-		var10.addVertex((double)var1, (double)var2, 0.0D);
-		var10.draw();
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertex((double)var1, (double)var4, 0.0D);
+		tessellator10.addVertex((double)var3, (double)var4, 0.0D);
+		tessellator10.addVertex((double)var3, (double)var2, 0.0D);
+		tessellator10.addVertex((double)var1, (double)var2, 0.0D);
+		tessellator10.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_BLEND);
 	}
@@ -39,38 +39,38 @@
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glShadeModel(GL11.GL_SMOOTH);
-		Tessellator var15 = Tessellator.instance;
-		var15.startDrawingQuads();
-		var15.setColorRGBA_F(var8, var9, var10, var7);
-		var15.addVertex((double)var3, (double)var2, 0.0D);
-		var15.addVertex((double)var1, (double)var2, 0.0D);
-		var15.setColorRGBA_F(var12, var13, var14, var11);
-		var15.addVertex((double)var1, (double)var4, 0.0D);
-		var15.addVertex((double)var3, (double)var4, 0.0D);
-		var15.draw();
+		Tessellator tessellator15 = Tessellator.instance;
+		tessellator15.startDrawingQuads();
+		tessellator15.setColorRGBA_F(var8, var9, var10, var7);
+		tessellator15.addVertex((double)var3, (double)var2, 0.0D);
+		tessellator15.addVertex((double)var1, (double)var2, 0.0D);
+		tessellator15.setColorRGBA_F(var12, var13, var14, var11);
+		tessellator15.addVertex((double)var1, (double)var4, 0.0D);
+		tessellator15.addVertex((double)var3, (double)var4, 0.0D);
+		tessellator15.draw();
 		GL11.glShadeModel(GL11.GL_FLAT);
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
-	public void drawCenteredString(FontRenderer var1, String var2, int var3, int var4, int var5) {
-		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
+	public void drawCenteredString(FontRenderer fontRenderer1, String var2, int var3, int var4, int var5) {
+		fontRenderer1.drawStringWithShadow(var2, var3 - fontRenderer1.getStringWidth(var2) / 2, var4, var5);
 	}
 
-	public void drawString(FontRenderer var1, String var2, int var3, int var4, int var5) {
-		var1.drawStringWithShadow(var2, var3, var4, var5);
+	public void drawString(FontRenderer fontRenderer1, String var2, int var3, int var4, int var5) {
+		fontRenderer1.drawStringWithShadow(var2, var3, var4, var5);
 	}
 
 	public void drawTexturedModalRect(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 1.0F / 256.0F;
-		float var8 = 1.0F / 256.0F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+		float var7 = 0.00390625F;
+		float var8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.startDrawingQuads();
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.draw();
 	}
 }
--- net/minecraft/src/InventoryLargeChest.java
+++ net/minecraft/src/InventoryLargeChest.java
@@ -5,10 +5,10 @@
 	private IInventory upperChest;
 	private IInventory lowerChest;
 
-	public InventoryLargeChest(String var1, IInventory var2, IInventory var3) {
+	public InventoryLargeChest(String var1, IInventory iInventory2, IInventory iInventory3) {
 		this.name = var1;
-		this.upperChest = var2;
-		this.lowerChest = var3;
+		this.upperChest = iInventory2;
+		this.lowerChest = iInventory3;
 	}
 
 	public int getSizeInventory() {
@@ -19,19 +19,19 @@
 		return this.name;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return var1 >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(var1 - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(var1);
-	}
-
-	public ItemStack decrStackSize(int var1, int var2) {
-		return var1 >= this.upperChest.getSizeInventory() ? this.lowerChest.decrStackSize(var1 - this.upperChest.getSizeInventory(), var2) : this.upperChest.decrStackSize(var1, var2);
-	}
-
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		if(var1 >= this.upperChest.getSizeInventory()) {
-			this.lowerChest.setInventorySlotContents(var1 - this.upperChest.getSizeInventory(), var2);
+	public ItemStack getStackInSlot(int slot) {
+		return slot >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(slot - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(slot);
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		return slot >= this.upperChest.getSizeInventory() ? this.lowerChest.decrStackSize(slot - this.upperChest.getSizeInventory(), stackSize) : this.upperChest.decrStackSize(slot, stackSize);
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		if(slot >= this.upperChest.getSizeInventory()) {
+			this.lowerChest.setInventorySlotContents(slot - this.upperChest.getSizeInventory(), itemStack);
 		} else {
-			this.upperChest.setInventorySlotContents(var1, var2);
+			this.upperChest.setInventorySlotContents(slot, itemStack);
 		}
 
 	}
--- net/minecraft/src/NetworkWriterThread.java
+++ net/minecraft/src/NetworkWriterThread.java
@@ -3,14 +3,14 @@
 class NetworkWriterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkWriterThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkWriterThread(NetworkManager networkManager, String name) {
+		super(name);
+		this.netManager = networkManager;
 	}
 
 	public void run() {
 		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numWriteThreads;
 		}
 
@@ -28,7 +28,7 @@
 			} finally {
 				if(var11) {
 					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
+					synchronized(NetworkManager.threadSyncObject) {
 						--NetworkManager.numWriteThreads;
 					}
 				}
@@ -36,7 +36,7 @@
 		}
 
 		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		synchronized(NetworkManager.threadSyncObject) {
 			--NetworkManager.numWriteThreads;
 		}
 	}
--- net/minecraft/src/NetServerHandler.java
+++ net/minecraft/src/NetServerHandler.java
@@ -2,6 +2,9 @@
 
 import java.io.IOException;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet7UseEntity;
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.server.MinecraftServer;
 
 public class NetServerHandler extends NetHandler implements ICommandListener {
@@ -40,11 +43,11 @@
 		this.connectionClosed = true;
 	}
 
-	public void handleFlying(Packet10Flying var1) {
+	public void handleFlying(Packet10Flying packet) {
 		double var2;
 		if(!this.hasMoved) {
-			var2 = var1.yPosition - this.lastPosY;
-			if(var1.xPosition == this.lastPosX && var2 * var2 < 0.01D && var1.zPosition == this.lastPosZ) {
+			var2 = packet.yPosition - this.lastPosY;
+			if(packet.xPosition == this.lastPosX && var2 * var2 < 0.01D && packet.zPosition == this.lastPosZ) {
 				this.hasMoved = true;
 			}
 		}
@@ -59,22 +62,22 @@
 			float var8 = this.playerEntity.rotationYaw;
 			float var9 = this.playerEntity.rotationPitch;
 			double var10;
-			if(var1.moving) {
-				var2 = var1.xPosition;
-				var4 = var1.yPosition;
-				var6 = var1.zPosition;
-				var10 = var1.stance - var1.yPosition;
+			if(packet.moving) {
+				var2 = packet.xPosition;
+				var4 = packet.yPosition;
+				var6 = packet.zPosition;
+				var10 = packet.stance - packet.yPosition;
 				if(var10 > 1.65D || var10 < 0.1D) {
 					this.kickPlayer("Illegal stance");
 					logger.warning(this.playerEntity.username + " had an illegal stance: " + var10);
 				}
 
-				this.playerEntity.managedPosY = var1.stance;
+				this.playerEntity.managedPosY = packet.stance;
 			}
 
-			if(var1.rotating) {
-				var8 = var1.yaw;
-				var9 = var1.pitch;
+			if(packet.rotating) {
+				var8 = packet.yaw;
+				var9 = packet.pitch;
 			}
 
 			this.playerEntity.onUpdateEntity();
@@ -83,7 +86,7 @@
 			var10 = var2 - this.playerEntity.posX;
 			double var12 = var4 - this.playerEntity.posY;
 			double var14 = var6 - this.playerEntity.posZ;
-			float var16 = 1.0F / 16.0F;
+			float var16 = 0.0625F;
 			boolean var17 = this.mcServer.worldMngr.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().removeCoord((double)var16, (double)var16, (double)var16)).size() == 0;
 			this.playerEntity.moveEntity(var10, var12, var14);
 			var10 = var2 - this.playerEntity.posX;
@@ -95,7 +98,7 @@
 			var14 = var6 - this.playerEntity.posZ;
 			double var18 = var10 * var10 + var12 * var12 + var14 * var14;
 			boolean var20 = false;
-			if(var18 > 1.0D / 16.0D) {
+			if(var18 > 0.0625D) {
 				var20 = true;
 				logger.warning(this.playerEntity.username + " moved wrongly!");
 			}
@@ -107,8 +110,9 @@
 				return;
 			}
 
-			this.playerEntity.onGround = var1.onGround;
+			this.playerEntity.onGround = packet.onGround;
 			this.mcServer.configManager.serverUpdateMountedMovingPlayer(this.playerEntity);
+			this.playerEntity.handleFalling(this.playerEntity.posY - this.lastPosY, packet.onGround);
 		}
 
 	}
@@ -122,53 +126,53 @@
 		this.playerEntity.playerNetServerHandler.sendPacket(new Packet13PlayerLookMove(var1, var3 + (double)1.62F, var3, var5, var7, var8, false));
 	}
 
-	public void handleBlockDig(Packet14BlockDig var1) {
+	public void handleBlockDig(Packet14BlockDig packet) {
 		this.playerEntity.inventory.mainInventory[this.playerEntity.inventory.currentItem] = this.heldItem;
 		boolean var2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
 		boolean var3 = false;
-		if(var1.status == 0) {
+		if(packet.status == 0) {
 			var3 = true;
 		}
 
-		if(var1.status == 1) {
+		if(packet.status == 1) {
 			var3 = true;
 		}
 
 		if(var3) {
 			double var4 = this.playerEntity.posY;
 			this.playerEntity.posY = this.playerEntity.managedPosY;
-			MovingObjectPosition var6 = this.playerEntity.rayTrace(4.0D, 1.0F);
+			MovingObjectPosition movingObjectPosition6 = this.playerEntity.rayTrace(4.0D, 1.0F);
 			this.playerEntity.posY = var4;
-			if(var6 == null) {
+			if(movingObjectPosition6 == null) {
 				return;
 			}
 
-			if(var6.blockX != var1.xPosition || var6.blockY != var1.yPosition || var6.blockZ != var1.zPosition || var6.sideHit != var1.face) {
+			if(movingObjectPosition6.blockX != packet.xPosition || movingObjectPosition6.blockY != packet.yPosition || movingObjectPosition6.blockZ != packet.zPosition || movingObjectPosition6.sideHit != packet.face) {
 				return;
 			}
 		}
 
-		int var18 = var1.xPosition;
-		int var5 = var1.yPosition;
-		int var19 = var1.zPosition;
-		int var7 = var1.face;
+		int var18 = packet.xPosition;
+		int var5 = packet.yPosition;
+		int var19 = packet.zPosition;
+		int var7 = packet.face;
 		int var8 = (int)MathHelper.abs((float)(var18 - this.mcServer.worldMngr.spawnX));
 		int var9 = (int)MathHelper.abs((float)(var19 - this.mcServer.worldMngr.spawnZ));
 		if(var8 > var9) {
 			var9 = var8;
 		}
 
-		if(var1.status == 0) {
+		if(packet.status == 0) {
 			if(var9 > 16 || var2) {
 				this.playerEntity.theItemInWorldManager.onBlockClicked(var18, var5, var19);
 			}
-		} else if(var1.status == 2) {
+		} else if(packet.status == 2) {
 			this.playerEntity.theItemInWorldManager.blockRemoving();
-		} else if(var1.status == 1) {
+		} else if(packet.status == 1) {
 			if(var9 > 16 || var2) {
 				this.playerEntity.theItemInWorldManager.updateBlockRemoving(var18, var5, var19, var7);
 			}
-		} else if(var1.status == 3) {
+		} else if(packet.status == 3) {
 			double var10 = this.playerEntity.posX - ((double)var18 + 0.5D);
 			double var12 = this.playerEntity.posY - ((double)var5 + 0.5D);
 			double var14 = this.playerEntity.posZ - ((double)var19 + 0.5D);
@@ -182,6 +186,13 @@
 	}
 
 	public void handlePlace(Packet15Place var1) {
+		if (var1.direction == 255) {
+			if (var1.itemStack != null) {
+				this.playerEntity.theItemInWorldManager.func_6154_a(this.playerEntity, this.mcServer.worldMngr, var1.itemStack);
+			}
+			return;
+		}
+
 		boolean var2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
 		int var3 = var1.xPosition;
 		int var4 = var1.yPosition;
@@ -194,7 +205,7 @@
 		}
 
 		if(var8 > 16 || var2) {
-			ItemStack var9 = var1.id >= 0 ? new ItemStack(var1.id) : null;
+			ItemStack var9 = var1.itemStack;
 			this.playerEntity.theItemInWorldManager.activeBlockOrUseItem(this.playerEntity, this.mcServer.worldMngr, var9, var3, var4, var5, var6);
 		}
 
@@ -202,23 +213,23 @@
 		this.mcServer.worldMngr.disableSpawnProtection = false;
 	}
 
-	public void handleErrorMessage(String var1) {
-		logger.info(this.playerEntity.username + " lost connection: " + var1);
+	public void handleErrorMessage(String message) {
+		logger.info(this.playerEntity.username + " lost connection: " + message);
 		this.mcServer.configManager.playerLoggedOut(this.playerEntity);
 		this.connectionClosed = true;
 	}
 
-	public void registerPacket(Packet var1) {
-		logger.warning(this.getClass() + " wasn\'t prepared to deal with a " + var1.getClass());
+	public void registerPacket(Packet packet) {
+		logger.warning(this.getClass() + " wasn't prepared to deal with a " + packet.getClass());
 		this.kickPlayer("Protocol error, unexpected packet");
 	}
 
-	public void sendPacket(Packet var1) {
-		this.netManager.addToSendQueue(var1);
+	public void sendPacket(Packet packet1) {
+		this.netManager.addToSendQueue(packet1);
 	}
 
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		int var2 = var1.id;
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		int var2 = packet.id;
 		this.playerEntity.inventory.currentItem = this.playerEntity.inventory.mainInventory.length - 1;
 		if(var2 == 0) {
 			this.heldItem = null;
@@ -230,20 +241,20 @@
 		this.mcServer.entityTracker.sendPacketToTrackedPlayers(this.playerEntity, new Packet16BlockItemSwitch(this.playerEntity.entityID, var2));
 	}
 
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.mcServer.worldMngr, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
-		var8.motionX = (double)var1.rotation / 128.0D;
-		var8.motionY = (double)var1.pitch / 128.0D;
-		var8.motionZ = (double)var1.roll / 128.0D;
-		var8.delayBeforeCanPickup = 10;
-		this.mcServer.worldMngr.spawnEntityInWorld(var8);
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		double var2 = (double)packet.xPosition / 32.0D;
+		double var4 = (double)packet.yPosition / 32.0D;
+		double var6 = (double)packet.zPosition / 32.0D;
+		EntityItem entityItem8 = new EntityItem(this.mcServer.worldMngr, var2, var4, var6, new ItemStack(packet.itemID, packet.count).withMetadata(packet.itemMetadata));
+		entityItem8.motionX = (double)packet.rotation / 128.0D;
+		entityItem8.motionY = (double)packet.pitch / 128.0D;
+		entityItem8.motionZ = (double)packet.roll / 128.0D;
+		entityItem8.delayBeforeCanPickup = 10;
+		this.mcServer.worldMngr.spawnEntityInWorld(entityItem8);
 	}
 
-	public void handleChat(Packet3Chat var1) {
-		String var2 = var1.message;
+	public void handleChat(Packet3Chat packet) {
+		String var2 = packet.message;
 		if(var2.length() > 100) {
 			this.kickPlayer("Chat message too long");
 		} else {
@@ -294,7 +305,7 @@
 					logger.info(this.playerEntity.username + " failed to iron!");
 					this.sendPacket(new Packet3Chat("\u00a7cYou can\'t /iron again so soon!"));
 				} else {
-					MinecraftServer.playerList.put(this.playerEntity.username, Integer.valueOf(6000));
+					MinecraftServer.playerList.put(this.playerEntity.username, 6000);
 					logger.info(this.playerEntity.username + " ironed!");
 
 					for(var3 = 0; var3 < 4; ++var3) {
@@ -306,7 +317,7 @@
 					logger.info(this.playerEntity.username + " failed to wood!");
 					this.sendPacket(new Packet3Chat("\u00a7cYou can\'t /wood again so soon!"));
 				} else {
-					MinecraftServer.playerList.put(this.playerEntity.username, Integer.valueOf(6000));
+					MinecraftServer.playerList.put(this.playerEntity.username, 6000);
 					logger.info(this.playerEntity.username + " wooded!");
 
 					for(var3 = 0; var3 < 4; ++var3) {
@@ -328,14 +339,14 @@
 
 	}
 
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		if(var1.animate == 1) {
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		if(packet.animate == 1) {
 			this.playerEntity.swingItem();
 		}
 
 	}
 
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
 		this.netManager.networkShutdown("Quitting");
 	}
 
@@ -343,25 +354,25 @@
 		return this.netManager.getNumChunkDataPackets();
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		this.sendPacket(new Packet3Chat("\u00a77" + var1));
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		this.sendPacket(new Packet3Chat("\u00a77" + helpCommandMessage));
 	}
 
 	public String getUsername() {
 		return this.playerEntity.username;
 	}
 
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		if(var1.inventoryType == -1) {
-			this.playerEntity.inventory.mainInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -2) {
-			this.playerEntity.inventory.craftingInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -3) {
-			this.playerEntity.inventory.armorInventory = var1.inventory;
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		if(packet.inventoryType == -1) {
+			this.playerEntity.inventory.mainInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -2) {
+			this.playerEntity.inventory.craftingInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -3) {
+			this.playerEntity.inventory.armorInventory = packet.inventory;
 		}
 
 	}
@@ -372,12 +383,30 @@
 		this.netManager.addToSendQueue(new Packet5PlayerInventory(-3, this.playerEntity.inventory.armorInventory));
 	}
 
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		TileEntity var2 = this.mcServer.worldMngr.getBlockTileEntity(var1.xCoord, var1.yCoord, var1.zCoord);
-		if(var2 != null) {
-			var2.readFromNBT(var1.tileEntityNBT);
-			var2.onInventoryChanged();
-		}
-
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		TileEntity tileEntity2 = this.mcServer.worldMngr.getBlockTileEntity(packet.xCoord, packet.yCoord, packet.zCoord);
+		if(tileEntity2 != null) {
+			tileEntity2.readFromNBT(packet.tileEntityNBT);
+			tileEntity2.onInventoryChanged();
+		}
+	}
+
+	public void handleUseEntity(Packet7UseEntity packet7UseEntity1) {
+		WorldServer var2 = this.mcServer.worldMngr;
+		Entity var3 = var2.getEntityFromId(packet7UseEntity1.targetEntity);
+		if(var3 != null && this.playerEntity.canEntityBeSeen(var3) && this.playerEntity.getDistanceSqToEntity(var3) < 36.0D) {
+			if(packet7UseEntity1.isLeftClick == 0) {
+				this.playerEntity.interactWithEntity(var3);
+			} else if(packet7UseEntity1.isLeftClick == 1) {
+				this.playerEntity.attackEntity(var3);
+			}
+		}
+	}
+
+	public void handleRespawnPacket(Packet9Respawn var1) {
+		if(this.playerEntity.health <= 0) {
+			this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0);
+			this.kickPlayer(this.playerEntity.username);
+		}
 	}
 }
--- net/minecraft/src/PlayerInstance.java
+++ net/minecraft/src/PlayerInstance.java
@@ -19,33 +19,33 @@
 	private int maxZ;
 	final PlayerManager playerManager;
 
-	public PlayerInstance(PlayerManager var1, int var2, int var3) {
-		this.playerManager = var1;
+	public PlayerInstance(PlayerManager playerManager, int x, int z) {
+		this.playerManager = playerManager;
 		this.players = new ArrayList();
 		this.blocksToUpdate = new short[10];
 		this.numBlocksToUpdate = 0;
-		this.chunkX = var2;
-		this.chunkZ = var3;
-		this.currentChunk = new ChunkCoordIntPair(var2, var3);
-		PlayerManager.getMinecraftServer(var1).worldMngr.chunkProviderServer.loadChunk(var2, var3);
+		this.chunkX = x;
+		this.chunkZ = z;
+		this.currentChunk = new ChunkCoordIntPair(x, z);
+		PlayerManager.getMinecraftServer(playerManager).worldMngr.chunkProviderServer.loadChunk(x, z);
 	}
 
-	public void addPlayer(EntityPlayerMP var1) {
-		if(this.players.contains(var1)) {
-			throw new IllegalStateException("Failed to add player. " + var1 + " already is in chunk " + this.chunkX + ", " + this.chunkZ);
+	public void addPlayer(EntityPlayerMP entityPlayerMP) {
+		if(this.players.contains(entityPlayerMP)) {
+			throw new IllegalStateException("Failed to add player. " + entityPlayerMP + " already is in chunk " + this.chunkX + ", " + this.chunkZ);
 		} else {
-			var1.loadChunks.add(this.currentChunk);
-			var1.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos, true));
-			this.players.add(var1);
-			var1.loadedChunks.add(this.currentChunk);
+			entityPlayerMP.loadChunks.add(this.currentChunk);
+			entityPlayerMP.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos, true));
+			this.players.add(entityPlayerMP);
+			entityPlayerMP.loadedChunks.add(this.currentChunk);
 		}
 	}
 
-	public void removePlayer(EntityPlayerMP var1) {
-		if(!this.players.contains(var1)) {
-			(new IllegalStateException("Failed to remove player. " + var1 + " isn\'t in chunk " + this.chunkX + ", " + this.chunkZ)).printStackTrace();
+	public void removePlayer(EntityPlayerMP entityPlayerMP) {
+		if(!this.players.contains(entityPlayerMP)) {
+			(new IllegalStateException("Failed to remove player. " + entityPlayerMP + " isn\'t in chunk " + this.chunkX + ", " + this.chunkZ)).printStackTrace();
 		} else {
-			this.players.remove(var1);
+			this.players.remove(entityPlayerMP);
 			if(this.players.size() == 0) {
 				long var2 = (long)this.chunkX + 2147483647L | (long)this.chunkZ + 2147483647L << 32;
 				PlayerManager.getPlayerInstances(this.playerManager).removeObject(var2);
@@ -56,65 +56,65 @@
 				PlayerManager.getMinecraftServer(this.playerManager).worldMngr.chunkProviderServer.dropChunk(this.chunkX, this.chunkZ);
 			}
 
-			var1.loadedChunks.remove(this.currentChunk);
-			if(var1.loadChunks.contains(this.currentChunk)) {
-				var1.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.chunkX, this.chunkZ, false));
+			entityPlayerMP.loadedChunks.remove(this.currentChunk);
+			if(entityPlayerMP.loadChunks.contains(this.currentChunk)) {
+				entityPlayerMP.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.chunkX, this.chunkZ, false));
 			}
 
 		}
 	}
 
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
+	public void markBlockNeedsUpdate(int x, int y, int z) {
 		if(this.numBlocksToUpdate == 0) {
 			PlayerManager.getPlayerInstancesToUpdate(this.playerManager).add(this);
-			this.minX = this.maxX = var1;
-			this.minY = this.maxY = var2;
-			this.minZ = this.maxZ = var3;
-		}
-
-		if(this.minX > var1) {
-			this.minX = var1;
-		}
-
-		if(this.maxX < var1) {
-			this.maxX = var1;
-		}
-
-		if(this.minY > var2) {
-			this.minY = var2;
-		}
-
-		if(this.maxY < var2) {
-			this.maxY = var2;
-		}
-
-		if(this.minZ > var3) {
-			this.minZ = var3;
-		}
-
-		if(this.maxZ < var3) {
-			this.maxZ = var3;
+			this.minX = this.maxX = x;
+			this.minY = this.maxY = y;
+			this.minZ = this.maxZ = z;
+		}
+
+		if(this.minX > x) {
+			this.minX = x;
+		}
+
+		if(this.maxX < x) {
+			this.maxX = x;
+		}
+
+		if(this.minY > y) {
+			this.minY = y;
+		}
+
+		if(this.maxY < y) {
+			this.maxY = y;
+		}
+
+		if(this.minZ > z) {
+			this.minZ = z;
+		}
+
+		if(this.maxZ < z) {
+			this.maxZ = z;
 		}
 
 		if(this.numBlocksToUpdate < 10) {
-			short var4 = (short)(var1 << 12 | var3 << 8 | var2);
+			short s4 = (short)(x << 12 | z << 8 | y);
 
 			for(int var5 = 0; var5 < this.numBlocksToUpdate; ++var5) {
-				if(this.blocksToUpdate[var5] == var4) {
+				if(this.blocksToUpdate[var5] == s4) {
 					return;
 				}
 			}
 
-			this.blocksToUpdate[this.numBlocksToUpdate++] = var4;
+			this.blocksToUpdate[this.numBlocksToUpdate++] = s4;
 		}
 
 	}
 
-	public void sendTileEntity(Packet var1) {
+	public void sendTileEntity(Packet packet) {
 		for(int var2 = 0; var2 < this.players.size(); ++var2) {
 			EntityPlayerMP var3 = (EntityPlayerMP)this.players.get(var2);
 			if(var3.loadChunks.contains(this.currentChunk)) {
-				var3.playerNetServerHandler.sendPacket(var1);
+				var3.playerNetServerHandler.sendPacket(packet);
 			}
 		}
 
@@ -145,11 +145,11 @@
 					int var5 = this.maxY - this.minY + 2;
 					int var6 = this.maxZ - this.minZ + 1;
 					this.sendTileEntity(new Packet51MapChunk(var1, var2, var3, var4, var5, var6, PlayerManager.getMinecraftServer(this.playerManager).worldMngr));
-					List var7 = PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getTileEntityList(var1, var2, var3, var1 + var4, var2 + var5, var3 + var6);
+					List list7 = PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getTileEntityList(var1, var2, var3, var1 + var4, var2 + var5, var3 + var6);
 
-					for(int var8 = 0; var8 < var7.size(); ++var8) {
-						TileEntity var9 = (TileEntity)var7.get(var8);
-						this.sendTileEntity(new Packet59ComplexEntity(var9.xCoord, var9.yCoord, var9.zCoord, var9));
+					for(int var8 = 0; var8 < list7.size(); ++var8) {
+						TileEntity tileEntity9 = (TileEntity)list7.get(var8);
+						this.sendTileEntity(new Packet59ComplexEntity(tileEntity9.xCoord, tileEntity9.yCoord, tileEntity9.zCoord, tileEntity9));
 					}
 				} else {
 					this.sendTileEntity(new Packet52MultiBlockChange(this.chunkX, this.chunkZ, this.blocksToUpdate, this.numBlocksToUpdate, PlayerManager.getMinecraftServer(this.playerManager).worldMngr));
--- net/minecraft/src/Packet2Handshake.java
+++ net/minecraft/src/Packet2Handshake.java
@@ -10,20 +10,20 @@
 	public Packet2Handshake() {
 	}
 
-	public Packet2Handshake(String var1) {
-		this.username = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.username = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.username);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleHandshake(this);
+	public Packet2Handshake(String username) {
+		this.username = username;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.username = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.username);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleHandshake(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Vec3D.java
+++ net/minecraft/src/Vec3D.java
@@ -10,49 +10,49 @@
 	public double yCoord;
 	public double zCoord;
 
-	public static Vec3D createVectorHelper(double var0, double var2, double var4) {
-		return new Vec3D(var0, var2, var4);
+	public static Vec3D createVectorHelper(double x, double y, double z) {
+		return new Vec3D(x, y, z);
 	}
 
 	public static void initialize() {
 		nextVector = 0;
 	}
 
-	public static Vec3D createVector(double var0, double var2, double var4) {
+	public static Vec3D createVector(double x, double y, double z) {
 		if(nextVector >= vectorList.size()) {
 			vectorList.add(createVectorHelper(0.0D, 0.0D, 0.0D));
 		}
 
-		return ((Vec3D)vectorList.get(nextVector++)).setComponents(var0, var2, var4);
-	}
-
-	private Vec3D(double var1, double var3, double var5) {
-		if(var1 == -0.0D) {
-			var1 = 0.0D;
-		}
-
-		if(var3 == -0.0D) {
-			var3 = 0.0D;
-		}
-
-		if(var5 == -0.0D) {
-			var5 = 0.0D;
-		}
-
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
-	}
-
-	private Vec3D setComponents(double var1, double var3, double var5) {
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
+		return ((Vec3D)vectorList.get(nextVector++)).setComponents(x, y, z);
+	}
+
+	private Vec3D(double x, double y, double z) {
+		if(x == -0.0D) {
+			x = 0.0D;
+		}
+
+		if(y == -0.0D) {
+			y = 0.0D;
+		}
+
+		if(z == -0.0D) {
+			z = 0.0D;
+		}
+
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
+	}
+
+	private Vec3D setComponents(double x, double y, double z) {
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
 		return this;
 	}
 
-	public Vec3D subtract(Vec3D var1) {
-		return createVector(var1.xCoord - this.xCoord, var1.yCoord - this.yCoord, var1.zCoord - this.zCoord);
+	public Vec3D subtract(Vec3D vector) {
+		return createVector(vector.xCoord - this.xCoord, vector.yCoord - this.yCoord, vector.zCoord - this.zCoord);
 	}
 
 	public Vec3D normalize() {
@@ -60,32 +60,32 @@
 		return var1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / var1, this.yCoord / var1, this.zCoord / var1);
 	}
 
-	public Vec3D crossProduct(Vec3D var1) {
-		return createVector(this.yCoord * var1.zCoord - this.zCoord * var1.yCoord, this.zCoord * var1.xCoord - this.xCoord * var1.zCoord, this.xCoord * var1.yCoord - this.yCoord * var1.xCoord);
-	}
-
-	public Vec3D addVector(double var1, double var3, double var5) {
-		return createVector(this.xCoord + var1, this.yCoord + var3, this.zCoord + var5);
-	}
-
-	public double distanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
+	public Vec3D crossProduct(Vec3D vector) {
+		return createVector(this.yCoord * vector.zCoord - this.zCoord * vector.yCoord, this.zCoord * vector.xCoord - this.xCoord * vector.zCoord, this.xCoord * vector.yCoord - this.yCoord * vector.xCoord);
+	}
+
+	public Vec3D addVector(double x, double y, double z) {
+		return createVector(this.xCoord + x, this.yCoord + y, this.zCoord + z);
+	}
+
+	public double distanceTo(Vec3D vector) {
+		double var2 = vector.xCoord - this.xCoord;
+		double var4 = vector.yCoord - this.yCoord;
+		double var6 = vector.zCoord - this.zCoord;
 		return (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
 	}
 
-	public double squareDistanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
+	public double squareDistanceTo(Vec3D vector) {
+		double var2 = vector.xCoord - this.xCoord;
+		double var4 = vector.yCoord - this.yCoord;
+		double var6 = vector.zCoord - this.zCoord;
 		return var2 * var2 + var4 * var4 + var6 * var6;
 	}
 
-	public double squareDistanceTo(double var1, double var3, double var5) {
-		double var7 = var1 - this.xCoord;
-		double var9 = var3 - this.yCoord;
-		double var11 = var5 - this.zCoord;
+	public double squareDistanceTo(double x, double y, double z) {
+		double var7 = x - this.xCoord;
+		double var9 = y - this.yCoord;
+		double var11 = z - this.zCoord;
 		return var7 * var7 + var9 * var9 + var11 * var11;
 	}
 
@@ -93,38 +93,38 @@
 		return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
 	}
 
-	public Vec3D getIntermediateWithXValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var4 * var4 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.xCoord) / var4;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithYValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var6 * var6 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.yCoord) / var6;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithZValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var8 * var8 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.zCoord) / var8;
+	public Vec3D getIntermediateWithXValue(Vec3D vector, double xValue) {
+		double var4 = vector.xCoord - this.xCoord;
+		double var6 = vector.yCoord - this.yCoord;
+		double var8 = vector.zCoord - this.zCoord;
+		if(var4 * var4 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double var10 = (xValue - this.xCoord) / var4;
+			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithYValue(Vec3D vector, double yValue) {
+		double var4 = vector.xCoord - this.xCoord;
+		double var6 = vector.yCoord - this.yCoord;
+		double var8 = vector.zCoord - this.zCoord;
+		if(var6 * var6 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double var10 = (yValue - this.yCoord) / var6;
+			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithZValue(Vec3D vector, double zValue) {
+		double var4 = vector.xCoord - this.xCoord;
+		double var6 = vector.yCoord - this.yCoord;
+		double var8 = vector.zCoord - this.zCoord;
+		if(var8 * var8 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double var10 = (zValue - this.zCoord) / var8;
 			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
 		}
 	}
@@ -133,9 +133,9 @@
 		return "(" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + ")";
 	}
 
-	public void rotateAroundX(float var1) {
-		float var2 = MathHelper.cos(var1);
-		float var3 = MathHelper.sin(var1);
+	public void rotateAroundX(float x) {
+		float var2 = MathHelper.cos(x);
+		float var3 = MathHelper.sin(x);
 		double var4 = this.xCoord;
 		double var6 = this.yCoord * (double)var2 + this.zCoord * (double)var3;
 		double var8 = this.zCoord * (double)var2 - this.yCoord * (double)var3;
@@ -144,9 +144,9 @@
 		this.zCoord = var8;
 	}
 
-	public void rotateAroundY(float var1) {
-		float var2 = MathHelper.cos(var1);
-		float var3 = MathHelper.sin(var1);
+	public void rotateAroundY(float y) {
+		float var2 = MathHelper.cos(y);
+		float var3 = MathHelper.sin(y);
 		double var4 = this.xCoord * (double)var2 + this.zCoord * (double)var3;
 		double var6 = this.yCoord;
 		double var8 = this.zCoord * (double)var2 - this.xCoord * (double)var3;
--- net/minecraft/src/BlockObsidian.java
+++ net/minecraft/src/BlockObsidian.java
@@ -2,16 +2,16 @@
 
 import java.util.Random;
 
-public class BlockObsidian extends BlockStone {
+public class BlockObsidian extends Block {
 	public BlockObsidian(int var1, int var2) {
-		super(var1, var2);
+		super(var1, var2, Material.rock);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Block.obsidian.blockID;
 	}
 }
--- net/minecraft/src/RenderTNTPrimed.java
+++ net/minecraft/src/RenderTNTPrimed.java
@@ -9,12 +9,12 @@
 		this.shadowSize = 0.5F;
 	}
 
-	public void doRenderTNT(EntityTNTPrimed var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderTNT(EntityTNTPrimed entityTNTPrimed1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		float var10;
-		if((float)var1.fuse - var9 + 1.0F < 10.0F) {
-			var10 = 1.0F - ((float)var1.fuse - var9 + 1.0F) / 10.0F;
+		if((float)entityTNTPrimed1.fuse - var9 + 1.0F < 10.0F) {
+			var10 = 1.0F - ((float)entityTNTPrimed1.fuse - var9 + 1.0F) / 10.0F;
 			if(var10 < 0.0F) {
 				var10 = 0.0F;
 			}
@@ -29,16 +29,16 @@
 			GL11.glScalef(var11, var11, var11);
 		}
 
-		var10 = (1.0F - ((float)var1.fuse - var9 + 1.0F) / 100.0F) * 0.8F;
+		var10 = (1.0F - ((float)entityTNTPrimed1.fuse - var9 + 1.0F) / 100.0F) * 0.8F;
 		this.loadTexture("/terrain.png");
-		this.blockRenderer.renderBlockOnInventory(Block.tnt);
-		if(var1.fuse / 5 % 2 == 0) {
+		this.blockRenderer.renderBlockOnInventory(Block.tnt, 0);
+		if(entityTNTPrimed1.fuse / 5 % 2 == 0) {
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDisable(GL11.GL_LIGHTING);
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_DST_ALPHA);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, var10);
-			this.blockRenderer.renderBlockOnInventory(Block.tnt);
+			this.blockRenderer.renderBlockOnInventory(Block.tnt, 0);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL11.GL_LIGHTING);
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -3,15 +3,19 @@
 import java.util.Random;
 
 public class BlockBookshelf extends Block {
-	public BlockBookshelf(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 4 : this.blockIndexInTexture;
-	}
-
-	public int quantityDropped(Random var1) {
-		return 0;
+	public BlockBookshelf(int id, int tex) {
+		super(id, tex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 4 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random rand) {
+		return 3;
+	}
+
+	public int idDropped(int metadata, Random rand) {
+		return Item.book.shiftedIndex;
 	}
 }
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,9 +1,37 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
+import java.util.stream.Stream;
+
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.wood, Block.chest};
-
-	public ItemAxe(int var1, int var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+	private static final Block[] blocksEffectiveAgainst = new Block[] {
+			Block.planks,
+			Block.wood,
+			Block.leaves,
+			Block.chest,
+			Block.bookshelf,
+			Block.stairCompactWood,
+			Block.workbench,
+			Block.doorWood,
+			Block.jukebox,
+			Block.fence,
+			Block.woodStairDouble,
+			Block.woodStairSingle
+	};
+
+	public ItemAxe(int id, int var2) {
+		super(id, 3, Math.abs(var2), blocksEffectiveAgainst);
+		if (var2 < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return Stream.of(new Object[] {
+			"Break a log while crouching to fell trees.",
+			ItemTooltip.DESCRIPTION_COL
+		}, super.getDynamicTooltip()).flatMap(Stream::of).toArray();
 	}
 }
--- net/minecraft/src/BlockGravel.java
+++ net/minecraft/src/BlockGravel.java
@@ -7,7 +7,7 @@
 		super(var1, var2);
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return var2.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
+	public int idDropped(int metadata, Random rand) {
+		return rand.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
 	}
 }
--- net/minecraft/src/Packet16BlockItemSwitch.java
+++ net/minecraft/src/Packet16BlockItemSwitch.java
@@ -11,23 +11,23 @@
 	public Packet16BlockItemSwitch() {
 	}
 
-	public Packet16BlockItemSwitch(int var1, int var2) {
-		this.entityId = var1;
-		this.id = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.id = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.id);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockItemSwitch(this);
+	public Packet16BlockItemSwitch(int entityId, int id) {
+		this.entityId = entityId;
+		this.id = id;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.id = dataInputStream.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeShort(this.id);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockItemSwitch(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/NBTTagDouble.java
+++ net/minecraft/src/NBTTagDouble.java
@@ -10,16 +10,16 @@
 	public NBTTagDouble() {
 	}
 
-	public NBTTagDouble(double var1) {
-		this.doubleValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeDouble(this.doubleValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.doubleValue = var1.readDouble();
+	public NBTTagDouble(double value) {
+		this.doubleValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeDouble(this.doubleValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.doubleValue = dataInput.readDouble();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,15 +1,96 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
+
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice};
-	private int harvestLevel;
-
-	public ItemPickaxe(int var1, int var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
-		this.harvestLevel = var2;
+	private static final Block[] tier3 = new Block[] {
+			Block.obsidian,
+			Block.oreRuby,
+			Block.oreSapphire,
+			Block.refabricator
+	};
+	private static final Block[] tier2 = new Block[] {
+			Block.blockDiamond,
+			Block.oreDiamond,
+			Block.blockGold,
+			Block.oreGold,
+			Block.oreRedstone,
+			Block.oreRedstoneGlowing
+	};
+	private static final Block[] tier1 = new Block[] {
+			Block.blockSteel,
+			Block.oreIron
+	};
+
+	private static final Block[] blocksEffectiveAgainst = new Block[] {
+			Block.cobblestone,
+			Block.stairDouble,
+			Block.stairSingle,
+			Block.stone,
+			Block.polishedStone,
+			Block.cobblestoneMossy,
+			Block.oreIron,
+			Block.blockSteel,
+			Block.oreCoal,
+			Block.blockGold,
+			Block.oreGold,
+			Block.oreDiamond,
+			Block.blockDiamond,
+			Block.ice,
+			Block.mobSpawner,
+			Block.stoneOvenIdle,
+			Block.stoneOvenActive,
+			Block.stairCompactCobblestone,
+			Block.stairCompactStone,
+			Block.stairCompactPolishedStone,
+			Block.stairCompactStoneBricks,
+			Block.minecartTrack,
+			Block.doorSteel,
+			Block.obsidian,
+			Block.oreRuby,
+			Block.oreSapphire,
+			Block.blasterIdle,
+			Block.blasterActive,
+			Block.refabricator,
+			Block.speleothem,
+			Block.stoneBricks,
+			Block.brickStairDouble,
+			Block.brickStairSingle
+	};
+	private final int harvestLevel;
+
+	public ItemPickaxe(int id, int harvestLevel) {
+		super(id, 2, Math.abs(harvestLevel), blocksEffectiveAgainst);
+		this.harvestLevel = harvestLevel;
+		if (harvestLevel < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
+	public boolean canHarvestBlock(Block block) {
+//		return block == Block.obsidian
+//			? this.harvestLevel == 3
+//			: (block != Block.blockDiamond && block != Block.oreDiamond
+//				? (block != Block.blockGold && block != Block.oreGold
+//					? (block != Block.blockSteel && block != Block.oreIron
+//						? (block != Block.oreRedstone && block != Block.oreRedstoneGlowing
+//							? (block.material == Material.rock
+//								? true
+//								: block.material == Material.iron)
+//							: this.harvestLevel >= 2)
+//						: this.harvestLevel >= 1)
+//					: this.harvestLevel >= 2)
+//				: this.harvestLevel >= 2);
+		if (Arrays.asList(tier3).contains(block)) {
+			return this.harvestLevel >= 3;
+		}
+		if (Arrays.asList(tier2).contains(block)) {
+			return this.harvestLevel >= 2;
+		}
+		if (Arrays.asList(tier1).contains(block)) {
+			return this.harvestLevel >= 1;
+		}
+		return block.material == Material.rock || block.material == Material.iron;
 	}
 }
--- net/minecraft/src/RenderSheep.java
+++ net/minecraft/src/RenderSheep.java
@@ -6,9 +6,9 @@
 		this.setRenderPassModel(var2);
 	}
 
-	protected boolean renderFur(EntitySheep var1, int var2) {
+	protected boolean renderFur(EntitySheep entitySheep1, int var2) {
 		this.loadTexture("/mob/sheep_fur.png");
-		return var2 == 0 && !var1.sheared;
+		return var2 == 0 && !entitySheep1.sheared;
 	}
 
 	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
--- net/minecraft/src/ThreadLoginVerifier.java
+++ net/minecraft/src/ThreadLoginVerifier.java
@@ -8,26 +8,26 @@
 	final Packet1Login loginPacket;
 	final NetLoginHandler loginHandler;
 
-	ThreadLoginVerifier(NetLoginHandler var1, Packet1Login var2) {
-		this.loginHandler = var1;
-		this.loginPacket = var2;
+	ThreadLoginVerifier(NetLoginHandler netLoginHandler1, Packet1Login packet1Login2) {
+		this.loginHandler = netLoginHandler1;
+		this.loginPacket = packet1Login2;
 	}
 
 	public void run() {
 		try {
 			String var1 = NetLoginHandler.getServerId(this.loginHandler);
-			URL var2 = new URL("http://www.minecraft.net/game/checkserver.jsp?user=" + this.loginPacket.username + "&serverId=" + var1);
-			BufferedReader var3 = new BufferedReader(new InputStreamReader(var2.openStream()));
-			String var4 = var3.readLine();
-			var3.close();
+			URL uRL2 = new URL("http://www.minecraft.net/game/checkserver.jsp?user=" + this.loginPacket.username + "&serverId=" + var1);
+			BufferedReader bufferedReader3 = new BufferedReader(new InputStreamReader(uRL2.openStream()));
+			String var4 = bufferedReader3.readLine();
+			bufferedReader3.close();
 			System.out.println("THE REPLY IS " + var4);
 			if(var4.equals("YES")) {
 				NetLoginHandler.setLoginPacket(this.loginHandler, this.loginPacket);
 			} else {
 				this.loginHandler.kickUser("Failed to verify username!");
 			}
-		} catch (Exception var5) {
-			var5.printStackTrace();
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/Packet30Entity.java
+++ net/minecraft/src/Packet30Entity.java
@@ -16,23 +16,23 @@
 	public Packet30Entity() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntity(this);
+	public Packet30Entity(int entityID) {
+		this.entityId = entityID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntity(this);
 	}
 
 	public int getPacketSize() {
 		return 4;
-	}
-
-	public Packet30Entity(int var1) {
-		this.entityId = var1;
 	}
 }
--- net/minecraft/src/ChatLine.java
+++ net/minecraft/src/ChatLine.java
@@ -4,8 +4,8 @@
 	public String message;
 	public int updateCounter;
 
-	public ChatLine(String var1) {
-		this.message = var1;
+	public ChatLine(String message) {
+		this.message = message;
 		this.updateCounter = 0;
 	}
 }
--- net/minecraft/src/RedstoneUpdateInfo.java
+++ net/minecraft/src/RedstoneUpdateInfo.java
@@ -6,10 +6,10 @@
 	int z;
 	long updateTime;
 
-	public RedstoneUpdateInfo(int var1, int var2, int var3, long var4) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
-		this.updateTime = var4;
+	public RedstoneUpdateInfo(int x, int y, int z, long time) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
+		this.updateTime = time;
 	}
 }
--- net/minecraft/src/ServerConfigurationManager.java
+++ net/minecraft/src/ServerConfigurationManager.java
@@ -12,6 +12,8 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.server.MinecraftServer;
 
 public class ServerConfigurationManager {
@@ -28,13 +30,13 @@
 	private File opFile;
 	private PlayerNBTManager playerNBTManagerObj;
 
-	public ServerConfigurationManager(MinecraftServer var1) {
-		this.mcServer = var1;
-		this.bannedPlayersFile = var1.getFile("banned-players.txt");
-		this.ipBanFile = var1.getFile("banned-ips.txt");
-		this.opFile = var1.getFile("ops.txt");
-		this.playerManagerObj = new PlayerManager(var1);
-		this.maxPlayers = var1.propertyManagerObj.getIntProperty("max-players", 20);
+	public ServerConfigurationManager(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		this.bannedPlayersFile = minecraftServer.getFile("banned-players.txt");
+		this.ipBanFile = minecraftServer.getFile("banned-ips.txt");
+		this.opFile = minecraftServer.getFile("ops.txt");
+		this.playerManagerObj = new PlayerManager(minecraftServer);
+		this.maxPlayers = minecraftServer.propertyManagerObj.getIntProperty("max-players", 20);
 		this.readBannedPlayers();
 		this.loadBannedList();
 		this.loadOps();
@@ -75,19 +77,19 @@
 		this.playerEntities.remove(var1);
 	}
 
-	public EntityPlayerMP login(NetLoginHandler var1, String var2, String var3) {
+	public EntityPlayerMP login(NetLoginHandler netLoginHandler1, String var2, String var3) {
 		if(this.bannedPlayers.contains(var2.trim().toLowerCase())) {
-			var1.kickUser("You are banned from this server!");
+			netLoginHandler1.kickUser("You are banned from this server!");
 			return null;
 		} else {
-			String var4 = var1.netManager.getRemoteAddress().toString();
+			String var4 = netLoginHandler1.netManager.getRemoteAddress().toString();
 			var4 = var4.substring(var4.indexOf("/") + 1);
 			var4 = var4.substring(0, var4.indexOf(":"));
 			if(this.bannedIPs.contains(var4)) {
-				var1.kickUser("Your IP address is banned from this server!");
+				netLoginHandler1.kickUser("Your IP address is banned from this server!");
 				return null;
 			} else if(this.playerEntities.size() >= this.maxPlayers) {
-				var1.kickUser("The server is full!");
+				netLoginHandler1.kickUser("The server is full!");
 				return null;
 			} else {
 				for(int var5 = 0; var5 < this.playerEntities.size(); ++var5) {
@@ -110,10 +112,10 @@
 		this.playerManagerObj.markBlockNeedsUpdate(var1, var2, var3);
 	}
 
-	public void sendPacketToAllPlayers(Packet var1) {
+	public void sendPacketToAllPlayers(Packet packet1) {
 		for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
 			EntityPlayerMP var3 = (EntityPlayerMP)this.playerEntities.get(var2);
-			var3.playerNetServerHandler.sendPacket(var1);
+			var3.playerNetServerHandler.sendPacket(packet1);
 		}
 
 	}
@@ -145,37 +147,33 @@
 	private void readBannedPlayers() {
 		try {
 			this.bannedPlayers.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
 			String var2 = "";
 
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
+			while((var2 = bufferedReader1.readLine()) != null) {
 				this.bannedPlayers.add(var2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ban list: " + exception3);
 		}
 
 	}
 
 	private void writeBannedPlayers() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
-			Iterator var2 = this.bannedPlayers.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
+			Iterator iterator2 = this.bannedPlayers.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String var3 = (String)iterator2.next();
+				printWriter1.println(var3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ban list: " + exception4);
 		}
 
 	}
@@ -193,37 +191,33 @@
 	private void loadBannedList() {
 		try {
 			this.bannedIPs.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.ipBanFile));
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.ipBanFile));
 			String var2 = "";
 
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
+			while((var2 = bufferedReader1.readLine()) != null) {
 				this.bannedIPs.add(var2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ip ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ip ban list: " + exception3);
 		}
 
 	}
 
 	private void saveBannedList() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.ipBanFile, false));
-			Iterator var2 = this.bannedIPs.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.ipBanFile, false));
+			Iterator iterator2 = this.bannedIPs.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String var3 = (String)iterator2.next();
+				printWriter1.println(var3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ip ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ip ban list: " + exception4);
 		}
 
 	}
@@ -241,37 +235,33 @@
 	private void loadOps() {
 		try {
 			this.ops.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.opFile));
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.opFile));
 			String var2 = "";
 
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
+			while((var2 = bufferedReader1.readLine()) != null) {
 				this.ops.add(var2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ip ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ip ban list: " + exception3);
 		}
 
 	}
 
 	private void saveOps() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.opFile, false));
-			Iterator var2 = this.ops.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.opFile, false));
+			Iterator iterator2 = this.ops.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String var3 = (String)iterator2.next();
+				printWriter1.println(var3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ip ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ip ban list: " + exception4);
 		}
 
 	}
@@ -300,35 +290,59 @@
 	}
 
 	public void sendChatMessageToAllOps(String var1) {
-		Packet3Chat var2 = new Packet3Chat(var1);
+		Packet3Chat packet3Chat2 = new Packet3Chat(var1);
 
 		for(int var3 = 0; var3 < this.playerEntities.size(); ++var3) {
 			EntityPlayerMP var4 = (EntityPlayerMP)this.playerEntities.get(var3);
 			if(this.isOp(var4.username)) {
-				var4.playerNetServerHandler.sendPacket(var2);
+				var4.playerNetServerHandler.sendPacket(packet3Chat2);
 			}
 		}
 
 	}
 
-	public boolean sendPacketToPlayer(String var1, Packet var2) {
+	public boolean sendPacketToPlayer(String var1, Packet packet2) {
 		EntityPlayerMP var3 = this.getPlayerEntity(var1);
 		if(var3 != null) {
-			var3.playerNetServerHandler.sendPacket(var2);
+			var3.playerNetServerHandler.sendPacket(packet2);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void sentTileEntityToPlayer(int var1, int var2, int var3, TileEntity var4) {
-		this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(var1, var2, var3, var4), var1, var2, var3);
+	public void sentTileEntityToPlayer(int var1, int var2, int var3, TileEntity tileEntity4) {
+		this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(var1, var2, var3, tileEntity4), var1, var2, var3);
 	}
 
 	public void savePlayerStates() {
 		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
 			this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(var1));
 		}
-
+	}
+
+	public EntityPlayerMP recreatePlayerEntity(EntityPlayerMP var1, int var2) {
+		this.mcServer.entityTracker.removeTrackedPlayerSymmetric(var1);
+		this.mcServer.entityTracker.untrackEntity(var1);
+		this.playerManagerObj.removePlayer(var1);
+		this.playerEntities.remove(var1);
+		this.mcServer.worldMngr.removePlayer(var1);
+		EntityPlayerMP var4 = new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, var1.username, new ItemInWorldManager(this.mcServer.worldMngr));
+		var4.entityID = var1.entityID;
+		var4.playerNetServerHandler = var1.playerNetServerHandler;
+		WorldServer var5 = this.mcServer.worldMngr;
+
+		var5.chunkProviderServer.loadChunk((int)var4.posX >> 4, (int)var4.posZ >> 4);
+
+		while(var5.getCollidingBoundingBoxes(var4, var4.boundingBox).size() != 0) {
+			var4.setPosition(var4.posX, var4.posY + 1.0D, var4.posZ);
+		}
+
+		var4.playerNetServerHandler.sendPacket(new Packet9Respawn());
+		var4.playerNetServerHandler.teleportTo(var4.posX, var4.posY, var4.posZ, var4.rotationYaw, var4.rotationPitch);
+		var4.playerNetServerHandler.sendPacket(new Packet4UpdateTime(var5.worldTime));
+		this.playerManagerObj.addPlayer(var4);
+		this.playerEntities.add(var4);
+		return var4;
 	}
 }
--- net/minecraft/src/ModelQuadraped.java
+++ net/minecraft/src/ModelQuadraped.java
@@ -39,9 +39,9 @@
 	}
 
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleX = -(var5 / (180.0F / (float)Math.PI));
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.body.rotateAngleX = (float)Math.PI * 0.5F;
+		this.head.rotateAngleX = -(var5 / 57.295776F);
+		this.head.rotateAngleY = var4 / 57.295776F;
+		this.body.rotateAngleX = (float)Math.PI / 2F;
 		this.leg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
 		this.leg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
 		this.leg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.util.ArrayList;
+import java.util.Objects;
 import java.util.Random;
 
 public class Block {
@@ -20,11 +23,11 @@
 	public static final int[] lightOpacity = new int[256];
 	public static final boolean[] canBlockGrass = new boolean[256];
 	public static final int[] lightValue = new int[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stone = (new BlockStone(1, 1, BlockStoneType.STONE)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block cobblestone = (new BlockStone(4, 16, BlockStoneType.COBBLESTONE)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block planks = (new BlockPlanks(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
 	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
@@ -33,67 +36,111 @@
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
 	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep);
 	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreGold = (new BlockOre(14, 32, textureXY(6, 12))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreIron = (new BlockOre(15, 33, textureXY(7, 12))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreCoal = (new BlockOre(16, 34, textureXY(8, 12), 263)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
-	public static final Block clothRed = null;
-	public static final Block clothOrange = null;
-	public static final Block clothYellow = null;
-	public static final Block clothChartreuse = null;
-	public static final Block clothGreen = null;
-	public static final Block clothSpringGreen = null;
-	public static final Block clothCyan = null;
-	public static final Block clothCapri = null;
-	public static final Block clothUltramarine = null;
-	public static final Block clothViolet = null;
-	public static final Block clothPurple = null;
-	public static final Block clothMagenta = null;
-	public static final Block clothRose = null;
-	public static final Block clothDarkGray = null;
-	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
-	public static final Block clothWhite = null;
+	public static final Block polishedStone = (new BlockStone(21, 6, BlockStoneType.POLISHED)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block woodStairDouble = (new BlockStep(22, Material.wood, true, new BlockStepType[] {
+			new BlockStepType(textureXY(4, 0)),
+			new BlockStepType(textureXY(8, 9)),
+			new BlockStepType(textureXY(8, 10)),
+			new BlockStepType(textureXY(8, 11))
+	})).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block woodStairSingle = (new BlockStep(23, Material.wood, false, ((BlockStep) woodStairDouble).slabTypes)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block brickStairDouble = (new BlockStep(24, Material.rock, true, new BlockStepType[] {
+			new BlockStepType(textureXY(7, 0))
+	})).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block brickStairSingle = (new BlockStep(25, Material.rock, false, ((BlockStep) brickStairDouble).slabTypes)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stoneBricks = (new BlockStone(26, textureXY(13, 4), BlockStoneType.BRICK)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactStone = new BlockStairs(27, Material.rock, new int[] {
+			textureXY(1, 0),
+			textureXY(8, 6),
+			textureXY(8, 7),
+			textureXY(8, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactPolishedStone = new BlockStairs(28, Material.rock, new int[] {
+			textureXY(6, 0),
+			textureXY(10, 6),
+			textureXY(10, 7),
+			textureXY(10, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactStoneBricks = new BlockStairs(29, Material.rock, new int[] {
+			textureXY(13, 4),
+			textureXY(13, 6),
+			textureXY(13, 7),
+			textureXY(13, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block cloth = (new BlockWool(35, textureXY(4, 7), Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
+	public static final BlockFlower plantBlue = (BlockFlower)(new BlockFlower(36, textureXY(14, 0))).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
+	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F);
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
 	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairDouble = (new BlockStep(43, Material.rock, true, new BlockStepType[] {
+			new BlockStepType(textureXY(0, 1)),
+			new BlockStepType(textureXY(11, 6)),
+			new BlockStepType(textureXY(11, 7)),
+			new BlockStepType(textureXY(1, 0)),
+			new BlockStepType(textureXY(8, 6)),
+			new BlockStepType(textureXY(8, 7)),
+			new BlockStepType(textureXY(6, 0), true),
+			new BlockStepType(textureXY(10, 6), true),
+			new BlockStepType(textureXY(10, 7), true),
+			new BlockStepType(textureXY(8, 8)),
+			new BlockStepType(textureXY(11, 8)),
+			new BlockStepType(textureXY(10, 8), true),
+			new BlockStepType(textureXY(13, 4)),
+			new BlockStepType(textureXY(13, 6)),
+			new BlockStepType(textureXY(13, 7)),
+			new BlockStepType(textureXY(13, 8)),
+	})).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairSingle = (new BlockStep(44, Material.rock, false, ((BlockStep) stairDouble).slabTypes)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block bookshelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block cobblestoneMossy = (new BlockStone(48, 36, BlockStoneType.MOSSY)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
-	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
-	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
+	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep);
+	public static final BlockFire fire = (BlockFire) (new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactWood = new BlockStairs(53, planks);
+	public static final Block stairCompactWood = new BlockStairs(53, Material.wood, new int[] {
+			textureXY(4, 0),
+			textureXY(8, 9),
+			textureXY(8, 10),
+			textureXY(8, 11)
+	}).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreDiamond = (new BlockOre(56, 50, textureXY(9, 12), 264)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
 	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep);
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
 	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(0.875F);
 	public static final Block signStanding = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
 	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
 	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactStone = new BlockStairs(67, cobblestone);
+	public static final Block stairCompactCobblestone = new BlockStairs(67, Material.rock, new int[] {
+			textureXY(0, 1),
+			textureXY(11, 6),
+			textureXY(11, 7),
+			textureXY(11, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep);
 	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
 	public static final Block pressurePlateWood = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, textureXY(10, 12), false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, textureXY(10, 12), true)).setLightValue(0.625F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
@@ -105,6 +152,16 @@
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block speleothem = (new BlockSpeleothem(86, textureXY(0, 9))).setHardness(0.5F).setStepSound(soundStoneFootstep);
+	public static final Block oreRuby = (new BlockOre(87, textureXY(14, 6), textureXY(11, 12), 350, 3)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreSapphire = (new BlockOre(88, textureXY(14, 7), textureXY(12, 12), 351, 3)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block blockRuby = (new BlockOreBlock(89, textureXY(6, 7))).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final Block blockSapphire = (new BlockOreBlock(90, textureXY(7, 7))).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final Block blasterIdle = (new BlockBlaster(91, false)).setHardness(7.0F).setStepSound(soundMetalFootstep);
+	public static final Block blasterActive = (new BlockBlaster(92, true)).setHardness(7.0F).setStepSound(soundMetalFootstep).setLightValue(0.875F);
+	public static final Block refabricator = (new BlockRefabricator(93)).setHardness(10.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setLightValue(0.5F);
+	public static final Block boosterTrack = (new BlockMinecartTrack(94, 129)).setHardness(0.7F).setStepSound(soundMetalFootstep);
+	public static final Block starLantern = (new Block(95, textureXY(3, 8), Material.glass)).setHardness(0.5F).setStepSound(soundGlassFootstep).setLightValue(1.0F);
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float hardness;
@@ -120,46 +177,50 @@
 	public final Material material;
 	public float slipperiness;
 
-	protected Block(int var1, Material var2) {
+	protected static int textureXY(int x, int y) {
+		return y * 16 + x;
+	}
+
+	protected Block(int id, Material material) {
 		this.stepSound = soundPowderFootstep;
 		this.blockParticleGravity = 1.0F;
 		this.slipperiness = 0.6F;
-		if(blocksList[var1] != null) {
-			throw new IllegalArgumentException("Slot " + var1 + " is already occupied by " + blocksList[var1] + " when adding " + this);
+		if(blocksList[id] != null) {
+			throw new IllegalArgumentException("Slot " + id + " is already occupied by " + blocksList[id] + " when adding " + this);
 		} else {
-			this.material = var2;
-			blocksList[var1] = this;
-			this.blockID = var1;
+			this.material = material;
+			blocksList[id] = this;
+			this.blockID = id;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			opaqueCubeLookup[var1] = this.isOpaqueCube();
-			lightOpacity[var1] = this.isOpaqueCube() ? 255 : 0;
-			canBlockGrass[var1] = this.getCanBlockGrass();
-			isBlockContainer[var1] = false;
+			opaqueCubeLookup[id] = this.isOpaqueCube();
+			lightOpacity[id] = this.isOpaqueCube() ? 255 : 0;
+			canBlockGrass[id] = this.getCanBlockGrass();
+			isBlockContainer[id] = false;
 		}
 	}
 
-	protected Block(int var1, int var2, Material var3) {
-		this(var1, var3);
-		this.blockIndexInTexture = var2;
-	}
-
-	protected Block setStepSound(StepSound var1) {
-		this.stepSound = var1;
-		return this;
-	}
-
-	protected Block setLightOpacity(int var1) {
-		lightOpacity[this.blockID] = var1;
-		return this;
-	}
-
-	protected Block setLightValue(float var1) {
-		lightValue[this.blockID] = (int)(15.0F * var1);
-		return this;
-	}
-
-	protected Block setResistance(float var1) {
-		this.resistance = var1 * 3.0F;
+	protected Block(int id, int tex, Material material) {
+		this(id, material);
+		this.blockIndexInTexture = tex;
+	}
+
+	protected Block setStepSound(StepSound stepSound) {
+		this.stepSound = stepSound;
+		return this;
+	}
+
+	protected Block setLightOpacity(int opacity) {
+		lightOpacity[this.blockID] = opacity;
+		return this;
+	}
+
+	protected Block setLightValue(float value) {
+		lightValue[this.blockID] = (int)(15.0F * value);
+		return this;
+	}
+
+	protected Block setResistance(float resistance) {
+		this.resistance = resistance * 3.0F;
 		return this;
 	}
 
@@ -175,69 +236,73 @@
 		return 0;
 	}
 
-	protected Block setHardness(float var1) {
-		this.hardness = var1;
-		if(this.resistance < var1 * 5.0F) {
-			this.resistance = var1 * 5.0F;
+	protected Block setHardness(float hardness) {
+		this.hardness = hardness;
+		if(this.resistance < hardness * 5.0F) {
+			this.resistance = hardness * 5.0F;
 		}
 
 		return this;
 	}
 
-	protected void setTickOnLoad(boolean var1) {
-		tickOnLoad[this.blockID] = var1;
-	}
-
-	public void setBlockBounds(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.minX = (double)var1;
-		this.minY = (double)var2;
-		this.minZ = (double)var3;
-		this.maxX = (double)var4;
-		this.maxY = (double)var5;
-		this.maxZ = (double)var6;
-	}
-
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		return var1.getBrightness(var2, var3, var4);
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 && this.minY > 0.0D ? true : (var5 == 1 && this.maxY < 1.0D ? true : (var5 == 2 && this.minZ > 0.0D ? true : (var5 == 3 && this.maxZ < 1.0D ? true : (var5 == 4 && this.minX > 0.0D ? true : (var5 == 5 && this.maxX < 1.0D ? true : !var1.isBlockNormalCube(var2, var3, var4))))));
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.getBlockTextureFromSideAndMetadata(var5, var1.getBlockMetadata(var2, var3, var4));
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.getBlockTextureFromSide(var1);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
+	protected void setTickOnLoad(boolean ticksOnLoad) {
+		tickOnLoad[this.blockID] = ticksOnLoad;
+	}
+
+	public void setBlockBounds(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+		this.minX = (double)minX;
+		this.minY = (double)minY;
+		this.minZ = (double)minZ;
+		this.maxX = (double)maxX;
+		this.maxY = (double)maxY;
+		this.maxZ = (double)maxZ;
+	}
+
+	public float getBlockBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		return blockAccess.getBrightness(x, y, z);
+	}
+
+	public float getBlockRenderBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		return this.getBlockBrightness(blockAccess, x, y, z) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return side == 0 && this.minY > 0.0D ? true : (side == 1 && this.maxY < 1.0D || (side == 2 && this.minZ > 0.0D ? true : (side == 3 && this.maxZ < 1.0D ? true : (side == 4 && this.minX > 0.0D ? true : (side == 5 && this.maxX < 1.0D ? true : !blockAccess.isBlockNormalCube(x, y, z))))));
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return this.getBlockTextureFromSideAndMetadata(side, blockAccess.getBlockMetadata(x, y, z));
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.getBlockTextureFromSide(side);
+	}
+
+	public int getBlockTextureFromSide(int side) {
 		return this.blockIndexInTexture;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		AxisAlignedBB var7 = this.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-		if(var7 != null && var5.intersectsWith(var7)) {
-			var6.add(var7);
+	public void getCollidingBoundingBoxes(World worldObj, int x, int y, int z, AxisAlignedBB aabb, ArrayList<AxisAlignedBB> collidingBoundingBoxes) {
+		AxisAlignedBB axisAlignedBB7 = this.getCollisionBoundingBoxFromPool(worldObj, x, y, z);
+		if(axisAlignedBB7 != null && aabb.intersectsWith(axisAlignedBB7)) {
+			collidingBoundingBoxes.add(axisAlignedBB7);
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
 	}
 
 	public boolean isOpaqueCube() {
 		return true;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
+	public boolean canCollideCheck(int metadata, boolean var2) {
 		return this.isCollidable();
 	}
 
@@ -245,59 +310,71 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void onBlockDestroyedByPlayer(World worldObj, int x, int y, int z, int metadata) {
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
 	}
 
 	public int tickRate() {
 		return 10;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-	}
-
-	public int quantityDropped(Random var1) {
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+	}
+
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+	}
+
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return this.blockID;
 	}
 
-	public float blockStrength(EntityPlayer var1) {
-		return this.hardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			int var7 = this.quantityDropped(var1.rand);
+	public int metadataDropped(int metadata, Random rand) {
+		return 0;
+	}
+
+	public float blockStrength(EntityPlayer entityPlayer) {
+		return entityPlayer.creative ? Float.POSITIVE_INFINITY
+		: this.hardness < 0.0F ? 0.0F
+		: (!entityPlayer.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F
+		: entityPlayer.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
+	}
+
+	public void dropBlockAsItem(World worldObj, int x, int y, int z, int metadata) {
+		this.dropBlockAsItemWithChance(worldObj, x, y, z, metadata, 1.0F);
+	}
+
+	public void dropBlockAsItemWithChance(World worldObj, int x, int y, int z, int metadata, float chance) {
+		if(worldObj.canDoClientAction()) {
+			int var7 = this.quantityDropped(worldObj.rand);
 
 			for(int var8 = 0; var8 < var7; ++var8) {
-				if(var1.rand.nextFloat() <= var6) {
-					int var9 = this.idDropped(var5, var1.rand);
+				if(worldObj.rand.nextFloat() <= chance) {
+					int var9 = this.idDropped(metadata, worldObj.rand);
 					if(var9 > 0) {
+						ItemStack itemStack = new ItemStack(var9);
+						if(var9 < 256) {
+							itemStack.itemMetadata = this.metadataDropped(metadata, worldObj.rand);
+						}
+
 						float var10 = 0.7F;
-						double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, new ItemStack(var9));
-						var17.delayBeforeCanPickup = 10;
-						var1.spawnEntityInWorld(var17);
+						double var11 = (double)(worldObj.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+						double var13 = (double)(worldObj.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+						double var15 = (double)(worldObj.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+						EntityItem entityItem17 = new EntityItem(worldObj, (double)x + var11, (double)y + var13, (double)z + var15, itemStack);
+						entityItem17.delayBeforeCanPickup = 10;
+						worldObj.spawnEntityInWorld(entityItem17);
 					}
 				}
 			}
@@ -305,149 +382,149 @@
 		}
 	}
 
-	public float getExplosionResistance(Entity var1) {
+	public float getExplosionResistance(Entity entity) {
 		return this.resistance / 5.0F;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		var5 = var5.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		var6 = var6.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		Vec3D var7 = var5.getIntermediateWithXValue(var6, this.minX);
-		Vec3D var8 = var5.getIntermediateWithXValue(var6, this.maxX);
-		Vec3D var9 = var5.getIntermediateWithYValue(var6, this.minY);
-		Vec3D var10 = var5.getIntermediateWithYValue(var6, this.maxY);
-		Vec3D var11 = var5.getIntermediateWithZValue(var6, this.minZ);
-		Vec3D var12 = var5.getIntermediateWithZValue(var6, this.maxZ);
-		if(!this.isVecInsideYZBounds(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInsideYZBounds(var8)) {
-			var8 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var9)) {
-			var9 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var10)) {
-			var10 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var11)) {
-			var11 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var12)) {
-			var12 = null;
-		}
-
-		Vec3D var13 = null;
-		if(var7 != null && (var13 == null || var5.distanceTo(var7) < var5.distanceTo(var13))) {
-			var13 = var7;
-		}
-
-		if(var8 != null && (var13 == null || var5.distanceTo(var8) < var5.distanceTo(var13))) {
-			var13 = var8;
-		}
-
-		if(var9 != null && (var13 == null || var5.distanceTo(var9) < var5.distanceTo(var13))) {
-			var13 = var9;
-		}
-
-		if(var10 != null && (var13 == null || var5.distanceTo(var10) < var5.distanceTo(var13))) {
-			var13 = var10;
-		}
-
-		if(var11 != null && (var13 == null || var5.distanceTo(var11) < var5.distanceTo(var13))) {
-			var13 = var11;
-		}
-
-		if(var12 != null && (var13 == null || var5.distanceTo(var12) < var5.distanceTo(var13))) {
-			var13 = var12;
-		}
-
-		if(var13 == null) {
+	public MovingObjectPosition collisionRayTrace(World worldObj, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		vector1 = vector1.addVector((double)(-x), (double)(-y), (double)(-z));
+		vector2 = vector2.addVector((double)(-x), (double)(-y), (double)(-z));
+		Vec3D vec3D7 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D8 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D9 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D10 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D11 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D12 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInsideYZBounds(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInsideYZBounds(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D9)) {
+			vec3D9 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D10)) {
+			vec3D10 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D11)) {
+			vec3D11 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D12)) {
+			vec3D12 = null;
+		}
+
+		Vec3D vec3D13 = null;
+		if(vec3D7 != null && (vec3D13 == null || vector1.distanceTo(vec3D7) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D13 == null || vector1.distanceTo(vec3D8) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D8;
+		}
+
+		if(vec3D9 != null && (vec3D13 == null || vector1.distanceTo(vec3D9) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D9;
+		}
+
+		if(vec3D10 != null && (vec3D13 == null || vector1.distanceTo(vec3D10) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D10;
+		}
+
+		if(vec3D11 != null && (vec3D13 == null || vector1.distanceTo(vec3D11) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D11;
+		}
+
+		if(vec3D12 != null && (vec3D13 == null || vector1.distanceTo(vec3D12) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D12;
+		}
+
+		if(vec3D13 == null) {
 			return null;
 		} else {
 			byte var14 = -1;
-			if(var13 == var7) {
+			if(vec3D13 == vec3D7) {
 				var14 = 4;
 			}
 
-			if(var13 == var8) {
+			if(vec3D13 == vec3D8) {
 				var14 = 5;
 			}
 
-			if(var13 == var9) {
+			if(vec3D13 == vec3D9) {
 				var14 = 0;
 			}
 
-			if(var13 == var10) {
+			if(vec3D13 == vec3D10) {
 				var14 = 1;
 			}
 
-			if(var13 == var11) {
+			if(vec3D13 == vec3D11) {
 				var14 = 2;
 			}
 
-			if(var13 == var12) {
+			if(vec3D13 == vec3D12) {
 				var14 = 3;
 			}
 
-			return new MovingObjectPosition(var2, var3, var4, var14, var13.addVector((double)var2, (double)var3, (double)var4));
+			return new MovingObjectPosition(x, y, z, var14, vec3D13.addVector((double)x, (double)y, (double)z));
 		}
 	}
 
-	private boolean isVecInsideYZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXYBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
+	private boolean isVecInsideYZBounds(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXZBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXYBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void onBlockDestroyedByExplosion(World worldObj, int x, int y, int z) {
 	}
 
 	public int getRenderBlockPass() {
 		return 0;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int var5 = world.getBlockId(x, y, z);
 		return var5 == 0 || blocksList[var5].material.getIsLiquid();
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
 		return false;
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-	}
-
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-	}
-
-	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		return 16777215;
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onEntityWalking(World worldObj, int x, int y, int z, Entity entity) {
+	}
+
+	public void onBlockPlaced(World worldObj, int x, int y, int z, int metadata) {
+	}
+
+	public void onBlockClicked(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+	}
+
+	public void velocityToAddToEntity(World worldObj, int x, int y, int z, Entity entity, Vec3D velocityVector) {
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+	}
+
+	public int colorMultiplier(IBlockAccess blockAccess, int x, int y, int z) {
+		return 0xFFFFFF;
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
 		return false;
 	}
 
@@ -455,21 +532,21 @@
 		return false;
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
 		return false;
 	}
 
 	public void setBlockBoundsForItemRender() {
 	}
 
-	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var5);
+	public void harvestBlock(World worldObj, int x, int y, int z, int metadata) {
+		this.dropBlockAsItem(worldObj, x, y, z, metadata);
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
 		return true;
 	}
 
@@ -479,6 +556,22 @@
 				Item.itemsList[var0] = new ItemBlock(var0 - 256);
 			}
 		}
-
-	}
+	}
+
+	public int[] availableMetadata() {
+		return new int[] { 0 };
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		Block block = (Block) o;
+		return blockID == block.blockID;
+	}
+
+	public int hashCode() {
+		return Objects.hash(blockID);
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) { }
 }
--- net/minecraft/src/CraftingInventoryPlayerCB.java
+++ net/minecraft/src/CraftingInventoryPlayerCB.java
@@ -9,33 +9,37 @@
 		this.onCraftMatrixChanged(this.craftMatrix);
 	}
 
-	public void onCraftMatrixChanged(IInventory var1) {
+	public void onCraftMatrixChanged(IInventory inventory) {
 		int[] var2 = new int[9];
+		int[] metaMap = new int[9];
 
 		for(int var3 = 0; var3 < 3; ++var3) {
 			for(int var4 = 0; var4 < 3; ++var4) {
 				int var5 = -1;
+				int metadata = -1;
 				if(var3 < 2 && var4 < 2) {
 					ItemStack var6 = this.craftMatrix.getStackInSlot(var3 + var4 * 2);
 					if(var6 != null) {
 						var5 = var6.itemID;
+						metadata = var6.itemMetadata;
 					}
 				}
 
 				var2[var3 + var4 * 3] = var5;
+				metaMap[var3 + var4 * 3] = metadata;
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2, metaMap));
 	}
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		super.onCraftGuiClosed(var1);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		super.onCraftGuiClosed(entityPlayer);
 
 		for(int var2 = 0; var2 < 9; ++var2) {
 			ItemStack var3 = this.craftMatrix.getStackInSlot(var2);
 			if(var3 != null) {
-				var1.dropPlayerItem(var3);
+				entityPlayer.dropPlayerItem(var3);
 			}
 		}
 
--- net/minecraft/src/MovementInputFromOptions.java
+++ net/minecraft/src/MovementInputFromOptions.java
@@ -4,38 +4,42 @@
 	private boolean[] movementKeyStates = new boolean[10];
 	private GameSettings gameSettings;
 
-	public MovementInputFromOptions(GameSettings var1) {
-		this.gameSettings = var1;
+	public MovementInputFromOptions(GameSettings gameSettings) {
+		this.gameSettings = gameSettings;
 	}
 
-	public void checkKeyForMovementInput(int var1, boolean var2) {
+	public void checkKeyForMovementInput(int key, boolean state) {
 		byte var3 = -1;
-		if(var1 == this.gameSettings.keyBindForward.keyCode) {
+		if(key == this.gameSettings.keyBindForward.keyCode) {
 			var3 = 0;
 		}
 
-		if(var1 == this.gameSettings.keyBindBack.keyCode) {
+		if(key == this.gameSettings.keyBindBack.keyCode) {
 			var3 = 1;
 		}
 
-		if(var1 == this.gameSettings.keyBindLeft.keyCode) {
+		if(key == this.gameSettings.keyBindLeft.keyCode) {
 			var3 = 2;
 		}
 
-		if(var1 == this.gameSettings.keyBindRight.keyCode) {
+		if(key == this.gameSettings.keyBindRight.keyCode) {
 			var3 = 3;
 		}
 
-		if(var1 == this.gameSettings.keyBindJump.keyCode) {
+		if(key == this.gameSettings.keyBindJump.keyCode) {
 			var3 = 4;
 		}
 
-		if(var1 == this.gameSettings.keyBindSneak.keyCode) {
+		if(key == this.gameSettings.keyBindSneak.keyCode) {
 			var3 = 5;
 		}
 
+		if(key == this.gameSettings.keyBindRun.keyCode) {
+			var3 = 6;
+		}
+
 		if(var3 >= 0) {
-			this.movementKeyStates[var3] = var2;
+			this.movementKeyStates[var3] = state;
 		}
 
 	}
@@ -47,7 +51,7 @@
 
 	}
 
-	public void updatePlayerMoveState(EntityPlayer var1) {
+	public void updatePlayerMoveState(EntityPlayer entityPlayer) {
 		this.moveStrafe = 0.0F;
 		this.moveForward = 0.0F;
 		if(this.movementKeyStates[0]) {
@@ -68,10 +72,10 @@
 
 		this.jump = this.movementKeyStates[4];
 		this.sneak = this.movementKeyStates[5];
+		this.run = this.movementKeyStates[6];
 		if(this.sneak) {
 			this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
 			this.moveForward = (float)((double)this.moveForward * 0.3D);
 		}
-
 	}
 }
--- net/minecraft/src/EntityTracker.java
+++ net/minecraft/src/EntityTracker.java
@@ -4,6 +4,8 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
+
+import io.github.bluestaggo.mcdiverge.Packet38EntityStatus;
 import net.minecraft.server.MinecraftServer;
 
 public class EntityTracker {
@@ -12,28 +14,28 @@
 	private MinecraftServer mcServer;
 	private int maxTrackingDistanceThreshold;
 
-	public EntityTracker(MinecraftServer var1) {
-		this.mcServer = var1;
-		this.maxTrackingDistanceThreshold = var1.configManager.getMaxTrackingDistance();
+	public EntityTracker(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		this.maxTrackingDistanceThreshold = minecraftServer.configManager.getMaxTrackingDistance();
 	}
 
 	public void trackEntity(Entity var1) {
 		if(var1 instanceof EntityPlayerMP) {
 			this.trackEntity(var1, 512, 2);
 			EntityPlayerMP var2 = (EntityPlayerMP)var1;
-			Iterator var3 = this.trackedEntitySet.iterator();
+			Iterator iterator3 = this.trackedEntitySet.iterator();
 
-			while(var3.hasNext()) {
-				EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-				if(var4.trackedEntity != var2) {
-					var4.updatePlayerEntity(var2);
+			while(iterator3.hasNext()) {
+				EntityTrackerEntry entityTrackerEntry4 = (EntityTrackerEntry)iterator3.next();
+				if(entityTrackerEntry4.trackedEntity != var2) {
+					entityTrackerEntry4.updatePlayerEntity(var2);
 				}
 			}
 		} else if(var1 instanceof EntityItem) {
 			this.trackEntity(var1, 64, 20);
 		} else if(var1 instanceof EntityMinecart) {
 			this.trackEntity(var1, 160, 4);
-		} else if(var1 instanceof IAnimals) {
+		} else if(var1 instanceof IAnimal) {
 			this.trackEntity(var1, 160, 2);
 		}
 
@@ -47,53 +49,68 @@
 		if(this.trackedEntityHashTable.containsItem(var1.entityID)) {
 			throw new IllegalStateException("Entity is already tracked!");
 		} else {
-			EntityTrackerEntry var4 = new EntityTrackerEntry(var1, var2, var3);
-			this.trackedEntitySet.add(var4);
-			this.trackedEntityHashTable.addKey(var1.entityID, var4);
-			var4.updatePlayerEntities(this.mcServer.worldMngr.playerEntities);
+			EntityTrackerEntry entityTrackerEntry4 = new EntityTrackerEntry(var1, var2, var3);
+			this.trackedEntitySet.add(entityTrackerEntry4);
+			this.trackedEntityHashTable.addKey(var1.entityID, entityTrackerEntry4);
+			entityTrackerEntry4.updatePlayerEntities(this.mcServer.worldMngr.playerEntities);
 		}
 	}
 
 	public void untrackEntity(Entity var1) {
-		EntityTrackerEntry var2 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(var1.entityID);
-		if(var2 != null) {
-			this.trackedEntitySet.remove(var2);
-			var2.removeFromTrackedPlayers();
+		EntityTrackerEntry entityTrackerEntry2 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(var1.entityID);
+		if(entityTrackerEntry2 != null) {
+			this.trackedEntitySet.remove(entityTrackerEntry2);
+			entityTrackerEntry2.removeFromTrackedPlayers();
 		}
 
 	}
 
 	public void updateTrackedEntities() {
-		ArrayList var1 = new ArrayList();
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = this.trackedEntitySet.iterator();
+
+		while(iterator2.hasNext()) {
+			EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)iterator2.next();
+			entityTrackerEntry3.updatePlayerList(this.mcServer.worldMngr.playerEntities);
+			if(entityTrackerEntry3.playerEntitiesUpdated && entityTrackerEntry3.trackedEntity instanceof EntityPlayerMP) {
+				arrayList1.add((EntityPlayerMP)entityTrackerEntry3.trackedEntity);
+			}
+		}
+
+		for(int var6 = 0; var6 < arrayList1.size(); ++var6) {
+			EntityPlayerMP var7 = (EntityPlayerMP)arrayList1.get(var6);
+			Iterator iterator4 = this.trackedEntitySet.iterator();
+
+			while(iterator4.hasNext()) {
+				EntityTrackerEntry entityTrackerEntry5 = (EntityTrackerEntry)iterator4.next();
+				if(entityTrackerEntry5.trackedEntity != var7) {
+					entityTrackerEntry5.updatePlayerEntity(var7);
+				}
+			}
+		}
+
+	}
+
+	public void sendPacketToTrackedPlayers(Entity var1, Packet packet2) {
+		EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityID);
+		if(entityTrackerEntry3 != null) {
+			entityTrackerEntry3.sendPacketToTrackedPlayers(packet2);
+		}
+	}
+
+	public void sendPacketToTrackedPlayersAndTrackedEntity(Entity var1, Packet packet2) {
+		EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityID);
+		if(entityTrackerEntry3 != null) {
+			entityTrackerEntry3.sendPacketToTrackedPlayersAndTrackedEntity(packet2);
+		}
+	}
+
+	public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
 		Iterator var2 = this.trackedEntitySet.iterator();
 
 		while(var2.hasNext()) {
 			EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-			var3.updatePlayerList(this.mcServer.worldMngr.playerEntities);
-			if(var3.playerEntitiesUpdated && var3.trackedEntity instanceof EntityPlayerMP) {
-				var1.add((EntityPlayerMP)var3.trackedEntity);
-			}
-		}
-
-		for(int var6 = 0; var6 < var1.size(); ++var6) {
-			EntityPlayerMP var7 = (EntityPlayerMP)var1.get(var6);
-			Iterator var4 = this.trackedEntitySet.iterator();
-
-			while(var4.hasNext()) {
-				EntityTrackerEntry var5 = (EntityTrackerEntry)var4.next();
-				if(var5.trackedEntity != var7) {
-					var5.updatePlayerEntity(var7);
-				}
-			}
-		}
-
-	}
-
-	public void sendPacketToTrackedPlayers(Entity var1, Packet var2) {
-		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityID);
-		if(var3 != null) {
-			var3.sendPacketToTrackedPlayers(var2);
-		}
-
+			var3.removeTrackedPlayerSymmetric(var1);
+		}
 	}
 }
--- net/minecraft/src/CraftingInventoryCB.java
+++ net/minecraft/src/CraftingInventoryCB.java
@@ -6,14 +6,14 @@
 public class CraftingInventoryCB {
 	protected List list = new ArrayList();
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		InventoryPlayer var2 = var1.inventory;
-		if(var2.draggedItemStack != null) {
-			var1.dropPlayerItem(var2.draggedItemStack);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		InventoryPlayer inventoryPlayer2 = entityPlayer.inventory;
+		if(inventoryPlayer2.draggedItemStack != null) {
+			entityPlayer.dropPlayerItem(inventoryPlayer2.draggedItemStack);
 		}
 
 	}
 
-	public void onCraftMatrixChanged(IInventory var1) {
+	public void onCraftMatrixChanged(IInventory inventory) {
 	}
 }
--- net/minecraft/src/InventoryCraftResult.java
+++ net/minecraft/src/InventoryCraftResult.java
@@ -7,26 +7,26 @@
 		return 1;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.stackResult[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackResult[slot];
 	}
 
 	public String getInvName() {
 		return "Result";
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.stackResult[var1] != null) {
-			ItemStack var3 = this.stackResult[var1];
-			this.stackResult[var1] = null;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackResult[slot] != null) {
+			ItemStack var3 = this.stackResult[slot];
+			this.stackResult[slot] = null;
 			return var3;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.stackResult[var1] = var2;
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackResult[slot] = itemStack;
 	}
 
 	public int getInventoryStackLimit() {
--- net/minecraft/src/NetworkMasterThread.java
+++ net/minecraft/src/NetworkMasterThread.java
@@ -3,8 +3,8 @@
 class NetworkMasterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkMasterThread(NetworkManager var1) {
-		this.netManager = var1;
+	NetworkMasterThread(NetworkManager networkManager) {
+		this.netManager = networkManager;
 	}
 
 	public void run() {
@@ -13,18 +13,18 @@
 			if(NetworkManager.getReadThread(this.netManager).isAlive()) {
 				try {
 					NetworkManager.getReadThread(this.netManager).stop();
-				} catch (Throwable var3) {
+				} catch (Throwable throwable3) {
 				}
 			}
 
 			if(NetworkManager.getWriteThread(this.netManager).isAlive()) {
 				try {
 					NetworkManager.getWriteThread(this.netManager).stop();
-				} catch (Throwable var2) {
+				} catch (Throwable throwable2) {
 				}
 			}
-		} catch (InterruptedException var4) {
-			var4.printStackTrace();
+		} catch (InterruptedException interruptedException4) {
+			interruptedException4.printStackTrace();
 		}
 
 	}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockStoneType.java
@@ -1,0 +1,9 @@
+package io.github.bluestaggo.mcdiverge;
+
+public enum BlockStoneType {
+	STONE,
+	COBBLESTONE,
+	POLISHED,
+	BRICK,
+	MOSSY
+}
--- net/minecraft/src/EntityPlayerMP.java
+++ net/minecraft/src/EntityPlayerMP.java
@@ -4,6 +4,8 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+
+import io.github.bluestaggo.mcdiverge.Packet8UpdateHealth;
 import net.minecraft.server.MinecraftServer;
 
 public class EntityPlayerMP extends EntityPlayer {
@@ -15,49 +17,48 @@
 	public List loadedChunks = new LinkedList();
 	public Set loadChunks = new HashSet();
 	public double managedPosY;
+	private int lastHealth = -99999999;
 
-	public EntityPlayerMP(MinecraftServer var1, World var2, String var3, ItemInWorldManager var4) {
-		super(var2);
-		int var5 = var2.spawnX + this.rand.nextInt(20) - 10;
-		int var6 = var2.spawnZ + this.rand.nextInt(20) - 10;
-		int var7 = var2.getTopSolidOrLiquidBlock(var5, var6);
+	public EntityPlayerMP(MinecraftServer minecraftServer, World world, String username, ItemInWorldManager itemManager) {
+		super(world);
+		int var5 = world.spawnX + this.rand.nextInt(20) - 10;
+		int var6 = world.spawnZ + this.rand.nextInt(20) - 10;
+		int var7 = world.getTopSolidOrLiquidBlock(var5, var6);
 		this.setLocationAndAngles((double)var5 + 0.5D, (double)var7, (double)var6 + 0.5D, 0.0F, 0.0F);
-		this.mcServer = var1;
+		this.mcServer = minecraftServer;
 		this.stepHeight = 0.0F;
-		var4.thisPlayer = this;
-		this.username = var3;
-		this.theItemInWorldManager = var4;
+		itemManager.thisPlayer = this;
+		this.username = username;
+		this.theItemInWorldManager = itemManager;
 		this.yOffset = 0.0F;
 	}
 
+	public void heal(int health) {
+		super.heal(health);
+	}
+
 	public void onUpdate() {
 	}
 
-	public void onDeath(Entity var1) {
-	}
-
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		return false;
-	}
-
-	public void heal(int var1) {
+	public void onDeath(Entity entity) {
 	}
 
 	public void onUpdateEntity() {
 		super.onUpdate();
-		ChunkCoordIntPair var1 = null;
+
+		ChunkCoordIntPair chunkCoordIntPair1 = null;
 		double var2 = 0.0D;
 
 		for(int var4 = 0; var4 < this.loadedChunks.size(); ++var4) {
-			ChunkCoordIntPair var5 = (ChunkCoordIntPair)this.loadedChunks.get(var4);
-			double var6 = var5.a(this);
+			ChunkCoordIntPair chunkCoordIntPair5 = (ChunkCoordIntPair)this.loadedChunks.get(var4);
+			double var6 = chunkCoordIntPair5.a(this);
 			if(var4 == 0 || var6 < var2) {
-				var1 = var5;
-				var2 = var5.a(this);
+				chunkCoordIntPair1 = chunkCoordIntPair5;
+				var2 = chunkCoordIntPair5.a(this);
 			}
 		}
 
-		if(var1 != null) {
+		if(chunkCoordIntPair1 != null) {
 			boolean var8 = false;
 			if(var2 < 1024.0D) {
 				var8 = true;
@@ -68,17 +69,28 @@
 			}
 
 			if(var8) {
-				this.loadedChunks.remove(var1);
-				this.playerNetServerHandler.sendPacket(new Packet51MapChunk(var1.chunkXPos * 16, 0, var1.chunkZPos * 16, 16, 128, 16, this.mcServer.worldMngr));
-				List var9 = this.mcServer.worldMngr.getTileEntityList(var1.chunkXPos * 16, 0, var1.chunkZPos * 16, var1.chunkXPos * 16 + 16, 128, var1.chunkZPos * 16 + 16);
+				this.loadedChunks.remove(chunkCoordIntPair1);
+				this.playerNetServerHandler.sendPacket(new Packet51MapChunk(chunkCoordIntPair1.chunkXPos * 16, 0, chunkCoordIntPair1.chunkZPos * 16, 16, 128, 16, this.mcServer.worldMngr));
+				List list9 = this.mcServer.worldMngr.getTileEntityList(chunkCoordIntPair1.chunkXPos * 16, 0, chunkCoordIntPair1.chunkZPos * 16, chunkCoordIntPair1.chunkXPos * 16 + 16, 128, chunkCoordIntPair1.chunkZPos * 16 + 16);
 
-				for(int var10 = 0; var10 < var9.size(); ++var10) {
-					TileEntity var7 = (TileEntity)var9.get(var10);
-					this.playerNetServerHandler.sendPacket(new Packet59ComplexEntity(var7.xCoord, var7.yCoord, var7.zCoord, var7));
+				for(int var10 = 0; var10 < list9.size(); ++var10) {
+					TileEntity tileEntity7 = (TileEntity)list9.get(var10);
+					this.playerNetServerHandler.sendPacket(new Packet59ComplexEntity(tileEntity7.xCoord, tileEntity7.yCoord, tileEntity7.zCoord, tileEntity7));
 				}
 			}
 		}
 
+		if (this.health != this.lastHealth) {
+			this.playerNetServerHandler.sendPacket(new Packet8UpdateHealth(this.health));
+			this.lastHealth = this.health;
+		}
+	}
+
+	protected void updateFallState(double moveY, boolean onGround) {
+	}
+
+	public void handleFalling(double var1, boolean var3) {
+		super.updateFallState(var1, var3);
 	}
 
 	public void onLivingUpdate() {
@@ -87,13 +99,13 @@
 		super.onLivingUpdate();
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
-		if(!var1.isDead && var1 instanceof EntityItem) {
-			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem)var1).item, var2));
-			this.mcServer.entityTracker.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityID, this.entityID));
+	public void onItemPickup(Entity entity, int var2) {
+		if(!entity.isDead && entity instanceof EntityItem) {
+			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem)entity).item, var2));
+			this.mcServer.entityTracker.sendPacketToTrackedPlayers(entity, new Packet22Collect(entity.entityID, this.entityID));
 		}
 
-		super.onItemPickup(var1, var2);
+		super.onItemPickup(entity, var2);
 	}
 
 	public void swingItem() {
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -5,12 +5,16 @@
 import java.awt.datatransfer.Transferable;
 import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
 
 public class GuiScreen extends Gui {
+	private static int bgType = 0;
+
 	protected Minecraft mc;
 	public int width;
 	public int height;
@@ -19,16 +23,20 @@
 	protected FontRenderer fontRenderer;
 	private GuiButton selectedButton = null;
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public static void setBgType(int type) {
+		bgType = type;
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-			GuiButton var5 = (GuiButton)this.controlList.get(var4);
-			var5.drawButton(this.mc, var1, var2);
+			GuiButton guiButton5 = (GuiButton)this.controlList.get(var4);
+			guiButton5.drawButton(this.mc, mouseX, mouseY);
 		}
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1) {
+	protected void keyTyped(char character, int key) {
+		if(key == 1) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 			this.mc.setIngameFocus();
 		}
@@ -37,12 +45,12 @@
 
 	public static String getClipboardString() {
 		try {
-			Transferable var0 = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
-			if(var0 != null && var0.isDataFlavorSupported(DataFlavor.stringFlavor)) {
-				String var1 = (String)var0.getTransferData(DataFlavor.stringFlavor);
+			Transferable transferable0 = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
+			if(transferable0 != null && transferable0.isDataFlavorSupported(DataFlavor.stringFlavor)) {
+				String var1 = (String)transferable0.getTransferData(DataFlavor.stringFlavor);
 				return var1;
 			}
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 		}
 
 		return null;
@@ -51,11 +59,11 @@
 	protected void mouseClicked(int var1, int var2, int var3) {
 		if(var3 == 0) {
 			for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-				GuiButton var5 = (GuiButton)this.controlList.get(var4);
-				if(var5.mousePressed(this.mc, var1, var2)) {
-					this.selectedButton = var5;
+				GuiButton guiButton5 = (GuiButton)this.controlList.get(var4);
+				if(guiButton5.mousePressed(this.mc, var1, var2)) {
+					this.selectedButton = guiButton5;
 					this.mc.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
-					this.actionPerformed(var5);
+					this.actionPerformed(guiButton5);
 				}
 			}
 		}
@@ -70,7 +78,7 @@
 
 	}
 
-	protected void actionPerformed(GuiButton var1) {
+	protected void actionPerformed(GuiButton button) {
 	}
 
 	public void setWorldAndResolution(Minecraft var1, int var2, int var3) {
@@ -141,20 +149,26 @@
 
 	}
 
+	public static long backgroundElapsedTicks = 0;
+
 	public void drawBackground(int var1) {
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
-		Tessellator var2 = Tessellator.instance;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/dirt.png"));
+		Tessellator tessellator2 = Tessellator.instance;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/bg" + bgType + ".png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		float var3 = 32.0F;
-		var2.startDrawingQuads();
-		var2.setColorOpaque_I(4210752);
-		var2.addVertexWithUV(0.0D, (double)this.height, 0.0D, 0.0D, (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, (double)this.height, 0.0D, (double)((float)this.width / var3), (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, 0.0D, 0.0D, (double)((float)this.width / var3), (double)(0 + var1));
-		var2.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)(0 + var1));
-		var2.draw();
+		float var3 = 512.0F;
+
+		float var4 = backgroundElapsedTicks / 1000.0F;
+		float var5 = var4 / 2.0F;
+
+		tessellator2.startDrawingQuads();
+		tessellator2.setColorOpaque_I(4210752);
+		tessellator2.addVertexWithUV(0.0D,			this.height,	0.0D,	var4,								((float)this.height / var3 + (float)var1) + var5);
+		tessellator2.addVertexWithUV(this.width,	this.height,	0.0D,	((float)this.width / var3) + var4,	((float)this.height / var3 + (float)var1) + var5);
+		tessellator2.addVertexWithUV(this.width,	0.0D,			0.0D,	((float)this.width / var3) + var4,	var1 + var5);
+		tessellator2.addVertexWithUV(0.0D,			0.0D,			0.0D,	var4,								var1 + var5);
+		tessellator2.draw();
 	}
 
 	public boolean doesGuiPauseGame() {
--- net/minecraft/src/Render.java
+++ net/minecraft/src/Render.java
@@ -35,7 +35,7 @@
 		float var16 = var1.width * 1.4F;
 		GL11.glScalef(var16, var16, var16);
 		this.loadTexture("/terrain.png");
-		Tessellator var17 = Tessellator.instance;
+		Tessellator tessellator17 = Tessellator.instance;
 		float var18 = 1.0F;
 		float var19 = 0.5F;
 		float var20 = 0.0F;
@@ -43,20 +43,20 @@
 		GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
 		GL11.glTranslatef(0.0F, 0.0F, 0.4F + (float)((int)var21) * 0.02F);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var17.startDrawingQuads();
+		tessellator17.startDrawingQuads();
 
 		while(var21 > 0.0F) {
-			var17.addVertexWithUV((double)(var18 - var19), (double)(0.0F - var20), 0.0D, (double)var13, (double)var15);
-			var17.addVertexWithUV((double)(0.0F - var19), (double)(0.0F - var20), 0.0D, (double)var12, (double)var15);
-			var17.addVertexWithUV((double)(0.0F - var19), (double)(1.4F - var20), 0.0D, (double)var12, (double)var14);
-			var17.addVertexWithUV((double)(var18 - var19), (double)(1.4F - var20), 0.0D, (double)var13, (double)var14);
+			tessellator17.addVertexWithUV((double)(var18 - var19), (double)(0.0F - var20), 0.0D, (double)var13, (double)var15);
+			tessellator17.addVertexWithUV((double)(0.0F - var19), (double)(0.0F - var20), 0.0D, (double)var12, (double)var15);
+			tessellator17.addVertexWithUV((double)(0.0F - var19), (double)(1.4F - var20), 0.0D, (double)var12, (double)var14);
+			tessellator17.addVertexWithUV((double)(var18 - var19), (double)(1.4F - var20), 0.0D, (double)var13, (double)var14);
 			--var21;
 			--var20;
 			var18 *= 0.9F;
 			GL11.glTranslatef(0.0F, 0.0F, -0.04F);
 		}
 
-		var17.draw();
+		tessellator17.draw();
 		GL11.glPopMatrix();
 		GL11.glEnable(GL11.GL_LIGHTING);
 	}
@@ -81,8 +81,8 @@
 		double var25 = var2 - var13;
 		double var27 = var4 - var15;
 		double var29 = var6 - var17;
-		Tessellator var31 = Tessellator.instance;
-		var31.startDrawingQuads();
+		Tessellator tessellator31 = Tessellator.instance;
+		tessellator31.startDrawingQuads();
 
 		for(int var32 = var19; var32 <= var20; ++var32) {
 			for(int var33 = var21; var33 <= var22; ++var33) {
@@ -95,7 +95,7 @@
 			}
 		}
 
-		var31.draw();
+		tessellator31.draw();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glDepthMask(true);
@@ -106,7 +106,7 @@
 	}
 
 	private void renderShadowOnBlock(Block var1, double var2, double var4, double var6, int var8, int var9, int var10, float var11, float var12, double var13, double var15, double var17) {
-		Tessellator var19 = Tessellator.instance;
+		Tessellator tessellator19 = Tessellator.instance;
 		if(var1.renderAsNormalBlock()) {
 			double var20 = ((double)var11 - (var4 - ((double)var9 + var15)) / 2.0D) * 0.5D * (double)this.getWorldFromRenderManager().getBrightness(var8, var9, var10);
 			if(var20 >= 0.0D) {
@@ -114,97 +114,97 @@
 					var20 = 1.0D;
 				}
 
-				var19.setColorRGBA_F(1.0F, 1.0F, 1.0F, (float)var20);
+				tessellator19.setColorRGBA_F(1.0F, 1.0F, 1.0F, (float)var20);
 				double var22 = (double)var8 + var1.minX + var13;
 				double var24 = (double)var8 + var1.maxX + var13;
-				double var26 = (double)var9 + var1.minY + var15 + 1.0D / 64.0D;
+				double var26 = (double)var9 + var1.minY + var15 + 0.015625D;
 				double var28 = (double)var10 + var1.minZ + var17;
 				double var30 = (double)var10 + var1.maxZ + var17;
 				float var32 = (float)((var2 - var22) / 2.0D / (double)var12 + 0.5D);
 				float var33 = (float)((var2 - var24) / 2.0D / (double)var12 + 0.5D);
 				float var34 = (float)((var6 - var28) / 2.0D / (double)var12 + 0.5D);
 				float var35 = (float)((var6 - var30) / 2.0D / (double)var12 + 0.5D);
-				var19.addVertexWithUV(var22, var26, var28, (double)var32, (double)var34);
-				var19.addVertexWithUV(var22, var26, var30, (double)var32, (double)var35);
-				var19.addVertexWithUV(var24, var26, var30, (double)var33, (double)var35);
-				var19.addVertexWithUV(var24, var26, var28, (double)var33, (double)var34);
+				tessellator19.addVertexWithUV(var22, var26, var28, (double)var32, (double)var34);
+				tessellator19.addVertexWithUV(var22, var26, var30, (double)var32, (double)var35);
+				tessellator19.addVertexWithUV(var24, var26, var30, (double)var33, (double)var35);
+				tessellator19.addVertexWithUV(var24, var26, var28, (double)var33, (double)var34);
 			}
 		}
 	}
 
-	public static void renderOffsetAABB(AxisAlignedBB var0, double var1, double var3, double var5) {
+	public static void renderOffsetAABB(AxisAlignedBB axisAlignedBB0, double var1, double var3, double var5) {
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var7 = Tessellator.instance;
+		Tessellator tessellator7 = Tessellator.instance;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var7.startDrawingQuads();
-		var7.setTranslationD(var1, var3, var5);
-		var7.setNormal(0.0F, 0.0F, -1.0F);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.setNormal(0.0F, 0.0F, 1.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.setNormal(0.0F, -1.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.setNormal(0.0F, 1.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.setNormal(-1.0F, 0.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.setNormal(1.0F, 0.0F, 0.0F);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.setTranslationD(0.0D, 0.0D, 0.0D);
-		var7.draw();
+		tessellator7.startDrawingQuads();
+		tessellator7.setTranslationD(var1, var3, var5);
+		tessellator7.setNormal(0.0F, 0.0F, -1.0F);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.setNormal(0.0F, 0.0F, 1.0F);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.setNormal(0.0F, -1.0F, 0.0F);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.setNormal(0.0F, 1.0F, 0.0F);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.setNormal(-1.0F, 0.0F, 0.0F);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.setNormal(1.0F, 0.0F, 0.0F);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator7.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator7.setTranslationD(0.0D, 0.0D, 0.0D);
+		tessellator7.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
-	public static void renderAABB(AxisAlignedBB var0) {
-		Tessellator var1 = Tessellator.instance;
-		var1.startDrawingQuads();
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.draw();
+	public static void renderAABB(AxisAlignedBB axisAlignedBB0) {
+		Tessellator tessellator1 = Tessellator.instance;
+		tessellator1.startDrawingQuads();
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.minX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.minZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.maxY, axisAlignedBB0.maxZ);
+		tessellator1.addVertex(axisAlignedBB0.maxX, axisAlignedBB0.minY, axisAlignedBB0.maxZ);
+		tessellator1.draw();
 	}
 
-	public void setRenderManager(RenderManager var1) {
-		this.renderManager = var1;
+	public void setRenderManager(RenderManager renderManager1) {
+		this.renderManager = renderManager1;
 	}
 
 	public void doRenderShadowAndFire(Entity var1, double var2, double var4, double var6, float var8, float var9) {
--- net/minecraft/src/RenderHelper.java
+++ net/minecraft/src/RenderHelper.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderHelper {
@@ -22,13 +23,13 @@
 		float var0 = 0.4F;
 		float var1 = 0.6F;
 		float var2 = 0.0F;
-		Vec3D var3 = Vec3D.createVector((double)0.2F, 1.0D, (double)-0.7F).normalize();
-		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, setColorBuffer(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
+		Vec3D vec3D3 = Vec3D.createVector((double)0.2F, 1.0D, -0.699999988079071D).normalize();
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, setColorBuffer(vec3D3.xCoord, vec3D3.yCoord, vec3D3.zCoord, 0.0D));
 		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, setColorBuffer(var1, var1, var1, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_AMBIENT, setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_SPECULAR, setColorBuffer(var2, var2, var2, 1.0F));
-		var3 = Vec3D.createVector((double)-0.2F, 1.0D, (double)0.7F).normalize();
-		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_POSITION, setColorBuffer(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
+		vec3D3 = Vec3D.createVector(-0.20000000298023224D, 1.0D, (double)0.7F).normalize();
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_POSITION, setColorBuffer(vec3D3.xCoord, vec3D3.yCoord, vec3D3.zCoord, 0.0D));
 		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_DIFFUSE, setColorBuffer(var1, var1, var1, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_AMBIENT, setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_SPECULAR, setColorBuffer(var2, var2, var2, 1.0F));
--- net/minecraft/src/Packet20NamedEntitySpawn.java
+++ net/minecraft/src/Packet20NamedEntitySpawn.java
@@ -17,42 +17,42 @@
 	public Packet20NamedEntitySpawn() {
 	}
 
-	public Packet20NamedEntitySpawn(EntityPlayer var1) {
-		this.entityId = var1.entityID;
-		this.name = var1.username;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-		ItemStack var2 = var1.inventory.getCurrentItem();
+	public Packet20NamedEntitySpawn(EntityPlayer entityPlayer) {
+		this.entityId = entityPlayer.entityID;
+		this.name = entityPlayer.username;
+		this.xPosition = MathHelper.floor_double(entityPlayer.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityPlayer.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityPlayer.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityPlayer.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityPlayer.rotationPitch * 256.0F / 360.0F));
+		ItemStack var2 = entityPlayer.inventory.getCurrentItem();
 		this.currentItem = var2 == null ? 0 : var2.itemID;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.name = var1.readUTF();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.currentItem = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeUTF(this.name);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeShort(this.currentItem);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleNamedEntitySpawn(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.name = dataInputStream.readUTF();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.currentItem = dataInputStream.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeUTF(this.name);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeShort(this.currentItem);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleNamedEntitySpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemTooltip.java
@@ -1,0 +1,475 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import net.minecraft.src.Item;
+
+public class ItemTooltip {
+	public static ItemTooltip[] items = new ItemTooltip[32000];
+	public static ItemTooltip[][] fromMetadata = new ItemTooltip[32000][16];
+	public List<String> lines = new ArrayList<>();
+	public List<Integer> colors = new ArrayList<>();
+	public Pair<Integer, Integer> gradient;
+
+	public static final Pair<Integer, Integer> DEFAULT_GRAD = new Pair<>(0xC0333366, 0xC0101020);
+	public static final Pair<Integer, Integer> NOVELTY_GRAD = new Pair<>(0xC08f39e6, 0xC0442B8A);
+	public static final Pair<Integer, Integer> INVALID_GRAD = new Pair<>(0xC07E1212, 0xC02D0707);
+	public static final Pair<Integer, Integer> LEGENDARY_GRAD = new Pair<>(0xC0663366, 0xC0201020);
+	public static final int INVALID_COL = 0xFF5555;
+	public static final int DESCRIPTION_COL = 0xAAAAAA;
+	public static final int INFO_COL = 0xAAAA66;
+	public static final int UNCOMMON_COL = 0xFFFF55;
+	public static final int RARE_COL = 0x55FFFF;
+	public static final int LEGENDARY_COL = 0xFF55FF;
+
+	static {
+		items[1] = new ItemTooltip("Stone");
+		fromMetadata[1][1] = new ItemTooltip("Marble");
+		fromMetadata[1][2] = new ItemTooltip("Slate");
+		fromMetadata[1][3] = new ItemTooltip("Granite");
+		items[2] = new ItemTooltip("Grass");
+		items[3] = new ItemTooltip("Dirt");
+		items[4] = new ItemTooltip("Cobblestone");
+		fromMetadata[4][1] = new ItemTooltip("Cobbled Marble");
+		fromMetadata[4][2] = new ItemTooltip("Cobbled Slate");
+		fromMetadata[4][3] = new ItemTooltip("Cobbled Granite");
+		items[5] = new ItemTooltip("Planks");
+		fromMetadata[5][0] = new ItemTooltip("Oak Planks");
+		fromMetadata[5][1] = new ItemTooltip("Spruce Planks");
+		fromMetadata[5][2] = new ItemTooltip("Maple Planks");
+		fromMetadata[5][3] = new ItemTooltip("Mahogany Planks");
+		items[6] = new ItemTooltip("Sapling", "Grows into a tree", DESCRIPTION_COL);
+		fromMetadata[6][0] = new ItemTooltip("Oak Sapling", "Grows into an oak tree", DESCRIPTION_COL);
+		fromMetadata[6][1] = new ItemTooltip("Spruce Sapling", "Grows into a spruce tree", DESCRIPTION_COL);
+		fromMetadata[6][2] = new ItemTooltip("Maple Sapling", "Grows into a maple tree", DESCRIPTION_COL);
+		fromMetadata[6][3] = new ItemTooltip("Mahogany Sapling", "Grows into a mahogany tree", DESCRIPTION_COL);
+		items[7] = ItemTooltip.invalid("Bedrock");
+		items[8] = ItemTooltip.invalid("Flowing Water");
+		items[9] = ItemTooltip.invalid("Still Water");
+		items[10] = ItemTooltip.invalid("Flowing Lava");
+		items[11] = ItemTooltip.invalid("Still Lava");
+		items[12] = new ItemTooltip("Sand");
+		items[13] = new ItemTooltip("Gravel");
+		items[14] = new ItemTooltip("Gold Ore", UNCOMMON_COL);
+		items[15] = new ItemTooltip("Iron Ore", UNCOMMON_COL);
+		items[16] = new ItemTooltip("Coal Ore");
+		items[17] = new ItemTooltip("Log");
+		fromMetadata[17][0] = new ItemTooltip("Oak Log");
+		fromMetadata[17][1] = new ItemTooltip("Spruce Log");
+		fromMetadata[17][2] = new ItemTooltip("Maple Log");
+		fromMetadata[17][3] = new ItemTooltip("Mahogany Log");
+		items[18] = new ItemTooltip("Leaves");
+		fromMetadata[18][0] = new ItemTooltip("Oak Leaves");
+		fromMetadata[18][1] = new ItemTooltip("Spruce Leaves");
+		fromMetadata[18][2] = new ItemTooltip("Maple Leaves");
+		fromMetadata[18][3] = new ItemTooltip("Mahogany Leaves");
+		items[19] = new ItemTooltip("Sponge");
+		items[20] = new ItemTooltip("Glass");
+		items[21] = new ItemTooltip("Polished Stone");
+		fromMetadata[21][1] = new ItemTooltip("Polished Marble");
+		fromMetadata[21][2] = new ItemTooltip("Polished Slate");
+		fromMetadata[21][3] = new ItemTooltip("Polished Granite");
+		items[22] = ItemTooltip.invalid("Double Plank Slab");
+		fromMetadata[22][0] = ItemTooltip.invalid("Double Oak Plank Slab");
+		fromMetadata[22][1] = ItemTooltip.invalid("Double Spruce Plank Slab");
+		fromMetadata[22][2] = ItemTooltip.invalid("Double Maple Plank Slab");
+		fromMetadata[22][3] = ItemTooltip.invalid("Double Mahogany Plank Slab");
+		items[23] = new ItemTooltip("Plank Slab");
+		fromMetadata[23][0] = new ItemTooltip("Oak Plank Slab");
+		fromMetadata[23][1] = new ItemTooltip("Spruce Plank Slab");
+		fromMetadata[23][2] = new ItemTooltip("Maple Plank Slab");
+		fromMetadata[23][3] = new ItemTooltip("Mahogany Plank Slab");
+		items[24] = ItemTooltip.invalid("Double Brick Slab");
+		items[25] = new ItemTooltip("Brick Slab");
+		items[26] = new ItemTooltip("Stone Bricks");
+		fromMetadata[26][1] = new ItemTooltip("Marble Bricks");
+		fromMetadata[26][2] = new ItemTooltip("Slate Bricks");
+		fromMetadata[26][3] = new ItemTooltip("Granite Bricks");
+		items[27] = ItemTooltip.invalid("Stone Stairs");
+		fromMetadata[27][0] = new ItemTooltip("Stone Stairs");
+		fromMetadata[27][4] = new ItemTooltip("Marble Stairs");
+		fromMetadata[27][8] = new ItemTooltip("Slate Stairs");
+		fromMetadata[27][12] = new ItemTooltip("Granite Stairs");
+		items[28] = ItemTooltip.invalid("Polished Stone Stairs");
+		fromMetadata[28][0] = new ItemTooltip("Polished Stone Stairs");
+		fromMetadata[28][4] = new ItemTooltip("Polished Marble Stairs");
+		fromMetadata[28][8] = new ItemTooltip("Polished Slate Stairs");
+		fromMetadata[28][12] = new ItemTooltip("Polished Granite Stairs");
+		items[29] = ItemTooltip.invalid("Stone Brick Stairs");
+		fromMetadata[29][0] = new ItemTooltip("Stone Brick Stairs");
+		fromMetadata[29][4] = new ItemTooltip("Marble Brick Stairs");
+		fromMetadata[29][8] = new ItemTooltip("Slate Brick Stairs");
+		fromMetadata[29][12] = new ItemTooltip("Granite Brick Stairs");
+		items[35] = new ItemTooltip("Wool");
+		fromMetadata[35][0] = new ItemTooltip("White Wool");
+		fromMetadata[35][1] = new ItemTooltip("Red Wool");
+		fromMetadata[35][2] = new ItemTooltip("Orange Wool");
+		fromMetadata[35][3] = new ItemTooltip("Yellow Wool");
+		fromMetadata[35][4] = new ItemTooltip("Chartreuse Wool");
+		fromMetadata[35][5] = new ItemTooltip("Green Wool");
+		fromMetadata[35][6] = new ItemTooltip("Spring Green Wool");
+		fromMetadata[35][7] = new ItemTooltip("Cyan Wool");
+		fromMetadata[35][8] = new ItemTooltip("Capri Wool");
+		fromMetadata[35][9] = new ItemTooltip("Ultramarine Wool");
+		fromMetadata[35][10] = new ItemTooltip("Violet Wool");
+		fromMetadata[35][11] = new ItemTooltip("Purple Wool");
+		fromMetadata[35][12] = new ItemTooltip("Magenta Wool");
+		fromMetadata[35][13] = new ItemTooltip("Rose Wool");
+		fromMetadata[35][14] = new ItemTooltip("Black Wool");
+		fromMetadata[35][15] = new ItemTooltip("Gray Wool");
+		items[36] = new ItemTooltip("Cornflower");
+		items[37] = new ItemTooltip("Dandelion");
+		items[38] = new ItemTooltip("Rose");
+		items[39] = new ItemTooltip("Brown Mushroom");
+		items[40] = new ItemTooltip("Red Mushroom");
+		items[41] = new ItemTooltip("Block of Gold", UNCOMMON_COL);
+		items[42] = new ItemTooltip("Block of Iron", UNCOMMON_COL);
+		items[43] = ItemTooltip.invalid("Double Stone Slab");
+		fromMetadata[43][0] = ItemTooltip.invalid("Double Cobblestone Slab");
+		fromMetadata[43][1] = ItemTooltip.invalid("Double Cobbled Marble Slab");
+		fromMetadata[43][2] = ItemTooltip.invalid("Double Cobbled Slate Slab");
+		fromMetadata[43][3] = ItemTooltip.invalid("Double Stone Slab");
+		fromMetadata[43][4] = ItemTooltip.invalid("Double Marble Slab");
+		fromMetadata[43][5] = ItemTooltip.invalid("Double Slate Slab");
+		fromMetadata[43][6] = ItemTooltip.invalid("Double Polished Stone Slab");
+		fromMetadata[43][7] = ItemTooltip.invalid("Double Polished Marble Slab");
+		fromMetadata[43][8] = ItemTooltip.invalid("Double Polished Slate Slab");
+		fromMetadata[43][9] = ItemTooltip.invalid("Double Granite Slab");
+		fromMetadata[43][10] = ItemTooltip.invalid("Double Cobbled Granite Slab");
+		fromMetadata[43][11] = ItemTooltip.invalid("Double Polished Granite Slab");
+		fromMetadata[43][12] = ItemTooltip.invalid("Double Stone Brick Slab");
+		fromMetadata[43][13] = ItemTooltip.invalid("Double Marble Brick Slab");
+		fromMetadata[43][14] = ItemTooltip.invalid("Double Slate Brick Slab");
+		fromMetadata[43][15] = ItemTooltip.invalid("Double Granite Brick Slab");
+		items[44] = new ItemTooltip("Stone Slab");
+		fromMetadata[44][0] = new ItemTooltip("Cobblestone Slab");
+		fromMetadata[44][1] = new ItemTooltip("Cobbled Marble Slab");
+		fromMetadata[44][2] = new ItemTooltip("Cobbled Slate Slab");
+		fromMetadata[44][3] = new ItemTooltip("Stone Slab");
+		fromMetadata[44][4] = new ItemTooltip("Marble Slab");
+		fromMetadata[44][5] = new ItemTooltip("Slate Slab");
+		fromMetadata[44][6] = new ItemTooltip("Polished Stone Slab");
+		fromMetadata[44][7] = new ItemTooltip("Polished Marble Slab");
+		fromMetadata[44][8] = new ItemTooltip("Polished Slate Slab");
+		fromMetadata[44][9] = new ItemTooltip("Granite Slab");
+		fromMetadata[44][10] = new ItemTooltip("Cobbled Granite Slab");
+		fromMetadata[44][11] = new ItemTooltip("Polished Granite Slab");
+		fromMetadata[44][12] = new ItemTooltip("Stone Brick Slab");
+		fromMetadata[44][13] = new ItemTooltip("Marble Brick Slab");
+		fromMetadata[44][14] = new ItemTooltip("Slate Brick Slab");
+		fromMetadata[44][15] = new ItemTooltip("Granite Brick Slab");
+		items[45] = new ItemTooltip("Bricks");
+		items[46] = new ItemTooltip("TNT", UNCOMMON_COL, "Punch for an explosion", DESCRIPTION_COL);
+		items[47] = new ItemTooltip("Bookshelf");
+		items[48] = new ItemTooltip("Mossy Cobblestone");
+		fromMetadata[48][1] = new ItemTooltip("Mossy Cobbled Marble");
+		fromMetadata[48][2] = new ItemTooltip("Mossy Cobbled Slate");
+		fromMetadata[48][3] = new ItemTooltip("Mossy Cobbled Granite");
+		items[49] = new ItemTooltip("Obsidian", RARE_COL);
+		items[50] = new ItemTooltip("Torch");
+		items[51] = ItemTooltip.invalid("Fire");
+		items[52] = ItemTooltip.invalid("Mob Spawner");
+		items[53] = ItemTooltip.invalid("Plank Stairs");
+		fromMetadata[53][0] = new ItemTooltip("Oak Plank Stairs");
+		fromMetadata[53][4] = new ItemTooltip("Spruce Plank Stairs");
+		fromMetadata[53][8] = new ItemTooltip("Maple Plank Stairs");
+		fromMetadata[53][12] = new ItemTooltip("Mahogany Plank Stairs");
+		items[54] = new ItemTooltip("Chest");
+		items[55] = ItemTooltip.invalid("Redstone Dust (Block)");
+		items[56] = new ItemTooltip("Diamond Ore", RARE_COL);
+		items[57] = new ItemTooltip("Block of Diamond", RARE_COL);
+		items[58] = new ItemTooltip("Crafting Table", "The basic tool for crafting", DESCRIPTION_COL);
+		items[59] = ItemTooltip.invalid("Crops");
+		items[60] = ItemTooltip.invalid("Farmland");
+		items[61] = new ItemTooltip("Furnace", "Used for cooking items", DESCRIPTION_COL);
+		items[62] = ItemTooltip.invalid("Lit Furnace");
+		items[63] = ItemTooltip.invalid("Sign (Block)");
+		items[64] = ItemTooltip.invalid("Wooden Door (Block)");
+		items[65] = new ItemTooltip("Ladder");
+		items[66] = new ItemTooltip("Minecart Track", UNCOMMON_COL, "Used for travel with minecarts", DESCRIPTION_COL);
+		items[67] = ItemTooltip.invalid("Cobblestone Stairs");
+		fromMetadata[67][0] = new ItemTooltip("Cobblestone Stairs");
+		fromMetadata[67][4] = new ItemTooltip("Cobbled Marble Stairs");
+		fromMetadata[67][8] = new ItemTooltip("Cobbled Slate Stairs");
+		fromMetadata[67][12] = new ItemTooltip("Cobbled Granite Stairs");
+		items[68] = ItemTooltip.invalid("Wall Sign (Block)");
+		items[69] = new ItemTooltip("Lever",
+				"Can be switched to toggle", DESCRIPTION_COL,
+				"a redstone signal", DESCRIPTION_COL);
+		items[70] = new ItemTooltip("Stone Pressure Plate",
+				"Emits a redstone signal when", DESCRIPTION_COL,
+				"a player steps on it", DESCRIPTION_COL);
+		items[71] = ItemTooltip.invalid("Iron Door (Block)");
+		items[72] = new ItemTooltip("Wooden Pressure Plate",
+				"Emits a redstone signal when", DESCRIPTION_COL,
+				"something steps on it", DESCRIPTION_COL);
+		items[73] = new ItemTooltip("Redstone Ore", RARE_COL);
+		items[74] = ItemTooltip.invalid("Glowing Redstone Ore");
+		items[75] = ItemTooltip.invalid("Redstone Torch (Off)");
+		items[76] = new ItemTooltip("Redstone Torch", RARE_COL);
+		items[77] = new ItemTooltip("Stone Button", "Press to emit a redstone signal", DESCRIPTION_COL);
+		items[78] = new ItemTooltip("Snow");
+		items[79] = new ItemTooltip("Ice");
+		items[80] = new ItemTooltip("Snow Block");
+		items[81] = new ItemTooltip("Cactus", "Hurts on contact", DESCRIPTION_COL);
+		items[82] = new ItemTooltip("Clay Block");
+		items[83] = ItemTooltip.invalid("Sugar Cane (Block)");
+		items[84] = new ItemTooltip("Jukebox", RARE_COL, "Can play music discs", DESCRIPTION_COL);
+		items[85] = new ItemTooltip("Fence");
+		items[86] = new ItemTooltip("Speleothem");
+		items[87] = new ItemTooltip(LEGENDARY_GRAD, "Ruby Ore", LEGENDARY_COL);
+		items[88] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire Ore", LEGENDARY_COL);
+		items[89] = new ItemTooltip(LEGENDARY_GRAD, "Block of Ruby", LEGENDARY_COL);
+		items[90] = new ItemTooltip(LEGENDARY_GRAD, "Block of Sapphire", LEGENDARY_COL);
+		items[91] = new ItemTooltip(LEGENDARY_GRAD, "Blaster", LEGENDARY_COL,
+				"Smelt items at quadruple", DESCRIPTION_COL,
+				"the speed of a furnace but", DESCRIPTION_COL,
+				"uses double the fuel", DESCRIPTION_COL);
+		items[92] = ItemTooltip.invalid("Lit Blaster");
+		items[93] = new ItemTooltip(LEGENDARY_GRAD, "Refabricator", LEGENDARY_COL,
+				"Duplicates or repairs items", DESCRIPTION_COL,
+				"from the power of", DESCRIPTION_COL,
+				"star dust", DESCRIPTION_COL);
+		items[94] = new ItemTooltip(LEGENDARY_GRAD, "Booster Track", LEGENDARY_COL,
+				"Makes minecarts move faster", DESCRIPTION_COL);
+		items[95] = new ItemTooltip("Star Lantern", RARE_COL);
+
+		items[256] = new ItemTooltip("Iron Shovel", UNCOMMON_COL, Item.shovel);
+		items[257] = new ItemTooltip("Iron Pickaxe", UNCOMMON_COL, Item.pickaxeSteel);
+		items[258] = new ItemTooltip("Iron Axe", UNCOMMON_COL, Item.axeSteel);
+		items[259] = new ItemTooltip("Flint and Steel", UNCOMMON_COL, "Right click to create fire",
+				DESCRIPTION_COL);
+		items[260] = new ItemTooltip("Apple", UNCOMMON_COL, Item.appleRed);
+		items[261] = new ItemTooltip("Bow", "Right click to shoot arrows", DESCRIPTION_COL);
+		items[262] = new ItemTooltip("Arrow", "Shot with a bow", DESCRIPTION_COL);
+		items[263] = new ItemTooltip("Coal");
+		items[264] = new ItemTooltip("Diamond", RARE_COL);
+		items[265] = new ItemTooltip("Iron Ingot", UNCOMMON_COL);
+		items[266] = new ItemTooltip("Gold Ingot", UNCOMMON_COL);
+		items[267] = new ItemTooltip("Iron Sword", UNCOMMON_COL, Item.swordSteel);
+		items[268] = new ItemTooltip("Wooden Sword", Item.swordWood);
+		items[269] = new ItemTooltip("Wooden Shovel", Item.shovelWood);
+		items[270] = new ItemTooltip("Wooden Pickaxe", Item.pickaxeWood);
+		items[271] = new ItemTooltip("Wooden Axe", Item.axeWood);
+		items[272] = new ItemTooltip("Stone Sword", Item.swordStone);
+		items[273] = new ItemTooltip("Stone Shovel", Item.shovelStone);
+		items[274] = new ItemTooltip("Stone Pickaxe", Item.pickaxeStone);
+		items[275] = new ItemTooltip("Stone Axe", Item.axeStone);
+		items[276] = new ItemTooltip("Diamond Sword", RARE_COL, Item.swordDiamond);
+		items[277] = new ItemTooltip("Diamond Shovel", RARE_COL, Item.shovelDiamond);
+		items[278] = new ItemTooltip("Diamond Pickaxe", RARE_COL, Item.pickaxeDiamond);
+		items[279] = new ItemTooltip("Diamond Axe", RARE_COL, Item.axeDiamond);
+		items[280] = new ItemTooltip("Stick");
+		items[281] = new ItemTooltip("Bowl");
+		items[282] = new ItemTooltip("Mushroom Stew", UNCOMMON_COL, Item.bowlSoup);
+		items[283] = new ItemTooltip("Golden Sword", UNCOMMON_COL, Item.swordGold);
+		items[284] = new ItemTooltip("Golden Shovel", UNCOMMON_COL, Item.shovelGold);
+		items[285] = new ItemTooltip("Golden Pickaxe", UNCOMMON_COL, Item.pickaxeGold);
+		items[286] = new ItemTooltip("Golden Axe", UNCOMMON_COL, Item.axeGold);
+		items[287] = new ItemTooltip("String");
+		items[288] = new ItemTooltip("Feather");
+		items[289] = new ItemTooltip("Gunpowder");
+		items[290] = new ItemTooltip("Wooden Hoe", Item.hoeWood);
+		items[291] = new ItemTooltip("Stone Hoe", Item.hoeStone);
+		items[292] = new ItemTooltip("Iron Hoe", UNCOMMON_COL, Item.hoeSteel);
+		items[293] = new ItemTooltip("Diamond Hoe", RARE_COL, Item.hoeDiamond);
+		items[294] = new ItemTooltip("Golden Hoe", UNCOMMON_COL, Item.hoeGold);
+		items[295] = new ItemTooltip("Seeds", "Can be planted on farmland", DESCRIPTION_COL);
+		items[296] = new ItemTooltip("Wheat", "Can be crafted into bread", DESCRIPTION_COL);
+		items[297] = new ItemTooltip("Bread", Item.bread);
+		items[298] = new ItemTooltip("Leather Cap", Item.helmetLeather);
+		items[299] = new ItemTooltip("Leather Tunic", Item.plateLeather);
+		items[300] = new ItemTooltip("Leather Pants", Item.legsLeather);
+		items[301] = new ItemTooltip("Leather Boots", Item.bootsLeather);
+		items[302] = new ItemTooltip("Chainmail Helmet", UNCOMMON_COL, Item.helmetChain);
+		items[303] = new ItemTooltip("Chainmail Chestplate", UNCOMMON_COL, Item.plateChain);
+		items[304] = new ItemTooltip("Chainmail Leggings", UNCOMMON_COL, Item.legsChain);
+		items[305] = new ItemTooltip("Chainmail Boots", UNCOMMON_COL, Item.bootsChain);
+		items[306] = new ItemTooltip("Iron Helmet", UNCOMMON_COL, Item.helmetSteel);
+		items[307] = new ItemTooltip("Iron Chestplate", UNCOMMON_COL, Item.plateSteel);
+		items[308] = new ItemTooltip("Iron Leggings", UNCOMMON_COL, Item.legsSteel);
+		items[309] = new ItemTooltip("Iron Boots", UNCOMMON_COL, Item.bootsSteel);
+		items[310] = new ItemTooltip("Diamond Helmet", RARE_COL, Item.helmetDiamond);
+		items[311] = new ItemTooltip("Diamond Chestplate", RARE_COL, Item.plateDiamond);
+		items[312] = new ItemTooltip("Diamond Leggings", RARE_COL, Item.legsDiamond);
+		items[313] = new ItemTooltip("Diamond Boots", RARE_COL, Item.bootsDiamond);
+		items[314] = new ItemTooltip("Golden Helmet", UNCOMMON_COL, Item.helmetGold);
+		items[315] = new ItemTooltip("Golden Chestplate", UNCOMMON_COL, Item.plateGold);
+		items[316] = new ItemTooltip("Golden Leggings", UNCOMMON_COL, Item.legsGold);
+		items[317] = new ItemTooltip("Golden Boots", UNCOMMON_COL, Item.bootsGold);
+		items[318] = new ItemTooltip("Flint");
+		items[319] = new ItemTooltip("Raw Porkchop", Item.porkRaw);
+		items[320] = new ItemTooltip("Cooked Porkchop", Item.porkCooked);
+		items[321] = new ItemTooltip("Painting", "Display a random piece of artwork", DESCRIPTION_COL);
+		items[322] = new ItemTooltip("Golden Apple", Item.appleGold);
+		items[323] = new ItemTooltip("Sign");
+		items[324] = new ItemTooltip("Wooden Door");
+		items[325] = new ItemTooltip("Bucket",
+				"Right click to pick up", DESCRIPTION_COL,
+				"a liquid", DESCRIPTION_COL);
+		items[326] = new ItemTooltip("Water Bucket", "Right click to place water", DESCRIPTION_COL);
+		items[327] = new ItemTooltip("Lava Bucket", "Right click to place lava", DESCRIPTION_COL);
+		items[328] = new ItemTooltip("Minecart", UNCOMMON_COL,
+				"Used for travelling on", DESCRIPTION_COL,
+				"minecart tracks", DESCRIPTION_COL);
+		items[329] = new ItemTooltip("Saddle", UNCOMMON_COL, "Used for riding a pig", DESCRIPTION_COL);
+		items[330] = new ItemTooltip("Iron Door", UNCOMMON_COL,
+				"Cannot be opened without", DESCRIPTION_COL,
+				"a restone signal", DESCRIPTION_COL);
+		items[331] = new ItemTooltip("Redstone Dust", RARE_COL, "Electrically charged powder", DESCRIPTION_COL);
+		items[332] = new ItemTooltip("Snowball", "Right click to throw", DESCRIPTION_COL);
+		items[333] = new ItemTooltip("Boat", "Used for travelling on water", DESCRIPTION_COL);
+		items[334] = new ItemTooltip("Leather");
+		items[335] = new ItemTooltip("Milk");
+		items[336] = new ItemTooltip("Brick");
+		items[337] = new ItemTooltip("Clay Ball");
+		items[338] = new ItemTooltip("Sugar Cane");
+		items[339] = new ItemTooltip("Paper");
+		items[340] = new ItemTooltip("Book");
+		items[341] = new ItemTooltip("Slime Ball", UNCOMMON_COL);
+		items[342] = new ItemTooltip("Minecart with Chest", UNCOMMON_COL,
+				"Used for carrying items", DESCRIPTION_COL,
+				"on minecart tracks", DESCRIPTION_COL);
+		items[343] = new ItemTooltip("Minecart with Furnace", UNCOMMON_COL,
+				"Uses fuel to move fast", DESCRIPTION_COL,
+				"on minecart tracks");
+		items[344] = new ItemTooltip("Egg", "Right click to throw", DESCRIPTION_COL);
+		items[345] = new ItemTooltip("Compass", UNCOMMON_COL,
+				"Points in the direction to", DESCRIPTION_COL,
+				"your spawnpoint", DESCRIPTION_COL);
+		items[346] = new ItemTooltip("Fishing Rod", "Right click to cast", DESCRIPTION_COL);
+		items[347] = new ItemTooltip("Quiver",
+				"Stores up to 256 arrows", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[348] = new ItemTooltip(LEGENDARY_GRAD, "Ruby Staff", LEGENDARY_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"flaming ruby crystal", DESCRIPTION_COL,
+				Item.staffRuby);
+		items[349] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire Staff", LEGENDARY_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"barrage of sapphire shards", DESCRIPTION_COL,
+				Item.staffSapphire);
+		items[350] = new ItemTooltip(LEGENDARY_GRAD, "Ruby", LEGENDARY_COL, "A gem capable of magic", DESCRIPTION_COL);
+		items[351] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire", LEGENDARY_COL, "A gem capable of magic",
+				DESCRIPTION_COL);
+		items[352] = new ItemTooltip("Raw Beef", Item.beefRaw);
+		items[353] = new ItemTooltip("Cooked Beef", Item.beefCooked);
+		items[354] = new ItemTooltip("Raw Chicken", Item.chickenRaw);
+		items[355] = new ItemTooltip("Cooked Chicken", Item.chickenCooked);
+		items[356] = new ItemTooltip("Raw Mutton", Item.muttonRaw);
+		items[357] = new ItemTooltip("Cooked Mutton", Item.muttonCooked);
+		items[358] = new ItemTooltip(LEGENDARY_GRAD, "Warding Ring", LEGENDARY_COL,
+				"Heals half a heart every minute", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[359] = new ItemTooltip(LEGENDARY_GRAD, "Repair Kit", LEGENDARY_COL,
+				"Crouch to repair the", DESCRIPTION_COL,
+				"currently held item", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+				Item.repairKit);
+		items[360] = new ItemTooltip("Star Chunk", RARE_COL,
+				"A fallen star from the", DESCRIPTION_COL,
+				"night sky; provides great", DESCRIPTION_COL,
+				"energy when heated", DESCRIPTION_COL);
+		items[361] = new ItemTooltip("Star Dust", RARE_COL,
+				"This extraterrestrial dust", DESCRIPTION_COL,
+				"emanates powerful energy", DESCRIPTION_COL);
+		items[362] = new ItemTooltip("Sparkle Staff", RARE_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"star blast", DESCRIPTION_COL,
+				Item.staffSparkle);
+		items[363] = new ItemTooltip("Slime Shoes", UNCOMMON_COL,
+				"Bounces on falling", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+				"64 max durability", INFO_COL);
+		items[364] = new ItemTooltip("Dye");
+		fromMetadata[364][0] = new ItemTooltip("White Dye");
+		fromMetadata[364][1] = new ItemTooltip("Red Dye");
+		fromMetadata[364][2] = new ItemTooltip("Orange Dye");
+		fromMetadata[364][3] = new ItemTooltip("Yellow Dye");
+		fromMetadata[364][4] = new ItemTooltip("Chartreuse Dye");
+		fromMetadata[364][5] = new ItemTooltip("Green Dye");
+		fromMetadata[364][6] = new ItemTooltip("Spring Green Dye");
+		fromMetadata[364][7] = new ItemTooltip("Cyan Dye");
+		fromMetadata[364][8] = new ItemTooltip("Capri Dye");
+		fromMetadata[364][9] = new ItemTooltip("Ultramarine Dye");
+		fromMetadata[364][10] = new ItemTooltip("Violet Dye");
+		fromMetadata[364][11] = new ItemTooltip("Purple Dye");
+		fromMetadata[364][12] = new ItemTooltip("Magenta Dye");
+		fromMetadata[364][13] = new ItemTooltip("Rose Dye");
+		fromMetadata[364][14] = new ItemTooltip("Black Dye");
+		fromMetadata[364][15] = new ItemTooltip("Gray Dye");
+		items[365] = new ItemTooltip(LEGENDARY_GRAD, "Nimble Boots", LEGENDARY_COL,
+				"Increases running speed", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[366] = new ItemTooltip(LEGENDARY_GRAD, "Wings", LEGENDARY_COL,
+				"Allows jumping in midair", DESCRIPTION_COL,
+				"using 10 points of mana.", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+                "256 max durability", INFO_COL);
+		items[367] = new ItemTooltip("Sugar");
+		items[368] = new ItemTooltip("Cookie", Item.cookie);
+
+		items[2256] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.record13);
+		items[2257] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordCat);
+		items[2258] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordMagnet);
+		items[2259] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordBlocks);
+		items[2260] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordWait);
+		items[2261] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordChris);
+	}
+
+	public ItemTooltip(Pair<Integer, Integer> gradient, Object... lines) {
+		this.gradient = gradient;
+		for (Object line : lines) {
+			if (Item.class.isAssignableFrom(line.getClass())) {
+				for (Object subLine : ((Item) line).getDynamicTooltip()) {
+					this.parseLine(subLine);
+				}
+			} else {
+				this.parseLine(line);
+			}
+		}
+		if (this.parsedString) {
+			this.lines.add(this.nextText);
+			this.colors.add(0xFFFFFF);
+		}
+	}
+
+	public ItemTooltip(Object... lines) {
+		this(DEFAULT_GRAD, lines);
+	}
+
+	public static ItemTooltip invalid(String name, Object... objects) {
+		return new ItemTooltip(INVALID_GRAD, name, INVALID_COL, objects);
+	}
+
+	public int size() {
+		return lines.size();
+	}
+
+	private boolean parsedString;
+	private String nextText;
+
+	private void parseLine(Object line) {
+		if (line instanceof String) {
+			if (this.parsedString) {
+				this.lines.add(this.nextText);
+				this.colors.add(0xFFFFFF);
+			}
+			this.nextText = (String) line;
+			this.parsedString = true;
+		} else if (line instanceof Integer) {
+			if (this.parsedString) {
+				this.lines.add(this.nextText);
+				this.colors.add((int) line);
+			}
+			this.parsedString = false;
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemNimbleBoots.java
@@ -1,0 +1,14 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+
+public class ItemNimbleBoots extends ItemCharm {
+	public ItemNimbleBoots(int id) {
+		super(id, "nimbleboots");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.runSpeed += 0.25F;
+	}
+}
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockLeaves extends BlockLeavesBase {
-	private int leafTexIndex;
-	private int decayCounter = 0;
+	private final int leafTexIndex;
 
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
@@ -12,95 +12,65 @@
 		this.setTickOnLoad(true);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.decayCounter = 0;
-		this.updateCurrentLeaves(var1, var2, var3, var4);
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public void updateConnectedLeaves(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 != 0 && var6 == var5 - 1) {
-				this.updateCurrentLeaves(var1, var2, var3, var4);
-			}
-		}
-	}
-
-	public void updateCurrentLeaves(World var1, int var2, int var3, int var4) {
-		if(this.decayCounter++ < 100) {
-			int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? 16 : 0;
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				var6 = 1;
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			}
-
-			var5 = this.getConnectionStrength(var1, var2, var3 - 1, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 - 1, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 + 1, var5);
-			var5 = this.getConnectionStrength(var1, var2 - 1, var3, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2 + 1, var3, var4, var5);
-			int var7 = var5 - 1;
-			if(var7 < 10) {
-				var7 = 1;
-			}
-
-			if(var7 != var6) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-				this.updateConnectedLeaves(var1, var2, var3 - 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3 + 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 - 1, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 + 1, var6);
-				this.updateConnectedLeaves(var1, var2 - 1, var3, var4, var6);
-				this.updateConnectedLeaves(var1, var2 + 1, var3, var4, var6);
-			}
-
-		}
-	}
-
-	private int getConnectionStrength(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
-			return 16;
-		} else {
-			if(var6 == this.blockID) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 != 0 && var7 > var5) {
-					return var7;
-				}
-			}
-
-			return var5;
-		}
-	}
-
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
-			this.decayCounter = 0;
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			this.removeLeaves(var1, var2, var3, var4);
-		} else if(var5.nextInt(10) == 0) {
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		}
-
-	}
-
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+		if (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+			byte var6 = 5;
+
+			for (int var7 = var2 - var6; var7 <= var2 + var6; ++var7) {
+				for (int var8 = var3 - 1; var8 <= var3 + 1; ++var8) {
+					for (int var9 = var4 - var6; var9 <= var4 + var6; ++var9) {
+						if (var1.getBlockId(var7, var8, var9) == Block.wood.blockID
+								&& var1.getBlockMetadata(var7, var8, var9)
+										== var1.getBlockMetadata(var2, var3, var4)) {
+							return;
+						}
+					}
+				}
+			}
+
+//			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+//			var1.setBlockWithNotify(var2, var3, var4, 0);
+			fall(var1, var2, var3, var4);
+		}
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		updateTick(worldObj, x, y, z, worldObj.rand);
+	}
+
+	public void fall(World var1, int var2, int var3, int var4) {
+		if (var1.getBlockId(var2, var3, var4) != this.blockID) {
+			return;
+		}
+
+		EntityFallingSand fallingLeaves = new EntityFallingSand(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F, Block.leaves.blockID);
+		fallingLeaves.blockMetadata = var1.getBlockMetadata(var2, var3, var4);
+		fallingLeaves.breakOnFall = true;
 		var1.setBlockWithNotify(var2, var3, var4, 0);
+		var1.spawnEntityInWorld(fallingLeaves);
+
+		for (int rx = var2 - 1; rx <= var2 + 1; rx++) {
+			for (int ry = var3 - 1; ry <= var3 + 1; ry++) {
+				for (int rz = var4 - 1; rz <= var4 + 1; rz++) {
+//					var1.markBlockNeedsUpdate(rx, ry, rz);
+					var1.notifyBlocksOfNeighborChange(rx, ry, rz, var1.getBlockId(rx, ry, rz));
+				}
+			}
+		}
 	}
 
 	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
+		return var1.nextInt(30) == 0 ? 1 : 0;
 	}
 
 	public int idDropped(int var1, Random var2) {
 		return Block.sapling.blockID;
 	}
 
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
+	}
+
 	public boolean isOpaqueCube() {
 		return !this.graphicsLevel;
 	}
@@ -110,7 +80,12 @@
 		this.blockIndexInTexture = this.leafTexIndex + (var1 ? 0 : 1);
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		super.onEntityWalking(var1, var2, var3, var4, var5);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return (metadata == 0 ? this.leafTexIndex : textureXY(9, 8 + metadata))
+			   + (this.graphicsLevel ? 0 : 1);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -2,136 +2,169 @@
 
 import java.util.Random;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 public class Item {
 	protected static Random rand = new Random();
 	public static Item[] itemsList = new Item[32000];
-	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
-	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
-	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
-	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
-	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
-	public static Item bow = (new ItemBow(5)).setIconIndex(21);
-	public static Item arrow = (new Item(6)).setIconIndex(37);
-	public static Item coal = (new Item(7)).setIconIndex(7);
-	public static Item diamond = (new Item(8)).setIconIndex(55);
-	public static Item ingotIron = (new Item(9)).setIconIndex(23);
-	public static Item ingotGold = (new Item(10)).setIconIndex(39);
-	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
-	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
-	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
-	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
-	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
-	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
-	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
-	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
-	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
-	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
-	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
-	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
-	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D();
-	public static Item bowlEmpty = (new Item(25)).setIconIndex(71);
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
-	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68);
-	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84);
-	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100);
-	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116);
-	public static Item silk = (new Item(31)).setIconIndex(8);
-	public static Item feather = (new Item(32)).setIconIndex(24);
-	public static Item gunpowder = (new Item(33)).setIconIndex(40);
-	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
-	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
-	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
-	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
-	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9);
-	public static Item wheat = (new Item(40)).setIconIndex(25);
-	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41);
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0);
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16);
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32);
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48);
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1);
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17);
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33);
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49);
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2);
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18);
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34);
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50);
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3);
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19);
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35);
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51);
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4);
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20);
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36);
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52);
-	public static Item flint = (new Item(62)).setIconIndex(6);
-	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
-	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
-	public static Item painting = (new ItemPainting(65)).setIconIndex(26);
-	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11);
-	public static Item sign = (new ItemSign(67)).setIconIndex(42);
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
-	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
-	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104);
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
-	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56);
-	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14);
-	public static Item boat = (new ItemBoat(77)).setIconIndex(136);
-	public static Item leather = (new Item(78)).setIconIndex(103);
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
-	public static Item brick = (new Item(80)).setIconIndex(22);
-	public static Item clay = (new Item(81)).setIconIndex(57);
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
-	public static Item paper = (new Item(83)).setIconIndex(58);
-	public static Item book = (new Item(84)).setIconIndex(59);
-	public static Item slimeBall = (new Item(85)).setIconIndex(30);
-	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
-	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
-	public static Item egg = (new Item(88)).setIconIndex(12);
-	public static Item compass = (new Item(89)).setIconIndex(54);
-	public static Item fishingRod = (new Item(90)).setIconIndex(69);
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static final Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
+	public static final Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
+	public static final Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
+	public static final Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
+	public static final Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
+	public static final Item bow = (new ItemBow(5)).setIconIndex(21);
+	public static final Item arrow = (new Item(6)).setIconIndex(37);
+	public static final Item coal = (new Item(7)).setIconIndex(7);
+	public static final Item diamond = (new Item(8)).setIconIndex(55);
+	public static final Item ingotIron = (new Item(9)).setIconIndex(23);
+	public static final Item ingotGold = (new Item(10)).setIconIndex(39);
+	public static final Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
+	public static final Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
+	public static final Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
+	public static final Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
+	public static final Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
+	public static final Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
+	public static final Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
+	public static final Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
+	public static final Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
+	public static final Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
+	public static final Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
+	public static final Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
+	public static final Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
+	public static final Item stick = (new Item(24)).setIconIndex(53).setFull3D();
+	public static final Item bowlEmpty = (new Item(25)).setIconIndex(71);
+	public static final Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
+	public static final Item swordGold = (new ItemSword(27, -1)).setIconIndex(68);
+	public static final Item shovelGold = (new ItemSpade(28, -1)).setIconIndex(84);
+	public static final Item pickaxeGold = (new ItemPickaxe(29, -1)).setIconIndex(100);
+	public static final Item axeGold = (new ItemAxe(30, -1)).setIconIndex(116);
+	public static final Item silk = (new Item(31)).setIconIndex(8);
+	public static final Item feather = (new Item(32)).setIconIndex(24);
+	public static final Item gunpowder = (new Item(33)).setIconIndex(40);
+	public static final Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
+	public static final Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
+	public static final Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
+	public static final Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
+	public static final Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
+	public static final Item seeds = (new ItemSeeds(39, 59)).setIconIndex(9);
+	public static final Item wheat = (new Item(40)).setIconIndex(25);
+	public static final Item bread = (new ItemFood(41, 5)).setIconIndex(41);
+	public static final Item helmetLeather = (new ItemArmor(42, 0, 0, 0, 0.35D)).setIconIndex(0);
+	public static final Item plateLeather = (new ItemArmor(43, 0, 0, 1, 0.35D)).setIconIndex(16);
+	public static final Item legsLeather = (new ItemArmor(44, 0, 0, 2, 0.35D)).setIconIndex(32);
+	public static final Item bootsLeather = (new ItemArmor(45, 0, 0, 3, 0.35D)).setIconIndex(48);
+	public static final Item helmetChain = (new ItemArmor(46, 1, 1, 0, 0.6D)).setIconIndex(1);
+	public static final Item plateChain = (new ItemArmor(47, 1, 1, 1, 0.6D)).setIconIndex(17);
+	public static final Item legsChain = (new ItemArmor(48, 1, 1, 2, 0.6D)).setIconIndex(33);
+	public static final Item bootsChain = (new ItemArmor(49, 1, 1, 3, 0.6D)).setIconIndex(49);
+	public static final Item helmetSteel = (new ItemArmor(50, 2, 2, 0, 0.75D)).setIconIndex(2);
+	public static final Item plateSteel = (new ItemArmor(51, 2, 2, 1, 0.75D)).setIconIndex(18);
+	public static final Item legsSteel = (new ItemArmor(52, 2, 2, 2, 0.75D)).setIconIndex(34);
+	public static final Item bootsSteel = (new ItemArmor(53, 2, 2, 3, 0.75D)).setIconIndex(50);
+	public static final Item helmetDiamond = (new ItemArmor(54, 3, 3, 0, 1.0D)).setIconIndex(3);
+	public static final Item plateDiamond = (new ItemArmor(55, 3, 3, 1, 1.0D)).setIconIndex(19);
+	public static final Item legsDiamond = (new ItemArmor(56, 3, 3, 2, 1.0D)).setIconIndex(35);
+	public static final Item bootsDiamond = (new ItemArmor(57, 3, 3, 3, 1.0D)).setIconIndex(51);
+	public static final Item helmetGold = (new ItemArmor(58, 1, 4, 0, 0.55D)).setIconIndex(4);
+	public static final Item plateGold = (new ItemArmor(59, 1, 4, 1, 0.55D)).setIconIndex(20);
+	public static final Item legsGold = (new ItemArmor(60, 1, 4, 2, 0.55D)).setIconIndex(36);
+	public static final Item bootsGold = (new ItemArmor(61, 1, 4, 3, 0.55D)).setIconIndex(52);
+	public static final Item flint = (new Item(62)).setIconIndex(6);
+	public static final Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
+	public static final Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
+	public static final Item painting = (new ItemPainting(65)).setIconIndex(26);
+	public static final Item appleGold = (new ItemFood(66, 42, 0.2F)).setIconIndex(11);
+	public static final Item sign = (new ItemSign(67)).setIconIndex(42);
+	public static final Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
+	public static final Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
+	public static final Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
+	public static final Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
+	public static final Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
+	public static final Item saddle = (new ItemSaddle(73)).setIconIndex(104);
+	public static final Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
+	public static final Item redstone = (new ItemRedstone(75)).setIconIndex(56);
+	public static final Item snowball = (new ItemSnowball(76)).setIconIndex(14);
+	public static final Item boat = (new ItemBoat(77)).setIconIndex(136);
+	public static final Item leather = (new Item(78)).setIconIndex(103);
+	public static final Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
+	public static final Item brick = (new Item(80)).setIconIndex(22);
+	public static final Item clay = (new Item(81)).setIconIndex(57);
+	public static final Item reed = (new ItemReed(82, 83)).setIconIndex(27);
+	public static final Item paper = (new Item(83)).setIconIndex(58);
+	public static final Item book = (new Item(84)).setIconIndex(59);
+	public static final Item slimeBall = (new Item(85)).setIconIndex(30);
+	public static final Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
+	public static final Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
+	public static final Item egg = (new Item(88)).setIconIndex(12);
+	public static final Item compass = (new Item(89)).setIconIndex(54);
+	public static final Item fishingRod = (new Item(90)).setIconIndex(69);
+	public static final Item quiver = (new ItemQuiver(91)).setIconIndex(textureXY(6, 2));
+	public static final Item staffRuby = (new ItemStaff(92, 8.0F, 10, 1024, 100, 1.0F)).setIconIndex(textureXY(10, 6));
+	public static final Item staffSapphire = (new ItemStaff(93, 4.0F, 6, 1024, 0, 5.0F)).setIconIndex(textureXY(11, 6));
+	public static final Item ruby = (new Item(94)).setIconIndex(textureXY(10, 5));
+	public static final Item sapphire = (new Item(95)).setIconIndex(textureXY(11, 5));
+	public static final Item beefRaw = (new ItemFood(96, 3)).setIconIndex(textureXY(8, 9));
+	public static final Item beefCooked = (new ItemFood(97, 8)).setIconIndex(textureXY(8, 10));
+	public static final Item chickenRaw = (new ItemFood(98, 3)).setIconIndex(textureXY(9, 9));
+	public static final Item chickenCooked = (new ItemFood(99, 8)).setIconIndex(textureXY(9, 10));
+	public static final Item muttonRaw = (new ItemFood(100, 3)).setIconIndex(textureXY(10, 9));
+	public static final Item muttonCooked = (new ItemFood(101, 8)).setIconIndex(textureXY(10, 10));
+	public static final Item wardingRing = (new ItemWardingRing(102)).setIconIndex(textureXY(1, 9));
+	public static final Item repairKit = (new ItemRepairKit(103)).setIconIndex(textureXY(3, 9));
+	public static final Item starChunk = (new Item(104)).setIconIndex(textureXY(12, 5));
+	public static final Item starDust = (new Item(105)).setIconIndex(textureXY(13, 5));
+	public static final Item staffSparkle = (new ItemStaff(106, 15.0F, 6, 256)).setIconIndex(textureXY(12, 6));
+	public static final Item slimeShoes = (new ItemSlimeShoes(107)).setIconIndex(textureXY(2, 9));
+	public static final Item dye = (new ItemDye(108)).setIconIndex(textureXY(12, 12));
+	public static final Item nimbleBoots = (new ItemNimbleBoots(109)).setIconIndex(textureXY(4, 9));
+	public static final Item wings = (new ItemWings(110)).setIconIndex(textureXY(5, 9));
+	public static final Item sugar = (new Item(111)).setIconIndex(textureXY(12, 1));
+	public static final Item cookie = (new ItemFood(112, 3, 0.1F)).setIconIndex(textureXY(12, 3));
+	public static final Item record13 = (new ItemRecord(2000, "13", "C418 - 13")).setIconIndex(240);
+	public static final Item recordCat = (new ItemRecord(2001, "cat", "C418 - cat")).setIconIndex(241);
+	public static final Item recordMagnet = (new ItemRecord(2002, "diverge.magnet", "Notch - Magnetic Circuit")).setIconIndex(242);
+	public static final Item recordBlocks = (new ItemRecord(2003, "diverge.blocks", "C418 - blocks")).setIconIndex(243);
+	public static final Item recordWait = (new ItemRecord(2004, "diverge.wait", "C418 - wait")).setIconIndex(244);
+	public static final Item recordChris = (new ItemRecord(2005, "diverge.chris", "C418 - chris")).setIconIndex(245);
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
 	protected int iconIndex;
+	protected int startingDamage = 0;
 	protected boolean bFull3D = false;
 
-	protected Item(int var1) {
-		this.shiftedIndex = 256 + var1;
-		if(itemsList[256 + var1] != null) {
-			System.out.println("CONFLICT @ " + var1);
+	protected static int textureXY(int x, int y) {
+		return y * 16 + x;
+	}
+
+	protected Item(int id) {
+		this.shiftedIndex = 256 + id;
+		if(itemsList[256 + id] != null) {
+			System.out.println("CONFLICT @ " + id);
 		}
 
-		itemsList[256 + var1] = this;
+		itemsList[256 + id] = this;
 	}
 
-	public Item setIconIndex(int var1) {
-		this.iconIndex = var1;
+	public Item setIconIndex(int iconIndex) {
+		this.iconIndex = iconIndex;
 		return this;
 	}
 
-	public int getIconIndex(ItemStack var1) {
+	public int getIconIndex(ItemStack itemStack) {
 		return this.iconIndex;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
 		return false;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack itemStack, Block block) {
 		return 1.0F;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		return itemStack;
 	}
 
 	public int getItemStackLimit() {
@@ -142,21 +175,21 @@
 		return this.maxDamage;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+	}
+
+	public void onBlockDestroyed(ItemStack itemStack, int id, int x, int y, int z) {
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return 1;
 	}
 
-	public boolean canHarvestBlock(Block var1) {
+	public boolean canHarvestBlock(Block block) {
 		return false;
 	}
 
-	public void saddleEntity(ItemStack var1, EntityLiving var2) {
+	public void saddleEntity(ItemStack itemStack, EntityLiving entityLiving) {
 	}
 
 	public Item setFull3D() {
@@ -166,5 +199,25 @@
 
 	public boolean isFull3D() {
 		return this.bFull3D;
+	}
+
+	public ItemTooltip getTooltip() {
+		return ItemTooltip.items[this.shiftedIndex];
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[0];
+	}
+
+	public boolean isMagic() {
+		return false;
+	}
+
+	public boolean allowRepair() {
+		return true;
+	}
+
+	public int[] availableMetadata() {
+		return new int[] { 0 };
 	}
 }
--- net/minecraft/src/TileEntityMobSpawnerRenderer.java
+++ net/minecraft/src/TileEntityMobSpawnerRenderer.java
@@ -2,25 +2,26 @@
 
 import java.util.HashMap;
 import java.util.Map;
+
 import org.lwjgl.opengl.GL11;
 
 public class TileEntityMobSpawnerRenderer extends TileEntitySpecialRenderer {
 	private Map entityHashMap = new HashMap();
 
-	public void renderTileEntityMobSpawner(TileEntityMobSpawner var1, double var2, double var4, double var6, float var8) {
+	public void renderTileEntityMobSpawner(TileEntityMobSpawner tileEntityMobSpawner1, double var2, double var4, double var6, float var8) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2 + 0.5F, (float)var4, (float)var6 + 0.5F);
-		Entity var9 = (Entity)this.entityHashMap.get(var1.mobID);
+		Entity var9 = (Entity)this.entityHashMap.get(tileEntityMobSpawner1.mobID);
 		if(var9 == null) {
-			var9 = EntityList.createEntityByName(var1.mobID, (World)null);
-			this.entityHashMap.put(var1.mobID, var9);
+			var9 = EntityList.createEntityByName(tileEntityMobSpawner1.mobID, (World)null);
+			this.entityHashMap.put(tileEntityMobSpawner1.mobID, var9);
 		}
 
 		if(var9 != null) {
-			var9.setWorld(var1.worldObj);
-			float var10 = 7.0F / 16.0F;
+			var9.setWorld(tileEntityMobSpawner1.worldObj);
+			float var10 = 0.4375F;
 			GL11.glTranslatef(0.0F, 0.4F, 0.0F);
-			GL11.glRotatef((float)(var1.prevYaw + (var1.yaw - var1.prevYaw) * (double)var8) * 10.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef((float)(tileEntityMobSpawner1.prevYaw + (tileEntityMobSpawner1.yaw - tileEntityMobSpawner1.prevYaw) * (double)var8) * 10.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glRotatef(-30.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glTranslatef(0.0F, -0.4F, 0.0F);
 			GL11.glScalef(var10, var10, var10);
@@ -31,7 +32,7 @@
 		GL11.glPopMatrix();
 	}
 
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		this.renderTileEntityMobSpawner((TileEntityMobSpawner)var1, var2, var4, var6, var8);
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		this.renderTileEntityMobSpawner((TileEntityMobSpawner)tileEntity, x, y, z, renderPartialTick);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/PopulatorHost.java
@@ -1,0 +1,91 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class PopulatorHost {
+	public final IChunkProvider chunkProvider;
+	public final int x;
+	public final int z;
+	public final World worldObj;
+	public final Random rand;
+	public final NoiseGeneratorOctaves noise;
+
+	public PopulatorHost(IChunkProvider chunkProvider, int x, int z, World worldObj, Random rand,
+						 NoiseGeneratorOctaves noise) {
+		this.chunkProvider = chunkProvider;
+		this.x = x;
+		this.z = z;
+		this.worldObj = worldObj;
+		this.rand = rand;
+		this.noise = noise;
+	}
+
+	//#region Generate Methods
+	public void generate(WorldGenerator gen, int quantity) {
+		generate(gen, quantity, 0, 128, 0);
+	}
+
+	public void generate(WorldGenerator gen, int quantity, int minY, int maxY) {
+		generate(gen, quantity, minY, maxY, 0);
+	}
+
+	public void generate(WorldGenerator gen, int quantity, int minY, int maxY, int xzOffset) {
+		for (int i = 0; i < quantity; i++) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genY = rand.nextInt(maxY - minY) + minY;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateSurface(WorldGenerator gen, int quantity) {
+		generateSurface(gen, quantity, 0);
+	}
+
+	public void generateSurface(WorldGenerator gen, int quantity, int xzOffset) {
+		for (int i = 0; i < quantity; i++) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			int genY = worldObj.getHeightValue(genX, genZ);
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateChance(WorldGenerator gen, int chance) {
+		generateChance(gen, chance, 0, 128, 0);
+	}
+
+	public void generateChance(WorldGenerator gen, int chance, int minY, int maxY) {
+		generateChance(gen, chance, minY, maxY, 0);
+	}
+
+	public void generateChance(WorldGenerator gen, int chance, int minY, int maxY, int xzOffset) {
+		if (rand.nextInt(chance) == 0) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genY = rand.nextInt(maxY - minY) + minY;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateMinable(Block block, int size, int quantity, int minY, int maxY) {
+		generate(new WorldGenMinable(block.blockID, size), quantity, minY, maxY);
+	}
+
+	public void generateMinable(Block block, int size, int quantity, int minY, int maxY, int metadata) {
+		generate(new WorldGenMinable(block.blockID, size, metadata), quantity, minY, maxY);
+	}
+
+	public void generateMinableInStone(Block block, int size, int quantity, int minY, int maxY) {
+		generate(new WorldGenMinable(block.blockID, size).mergeWithStone(), quantity, minY, maxY);
+	}
+
+	public void generateFlowers(int frequency) {
+		generate(new WorldGenFlowers(Block.plantYellow.blockID), frequency, 48, 128, 8);
+		generate(new WorldGenFlowers(Block.plantBlue.blockID), frequency, 48, 128, 8);
+		generate(new WorldGenFlowers(Block.plantRed.blockID), frequency, 48, 128, 8);
+	}
+	//#endregion Generate Methods
+}
--- net/minecraft/src/ModelBiped.java
+++ net/minecraft/src/ModelBiped.java
@@ -61,8 +61,8 @@
 	}
 
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.bipedHead.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.bipedHead.rotateAngleX = var5 / (180.0F / (float)Math.PI);
+		this.bipedHead.rotateAngleY = var4 / 57.295776F;
+		this.bipedHead.rotateAngleX = var5 / 57.295776F;
 		this.bipedHeadwear.rotateAngleY = this.bipedHead.rotateAngleY;
 		this.bipedHeadwear.rotateAngleX = this.bipedHead.rotateAngleX;
 		this.bipedRightArm.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 2.0F * var2 * 0.5F;
@@ -74,20 +74,20 @@
 		this.bipedRightLeg.rotateAngleY = 0.0F;
 		this.bipedLeftLeg.rotateAngleY = 0.0F;
 		if(this.isRiding) {
-			this.bipedRightArm.rotateAngleX += (float)Math.PI * -0.2F;
-			this.bipedLeftArm.rotateAngleX += (float)Math.PI * -0.2F;
-			this.bipedRightLeg.rotateAngleX = (float)Math.PI * -0.4F;
-			this.bipedLeftLeg.rotateAngleX = (float)Math.PI * -0.4F;
-			this.bipedRightLeg.rotateAngleY = (float)Math.PI * 0.1F;
-			this.bipedLeftLeg.rotateAngleY = (float)Math.PI * -0.1F;
+			this.bipedRightArm.rotateAngleX += -0.62831855F;
+			this.bipedLeftArm.rotateAngleX += -0.62831855F;
+			this.bipedRightLeg.rotateAngleX = -1.2566371F;
+			this.bipedLeftLeg.rotateAngleX = -1.2566371F;
+			this.bipedRightLeg.rotateAngleY = 0.31415927F;
+			this.bipedLeftLeg.rotateAngleY = -0.31415927F;
 		}
 
 		if(this.heldItemLeft) {
-			this.bipedLeftArm.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - (float)Math.PI * 0.1F;
+			this.bipedLeftArm.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - 0.31415927F;
 		}
 
 		if(this.heldItemRight) {
-			this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - (float)Math.PI * 0.1F;
+			this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - 0.31415927F;
 		}
 
 		this.bipedRightArm.rotateAngleY = 0.0F;
@@ -107,7 +107,7 @@
 			var7 *= var7;
 			var7 = 1.0F - var7;
 			float var8 = MathHelper.sin(var7 * (float)Math.PI);
-			float var9 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * (12.0F / 16.0F);
+			float var9 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
 			this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)var8 * 1.2D + (double)var9));
 			this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY * 2.0F;
 			this.bipedRightArm.rotateAngleZ = MathHelper.sin(this.swingProgress * (float)Math.PI) * -0.4F;
--- net/minecraft/src/BlockRedstoneWire.java
+++ net/minecraft/src/BlockRedstoneWire.java
@@ -5,16 +5,16 @@
 public class BlockRedstoneWire extends Block {
 	private boolean wiresProvidePower = true;
 
-	public BlockRedstoneWire(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.blockIndexInTexture + (var2 > 0 ? 16 : 0);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public BlockRedstoneWire(int id, int tex) {
+		super(id, tex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.blockIndexInTexture + (metadata > 0 ? 16 : 0);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -30,15 +30,15 @@
 		return 5;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
 	}
 
-	private void updateAndPropagateCurrentStrength(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	private void updateAndPropagateCurrentStrength(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
 		int var6 = 0;
 		this.wiresProvidePower = false;
-		boolean var7 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+		boolean var7 = worldObj.isBlockIndirectlyGettingPowered(x, y, z);
 		this.wiresProvidePower = true;
 		int var8;
 		int var9;
@@ -47,10 +47,10 @@
 			var6 = 15;
 		} else {
 			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
+				var9 = x;
+				var10 = z;
 				if(var8 == 0) {
-					var9 = var2 - 1;
+					var9 = x - 1;
 				}
 
 				if(var8 == 1) {
@@ -58,18 +58,18 @@
 				}
 
 				if(var8 == 2) {
-					var10 = var4 - 1;
+					var10 = z - 1;
 				}
 
 				if(var8 == 3) {
 					++var10;
 				}
 
-				var6 = this.getMaxCurrentStrength(var1, var9, var3, var10, var6);
-				if(var1.isBlockNormalCube(var9, var3, var10) && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 + 1, var10, var6);
-				} else if(!var1.isBlockNormalCube(var9, var3, var10)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 - 1, var10, var6);
+				var6 = this.getMaxCurrentStrength(worldObj, var9, y, var10, var6);
+				if(worldObj.isBlockNormalCube(var9, y, var10) && !worldObj.isBlockNormalCube(x, y + 1, z)) {
+					var6 = this.getMaxCurrentStrength(worldObj, var9, y + 1, var10, var6);
+				} else if(!worldObj.isBlockNormalCube(var9, y, var10)) {
+					var6 = this.getMaxCurrentStrength(worldObj, var9, y - 1, var10, var6);
 				}
 			}
 
@@ -81,18 +81,18 @@
 		}
 
 		if(var5 != var6) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
+			worldObj.setBlockMetadataWithNotify(x, y, z, var6);
+			worldObj.markBlocksDirty(x, y, z, x, y, z);
 			if(var6 > 0) {
 				--var6;
 			}
 
 			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
-				int var11 = var3 - 1;
+				var9 = x;
+				var10 = z;
+				int var11 = y - 1;
 				if(var8 == 0) {
-					var9 = var2 - 1;
+					var9 = x - 1;
 				}
 
 				if(var8 == 1) {
@@ -100,184 +100,184 @@
 				}
 
 				if(var8 == 2) {
-					var10 = var4 - 1;
+					var10 = z - 1;
 				}
 
 				if(var8 == 3) {
 					++var10;
 				}
 
-				if(var1.isBlockNormalCube(var9, var3, var10)) {
+				if(worldObj.isBlockNormalCube(var9, y, var10)) {
 					var11 += 2;
 				}
 
-				int var12 = this.getMaxCurrentStrength(var1, var9, var3, var10, -1);
+				int var12 = this.getMaxCurrentStrength(worldObj, var9, y, var10, -1);
 				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var3, var10);
+					this.updateAndPropagateCurrentStrength(worldObj, var9, y, var10);
 				}
 
-				var12 = this.getMaxCurrentStrength(var1, var9, var11, var10, -1);
+				var12 = this.getMaxCurrentStrength(worldObj, var9, var11, var10, -1);
 				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var11, var10);
+					this.updateAndPropagateCurrentStrength(worldObj, var9, var11, var10);
 				}
 			}
 
 			if(var5 == 0 || var6 == 0) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
 			}
 		}
 
 	}
 
-	private void notifyWireNeighborsOfNeighborChange(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		}
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	private int getMaxCurrentStrength(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) != this.blockID) {
+	private void notifyWireNeighborsOfNeighborChange(World worldObj, int x, int y, int z) {
+		if(worldObj.getBlockId(x, y, z) == this.blockID) {
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		}
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		super.onBlockAdded(worldObj, x, y, z);
+		this.updateAndPropagateCurrentStrength(worldObj, x, y, z);
+		worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x, y, z + 1);
+		if(worldObj.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y - 1, z);
+		}
+
+		if(worldObj.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y - 1, z);
+		}
+
+		if(worldObj.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y - 1, z - 1);
+		}
+
+		if(worldObj.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y - 1, z + 1);
+		}
+
+	}
+
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		super.onBlockRemoval(worldObj, x, y, z);
+		worldObj.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.updateAndPropagateCurrentStrength(worldObj, x, y, z);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(worldObj, x, y, z + 1);
+		if(worldObj.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x - 1, y - 1, z);
+		}
+
+		if(worldObj.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x + 1, y - 1, z);
+		}
+
+		if(worldObj.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y - 1, z - 1);
+		}
+
+		if(worldObj.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(worldObj, x, y - 1, z + 1);
+		}
+
+	}
+
+	private int getMaxCurrentStrength(World worldObj, int x, int y, int z, int var5) {
+		if(worldObj.getBlockId(x, y, z) != this.blockID) {
 			return var5;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			int var6 = worldObj.getBlockMetadata(x, y, z);
 			return var6 > var5 ? var6 : var5;
 		}
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = this.canPlaceBlockAt(var1, var2, var3, var4);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
+		boolean var7 = this.canPlaceBlockAt(worldObj, x, y, z);
 		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+			this.dropBlockAsItem(worldObj, x, y, z, var6);
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		} else {
-			this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
+			this.updateAndPropagateCurrentStrength(worldObj, x, y, z);
 		}
 
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return !this.wiresProvidePower ? false : this.isPoweringTo(var1, var2, var3, var4, var5);
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
+		return !this.wiresProvidePower ? false : this.isPoweringTo(worldObj, x, y, z, side);
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
 		if(!this.wiresProvidePower) {
 			return false;
-		} else if(var1.getBlockMetadata(var2, var3, var4) == 0) {
+		} else if(blockAccess.getBlockMetadata(x, y, z) == 0) {
 			return false;
-		} else if(var5 == 1) {
+		} else if(metadata == 1) {
 			return true;
 		} else {
-			boolean var6 = isPowerProviderOrWire(var1, var2 - 1, var3, var4) || !var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 - 1, var4);
-			boolean var7 = isPowerProviderOrWire(var1, var2 + 1, var3, var4) || !var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 - 1, var4);
-			boolean var8 = isPowerProviderOrWire(var1, var2, var3, var4 - 1) || !var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 - 1);
-			boolean var9 = isPowerProviderOrWire(var1, var2, var3, var4 + 1) || !var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 + 1);
-			if(!var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				if(var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 + 1, var4)) {
+			boolean var6 = isPowerProviderOrWire(blockAccess, x - 1, y, z) || !blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y - 1, z);
+			boolean var7 = isPowerProviderOrWire(blockAccess, x + 1, y, z) || !blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y - 1, z);
+			boolean var8 = isPowerProviderOrWire(blockAccess, x, y, z - 1) || !blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z - 1);
+			boolean var9 = isPowerProviderOrWire(blockAccess, x, y, z + 1) || !blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z + 1);
+			if(!blockAccess.isBlockNormalCube(x, y + 1, z)) {
+				if(blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y + 1, z)) {
 					var6 = true;
 				}
 
-				if(var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 + 1, var4)) {
+				if(blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y + 1, z)) {
 					var7 = true;
 				}
 
-				if(var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 - 1)) {
+				if(blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z - 1)) {
 					var8 = true;
 				}
 
-				if(var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 + 1)) {
+				if(blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z + 1)) {
 					var9 = true;
 				}
 			}
 
-			return !var8 && !var7 && !var6 && !var9 && var5 >= 2 && var5 <= 5 ? true : (var5 == 2 && var8 && !var6 && !var7 ? true : (var5 == 3 && var9 && !var6 && !var7 ? true : (var5 == 4 && var6 && !var8 && !var9 ? true : var5 == 5 && var7 && !var8 && !var9)));
+			return !var8 && !var7 && !var6 && !var9 && metadata >= 2 && metadata <= 5 ? true : (metadata == 2 && var8 && !var6 && !var7 ? true : (metadata == 3 && var9 && !var6 && !var7 ? true : (metadata == 4 && var6 && !var8 && !var9 ? true : metadata == 5 && var7 && !var8 && !var9)));
 		}
 	}
 
@@ -285,18 +285,18 @@
 		return this.wiresProvidePower;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) > 0) {
-			double var6 = (double)var2 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-			double var8 = (double)((float)var3 + 1.0F / 16.0F);
-			double var10 = (double)var4 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-			var1.spawnParticle("reddust", var6, var8, var10, 0.0D, 0.0D, 0.0D);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockMetadata(x, y, z) > 0) {
+			double var6 = (double)x + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
+			double var8 = (double)((float)y + 0.0625F);
+			double var10 = (double)z + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
+			worldObj.spawnParticle("reddust", var6, var8, var10, 0.0D, 0.0D, 0.0D);
 		}
 
 	}
 
-	public static boolean isPowerProviderOrWire(IBlockAccess var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
+	public static boolean isPowerProviderOrWire(IBlockAccess blockAccess, int x, int y, int z) {
+		int var4 = blockAccess.getBlockId(x, y, z);
 		return var4 == Block.redstoneWire.blockID ? true : (var4 == 0 ? false : Block.blocksList[var4].canProvidePower());
 	}
 }
--- net/minecraft/src/PositionTexureVertex.java
+++ net/minecraft/src/PositionTexureVertex.java
@@ -13,14 +13,14 @@
 		return new PositionTexureVertex(this, var1, var2);
 	}
 
-	public PositionTexureVertex(PositionTexureVertex var1, float var2, float var3) {
-		this.vector3D = var1.vector3D;
+	public PositionTexureVertex(PositionTexureVertex positionTexureVertex1, float var2, float var3) {
+		this.vector3D = positionTexureVertex1.vector3D;
 		this.texturePositionX = var2;
 		this.texturePositionY = var3;
 	}
 
-	public PositionTexureVertex(Vec3D var1, float var2, float var3) {
-		this.vector3D = var1;
+	public PositionTexureVertex(Vec3D vec3D1, float var2, float var3) {
+		this.vector3D = vec3D1;
 		this.texturePositionX = var2;
 		this.texturePositionY = var3;
 	}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiSliderGeneric.java
@@ -1,0 +1,132 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.FontRenderer;
+import net.minecraft.src.GuiButton;
+import org.lwjgl.opengl.GL11;
+
+public class GuiSliderGeneric extends GuiButton {
+	public final String label;
+	public final float multiplier;
+	public float sliderValue;
+	public boolean round;
+	public boolean dragging;
+	public boolean vertical;
+
+	public GuiSliderGeneric(int id, int x, int y, int w, int h, String label, float defaultValue, float multiplier) {
+		super(id, x, y, w, h, label);
+		this.width = w;
+		this.height = h;
+		this.label = label;
+		this.multiplier = multiplier;
+		this.displayString = getDisplayString();
+	}
+
+	protected int getHoverState(boolean mousePointerHovered) {
+		return 0;
+	}
+
+	public float getValue() {
+		float value = this.sliderValue * this.multiplier;
+		if (round) {
+			value = (int) value;
+		}
+		return value;
+	}
+
+	public String getDisplayString() {
+		float value = getValue();
+		if (round) {
+			if (this.multiplier == 1.0D) {
+				return this.label + ": " + (int) value;
+			} else {
+				return this.label + ": " + (int) value + " / " + (int) this.multiplier;
+			}
+		} else {
+			if (this.multiplier == 1.0D) {
+				return this.label + ": " + value;
+			} else {
+				return this.label + ": " + value + " / " + this.multiplier;
+			}
+		}
+	}
+
+	protected void mouseDragged(Minecraft var1, int var2, int var3) {
+		if(this.visible) {
+			if(this.dragging) {
+				this.sliderValue = this.vertical
+						? (float)(var3 - (this.yPosition + 4)) / (float)(this.height - 8)
+						: (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+				if(this.sliderValue < 0.0F) {
+					this.sliderValue = 0.0F;
+				}
+
+				if(this.sliderValue > 1.0F) {
+					this.sliderValue = 1.0F;
+				}
+
+				this.displayString = getDisplayString();
+			}
+
+
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			if (this.vertical) {
+				this.drawTexturedModalRect(this.xPosition, this.yPosition + (int)(this.sliderValue * (float)(this.height - 8)), 18, 112, this.width, 4);
+				this.drawTexturedModalRect(this.xPosition, this.yPosition + (int)(this.sliderValue * (float)(this.height - 8)) + 4, 18, 252, this.width, 4);
+			} else {
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, this.height);
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, this.height);
+			}
+		}
+	}
+
+	public boolean mousePressed(Minecraft var1, int var2, int var3) {
+		if(super.mousePressed(var1, var2, var3)) {
+			this.sliderValue = this.vertical
+					? (float)(var2 - (this.yPosition + 4)) / (float)(this.height - 8)
+					: (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+
+			if(this.sliderValue < 0.0F) {
+				this.sliderValue = 0.0F;
+			}
+
+			if(this.sliderValue > 1.0F) {
+				this.sliderValue = 1.0F;
+			}
+
+			this.dragging = true;
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void mouseReleased(int var1, int var2) {
+		this.dragging = false;
+	}
+
+	public void drawButton(Minecraft minecraft, int mouseX, int mouseY) {
+		if (!this.vertical) {
+			super.drawButton(minecraft, mouseX, mouseY);
+		}
+
+		if (this.visible) {
+			FontRenderer fontRenderer4 = minecraft.fontRenderer;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/gui.png"));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+//			boolean var5 = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
+			this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 112, this.width, this.height / 2);
+			this.drawTexturedModalRect(this.xPosition, this.yPosition + this.height / 2, 0, 256 - this.height / 2, this.width, this.height / 2);
+			this.mouseDragged(minecraft, mouseX, mouseY);
+			/*
+			if(!this.enabled) {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
+			} else if(var5) {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
+			} else {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
+			}
+			*/
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemMagic.java
@@ -1,0 +1,30 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.Item;
+import net.minecraft.src.ItemStack;
+import net.minecraft.src.World;
+
+public class ItemMagic extends Item {
+	public float useMana;
+
+	public ItemMagic(int var1, float var2) {
+		super(var1);
+		this.useMana = var2;
+	}
+
+	public ItemStack onMagicItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		return var1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (var3.useMana(this.useMana)) {
+			return this.onMagicItemRightClick(var1, var2, var3);
+		}
+		return var1;
+	}
+
+	public boolean isMagic() {
+		return true;
+	}
+}
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -43,12 +43,12 @@
 			var12 += var22 * 0.1F;
 			var11 += var21 * 0.1F;
 			var22 *= 0.9F;
-			var21 *= 12.0F / 16.0F;
+			var21 *= 0.75F;
 			var22 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 2.0F;
 			var21 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 4.0F;
 			if(!var52 && var13 == var25 && var10 > 1.0F) {
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
+				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI / 2F, var12 / 3.0F, var13, var14, 1.0D);
+				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI / 2F, var12 / 3.0F, var13, var14, 1.0D);
 				return;
 			}
 
@@ -131,14 +131,14 @@
 										}
 
 										if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
-											if(var48 < 10) {
-												var3[var46] = (byte)Block.lavaMoving.blockID;
-											} else {
+//											if(var48 < 10) {
+//												var3[var46] = (byte)Block.lavaStill.blockID;
+//											} else {
 												var3[var46] = 0;
 												if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
 													var3[var46 - 1] = (byte)Block.grass.blockID;
 												}
-											}
+//											}
 										}
 									}
 
@@ -174,9 +174,9 @@
 			}
 
 			for(int var16 = 0; var16 < var15; ++var16) {
-				float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
-				float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
+				float var17 = this.rand.nextFloat() * (float) Math.PI * 2.0F;
+				float var18 = (this.rand.nextFloat() - 0.5F) / 4.0F;
+				float var19 = this.rand.nextFloat() * 6.0F;
 				this.generateCaveNode(var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
 			}
 		}
--- net/minecraft/src/MetadataChunkBlock.java
+++ net/minecraft/src/MetadataChunkBlock.java
@@ -5,37 +5,37 @@
 	public int minX;
 	public int minY;
 	public int minZ;
-	public int maxX;
-	public int maxY;
-	public int maxZ;
 	public int x;
 	public int y;
 	public int z;
+	public int maxX;
+	public int maxY;
+	public int maxZ;
 
-	public MetadataChunkBlock(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.skyBlock = var1;
-		this.minX = var2;
-		this.minY = var3;
-		this.minZ = var4;
-		this.maxX = var5;
-		this.maxY = var6;
-		this.maxZ = var7;
+	public MetadataChunkBlock(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.skyBlock = skyBlock;
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
 	}
 
-	public void updateLight(World var1) {
+	public void updateLight(World world) {
 		int var2 = this.maxX - this.minX;
 		int var3 = this.maxY - this.minY;
 		int var4 = this.maxZ - this.minZ;
 		int var5 = var2 * var3 * var4;
-		if(var5 <= -Short.MIN_VALUE) {
+		if(var5 <= 32768) {
 			for(int var6 = this.minX; var6 <= this.maxX; ++var6) {
 				for(int var7 = this.minZ; var7 <= this.maxZ; ++var7) {
-					if(var1.blockExists(var6, 0, var7)) {
+					if(world.blockExists(var6, 0, var7)) {
 						for(int var8 = this.minY; var8 <= this.maxY; ++var8) {
 							if(var8 >= 0 && var8 < 128) {
-								int var9 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7);
+								int var9 = world.getSavedLightValue(this.skyBlock, var6, var8, var7);
 								boolean var10 = false;
-								int var11 = var1.getBlockId(var6, var8, var7);
+								int var11 = world.getBlockId(var6, var8, var7);
 								int var12 = Block.lightOpacity[var11];
 								if(var12 == 0) {
 									var12 = 1;
@@ -43,7 +43,7 @@
 
 								int var13 = 0;
 								if(this.skyBlock == EnumSkyBlock.Sky) {
-									if(var1.canExistingBlockSeeTheSky(var6, var8, var7)) {
+									if(world.canExistingBlockSeeTheSky(var6, var8, var7)) {
 										var13 = 15;
 									}
 								} else if(this.skyBlock == EnumSkyBlock.Block) {
@@ -55,12 +55,12 @@
 								if(var12 >= 15 && var13 == 0) {
 									var20 = 0;
 								} else {
-									var14 = var1.getSavedLightValue(this.skyBlock, var6 - 1, var8, var7);
-									int var15 = var1.getSavedLightValue(this.skyBlock, var6 + 1, var8, var7);
-									int var16 = var1.getSavedLightValue(this.skyBlock, var6, var8 - 1, var7);
-									int var17 = var1.getSavedLightValue(this.skyBlock, var6, var8 + 1, var7);
-									int var18 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 - 1);
-									int var19 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 + 1);
+									var14 = world.getSavedLightValue(this.skyBlock, var6 - 1, var8, var7);
+									int var15 = world.getSavedLightValue(this.skyBlock, var6 + 1, var8, var7);
+									int var16 = world.getSavedLightValue(this.skyBlock, var6, var8 - 1, var7);
+									int var17 = world.getSavedLightValue(this.skyBlock, var6, var8 + 1, var7);
+									int var18 = world.getSavedLightValue(this.skyBlock, var6, var8, var7 - 1);
+									int var19 = world.getSavedLightValue(this.skyBlock, var6, var8, var7 + 1);
 									var20 = var14;
 									if(var15 > var14) {
 										var20 = var15;
@@ -93,25 +93,25 @@
 								}
 
 								if(var9 != var20) {
-									var1.setLightValue(this.skyBlock, var6, var8, var7, var20);
+									world.setLightValue(this.skyBlock, var6, var8, var7, var20);
 									var14 = var20 - 1;
 									if(var14 < 0) {
 										var14 = 0;
 									}
 
-									var1.neighborLightPropagationChanged(this.skyBlock, var6 - 1, var8, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 - 1, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 - 1, var14);
+									world.neighborLightPropagationChanged(this.skyBlock, var6 - 1, var8, var7, var14);
+									world.neighborLightPropagationChanged(this.skyBlock, var6, var8 - 1, var7, var14);
+									world.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 - 1, var14);
 									if(var6 + 1 >= this.maxX) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6 + 1, var8, var7, var14);
+										world.neighborLightPropagationChanged(this.skyBlock, var6 + 1, var8, var7, var14);
 									}
 
 									if(var8 + 1 >= this.maxY) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 + 1, var7, var14);
+										world.neighborLightPropagationChanged(this.skyBlock, var6, var8 + 1, var7, var14);
 									}
 
 									if(var7 + 1 >= this.maxZ) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 + 1, var14);
+										world.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 + 1, var14);
 									}
 								}
 							}
@@ -123,51 +123,51 @@
 		}
 	}
 
-	public boolean getLightUpdated(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var1 >= this.minX && var2 >= this.minY && var3 >= this.minZ && var4 <= this.maxX && var5 <= this.maxY && var6 <= this.maxZ) {
+	public boolean getLightUpdated(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(minX >= this.minX && minY >= this.minY && minZ >= this.minZ && maxX <= this.maxX && maxY <= this.maxY && maxZ <= this.maxZ) {
 			return true;
 		} else {
 			byte var7 = 1;
-			if(var1 >= this.minX - var7 && var2 >= this.minY - var7 && var3 >= this.minZ - var7 && var4 <= this.maxX + var7 && var5 <= this.maxY + var7 && var6 <= this.maxZ + var7) {
+			if(minX >= this.minX - var7 && minY >= this.minY - var7 && minZ >= this.minZ - var7 && maxX <= this.maxX + var7 && maxY <= this.maxY + var7 && maxZ <= this.maxZ + var7) {
 				int var8 = this.maxX - this.minX;
 				int var9 = this.maxY - this.minY;
 				int var10 = this.maxZ - this.minZ;
-				if(var1 > this.minX) {
-					var1 = this.minX;
-				}
-
-				if(var2 > this.minY) {
-					var2 = this.minY;
-				}
-
-				if(var3 > this.minZ) {
-					var3 = this.minZ;
-				}
-
-				if(var4 < this.maxX) {
-					var4 = this.maxX;
-				}
-
-				if(var5 < this.maxY) {
-					var5 = this.maxY;
-				}
-
-				if(var6 < this.maxZ) {
-					var6 = this.maxZ;
-				}
-
-				int var11 = var4 - var1;
-				int var12 = var5 - var2;
-				int var13 = var6 - var3;
+				if(minX > this.minX) {
+					minX = this.minX;
+				}
+
+				if(minY > this.minY) {
+					minY = this.minY;
+				}
+
+				if(minZ > this.minZ) {
+					minZ = this.minZ;
+				}
+
+				if(maxX < this.maxX) {
+					maxX = this.maxX;
+				}
+
+				if(maxY < this.maxY) {
+					maxY = this.maxY;
+				}
+
+				if(maxZ < this.maxZ) {
+					maxZ = this.maxZ;
+				}
+
+				int var11 = maxX - minX;
+				int var12 = maxY - minY;
+				int var13 = maxZ - minZ;
 				int var14 = var8 * var9 * var10;
 				int var15 = var11 * var12 * var13;
 				if(var15 - var14 <= 2) {
-					this.minX = var1;
-					this.minY = var2;
-					this.minZ = var3;
-					this.maxX = var4;
-					this.maxY = var5;
-					this.maxZ = var6;
+					this.minX = minX;
+					this.minY = minY;
+					this.minZ = minZ;
+					this.maxX = maxX;
+					this.maxY = maxY;
+					this.maxZ = maxZ;
 					return true;
 				}
 			}
--- net/minecraft/src/Packet5PlayerInventory.java
+++ net/minecraft/src/Packet5PlayerInventory.java
@@ -11,50 +11,52 @@
 	public Packet5PlayerInventory() {
 	}
 
-	public Packet5PlayerInventory(int var1, ItemStack[] var2) {
-		this.inventoryType = var1;
-		this.inventory = new ItemStack[var2.length];
+	public Packet5PlayerInventory(int invType, ItemStack[] invContents) {
+		this.inventoryType = invType;
+		this.inventory = new ItemStack[invContents.length];
 
 		for(int var3 = 0; var3 < this.inventory.length; ++var3) {
-			this.inventory[var3] = var2[var3] == null ? null : var2[var3].copy();
+			this.inventory[var3] = invContents[var3] == null ? null : invContents[var3].copy();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.inventoryType = var1.readInt();
-		short var2 = var1.readShort();
-		this.inventory = new ItemStack[var2];
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.inventoryType = dataInputStream.readInt();
+		short s2 = dataInputStream.readShort();
+		this.inventory = new ItemStack[s2];
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			short var4 = var1.readShort();
-			if(var4 >= 0) {
-				byte var5 = var1.readByte();
-				short var6 = var1.readShort();
-				this.inventory[var3] = new ItemStack(var4, var5, var6);
+		for(int var3 = 0; var3 < s2; ++var3) {
+			short s4 = dataInputStream.readShort();
+			if(s4 >= 0) {
+				byte var5 = dataInputStream.readByte();
+				short s6 = dataInputStream.readShort();
+				byte var7 = dataInputStream.readByte();
+				this.inventory[var3] = new ItemStack(s4, var5, s6).withMetadata(var7);
 			}
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.inventoryType);
-		var1.writeShort(this.inventory.length);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.inventoryType);
+		dataOutputStream.writeShort(this.inventory.length);
 
 		for(int var2 = 0; var2 < this.inventory.length; ++var2) {
 			if(this.inventory[var2] == null) {
-				var1.writeShort(-1);
+				dataOutputStream.writeShort(-1);
 			} else {
-				var1.writeShort((short)this.inventory[var2].itemID);
-				var1.writeByte((byte)this.inventory[var2].stackSize);
-				var1.writeShort((short)this.inventory[var2].itemDmg);
+				dataOutputStream.writeShort((short)this.inventory[var2].itemID);
+				dataOutputStream.writeByte((byte)this.inventory[var2].stackSize);
+				dataOutputStream.writeShort((short)this.inventory[var2].itemDmg);
+				dataOutputStream.writeByte((short)this.inventory[var2].itemMetadata);
 			}
 		}
 
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handlePlayerInventory(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePlayerInventory(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/GuiCrafting.java
+++ net/minecraft/src/GuiCrafting.java
@@ -5,7 +5,7 @@
 public class GuiCrafting extends GuiContainer {
 	public CraftingInventoryWorkbenchCB craftingInventory = new CraftingInventoryWorkbenchCB();
 
-	public GuiCrafting(InventoryPlayer var1) {
+	public GuiCrafting(InventoryPlayer inventoryPlayer1) {
 		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 124, 35));
 
 		int var2;
@@ -18,12 +18,12 @@
 
 		for(var2 = 0; var2 < 3; ++var2) {
 			for(var3 = 0; var3 < 9; ++var3) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var3 + (var2 + 1) * 9, 8 + var3 * 18, 84 + var2 * 18));
+				this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var3 + (var2 + 1) * 9, 8 + var3 * 18, 84 + var2 * 18));
 			}
 		}
 
 		for(var2 = 0; var2 < 9; ++var2) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var2, 8 + var2 * 18, 142));
+			this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var2, 8 + var2 * 18, 142));
 		}
 
 	}
@@ -34,11 +34,11 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 28, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Crafting", 28, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
 		int var2 = this.mc.renderEngine.getTexture("/gui/crafting.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -9,30 +9,30 @@
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(!this.sheared && var1 instanceof EntityLiving) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(!this.sheared && entity instanceof EntityLiving) {
 			this.sheared = true;
 			int var3 = 1 + this.rand.nextInt(3);
 
 			for(int var4 = 0; var4 < var3; ++var4) {
-				EntityItem var5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
-				var5.motionY += (double)(this.rand.nextFloat() * 0.05F);
-				var5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				EntityItem entityItem5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
+				entityItem5.motionY += (double)(this.rand.nextFloat() * 0.05F);
+				entityItem5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
 			}
 		}
 
-		return super.attackEntityFrom(var1, var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Sheared", this.sheared);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.sheared = var1.getBoolean("Sheared");
+		return super.attackEntityFrom(entity, damage);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setBoolean("Sheared", this.sheared);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		this.sheared = compoundTag.getBoolean("Sheared");
 	}
 
 	protected String getLivingSound() {
@@ -45,5 +45,9 @@
 
 	protected String getDeathSound() {
 		return "mob.sheep";
+	}
+
+	protected int getDropItemId() {
+		return Item.muttonRaw.shiftedIndex;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenSpruceTrees.java
@@ -1,0 +1,137 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class WorldGenSpruceTrees extends WorldGenerator {
+	private int trunkHeight = 6;
+	private int trunkVariation = 4;
+	private int leavesWidth = 2;
+	private boolean big = false;
+
+	public WorldGenSpruceTrees makeBig() {
+		this.big = true;
+		return this;
+	}
+
+	public void setScale(double var1, double var3, double var5) {
+		trunkHeight = (int)var1 + 6;
+		trunkVariation = (int)var3 + 4;
+		leavesWidth = (int)var5 + 2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(trunkVariation) + trunkHeight;
+		int var7 = 1 + var2.nextInt(leavesWidth);
+		int var8 = var6 - var7;
+		int var9 = 2 + var2.nextInt(leavesWidth);
+		int squareSize = big ? 2 : 1;
+		boolean var10 = true;
+
+		if (var1.getBlockId(var3, var4, var5) == Block.snow.blockID) {
+			var1.setBlock(var3, var4--, var5, 0);
+		}
+
+		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+			int var11;
+			int var13;
+			int var15;
+			int var21;
+			for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
+				if(var11 - var4 < var7) {
+					var21 = 0;
+				} else {
+					var21 = var9;
+				}
+
+				for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
+					for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
+						if (var11 >= 0 && var11 < 128) {
+							var15 = var1.getBlockId(var13, var11, var14);
+							if(var15 != 0 && var15 != Block.leaves.blockID && var15 != Block.snow.blockID) {
+								var10 = false;
+							}
+						} else {
+							var10 = false;
+						}
+					}
+				}
+			}
+
+			if(!var10) {
+				return false;
+			} else {
+				var11 = var1.getBlockId(var3, var4 - 1, var5);
+				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+					placeBlockSquare(var1, var3, var4 - 1, var5, Block.dirt.blockID, 0, squareSize);
+					var21 = var2.nextInt(2);
+					var13 = 1;
+					byte var22 = 0;
+
+					int var16;
+					int var17;
+					for(var15 = 0; var15 <= var8; ++var15) {
+						var16 = var4 + var6 - var15;
+
+						for(var17 = var3 - var21; var17 <= var3 + var21; ++var17) {
+							int var18 = var17 - var3;
+
+							for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
+								int var20 = var19 - var5;
+
+								int leafX = var17;
+								int leafZ = var19;
+								int leafSize = squareSize;
+								if (big) {
+									if ((leafX == var3 || leafZ == var5)) leafSize++;
+									if (leafX > var3) leafX++;
+									if (leafZ > var5) leafZ++;
+									if (var15 < 2) leafSize -= 2 - var15;
+								}
+
+								if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
+									placeBlockSquare(var1, leafX, var16, leafZ, Block.leaves.blockID, 1, leafSize);
+								}
+							}
+						}
+
+						if(var21 >= var13) {
+							var21 = var22;
+							var22 = 1;
+							++var13;
+							if(var13 > var9) {
+								var13 = var9;
+							}
+						} else {
+							++var21;
+						}
+					}
+
+					var15 = var2.nextInt(3);
+
+					for(var16 = 0; var16 < var6 - var15; ++var16) {
+						var17 = var1.getBlockId(var3, var4 + var16, var5);
+						if(var17 == 0 || var17 == Block.leaves.blockID) {
+							placeBlockSquare(var1, var3, var4 + var16, var5, Block.wood.blockID, 1, squareSize);
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private static void placeBlockSquare(World world, int x, int y, int z, int id, int metadata, int size) {
+		for (int sx = 0; sx < size; sx++) {
+			for (int sz = 0; sz < size; sz++) {
+				world.setBlockAndMetadata(x + sx, y, z + sz, id, metadata);
+			}
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemDye.java
@@ -1,0 +1,36 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.stream.IntStream;
+
+public class ItemDye extends Item {
+	public static final int WHITE = 0;
+	public static final int RED = 1;
+	public static final int ORANGE = 2;
+	public static final int YELLOW = 3;
+	public static final int CHARTREUSE = 4;
+	public static final int GREEN = 5;
+	public static final int SPRING_GREEN = 6;
+	public static final int CYAN = 7;
+	public static final int CAPRI = 8;
+	public static final int ULTRAMARINE = 9;
+	public static final int VIOLET = 10;
+	public static final int PURPLE = 11;
+	public static final int MAGENTA = 12;
+	public static final int ROSE = 13;
+	public static final int BLACK = 14;
+	public static final int GRAY = 15;
+
+	public ItemDye(int id) {
+		super(id);
+	}
+
+	public int getIconIndex(ItemStack itemStack) {
+		return this.iconIndex + (itemStack.itemMetadata % 4) + (itemStack.itemMetadata / 4 * 16);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 16).toArray();
+	}
+}
--- net/minecraft/src/RenderPainting.java
+++ net/minecraft/src/RenderPainting.java
@@ -1,28 +1,29 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
 public class RenderPainting extends Render {
 	private Random rand = new Random();
 
-	public void renderThePainting(EntityPainting var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderThePainting(EntityPainting entityPainting1, double var2, double var4, double var6, float var8, float var9) {
 		this.rand.setSeed(187L);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glRotatef(var8, 0.0F, 1.0F, 0.0F);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		this.loadTexture("/art/kz.png");
-		EnumArt var10 = var1.art;
-		float var11 = 1.0F / 16.0F;
+		EnumArt enumArt10 = entityPainting1.art;
+		float var11 = 0.0625F;
 		GL11.glScalef(var11, var11, var11);
-		this.setSizes(var1, var10.sizeX, var10.sizeY, var10.offsetX, var10.offsetY);
+		this.setSizes(entityPainting1, enumArt10.sizeX, enumArt10.sizeY, enumArt10.offsetX, enumArt10.offsetY);
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		GL11.glPopMatrix();
 	}
 
-	private void setSizes(EntityPainting var1, int var2, int var3, int var4, int var5) {
+	private void setSizes(EntityPainting entityPainting, int var2, int var3, int var4, int var5) {
 		float var6 = (float)(-var2) / 2.0F;
 		float var7 = (float)(-var3) / 2.0F;
 		float var8 = -0.5F;
@@ -34,79 +35,79 @@
 				float var13 = var6 + (float)(var10 * 16);
 				float var14 = var7 + (float)((var11 + 1) * 16);
 				float var15 = var7 + (float)(var11 * 16);
-				this.getOffset(var1, (var12 + var13) / 2.0F, (var14 + var15) / 2.0F);
+				this.getOffset(entityPainting, (var12 + var13) / 2.0F, (var14 + var15) / 2.0F);
 				float var16 = (float)(var4 + var2 - var10 * 16) / 256.0F;
 				float var17 = (float)(var4 + var2 - (var10 + 1) * 16) / 256.0F;
 				float var18 = (float)(var5 + var3 - var11 * 16) / 256.0F;
 				float var19 = (float)(var5 + var3 - (var11 + 1) * 16) / 256.0F;
-				float var20 = 12.0F / 16.0F;
-				float var21 = 13.0F / 16.0F;
+				float var20 = 0.75F;
+				float var21 = 0.8125F;
 				float var22 = 0.0F;
-				float var23 = 1.0F / 16.0F;
-				float var24 = 12.0F / 16.0F;
-				float var25 = 13.0F / 16.0F;
-				float var26 = 1.0F / 512.0F;
-				float var27 = 1.0F / 512.0F;
-				float var28 = 385.0F / 512.0F;
-				float var29 = 385.0F / 512.0F;
+				float var23 = 0.0625F;
+				float var24 = 0.75F;
+				float var25 = 0.8125F;
+				float var26 = 0.001953125F;
+				float var27 = 0.001953125F;
+				float var28 = 0.7519531F;
+				float var29 = 0.7519531F;
 				float var30 = 0.0F;
-				float var31 = 1.0F / 16.0F;
-				Tessellator var32 = Tessellator.instance;
-				var32.startDrawingQuads();
-				var32.setNormal(0.0F, 0.0F, -1.0F);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var17, (double)var18);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var16, (double)var18);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var16, (double)var19);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var17, (double)var19);
-				var32.setNormal(0.0F, 0.0F, 1.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var20, (double)var22);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var21, (double)var22);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var21, (double)var23);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var20, (double)var23);
-				var32.setNormal(0.0F, -1.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var24, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var25, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var25, (double)var27);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var24, (double)var27);
-				var32.setNormal(0.0F, 1.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var24, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var25, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var25, (double)var27);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var24, (double)var27);
-				var32.setNormal(-1.0F, 0.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var29, (double)var30);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var29, (double)var31);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var28, (double)var31);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var28, (double)var30);
-				var32.setNormal(1.0F, 0.0F, 0.0F);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var29, (double)var30);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var29, (double)var31);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var28, (double)var31);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var28, (double)var30);
-				var32.draw();
+				float var31 = 0.0625F;
+				Tessellator tessellator32 = Tessellator.instance;
+				tessellator32.startDrawingQuads();
+				tessellator32.setNormal(0.0F, 0.0F, -1.0F);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var17, (double)var18);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var16, (double)var18);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var16, (double)var19);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var17, (double)var19);
+				tessellator32.setNormal(0.0F, 0.0F, 1.0F);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var20, (double)var22);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var21, (double)var22);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var21, (double)var23);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var20, (double)var23);
+				tessellator32.setNormal(0.0F, -1.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var24, (double)var26);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var25, (double)var26);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var25, (double)var27);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var24, (double)var27);
+				tessellator32.setNormal(0.0F, 1.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var24, (double)var26);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var25, (double)var26);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var25, (double)var27);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var24, (double)var27);
+				tessellator32.setNormal(-1.0F, 0.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var29, (double)var30);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var29, (double)var31);
+				tessellator32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var28, (double)var31);
+				tessellator32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var28, (double)var30);
+				tessellator32.setNormal(1.0F, 0.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var29, (double)var30);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var29, (double)var31);
+				tessellator32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var28, (double)var31);
+				tessellator32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var28, (double)var30);
+				tessellator32.draw();
 			}
 		}
 
 	}
 
-	private void getOffset(EntityPainting var1, float var2, float var3) {
-		int var4 = MathHelper.floor_double(var1.posX);
-		int var5 = MathHelper.floor_double(var1.posY + (double)(var3 / 16.0F));
-		int var6 = MathHelper.floor_double(var1.posZ);
-		if(var1.direction == 0) {
-			var4 = MathHelper.floor_double(var1.posX + (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 1) {
-			var6 = MathHelper.floor_double(var1.posZ - (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 2) {
-			var4 = MathHelper.floor_double(var1.posX - (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 3) {
-			var6 = MathHelper.floor_double(var1.posZ + (double)(var2 / 16.0F));
+	private void getOffset(EntityPainting entityPainting, float var2, float var3) {
+		int var4 = MathHelper.floor_double(entityPainting.posX);
+		int var5 = MathHelper.floor_double(entityPainting.posY + (double)(var3 / 16.0F));
+		int var6 = MathHelper.floor_double(entityPainting.posZ);
+		if(entityPainting.direction == 0) {
+			var4 = MathHelper.floor_double(entityPainting.posX + (double)(var2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 1) {
+			var6 = MathHelper.floor_double(entityPainting.posZ - (double)(var2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 2) {
+			var4 = MathHelper.floor_double(entityPainting.posX - (double)(var2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 3) {
+			var6 = MathHelper.floor_double(entityPainting.posZ + (double)(var2 / 16.0F));
 		}
 
 		float var7 = this.renderManager.worldObj.getBrightness(var4, var5, var6);
--- net/minecraft/src/FontRenderer.java
+++ net/minecraft/src/FontRenderer.java
@@ -4,6 +4,7 @@
 import java.io.IOException;
 import java.nio.IntBuffer;
 import javax.imageio.ImageIO;
+
 import org.lwjgl.opengl.GL11;
 
 public class FontRenderer {
@@ -12,18 +13,18 @@
 	private int fontDisplayLists;
 	private IntBuffer buffer = GLAllocation.createDirectIntBuffer(1024);
 
-	public FontRenderer(GameSettings var1, String var2, RenderEngine var3) {
-		BufferedImage var4;
+	public FontRenderer(GameSettings gameSettings1, String var2, RenderEngine var3) {
+		BufferedImage bufferedImage4;
 		try {
-			var4 = ImageIO.read(RenderEngine.class.getResourceAsStream(var2));
-		} catch (IOException var18) {
-			throw new RuntimeException(var18);
+			bufferedImage4 = ImageIO.read(RenderEngine.class.getResourceAsStream(var2));
+		} catch (IOException iOException18) {
+			throw new RuntimeException(iOException18);
 		}
 
-		int var5 = var4.getWidth();
-		int var6 = var4.getHeight();
+		int var5 = bufferedImage4.getWidth();
+		int var6 = bufferedImage4.getHeight();
 		int[] var7 = new int[var5 * var6];
-		var4.getRGB(0, 0, var5, var6, var7, 0, var5);
+		bufferedImage4.getRGB(0, 0, var5, var6, var7, 0, var5);
 
 		int var9;
 		int var10;
@@ -59,23 +60,23 @@
 			this.charWidth[var8] = var11 + 2;
 		}
 
-		this.fontTextureName = var3.allocateAndSetupTexture(var4);
+		this.fontTextureName = var3.allocateAndSetupTexture(bufferedImage4);
 		this.fontDisplayLists = GLAllocation.generateDisplayLists(288);
-		Tessellator var19 = Tessellator.instance;
+		Tessellator tessellator19 = Tessellator.instance;
 
 		for(var9 = 0; var9 < 256; ++var9) {
 			GL11.glNewList(this.fontDisplayLists + var9, GL11.GL_COMPILE);
-			var19.startDrawingQuads();
+			tessellator19.startDrawingQuads();
 			var10 = var9 % 16 * 8;
 			var11 = var9 / 16 * 8;
 			float var20 = 7.99F;
 			float var21 = 0.0F;
 			float var23 = 0.0F;
-			var19.addVertexWithUV(0.0D, (double)(0.0F + var20), 0.0D, (double)((float)var10 / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-			var19.addVertexWithUV((double)(0.0F + var20), (double)(0.0F + var20), 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-			var19.addVertexWithUV((double)(0.0F + var20), 0.0D, 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-			var19.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)((float)var10 / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-			var19.draw();
+			tessellator19.addVertexWithUV(0.0D, (double)(0.0F + var20), 0.0D, (double)((float)var10 / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
+			tessellator19.addVertexWithUV((double)(0.0F + var20), (double)(0.0F + var20), 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
+			tessellator19.addVertexWithUV((double)(0.0F + var20), 0.0D, 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
+			tessellator19.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)((float)var10 / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
+			tessellator19.draw();
 			GL11.glTranslatef((float)this.charWidth[var9], 0.0F, 0.0F);
 			GL11.glEndList();
 		}
@@ -90,7 +91,7 @@
 			}
 
 			boolean var24 = var9 >= 16;
-			if(var1.anaglyph) {
+			if(gameSettings1.anaglyph) {
 				var15 = (var11 * 30 + var12 * 59 + var22 * 11) / 100;
 				var16 = (var11 * 30 + var12 * 70) / 100;
 				int var17 = (var11 * 30 + var22 * 70) / 100;
@@ -125,7 +126,7 @@
 		if(var1 != null) {
 			int var6;
 			if(var5) {
-				var6 = var4 & -16777216;
+				var6 = var4 & 0xFF000000;
 				var4 = (var4 & 16579836) >> 2;
 				var4 += var6;
 			}
--- net/minecraft/src/BlockButton.java
+++ net/minecraft/src/BlockButton.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockButton extends Block {
-	protected BlockButton(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockButton(int id, int tex) {
+		super(id, tex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
@@ -24,95 +24,95 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
 	}
 
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void onBlockPlaced(World worldObj, int x, int y, int z, int metadata) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		int var7 = var6 & 8;
 		var6 &= 7;
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+		if(metadata == 2 && worldObj.isBlockNormalCube(x, y, z + 1)) {
 			var6 = 4;
 		}
 
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+		if(metadata == 3 && worldObj.isBlockNormalCube(x, y, z - 1)) {
 			var6 = 3;
 		}
 
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+		if(metadata == 4 && worldObj.isBlockNormalCube(x + 1, y, z)) {
 			var6 = 2;
 		}
 
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+		if(metadata == 5 && worldObj.isBlockNormalCube(x - 1, y, z)) {
 			var6 = 1;
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var6 + var7);
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		if(worldObj.isBlockNormalCube(x - 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(worldObj.isBlockNormalCube(x + 1, y, z)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(worldObj.isBlockNormalCube(x, y, z - 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(worldObj.isBlockNormalCube(x, y, z + 1)) {
+			worldObj.setBlockMetadataWithNotify(x, y, z, 4);
 		}
 
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
+		this.checkIfAttachedToBlock(worldObj, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(this.checkIfAttachedToBlock(worldObj, x, y, z)) {
+			int var6 = worldObj.getBlockMetadata(x, y, z) & 7;
 			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
+			if(!worldObj.isBlockNormalCube(x - 1, y, z) && var6 == 1) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x + 1, y, z) && var6 == 2) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z - 1) && var6 == 3) {
+				var7 = true;
+			}
+
+			if(!worldObj.isBlockNormalCube(x, y, z + 1) && var6 == 4) {
 				var7 = true;
 			}
 
 			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	private boolean checkIfAttachedToBlock(World worldObj, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int var5 = blockAccess.getBlockMetadata(x, y, z);
 		int var6 = var5 & 7;
 		boolean var7 = (var5 & 8) > 0;
-		float var8 = 6.0F / 16.0F;
-		float var9 = 10.0F / 16.0F;
-		float var10 = 3.0F / 16.0F;
-		float var11 = 2.0F / 16.0F;
+		float var8 = 0.375F;
+		float var9 = 0.625F;
+		float var10 = 0.1875F;
+		float var11 = 0.125F;
 		if(var7) {
-			var11 = 1.0F / 16.0F;
+			var11 = 0.0625F;
 		}
 
 		if(var6 == 1) {
@@ -127,70 +127,70 @@
 
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
+	public void onBlockClicked(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(worldObj, x, y, z, entityPlayer);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		int var7 = var6 & 7;
 		int var8 = 8 - (var6 & 8);
 		if(var8 == 0) {
 			return true;
 		} else {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+			worldObj.setBlockMetadataWithNotify(x, y, z, var7 + var8);
+			worldObj.markBlocksDirty(x, y, z, x, y, z);
+			worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
 			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
 			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
 			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+			worldObj.scheduleBlockUpdate(x, y, z, this.blockID);
 			return true;
 		}
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
 		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 			int var6 = var5 & 7;
 			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
 			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
 			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
 			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		super.onBlockRemoval(worldObj, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int metadata) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World worldObj, int x, int y, int z, int side) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if((var6 & 8) == 0) {
 			return false;
 		} else {
 			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+			return var7 == 5 && side == 1 ? true : (var7 == 4 && side == 2 ? true : (var7 == 3 && side == 3 ? true : (var7 == 2 && side == 4 ? true : var7 == 1 && side == 5)));
 		}
 	}
 
@@ -198,33 +198,33 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if((var6 & 8) != 0) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & 7);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+			worldObj.setBlockMetadataWithNotify(x, y, z, var6 & 7);
+			worldObj.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 			int var7 = var6 & 7;
 			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
 			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
 			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
 			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				worldObj.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
+			worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
+			worldObj.markBlocksDirty(x, y, z, x, y, z);
 		}
 	}
 
 	public void setBlockBoundsForItemRender() {
-		float var1 = 3.0F / 16.0F;
-		float var2 = 2.0F / 16.0F;
-		float var3 = 2.0F / 16.0F;
+		float var1 = 0.1875F;
+		float var2 = 0.125F;
+		float var3 = 0.125F;
 		this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
 	}
 }
--- net/minecraft/src/GuiDeleteWorld.java
+++ net/minecraft/src/GuiDeleteWorld.java
@@ -1,16 +1,17 @@
 package net.minecraft.src;
 
 import java.io.File;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiDeleteWorld extends GuiSelectWorld {
-	public GuiDeleteWorld(GuiScreen var1) {
-		super(var1);
+	public GuiDeleteWorld(GuiScreen guiScreen1) {
+		super(guiScreen1);
 		this.screenTitle = "Delete world";
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(106, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
 	}
 
 	public void selectWorld(int var1) {
@@ -18,15 +19,21 @@
 		if(var2 != null) {
 			this.mc.displayGuiScreen(new GuiYesNo(this, "Are you sure you want to delete this world?", "\'" + var2 + "\' will be lost forever!", var1));
 		}
-
 	}
 
 	public void deleteWorld(boolean var1, int var2) {
 		if(var1) {
-			File var3 = Minecraft.getMinecraftDir();
-			World.deleteWorld(var3, this.getSaveName(var2));
+			File file3 = Minecraft.getMinecraftDir();
+			World.deleteWorld(file3, "World" + var2);
 		}
 
 		this.mc.displayGuiScreen(this.parentScreen);
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if (button.id == 106)
+			this.mc.displayGuiScreen(this.parentScreen);
+		else
+			super.actionPerformed(button);
 	}
 }
--- net/minecraft/src/CompressedStreamTools.java
+++ net/minecraft/src/CompressedStreamTools.java
@@ -13,66 +13,66 @@
 import java.util.zip.GZIPOutputStream;
 
 public class CompressedStreamTools {
-	public static NBTTagCompound readCompressed(InputStream var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(var0));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static void writeCompressed(NBTTagCompound var0, OutputStream var1) throws IOException {
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-	}
-
-	public static NBTTagCompound decompress(byte[] var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(var0)));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static byte[] compress(NBTTagCompound var0) throws IOException {
-		ByteArrayOutputStream var1 = new ByteArrayOutputStream();
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-		return var1.toByteArray();
-	}
-
-	public static NBTTagCompound read(DataInput var0) throws IOException {
-		NBTBase var1 = NBTBase.readNamedTag(var0);
-		if(var1 instanceof NBTTagCompound) {
-			return (NBTTagCompound)var1;
+	public static NBTTagCompound readCompressed(InputStream inputStream) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(inputStream));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static void writeCompressed(NBTTagCompound compoundTag, OutputStream outputStream) throws IOException {
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(outputStream));
+
+		try {
+			write(compoundTag, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+	}
+
+	public static NBTTagCompound decompress(byte[] data) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(data)));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static byte[] compress(NBTTagCompound compoundTag) throws IOException {
+		ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(byteArrayOutputStream1));
+
+		try {
+			write(compoundTag, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+		return byteArrayOutputStream1.toByteArray();
+	}
+
+	public static NBTTagCompound read(DataInput dataInput) throws IOException {
+		NBTBase nBTBase1 = NBTBase.readNamedTag(dataInput);
+		if(nBTBase1 instanceof NBTTagCompound) {
+			return (NBTTagCompound)nBTBase1;
 		} else {
 			throw new IOException("Root tag must be a named compound tag");
 		}
 	}
 
-	public static void write(NBTTagCompound var0, DataOutput var1) throws IOException {
-		NBTBase.writeNamedTag(var0, var1);
+	public static void write(NBTTagCompound compoundTag, DataOutput dataOutput) throws IOException {
+		NBTBase.writeNamedTag(compoundTag, dataOutput);
 	}
 }
--- net/minecraft/src/BlockTNT.java
+++ net/minecraft/src/BlockTNT.java
@@ -3,35 +3,35 @@
 import java.util.Random;
 
 public class BlockTNT extends Block {
-	public BlockTNT(int var1, int var2) {
-		super(var1, var2, Material.tnt);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 0 ? this.blockIndexInTexture + 2 : (var1 == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(var5 > 0 && Block.blocksList[var5].canProvidePower() && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-			this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public BlockTNT(int id, int tex) {
+		super(id, tex, Material.tnt);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 0 ? this.blockIndexInTexture + 2 : (side == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(id > 0 && Block.blocksList[id].canProvidePower() && worldObj.isBlockIndirectlyGettingPowered(x, y, z)) {
+			this.onBlockDestroyedByPlayer(worldObj, x, y, z, 0);
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		EntityTNTPrimed var5 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var5.fuse = var1.rand.nextInt(var5.fuse / 4) + var5.fuse / 8;
-		var1.spawnEntityInWorld(var5);
+	public void onBlockDestroyedByExplosion(World worldObj, int x, int y, int z) {
+		EntityTNTPrimed entityTNTPrimed5 = new EntityTNTPrimed(worldObj, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		entityTNTPrimed5.fuse = worldObj.rand.nextInt(entityTNTPrimed5.fuse / 4) + entityTNTPrimed5.fuse / 8;
+		worldObj.spawnEntityInWorld(entityTNTPrimed5);
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		EntityTNTPrimed var6 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var1.spawnEntityInWorld(var6);
-		var1.playSoundAtEntity(var6, "random.fuse", 1.0F, 1.0F);
+	public void onBlockDestroyedByPlayer(World worldObj, int x, int y, int z, int metadata) {
+		EntityTNTPrimed entityTNTPrimed6 = new EntityTNTPrimed(worldObj, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		worldObj.spawnEntityInWorld(entityTNTPrimed6);
+		worldObj.playSoundAtEntity(entityTNTPrimed6, "random.fuse", 1.0F, 1.0F);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockWool.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+import java.util.stream.IntStream;
+
+public class BlockWool extends Block {
+	public BlockWool(int id, int tex, Material material) {
+		super(id, tex, material);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.blockIndexInTexture + (metadata % 2) + (metadata / 2 * 16);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 16).toArray();
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
+	}
+}
--- net/minecraft/src/MinecraftException.java
+++ net/minecraft/src/MinecraftException.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class MinecraftException extends RuntimeException {
-	public MinecraftException(String var1) {
-		super(var1);
+	public MinecraftException(String message) {
+		super(message);
 	}
 }
--- net/minecraft/src/NBTTagByte.java
+++ net/minecraft/src/NBTTagByte.java
@@ -10,16 +10,16 @@
 	public NBTTagByte() {
 	}
 
-	public NBTTagByte(byte var1) {
-		this.byteValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeByte(this.byteValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.byteValue = var1.readByte();
+	public NBTTagByte(byte value) {
+		this.byteValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(this.byteValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.byteValue = dataInput.readByte();
 	}
 
 	public byte getType() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ModelFox.java
@@ -1,0 +1,99 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import org.lwjgl.opengl.GL11;
+
+// Hippity hoppity ReIndev's code is now my property!
+// Seriously, I don't know how models work ._.
+
+public class ModelFox extends ModelBase {
+	public ModelRenderer foxHeadMain;
+	public ModelRenderer foxBody;
+	public ModelRenderer foxLeg1;
+	public ModelRenderer foxLeg2;
+	public ModelRenderer foxLeg3;
+	public ModelRenderer foxLeg4;
+	ModelRenderer foxRightEar;
+	ModelRenderer foxLeftEar;
+	ModelRenderer foxSnout;
+	ModelRenderer foxFloofyTail;
+
+	public ModelFox() {
+		float translation = 0.0F;
+		float unused = 14.5F + 17;
+		this.foxHeadMain = new ModelRenderer(0, 0);
+		this.foxHeadMain.addBox(-3.0F, -3.0F, -3.0F - 1, 8, 6, 6, translation);
+		this.foxBody = new ModelRenderer(40, 0);
+		this.foxBody.addBox(-4.0F, -7.125F, -3.0F, 6, 11, 6, translation);
+		this.foxLeg1 = new ModelRenderer(0, 18);
+		this.foxLeg1.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg2 = new ModelRenderer(0, 18);
+		this.foxLeg2.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg3 = new ModelRenderer(0, 18);
+		this.foxLeg3.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg4 = new ModelRenderer(0, 18);
+		this.foxLeg4.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxFloofyTail = new ModelRenderer(46, 18);
+		this.foxFloofyTail.addBox(-2.0F, -2.0F, -5.0F, 4, 9, 5, translation);
+		this.foxRightEar = new ModelRenderer(16, 14);
+		this.foxRightEar.addBox(-2.5F, -4.875F, -1.0F - 1, 2, 2, 1, translation);
+		this.foxLeftEar = new ModelRenderer(23, 14);
+		this.foxLeftEar.addBox(2.5F, -4.875F, -1.0F - 1, 2, 2, 1, translation);
+		this.foxSnout = new ModelRenderer(0, 12);
+		this.foxSnout.addBox(-1.0F, 1.0F, -5.25F - 1, 4, 2, 3, translation);
+		this.foxSnout.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxHeadMain.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxRightEar.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxLeftEar.setRotationPoint(-2.0F, unused, -6.5F);
+	}
+
+	public void render(float var1, float var2, float var3, float var4, float var5, float translation) {
+		super.render(var1, var2, var3, var4, var5, translation);
+		this.setRotationAngles(var1, var2, var3, var4, var5, translation);
+		this.foxHeadMain.render(translation);
+		this.foxRightEar.render(translation);
+		this.foxLeftEar.render(translation);
+		this.foxSnout.render(translation);
+		this.foxBody.render(translation);
+		this.foxLeg1.render(translation);
+		this.foxLeg2.render(translation);
+		this.foxLeg3.render(translation);
+		this.foxLeg4.render(translation);
+		this.foxFloofyTail.render(translation);
+	}
+
+	public void setRotationAngles(float var1, float var2, float xAngle, float yAngle, float zAngle, float var6) {
+		super.setRotationAngles(var1, var2, xAngle, yAngle, zAngle, var6);
+
+		this.foxHeadMain.rotateAngleX = zAngle / 57.295776F;
+		this.foxRightEar.rotateAngleY = this.foxHeadMain.rotateAngleY = yAngle / 57.295776F;
+		this.foxRightEar.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxLeftEar.rotateAngleY = this.foxHeadMain.rotateAngleY;
+		this.foxLeftEar.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxSnout.rotateAngleY = this.foxHeadMain.rotateAngleY;
+		this.foxSnout.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxFloofyTail.rotateAngleX = 1.5F;
+
+		this.foxSnout.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxHeadMain.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxRightEar.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxLeftEar.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxBody.setRotationPoint(0.0F, 16.0F, 2.0F);
+		this.foxBody.rotateAngleX = 1.5707964F;
+		this.foxBody.rotateAngleY = 0.0F;
+		this.foxFloofyTail.setRotationPoint(-1.0F, 14.0F, 8.0F);
+		this.foxLeg1.setRotationPoint(-2.5F, 17.0F, 5.0F);
+		this.foxLeg2.setRotationPoint(0.5F, 17.0F, 5.0F);
+		this.foxLeg3.setRotationPoint(-2.5F, 17.0F, -4.0F);
+		this.foxLeg4.setRotationPoint(0.5F, 17.0F, -4.0F);
+		this.foxLeg1.rotateAngleY = 0.0F;
+		this.foxLeg2.rotateAngleY = 0.0F;
+		this.foxLeg3.rotateAngleY = 0.0F;
+		this.foxLeg4.rotateAngleY = 0.0F;
+		this.foxLeg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+		this.foxLeg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
+		this.foxLeg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
+		this.foxLeg4.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+	}
+}
--- net/minecraft/src/EntityTNTPrimed.java
+++ net/minecraft/src/EntityTNTPrimed.java
@@ -14,7 +14,7 @@
 	public EntityTNTPrimed(World var1, float var2, float var3, float var4) {
 		this(var1);
 		this.setPosition((double)var2, (double)var3, (double)var4);
-		float var5 = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
+		float var5 = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
 		this.motionX = (double)(-MathHelper.sin(var5 * (float)Math.PI / 180.0F) * 0.02F);
 		this.motionY = (double)0.2F;
 		this.motionZ = (double)(-MathHelper.cos(var5 * (float)Math.PI / 180.0F) * 0.02F);
@@ -58,12 +58,12 @@
 		this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, var1);
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Fuse", (byte)this.fuse);
+	protected void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setByte("Fuse", (byte)this.fuse);
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.fuse = var1.getByte("Fuse");
+	protected void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.fuse = compoundTag.getByte("Fuse");
 	}
 
 	public float getShadowSize() {
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -1,55 +1,90 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.util.List;
+import java.util.stream.Collectors;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiSelectWorld extends GuiScreen {
 	protected GuiScreen parentScreen;
 	protected String screenTitle = "Select world";
 	private boolean selected = false;
+	private int currentPage;
+	private static final int maxPages = 100 / 5;
+	private File mcDir = Minecraft.getMinecraftDir();
 
-	public GuiSelectWorld(GuiScreen var1) {
-		this.parentScreen = var1;
+	public GuiSelectWorld(GuiScreen guiScreen1) {
+		this.parentScreen = guiScreen1;
+		if (guiScreen1 instanceof GuiSelectWorld) {
+			this.currentPage = ((GuiSelectWorld) guiScreen1).currentPage;
+		}
 	}
 
 	public void initGui() {
-		File var1 = Minecraft.getMinecraftDir();
+		this.controlList.clear();
+		this.initPage();
+		this.initButtons();
+	}
 
+	public void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 100).collect(Collectors.toList());
 		for(int var2 = 0; var2 < 5; ++var2) {
-			NBTTagCompound var3 = World.getLevelData(var1, "World" + (var2 + 1));
-			if(var3 == null) {
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
+			int var22 = var2 + this.currentPage * 5;
+			NBTTagCompound nBTTagCompound3 = World.getLevelData(mcDir, "World" + (var22 + 1));
+			if(nBTTagCompound3 == null) {
+				this.controlList.add(new GuiButton(var22, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
 			} else {
-				String var4 = "World " + (var2 + 1);
-				long var5 = var3.getLong("SizeOnDisk");
+				String var4 = nBTTagCompound3.getString("DisplayName");
+				if(var4.isEmpty()) {
+					var4 = "World " + (var22 + 1);
+				}
+				long var5 = nBTTagCompound3.getLong("SizeOnDisk");
 				var4 = var4 + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
+				this.controlList.add(new GuiButton(var22, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
 			}
 		}
-
-		this.initButtons();
 	}
 
 	protected String getSaveName(int var1) {
-		File var2 = Minecraft.getMinecraftDir();
-		return World.getLevelData(var2, "World" + var1) != null ? "World" + var1 : null;
+		File file2 = Minecraft.getMinecraftDir();
+		NBTTagCompound data = World.getLevelData(file2, "World" + var1);
+		if (data == null) {
+			return null;
+		}
+
+		String displayName = data.getString("DisplayName");
+		if (displayName.isEmpty()) {
+			return "World" + var1;
+		}
+		return displayName;
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 132, 100, 20, "Delete world..."));
+		this.controlList.add(new GuiButton(101, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(102, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(103, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		this.controlList.add(new GuiButton(104, this.width / 2, this.height / 6 + 132, 100, 20, "Create temporary"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id < 5) {
-				this.selectWorld(var1.id + 1);
-			} else if(var1.id == 5) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id < 100) {
+				this.selectWorld(button.id + 1);
+			} else if(button.id == 100) {
 				this.mc.displayGuiScreen(new GuiDeleteWorld(this));
-			} else if(var1.id == 6) {
+			} else if(button.id == 101) {
 				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(button.id == 102 && this.currentPage > 0) {
+				this.currentPage--;
+				this.initPage();
+			} else if(button.id == 103 && this.currentPage < maxPages - 1) {
+				this.currentPage++;
+				this.initPage();
+			} else if(button.id == 104) {
+				this.selectWorld(-1);
 			}
-
 		}
 	}
 
@@ -57,15 +92,23 @@
 		this.mc.displayGuiScreen((GuiScreen)null);
 		if(!this.selected) {
 			this.selected = true;
+
+			NBTTagCompound nBTTagCompound3 = World.getLevelData(Minecraft.getMinecraftDir(), "World" + var1);
+			if(nBTTagCompound3 == null) {
+				this.mc.displayGuiScreen(new GuiCreateWorld(this, var1));
+				return;
+			}
+
 			this.mc.playerController = new PlayerControllerSP(this.mc);
 			this.mc.startWorld("World" + var1);
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, (this.currentPage + 1) + " / " + maxPages, this.width / 2, this.height - 10, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/IAnimal.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public interface IAnimal {
+}
--- net/minecraft/src/GuiChest.java
+++ net/minecraft/src/GuiChest.java
@@ -7,13 +7,13 @@
 	private IInventory lowerChestInventory;
 	private int inventoryRows = 0;
 
-	public GuiChest(IInventory var1, IInventory var2) {
-		this.upperChestInventory = var1;
-		this.lowerChestInventory = var2;
+	public GuiChest(IInventory iInventory1, IInventory iInventory2) {
+		this.upperChestInventory = iInventory1;
+		this.lowerChestInventory = iInventory2;
 		this.allowUserInput = false;
-		short var3 = 222;
-		int var4 = var3 - 108;
-		this.inventoryRows = var2.getSizeInventory() / 9;
+		short s3 = 222;
+		int var4 = s3 - 108;
+		this.inventoryRows = iInventory2.getSizeInventory() / 9;
 		this.ySize = var4 + this.inventoryRows * 18;
 		int var5 = (this.inventoryRows - 4) * 18;
 
@@ -21,28 +21,28 @@
 		int var7;
 		for(var6 = 0; var6 < this.inventoryRows; ++var6) {
 			for(var7 = 0; var7 < 9; ++var7) {
-				this.inventorySlots.add(new SlotInventory(this, var2, var7 + var6 * 9, 8 + var7 * 18, 18 + var6 * 18));
+				this.inventorySlots.add(new SlotInventory(this, iInventory2, var7 + var6 * 9, 8 + var7 * 18, 18 + var6 * 18));
 			}
 		}
 
 		for(var6 = 0; var6 < 3; ++var6) {
 			for(var7 = 0; var7 < 9; ++var7) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var7 + (var6 + 1) * 9, 8 + var7 * 18, 103 + var6 * 18 + var5));
+				this.inventorySlots.add(new SlotInventory(this, iInventory1, var7 + (var6 + 1) * 9, 8 + var7 * 18, 103 + var6 * 18 + var5));
 			}
 		}
 
 		for(var6 = 0; var6 < 9; ++var6) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var6, 8 + var6 * 18, 161 + var5));
+			this.inventorySlots.add(new SlotInventory(this, iInventory1, var6, 8 + var6 * 18, 161 + var5));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, 4210752);
-		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
 		int var2 = this.mc.renderEngine.getTexture("/gui/container.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
--- net/minecraft/src/Packet15Place.java
+++ net/minecraft/src/Packet15Place.java
@@ -5,37 +5,54 @@
 import java.io.IOException;
 
 public class Packet15Place extends Packet {
-	public int id;
 	public int xPosition;
 	public int yPosition;
 	public int zPosition;
 	public int direction;
+	public ItemStack itemStack;
 
 	public Packet15Place() {
 	}
 
-	public Packet15Place(int var1, int var2, int var3, int var4, int var5) {
-		this.id = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.direction = var5;
+	public Packet15Place(int var1, int var2, int var3, int var4, ItemStack var5) {
+		this.xPosition = var1;
+		this.yPosition = var2;
+		this.zPosition = var3;
+		this.direction = var4;
+		this.itemStack = var5;
 	}
 
 	public void readPacketData(DataInputStream var1) throws IOException {
-		this.id = var1.readShort();
 		this.xPosition = var1.readInt();
 		this.yPosition = var1.read();
 		this.zPosition = var1.readInt();
 		this.direction = var1.read();
+		short var2 = var1.readShort();
+		if(var2 >= 0) {
+			byte var3 = var1.readByte();
+			short var4 = var1.readShort();
+			byte var5 = var1.readByte();
+			this.itemStack = new ItemStack(var2, var3, var4).withMetadata(var5);
+		} else {
+			this.itemStack = null;
+		}
+
 	}
 
 	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.id);
 		var1.writeInt(this.xPosition);
 		var1.write(this.yPosition);
 		var1.writeInt(this.zPosition);
 		var1.write(this.direction);
+		if(this.itemStack == null) {
+			var1.writeShort(-1);
+		} else {
+			var1.writeShort(this.itemStack.itemID);
+			var1.writeByte(this.itemStack.stackSize);
+			var1.writeShort(this.itemStack.itemDmg);
+			var1.writeByte(this.itemStack.itemMetadata);
+		}
+
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -43,6 +60,6 @@
 	}
 
 	public int getPacketSize() {
-		return 12;
+		return 15;
 	}
 }
--- net/minecraft/src/PlayerController.java
+++ net/minecraft/src/PlayerController.java
@@ -6,45 +6,45 @@
 	protected final Minecraft mc;
 	public boolean isInTestMode = false;
 
-	public PlayerController(Minecraft var1) {
-		this.mc = var1;
-	}
-
-	public void onWorldChange(World var1) {
-	}
-
-	public void clickBlock(int var1, int var2, int var3, int var4) {
-		this.sendBlockRemoved(var1, var2, var3, var4);
-	}
-
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		this.mc.effectRenderer.addBlockDestroyEffects(var1, var2, var3);
+	public PlayerController(Minecraft minecraft) {
+		this.mc = minecraft;
+	}
+
+	public void onWorldChange(World world) {
+	}
+
+	public void clickBlock(int x, int y, int z, int side) {
+		this.sendBlockRemoved(x, y, z, side);
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		this.mc.effectRenderer.addBlockDestroyEffects(x, y, z);
 		World var5 = this.mc.theWorld;
-		Block var6 = Block.blocksList[var5.getBlockId(var1, var2, var3)];
-		int var7 = var5.getBlockMetadata(var1, var2, var3);
-		boolean var8 = var5.setBlockWithNotify(var1, var2, var3, 0);
+		Block var6 = Block.blocksList[var5.getBlockId(x, y, z)];
+		int var7 = var5.getBlockMetadata(x, y, z);
+		boolean var8 = var5.setBlockWithNotify(x, y, z, 0);
 		if(var6 != null && var8) {
-			this.mc.sndManager.playSound(var6.stepSound.getBreakSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 2.0F, var6.stepSound.getPitch() * 0.8F);
-			var6.onBlockDestroyedByPlayer(var5, var1, var2, var3, var7);
+			this.mc.sndManager.playSound(var6.stepSound.getBreakSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 2.0F, var6.stepSound.getPitch() * 0.8F);
+			var6.onBlockDestroyedByPlayer(var5, x, y, z, var7);
 		}
 
 		return var8;
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 	}
 
 	public void resetBlockRemoving() {
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 	}
 
 	public float getBlockReachDistance() {
 		return 5.0F;
 	}
 
-	public void flipPlayer(EntityPlayer var1) {
+	public void flipPlayer(EntityPlayer entityPlayer) {
 	}
 
 	public void onUpdate() {
@@ -54,15 +54,41 @@
 		return true;
 	}
 
-	public void onRespawn(EntityPlayer var1) {
-	}
-
-	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
-		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
-	}
-
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityPlayerSP(this.mc, var1, this.mc.session);
+	public void onRespawn(EntityPlayer entityPlayer) {
+	}
+
+	public boolean onPlayerRightClick(EntityPlayer entityPlayer, World world, ItemStack itemStack, int x, int y, int z, int side) {
+		int var8 = world.getBlockId(x, y, z);
+		int oldStackSize = itemStack != null ? itemStack.stackSize : 0;
+		boolean result = var8 > 0 && Block.blocksList[var8].blockActivated(world, x, y, z, entityPlayer) ? true
+		: (itemStack == null ? false
+		: itemStack.useItem(entityPlayer, world, x, y, z, side));
+		if (entityPlayer.creative && itemStack != null) {
+			itemStack.stackSize = oldStackSize;
+		}
+		return result;
+	}
+
+	public void attackEntity(EntityPlayer var1, Entity var2) {
+		var1.attackEntity(var2);
+	}
+
+	public EntityPlayer createPlayer(World world) {
+		return new EntityPlayerSP(this.mc, world, this.mc.session);
+	}
+
+	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
+		int var4 = var3.stackSize;
+		ItemStack var5 = var3.useItemRightClick(var2, var1);
+		if(var5 != var3 || var5 != null && var5.stackSize != var4) {
+			var1.inventory.mainInventory[var1.inventory.currentItem] = var5;
+			if(var5.stackSize == 0) {
+				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+			}
+
+			return true;
+		} else {
+			return false;
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/CreateWorldInfo.java
@@ -1,0 +1,28 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class CreateWorldInfo {
+	public String name;
+	public long seed;
+	public WorldType worldType;
+	public boolean creative;
+
+	public CreateWorldInfo withName(String name) {
+		this.name = name;
+		return this;
+	}
+
+	public CreateWorldInfo withSeed(long seed) {
+		this.seed = seed;
+		return this;
+	}
+
+	public CreateWorldInfo withWorldType(WorldType worldType) {
+		this.worldType = worldType;
+		return this;
+	}
+
+	public CreateWorldInfo withCreative(boolean creative) {
+		this.creative = creative;
+		return this;
+	}
+}
--- net/minecraft/src/Tessellator.java
+++ net/minecraft/src/Tessellator.java
@@ -3,10 +3,11 @@
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+
 import org.lwjgl.opengl.ARBVertexBufferObject;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL15;
 import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.GL15;
 
 public class Tessellator {
 	private static boolean convertQuadsToTriangles = true;
@@ -73,7 +74,7 @@
 						GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 32, 12L);
 					} else {
 						this.floatBuffer.position(3);
-						GL11.glTexCoordPointer(2, 32, (FloatBuffer)this.floatBuffer);
+						GL11.glTexCoordPointer(2, 32, this.floatBuffer);
 					}
 
 					GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
@@ -95,7 +96,7 @@
 						GL11.glNormalPointer(GL11.GL_BYTE, 32, 24L);
 					} else {
 						this.byteBuffer.position(24);
-						GL11.glNormalPointer(32, (ByteBuffer)this.byteBuffer);
+						GL11.glNormalPointer(32, this.byteBuffer);
 					}
 
 					GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
@@ -105,7 +106,7 @@
 					GL11.glVertexPointer(3, GL11.GL_FLOAT, 32, 0L);
 				} else {
 					this.floatBuffer.position(0);
-					GL11.glVertexPointer(3, 32, (FloatBuffer)this.floatBuffer);
+					GL11.glVertexPointer(3, 32, this.floatBuffer);
 				}
 
 				GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
--- net/minecraft/src/GuiChat.java
+++ net/minecraft/src/GuiChat.java
@@ -18,10 +18,10 @@
 		++this.updateCounter;
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1) {
+	protected void keyTyped(char character, int key) {
+		if(key == 1) {
 			this.mc.displayGuiScreen((GuiScreen)null);
-		} else if(var2 == 28) {
+		} else if(key == 28) {
 			String var3 = this.message.trim();
 			if(var3.length() > 0) {
 				this.mc.thePlayer.sendChatMessage(this.message.trim());
@@ -29,18 +29,18 @@
 
 			this.mc.displayGuiScreen((GuiScreen)null);
 		} else {
-			if(var2 == 14 && this.message.length() > 0) {
+			if(key == 14 && this.message.length() > 0) {
 				this.message = this.message.substring(0, this.message.length() - 1);
 			}
 
-			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.message.length() < 100) {
-				this.message = this.message + var1;
+			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.message.length() < 100) {
+				this.message = this.message + character;
 			}
 
 		}
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawRect(2, this.height - 14, this.width - 2, this.height - 2, Integer.MIN_VALUE);
 		this.drawString(this.fontRenderer, "> " + this.message + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), 4, this.height - 12, 14737632);
 	}
--- net/minecraft/src/IAnimals.java
+++ /dev/null
@@ -1,4 +1,0 @@
-package net.minecraft.src;
-
-public interface IAnimals {
-}
--- net/minecraft/src/ItemSaddle.java
+++ net/minecraft/src/ItemSaddle.java
@@ -7,18 +7,18 @@
 		this.maxDamage = 64;
 	}
 
-	public void saddleEntity(ItemStack var1, EntityLiving var2) {
-		if(var2 instanceof EntityPig) {
-			EntityPig var3 = (EntityPig)var2;
-			if(!var3.saddled) {
-				var3.saddled = true;
-				--var1.stackSize;
+	public void saddleEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		if(entityLiving instanceof EntityPig) {
+			EntityPig entityPig3 = (EntityPig)entityLiving;
+			if(!entityPig3.saddled) {
+				entityPig3.saddled = true;
+				--itemStack.stackSize;
 			}
 		}
 
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		this.saddleEntity(var1, var2);
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		this.saddleEntity(itemStack, entityLiving);
 	}
 }
--- net/minecraft/src/NetworkListenThread.java
+++ net/minecraft/src/NetworkListenThread.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class NetworkListenThread {
@@ -18,70 +19,70 @@
 	private ArrayList playerList = new ArrayList();
 	public MinecraftServer mcServer;
 
-	public NetworkListenThread(MinecraftServer var1, InetAddress var2, int var3) throws IOException {
-		this.mcServer = var1;
-		this.serverSocket = new ServerSocket(var3, 0, var2);
+	public NetworkListenThread(MinecraftServer minecraftServer, InetAddress address, int port) throws IOException {
+		this.mcServer = minecraftServer;
+		this.serverSocket = new ServerSocket(port, 0, address);
 		this.serverSocket.setPerformancePreferences(0, 2, 1);
 		this.isListening = true;
-		this.listenThread = new NetworkAcceptThread(this, "Listen thread", var1);
+		this.listenThread = new NetworkAcceptThread(this, "Listen thread", minecraftServer);
 		this.listenThread.start();
 	}
 
-	public void addPlayer(NetServerHandler var1) {
-		this.playerList.add(var1);
+	public void addPlayer(NetServerHandler netServerHandler) {
+		this.playerList.add(netServerHandler);
 	}
 
-	private void addPendingConnection(NetLoginHandler var1) {
-		if(var1 == null) {
+	private void addPendingConnection(NetLoginHandler netLoginHandler) {
+		if(netLoginHandler == null) {
 			throw new IllegalArgumentException("Got null pendingconnection!");
 		} else {
-			this.pendingConnections.add(var1);
+			this.pendingConnections.add(netLoginHandler);
 		}
 	}
 
 	public void handleNetworkListenThread() {
 		int var1;
 		for(var1 = 0; var1 < this.pendingConnections.size(); ++var1) {
-			NetLoginHandler var2 = (NetLoginHandler)this.pendingConnections.get(var1);
+			NetLoginHandler netLoginHandler2 = (NetLoginHandler)this.pendingConnections.get(var1);
 
 			try {
-				var2.tryLogin();
-			} catch (Exception var5) {
-				var2.kickUser("Internal server error");
-				logger.log(Level.WARNING, "Failed to handle packet: " + var5, var5);
+				netLoginHandler2.tryLogin();
+			} catch (Exception exception5) {
+				netLoginHandler2.kickUser("Internal server error");
+				logger.log(Level.WARNING, "Failed to handle packet: " + exception5, exception5);
 			}
 
-			if(var2.finishedProcessing) {
+			if(netLoginHandler2.finishedProcessing) {
 				this.pendingConnections.remove(var1--);
 			}
 		}
 
 		for(var1 = 0; var1 < this.playerList.size(); ++var1) {
-			NetServerHandler var6 = (NetServerHandler)this.playerList.get(var1);
+			NetServerHandler netServerHandler6 = (NetServerHandler)this.playerList.get(var1);
 
 			try {
-				var6.handlePackets();
-			} catch (Exception var4) {
-				var6.kickPlayer("Internal server error");
-				logger.log(Level.WARNING, "Failed to handle packet: " + var4, var4);
+				netServerHandler6.handlePackets();
+			} catch (Exception exception4) {
+				netServerHandler6.kickPlayer("Internal server error");
+				logger.log(Level.WARNING, "Failed to handle packet: " + exception4, exception4);
 			}
 
-			if(var6.connectionClosed) {
+			if(netServerHandler6.connectionClosed) {
 				this.playerList.remove(var1--);
 			}
 		}
 
 	}
 
-	static ServerSocket getServerSocket(NetworkListenThread var0) {
-		return var0.serverSocket;
-	}
-
-	static int incrementConnections(NetworkListenThread var0) {
-		return var0.connectionNumber++;
-	}
-
-	static void addPendingConnection(NetworkListenThread var0, NetLoginHandler var1) {
-		var0.addPendingConnection(var1);
+	static ServerSocket getServerSocket(NetworkListenThread listenThread) {
+		return listenThread.serverSocket;
+	}
+
+	static int incrementConnections(NetworkListenThread listenThread) {
+		return listenThread.connectionNumber++;
+	}
+
+	static void addPendingConnection(NetworkListenThread listenThread, NetLoginHandler netLoginHandler) {
+		listenThread.addPendingConnection(netLoginHandler);
 	}
 }
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -1,36 +1,48 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemSword extends Item {
-	private int weaponDamage;
+	private final int weaponDamage;
 
-	public ItemSword(int var1, int var2) {
-		super(var1);
+	public ItemSword(int id, int strength) {
+		super(id);
+		int strengthAbs = Math.abs(strength);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
-		if(var2 == 3) {
+		this.maxDamage = 32 << strengthAbs;
+		if(strengthAbs == 3 || strength < 0) {
 			this.maxDamage *= 4;
 		}
 
-		this.weaponDamage = 4 + var2 * 2;
+		this.weaponDamage = 4 + strengthAbs * 2;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack itemStack, Block block) {
 		return 1.5F;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		var1.damageItem(1);
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(2);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		itemStack.damageItem(1);
+	}
+
+	public void onBlockDestroyed(ItemStack itemStack, int id, int x, int y, int z) {
+		itemStack.damageItem(2);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return this.weaponDamage;
 	}
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				Integer.toString(this.weaponDamage) + " attack damage",
+				ItemTooltip.INFO_COL,
+				Integer.toString(this.maxDamage) + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/NBTTagInt.java
+++ net/minecraft/src/NBTTagInt.java
@@ -10,16 +10,16 @@
 	public NBTTagInt() {
 	}
 
-	public NBTTagInt(int var1) {
-		this.intValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.intValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.intValue = var1.readInt();
+	public NBTTagInt(int value) {
+		this.intValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.intValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.intValue = dataInput.readInt();
 	}
 
 	public byte getType() {
--- net/minecraft/src/Packet17AddToInventory.java
+++ net/minecraft/src/Packet17AddToInventory.java
@@ -8,37 +8,37 @@
 	public int itemID;
 	public int count;
 	public int itemDamage;
+	public int itemMetadata;
 
 	public Packet17AddToInventory() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.itemDamage = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeShort(this.itemDamage);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleAddToInventory(this);
+	public Packet17AddToInventory(ItemStack stack, int count) {
+		this.itemID = stack.itemID;
+		this.count = count;
+		this.itemDamage = stack.itemDmg;
+		this.itemMetadata = stack.itemMetadata;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.itemID = dataInputStream.readShort();
+		this.count = dataInputStream.readByte();
+		this.itemDamage = dataInputStream.readShort();
+		this.itemMetadata = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeShort(this.itemDamage);
+		dataOutputStream.writeByte(this.itemMetadata);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleAddToInventory(this);
 	}
 
 	public int getPacketSize() {
-		return 5;
-	}
-
-	public Packet17AddToInventory(ItemStack var1, int var2) {
-		this.itemID = var1.itemID;
-		this.count = var2;
-		this.itemDamage = var1.itemDmg;
-		if(var2 == 0) {
-			boolean var3 = true;
-		}
-
+		return 6;
 	}
 }
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -22,14 +22,14 @@
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Size", this.size - 1);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		super.writeEntityToNBT(compoundTag);
+		compoundTag.setInteger("Size", this.size - 1);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.size = var1.getInteger("Size") + 1;
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		super.readEntityFromNBT(compoundTag);
+		this.size = compoundTag.getInteger("Size") + 1;
 	}
 
 	public void onUpdate() {
@@ -89,18 +89,18 @@
 			for(int var1 = 0; var1 < 4; ++var1) {
 				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.size / 4.0F;
 				float var3 = ((float)(var1 / 2) - 0.5F) * (float)this.size / 4.0F;
-				EntitySlime var4 = new EntitySlime(this.worldObj);
-				var4.setSlimeSize(this.size / 2);
-				var4.setLocationAndAngles(this.posX + (double)var2, this.posY + 0.5D, this.posZ + (double)var3, this.rand.nextFloat() * 360.0F, 0.0F);
-				this.worldObj.spawnEntityInWorld(var4);
+				EntitySlime entitySlime4 = new EntitySlime(this.worldObj);
+				entitySlime4.setSlimeSize(this.size / 2);
+				entitySlime4.setLocationAndAngles(this.posX + (double)var2, this.posY + 0.5D, this.posZ + (double)var3, this.rand.nextFloat() * 360.0F, 0.0F);
+				this.worldObj.spawnEntityInWorld(entitySlime4);
 			}
 		}
 
 		super.setEntityDead();
 	}
 
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.size > 1 && this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < 0.6D * (double)this.size && var1.attackEntityFrom(this, this.size)) {
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.size > 1 && this.canEntityBeSeen(entityPlayer) && (double)this.getDistanceToEntity(entityPlayer) < 0.6D * (double)this.size && entityPlayer.attackEntityFrom(this, this.size)) {
 			this.worldObj.playSoundAtEntity(this, "mob.slimeattack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 		}
 
@@ -119,8 +119,8 @@
 	}
 
 	public boolean getCanSpawnHere() {
-		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
-		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		Chunk chunk1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
+		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && chunk1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -7,22 +7,22 @@
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.chestContents[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.chestContents[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.chestContents[var1] != null) {
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.chestContents[slot] != null) {
 			ItemStack var3;
-			if(this.chestContents[var1].stackSize <= var2) {
-				var3 = this.chestContents[var1];
-				this.chestContents[var1] = null;
+			if(this.chestContents[slot].stackSize <= stackSize) {
+				var3 = this.chestContents[slot];
+				this.chestContents[slot] = null;
 				this.onInventoryChanged();
 				return var3;
 			} else {
-				var3 = this.chestContents[var1].splitStack(var2);
-				if(this.chestContents[var1].stackSize == 0) {
-					this.chestContents[var1] = null;
+				var3 = this.chestContents[slot].splitStack(stackSize);
+				if(this.chestContents[slot].stackSize == 0) {
+					this.chestContents[slot] = null;
 				}
 
 				this.onInventoryChanged();
@@ -33,10 +33,10 @@
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.chestContents[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.chestContents[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 		this.onInventoryChanged();
@@ -46,35 +46,35 @@
 		return "Chest";
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound compoundTag) {
+		super.readFromNBT(compoundTag);
+		NBTTagList nBTTagList2 = compoundTag.getTagList("Items");
 		this.chestContents = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			int var5 = var4.getByte("Slot") & 255;
+		for(int var3 = 0; var3 < nBTTagList2.tagCount(); ++var3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(var3);
+			int var5 = nBTTagCompound4.getByte("Slot") & 255;
 			if(var5 >= 0 && var5 < this.chestContents.length) {
-				this.chestContents[var5] = new ItemStack(var4);
+				this.chestContents[var5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound compoundTag) {
+		super.writeToNBT(compoundTag);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
 		for(int var3 = 0; var3 < this.chestContents.length; ++var3) {
 			if(this.chestContents[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.chestContents[var3].writeToNBT(var4);
-				var2.setTag(var4);
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)var3);
+				this.chestContents[var3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		compoundTag.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -11,27 +12,27 @@
 	private float prevEquippedProgress = 0.0F;
 	private RenderBlocks renderBlocksInstance = new RenderBlocks();
 
-	public ItemRenderer(Minecraft var1) {
-		this.mc = var1;
+	public ItemRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void renderItem(ItemStack var1) {
+	public void renderItem(ItemStack itemStack) {
 		GL11.glPushMatrix();
-		if(var1.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var1.itemID].getRenderType())) {
+		if(itemStack.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[itemStack.itemID].getRenderType())) {
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[var1.itemID]);
+			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[itemStack.itemID], Math.max(itemStack.itemMetadata, 0));
 		} else {
-			if(var1.itemID < 256) {
+			if(itemStack.itemID < 256) {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
 			} else {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/items.png"));
 			}
 
-			Tessellator var2 = Tessellator.instance;
-			float var3 = (float)(var1.getIconIndex() % 16 * 16 + 0) / 256.0F;
-			float var4 = (float)(var1.getIconIndex() % 16 * 16 + 16) / 256.0F;
-			float var5 = (float)(var1.getIconIndex() / 16 * 16 + 0) / 256.0F;
-			float var6 = (float)(var1.getIconIndex() / 16 * 16 + 16) / 256.0F;
+			Tessellator tessellator2 = Tessellator.instance;
+			float var3 = (float)(itemStack.getIconIndex() % 16 * 16 + 0) / 256.0F;
+			float var4 = (float)(itemStack.getIconIndex() % 16 * 16 + 16) / 256.0F;
+			float var5 = (float)(itemStack.getIconIndex() / 16 * 16 + 0) / 256.0F;
+			float var6 = (float)(itemStack.getIconIndex() / 16 * 16 + 16) / 256.0F;
 			float var7 = 1.0F;
 			float var8 = 0.0F;
 			float var9 = 0.3F;
@@ -41,24 +42,24 @@
 			GL11.glScalef(var10, var10, var10);
 			GL11.glRotatef(50.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glRotatef(335.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glTranslatef(-(15.0F / 16.0F), -(1.0F / 16.0F), 0.0F);
-			float var11 = 1.0F / 16.0F;
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 0.0F, 1.0F);
-			var2.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)var4, (double)var6);
-			var2.addVertexWithUV((double)var7, 0.0D, 0.0D, (double)var3, (double)var6);
-			var2.addVertexWithUV((double)var7, 1.0D, 0.0D, (double)var3, (double)var5);
-			var2.addVertexWithUV(0.0D, 1.0D, 0.0D, (double)var4, (double)var5);
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 0.0F, -1.0F);
-			var2.addVertexWithUV(0.0D, 1.0D, (double)(0.0F - var11), (double)var4, (double)var5);
-			var2.addVertexWithUV((double)var7, 1.0D, (double)(0.0F - var11), (double)var3, (double)var5);
-			var2.addVertexWithUV((double)var7, 0.0D, (double)(0.0F - var11), (double)var3, (double)var6);
-			var2.addVertexWithUV(0.0D, 0.0D, (double)(0.0F - var11), (double)var4, (double)var6);
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(-1.0F, 0.0F, 0.0F);
+			GL11.glTranslatef(-0.9375F, -0.0625F, 0.0F);
+			float var11 = 0.0625F;
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(0.0F, 0.0F, 1.0F);
+			tessellator2.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)var4, (double)var6);
+			tessellator2.addVertexWithUV((double)var7, 0.0D, 0.0D, (double)var3, (double)var6);
+			tessellator2.addVertexWithUV((double)var7, 1.0D, 0.0D, (double)var3, (double)var5);
+			tessellator2.addVertexWithUV(0.0D, 1.0D, 0.0D, (double)var4, (double)var5);
+			tessellator2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(0.0F, 0.0F, -1.0F);
+			tessellator2.addVertexWithUV(0.0D, 1.0D, (double)(0.0F - var11), (double)var4, (double)var5);
+			tessellator2.addVertexWithUV((double)var7, 1.0D, (double)(0.0F - var11), (double)var3, (double)var5);
+			tessellator2.addVertexWithUV((double)var7, 0.0D, (double)(0.0F - var11), (double)var3, (double)var6);
+			tessellator2.addVertexWithUV(0.0D, 0.0D, (double)(0.0F - var11), (double)var4, (double)var6);
+			tessellator2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(-1.0F, 0.0F, 0.0F);
 
 			int var12;
 			float var13;
@@ -66,72 +67,73 @@
 			float var15;
 			for(var12 = 0; var12 < 16; ++var12) {
 				var13 = (float)var12 / 16.0F;
-				var14 = var4 + (var3 - var4) * var13 - 1.0F / 512.0F;
-				var15 = var7 * var13;
-				var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(1.0F, 0.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var4 + (var3 - var4) * var13 - 1.0F / 512.0F;
-				var15 = var7 * var13 + 1.0F / 16.0F;
-				var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 1.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var6 + (var5 - var6) * var13 - 1.0F / 512.0F;
-				var15 = var7 * var13 + 1.0F / 16.0F;
-				var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, -1.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var6 + (var5 - var6) * var13 - 1.0F / 512.0F;
-				var15 = var7 * var13;
-				var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-			}
-
-			var2.draw();
+				var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
+				var15 = var7 * var13;
+				tessellator2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
+				tessellator2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
+				tessellator2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
+				tessellator2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
+			}
+
+			tessellator2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(1.0F, 0.0F, 0.0F);
+
+			for(var12 = 0; var12 < 16; ++var12) {
+				var13 = (float)var12 / 16.0F;
+				var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
+				var15 = var7 * var13 + 0.0625F;
+				tessellator2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
+				tessellator2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
+				tessellator2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
+				tessellator2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
+			}
+
+			tessellator2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(0.0F, 1.0F, 0.0F);
+
+			for(var12 = 0; var12 < 16; ++var12) {
+				var13 = (float)var12 / 16.0F;
+				var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
+				var15 = var7 * var13 + 0.0625F;
+				tessellator2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
+				tessellator2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
+				tessellator2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
+				tessellator2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
+			}
+
+			tessellator2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.setNormal(0.0F, -1.0F, 0.0F);
+
+			for(var12 = 0; var12 < 16; ++var12) {
+				var13 = (float)var12 / 16.0F;
+				var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
+				var15 = var7 * var13;
+				tessellator2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
+				tessellator2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
+				tessellator2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
+				tessellator2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
+			}
+
+			tessellator2.draw();
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		}
 
 		GL11.glPopMatrix();
 	}
 
-	public void renderItemInFirstPerson(float var1) {
-		float var2 = this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * var1;
+	public void renderItemInFirstPerson(float renderPartialTick) {
+		float var2 = this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * renderPartialTick;
 		EntityPlayerSP var3 = this.mc.thePlayer;
 		GL11.glPushMatrix();
-		GL11.glRotatef(var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-		GL11.glRotatef(var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var1, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * renderPartialTick, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * renderPartialTick, 0.0F, 1.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
-		float var4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ));
+		float var4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ))
+				   * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		GL11.glColor4f(var4, var4, var4, 1.0F);
 		float var5;
 		float var6;
@@ -140,14 +142,14 @@
 		if(this.itemToRender != null) {
 			GL11.glPushMatrix();
 			var5 = 0.8F;
-			var6 = var3.getSwingProgress(var1);
+			var6 = var3.getSwingProgress(renderPartialTick);
 			var7 = MathHelper.sin(var6 * (float)Math.PI);
 			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
 			GL11.glTranslatef(-var8 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI * 2.0F) * 0.2F, -var7 * 0.2F);
 			GL11.glTranslatef(0.7F * var5, -0.65F * var5 - (1.0F - var2) * 0.6F, -0.9F * var5);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			var6 = var3.getSwingProgress(var1);
+			var6 = var3.getSwingProgress(renderPartialTick);
 			var7 = MathHelper.sin(var6 * var6 * (float)Math.PI);
 			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
 			GL11.glRotatef(-var7 * 20.0F, 0.0F, 1.0F, 0.0F);
@@ -160,14 +162,14 @@
 		} else {
 			GL11.glPushMatrix();
 			var5 = 0.8F;
-			var6 = var3.getSwingProgress(var1);
+			var6 = var3.getSwingProgress(renderPartialTick);
 			var7 = MathHelper.sin(var6 * (float)Math.PI);
 			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
 			GL11.glTranslatef(-var8 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI * 2.0F) * 0.4F, -var7 * 0.4F);
-			GL11.glTranslatef(0.8F * var5, -(12.0F / 16.0F) * var5 - (1.0F - var2) * 0.6F, -0.9F * var5);
+			GL11.glTranslatef(0.8F * var5, -0.75F * var5 - (1.0F - var2) * 0.6F, -0.9F * var5);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			var6 = var3.getSwingProgress(var1);
+			var6 = var3.getSwingProgress(renderPartialTick);
 			var7 = MathHelper.sin(var6 * var6 * (float)Math.PI);
 			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
 			GL11.glRotatef(var8 * 70.0F, 0.0F, 1.0F, 0.0F);
@@ -180,10 +182,10 @@
 			GL11.glScalef(1.0F, 1.0F, 1.0F);
 			GL11.glTranslatef(5.6F, 0.0F, 0.0F);
 			Render var9 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
-			RenderPlayer var10 = (RenderPlayer)var9;
+			RenderPlayer renderPlayer10 = (RenderPlayer)var9;
 			var8 = 1.0F;
 			GL11.glScalef(var8, var8, var8);
-			var10.drawFirstPersonHand();
+			renderPlayer10.drawFirstPersonHand();
 			GL11.glPopMatrix();
 		}
 
@@ -191,13 +193,13 @@
 		RenderHelper.disableStandardItemLighting();
 	}
 
-	public void renderOverlays(float var1) {
+	public void renderOverlays(float renderPartialTick) {
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 		int var2;
 		if(this.mc.thePlayer.fire > 0) {
 			var2 = this.mc.renderEngine.getTexture("/terrain.png");
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-			this.renderFireInFirstPerson(var1);
+			this.renderFireInFirstPerson(renderPartialTick);
 		}
 
 		if(this.mc.thePlayer.isEntityInsideOpaqueBlock()) {
@@ -208,22 +210,22 @@
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var5);
 			int var6 = this.mc.theWorld.getBlockId(var2, var3, var4);
 			if(Block.blocksList[var6] != null) {
-				this.renderInsideOfBlock(var1, Block.blocksList[var6].getBlockTextureFromSide(2));
+				this.renderInsideOfBlock(renderPartialTick, Block.blocksList[var6].getBlockTextureFromSide(2));
 			}
 		}
 
 		if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
 			var2 = this.mc.renderEngine.getTexture("/water.png");
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-			this.renderWarpedTextureOverlay(var1);
+			this.renderWarpedTextureOverlay(renderPartialTick);
 		}
 
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 	}
 
-	private void renderInsideOfBlock(float var1, int var2) {
-		Tessellator var3 = Tessellator.instance;
-		this.mc.thePlayer.getBrightness(var1);
+	private void renderInsideOfBlock(float renderPartialTick, int id) {
+		Tessellator tessellator3 = Tessellator.instance;
+		this.mc.thePlayer.getBrightness(renderPartialTick);
 		float var4 = 0.1F;
 		GL11.glColor4f(var4, var4, var4, 0.5F);
 		GL11.glPushMatrix();
@@ -232,24 +234,24 @@
 		float var7 = -1.0F;
 		float var8 = 1.0F;
 		float var9 = -0.5F;
-		float var10 = 1.0F / 128.0F;
-		float var11 = (float)(var2 % 16) / 256.0F - var10;
-		float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
-		float var13 = (float)(var2 / 16) / 256.0F - var10;
-		float var14 = ((float)(var2 / 16) + 15.99F) / 256.0F + var10;
-		var3.startDrawingQuads();
-		var3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
-		var3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
-		var3.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)var11, (double)var13);
-		var3.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)var12, (double)var13);
-		var3.draw();
+		float var10 = 0.0078125F;
+		float var11 = (float)(id % 16) / 256.0F - var10;
+		float var12 = ((float)(id % 16) + 15.99F) / 256.0F + var10;
+		float var13 = (float)(id / 16) / 256.0F - var10;
+		float var14 = ((float)(id / 16) + 15.99F) / 256.0F + var10;
+		tessellator3.startDrawingQuads();
+		tessellator3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
+		tessellator3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
+		tessellator3.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)var11, (double)var13);
+		tessellator3.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)var12, (double)var13);
+		tessellator3.draw();
 		GL11.glPopMatrix();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	private void renderWarpedTextureOverlay(float var1) {
-		Tessellator var2 = Tessellator.instance;
-		float var3 = this.mc.thePlayer.getBrightness(var1);
+	private void renderWarpedTextureOverlay(float renderPartialTick) {
+		Tessellator tessellator2 = Tessellator.instance;
+		float var3 = this.mc.thePlayer.getBrightness(renderPartialTick) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		GL11.glColor4f(var3, var3, var3, 0.5F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
@@ -262,19 +264,19 @@
 		float var9 = -0.5F;
 		float var10 = -this.mc.thePlayer.rotationYaw / 64.0F;
 		float var11 = this.mc.thePlayer.rotationPitch / 64.0F;
-		var2.startDrawingQuads();
-		var2.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)(var4 + var10), (double)(var4 + var11));
-		var2.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)(0.0F + var10), (double)(var4 + var11));
-		var2.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)(0.0F + var10), (double)(0.0F + var11));
-		var2.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)(var4 + var10), (double)(0.0F + var11));
-		var2.draw();
+		tessellator2.startDrawingQuads();
+		tessellator2.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)(var4 + var10), (double)(var4 + var11));
+		tessellator2.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)(0.0F + var10), (double)(var4 + var11));
+		tessellator2.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)(0.0F + var10), (double)(0.0F + var11));
+		tessellator2.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)(var4 + var10), (double)(0.0F + var11));
+		tessellator2.draw();
 		GL11.glPopMatrix();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glDisable(GL11.GL_BLEND);
 	}
 
-	private void renderFireInFirstPerson(float var1) {
-		Tessellator var2 = Tessellator.instance;
+	private void renderFireInFirstPerson(float renderPartialTick) {
+		Tessellator tessellator2 = Tessellator.instance;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.9F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
@@ -296,12 +298,12 @@
 			float var16 = -0.5F;
 			GL11.glTranslatef((float)(-(var4 * 2 - 1)) * 0.24F, -0.3F, 0.0F);
 			GL11.glRotatef((float)(var4 * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
-			var2.startDrawingQuads();
-			var2.addVertexWithUV((double)var12, (double)var14, (double)var16, (double)var9, (double)var11);
-			var2.addVertexWithUV((double)var13, (double)var14, (double)var16, (double)var8, (double)var11);
-			var2.addVertexWithUV((double)var13, (double)var15, (double)var16, (double)var8, (double)var10);
-			var2.addVertexWithUV((double)var12, (double)var15, (double)var16, (double)var9, (double)var10);
-			var2.draw();
+			tessellator2.startDrawingQuads();
+			tessellator2.addVertexWithUV((double)var12, (double)var14, (double)var16, (double)var9, (double)var11);
+			tessellator2.addVertexWithUV((double)var13, (double)var14, (double)var16, (double)var8, (double)var11);
+			tessellator2.addVertexWithUV((double)var13, (double)var15, (double)var16, (double)var8, (double)var10);
+			tessellator2.addVertexWithUV((double)var12, (double)var15, (double)var16, (double)var9, (double)var10);
+			tessellator2.draw();
 			GL11.glPopMatrix();
 		}
 
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -3,42 +3,52 @@
 import java.util.Random;
 
 public class BlockGrass extends Block {
-	protected BlockGrass(int var1) {
-		super(var1, Material.grass);
+	protected BlockGrass(int blockID) {
+		super(blockID, Material.grass);
 		this.blockIndexInTexture = 3;
 		this.setTickOnLoad(true);
 	}
 
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 1) {
 			return 0;
-		} else if(var5 == 0) {
+		} else if(side == 0) {
 			return 2;
 		} else {
-			Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-			return var6 != Material.snow && var6 != Material.craftedSnow ? 3 : 68;
+			Material material6 = blockAccess.getBlockMaterial(x, y + 1, z);
+			return material6 != Material.snow && material6 != Material.craftedSnow ? 3 : 68;
 		}
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && var1.getBlockMaterial(var2, var3 + 1, var4).getCanBlockGrass()) {
-			if(var5.nextInt(4) != 0) {
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? 0
+				: side == 0 ? 2
+				: 3;
+	}
+
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockLightValue(x, y + 1, z) < 4 && worldObj.getBlockMaterial(x, y + 1, z).getCanBlockGrass()) {
+			if(rand.nextInt(4) != 0) {
 				return;
 			}
 
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
-		} else if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var2 + var5.nextInt(3) - 1;
-			int var7 = var3 + var5.nextInt(5) - 3;
-			int var8 = var4 + var5.nextInt(3) - 1;
-			if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && !var1.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
-				var1.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
+			worldObj.setBlockWithNotify(x, y, z, Block.dirt.blockID);
+		} else if(worldObj.getBlockLightValue(x, y + 1, z) >= 9) {
+			int var6 = x + rand.nextInt(3) - 1;
+			int var7 = y + rand.nextInt(5) - 3;
+			int var8 = z + rand.nextInt(3) - 1;
+			if(worldObj.getBlockId(var6, var7, var8) == Block.dirt.blockID
+					&& worldObj.getBlockMetadata(var6, var7, var8) != 1
+					&& worldObj.getBlockLightValue(var6, var7 + 1, var8) >= 4
+					&& !worldObj.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
+				worldObj.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int metadata, Random rand) {
+		return Block.dirt.idDropped(0, rand);
 	}
 }
--- net/minecraft/src/GuiLogOutputHandler.java
+++ net/minecraft/src/GuiLogOutputHandler.java
@@ -11,9 +11,9 @@
 	Formatter formatter = new GuiLogFormatter(this);
 	private JTextArea textArea;
 
-	public GuiLogOutputHandler(JTextArea var1) {
+	public GuiLogOutputHandler(JTextArea textArea) {
 		this.setFormatter(this.formatter);
-		this.textArea = var1;
+		this.textArea = textArea;
 	}
 
 	public void close() {
@@ -22,9 +22,9 @@
 	public void flush() {
 	}
 
-	public void publish(LogRecord var1) {
+	public void publish(LogRecord logRecord) {
 		int var2 = this.textArea.getDocument().getLength();
-		this.textArea.append(this.formatter.format(var1));
+		this.textArea.append(this.formatter.format(logRecord));
 		this.textArea.setCaretPosition(this.textArea.getDocument().getLength());
 		int var3 = this.textArea.getDocument().getLength() - var2;
 		if(this.allNums[this.currentNum] != 0) {
--- net/minecraft/src/MinecraftAppletImpl.java
+++ net/minecraft/src/MinecraftAppletImpl.java
@@ -3,21 +3,22 @@
 import java.awt.BorderLayout;
 import java.awt.Canvas;
 import java.awt.Component;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.MinecraftApplet;
 
 public class MinecraftAppletImpl extends Minecraft {
 	final MinecraftApplet mainFrame;
 
-	public MinecraftAppletImpl(MinecraftApplet var1, Component var2, Canvas var3, MinecraftApplet var4, int var5, int var6, boolean var7) {
-		super(var2, var3, var4, var5, var6, var7);
-		this.mainFrame = var1;
+	public MinecraftAppletImpl(MinecraftApplet frame, Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		super(component, canvas, mcApplet, width, height, fullscreen);
+		this.mainFrame = frame;
 	}
 
-	public void displayUnexpectedThrowable(UnexpectedThrowable var1) {
+	public void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable) {
 		this.mainFrame.removeAll();
 		this.mainFrame.setLayout(new BorderLayout());
-		this.mainFrame.add(new PanelCrashReport(var1), "Center");
+		this.mainFrame.add(new PanelCrashReport(unexpectedThrowable), "Center");
 		this.mainFrame.validate();
 	}
 }
--- net/minecraft/src/Packet29DestroyEntity.java
+++ net/minecraft/src/Packet29DestroyEntity.java
@@ -10,23 +10,23 @@
 	public Packet29DestroyEntity() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleDestroyEntity(this);
+	public Packet29DestroyEntity(int entityID) {
+		this.entityId = entityID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleDestroyEntity(this);
 	}
 
 	public int getPacketSize() {
 		return 4;
-	}
-
-	public Packet29DestroyEntity(int var1) {
-		this.entityId = var1;
 	}
 }
--- net/minecraft/src/SoundPool.java
+++ net/minecraft/src/SoundPool.java
@@ -15,7 +15,7 @@
 	public int numberOfSoundPoolEntries = 0;
 	public boolean isGetRandomSound = true;
 
-	public SoundPoolEntry addSound(String var1, File var2) {
+	public SoundPoolEntry addSound(String var1, File file2) {
 		try {
 			String var3 = var1;
 			var1 = var1.substring(0, var1.indexOf("."));
@@ -30,20 +30,20 @@
 				this.nameToSoundPoolEntriesMapping.put(var1, new ArrayList());
 			}
 
-			SoundPoolEntry var4 = new SoundPoolEntry(var3, var2.toURI().toURL());
-			((List)this.nameToSoundPoolEntriesMapping.get(var1)).add(var4);
-			this.allSoundPoolEntries.add(var4);
+			SoundPoolEntry soundPoolEntry4 = new SoundPoolEntry(var3, file2.toURI().toURL());
+			((List)this.nameToSoundPoolEntriesMapping.get(var1)).add(soundPoolEntry4);
+			this.allSoundPoolEntries.add(soundPoolEntry4);
 			++this.numberOfSoundPoolEntries;
-			return var4;
-		} catch (MalformedURLException var5) {
-			var5.printStackTrace();
-			throw new RuntimeException(var5);
+			return soundPoolEntry4;
+		} catch (MalformedURLException malformedURLException5) {
+			malformedURLException5.printStackTrace();
+			throw new RuntimeException(malformedURLException5);
 		}
 	}
 
 	public SoundPoolEntry getRandomSoundFromSoundPool(String var1) {
-		List var2 = (List)this.nameToSoundPoolEntriesMapping.get(var1);
-		return var2 == null ? null : (SoundPoolEntry)var2.get(this.rand.nextInt(var2.size()));
+		List list2 = (List)this.nameToSoundPoolEntriesMapping.get(var1);
+		return list2 == null ? null : (SoundPoolEntry)list2.get(this.rand.nextInt(list2.size()));
 	}
 
 	public SoundPoolEntry getRandomSound() {
--- net/minecraft/src/RenderFallingSand.java
+++ net/minecraft/src/RenderFallingSand.java
@@ -9,14 +9,19 @@
 		this.shadowSize = 0.5F;
 	}
 
-	public void doRenderFallingSand(EntityFallingSand var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderFallingSand(EntityFallingSand entityFallingSand1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		this.loadTexture("/terrain.png");
-		Block var10 = Block.blocksList[var1.blockID];
-		World var11 = var1.getWorld();
+		Block var10 = Block.blocksList[entityFallingSand1.blockID];
+		World var11 = entityFallingSand1.getWorld();
 		GL11.glDisable(GL11.GL_LIGHTING);
-		this.sandRenderBlocks.renderBlockFallingSand(var10, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
+		this.sandRenderBlocks.renderBlockFallingSand(var10,
+													 var11,
+													 MathHelper.floor_double(entityFallingSand1.posX),
+													 MathHelper.floor_double(entityFallingSand1.posY),
+													 MathHelper.floor_double(entityFallingSand1.posZ),
+													 entityFallingSand1.blockMetadata);
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glPopMatrix();
 	}
--- net/minecraft/src/Packet59ComplexEntity.java
+++ net/minecraft/src/Packet59ComplexEntity.java
@@ -15,42 +15,42 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet59ComplexEntity(int var1, int var2, int var3, TileEntity var4) {
+	public Packet59ComplexEntity(int x, int y, int z, TileEntity tileEntity) {
 		this.isChunkDataPacket = true;
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
 		this.tileEntityNBT = new NBTTagCompound();
-		var4.writeToNBT(this.tileEntityNBT);
+		tileEntity.writeToNBT(this.tileEntityNBT);
 
 		try {
 			this.compressedNBT = CompressedStreamTools.compress(this.tileEntityNBT);
-		} catch (IOException var6) {
-			var6.printStackTrace();
+		} catch (IOException iOException6) {
+			iOException6.printStackTrace();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xCoord = var1.readInt();
-		this.yCoord = var1.readShort();
-		this.zCoord = var1.readInt();
-		int var2 = var1.readShort() & '\uffff';
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xCoord = dataInputStream.readInt();
+		this.yCoord = dataInputStream.readShort();
+		this.zCoord = dataInputStream.readInt();
+		int var2 = dataInputStream.readShort() & 65535;
 		this.compressedNBT = new byte[var2];
-		var1.readFully(this.compressedNBT);
+		dataInputStream.readFully(this.compressedNBT);
 		this.tileEntityNBT = CompressedStreamTools.decompress(this.compressedNBT);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xCoord);
-		var1.writeShort(this.yCoord);
-		var1.writeInt(this.zCoord);
-		var1.writeShort((short)this.compressedNBT.length);
-		var1.write(this.compressedNBT);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xCoord);
+		dataOutputStream.writeShort(this.yCoord);
+		dataOutputStream.writeInt(this.zCoord);
+		dataOutputStream.writeShort((short)this.compressedNBT.length);
+		dataOutputStream.write(this.compressedNBT);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleComplexEntity(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleComplexEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiCreative.java
@@ -1,0 +1,198 @@
+package io.github.bluestaggo.mcdiverge;
+
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.src.GuiButton;
+import net.minecraft.src.GuiContainer;
+import net.minecraft.src.InventoryPlayer;
+import net.minecraft.src.SlotInventory;
+import net.minecraft.client.Minecraft;
+
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.Map;
+
+public class GuiCreative extends GuiContainer {
+	private final InventoryPlayer inventoryPlayer;
+	private InventoryReadonly inventory;
+	private int row = 0;
+	private int maxRow;
+	private GuiSliderGeneric rowSlider;
+
+	public GuiCreative(InventoryPlayer inventoryPlayer, Minecraft minecraft) {
+		this.xSize = 176;
+		this.ySize = 190;
+		this.inventoryPlayer = inventoryPlayer;
+		this.mc = minecraft;
+
+		this.inventory = this.mc.creativeDebugEnabled
+				? InventoryReadonly.generateCreativeInventory(true)
+				: InventoryReadonly.getCreativeInventory();
+		this.maxRow = this.inventory.getSizeInventory() / 8 - 7;
+	}
+
+	public void initGui() {
+		this.rowSlider = null;
+		this.controlList.clear();
+		this.setupItems();
+		this.setupControls();
+
+		if (this.mc.options.creativeDebug) {
+			this.controlList.add(new GuiButton(100, this.width - 150, this.height - 20, 150, 20,
+											   (this.mc.creativeDebugEnabled ? "Disable " : "Enable ") + "Debug ;)"));
+		}
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float var1) {
+		int bg = this.mc.renderEngine.getTexture("/gui/creative.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/creative.png"));
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		for (int i = 1; i < 9; i++) {
+			if (this.inventory.getLabel(i + row) != null) {
+				this.drawTexturedModalRect(posX + 7, posY + i * 18 - 1, 0, 238, 144, 18);
+			}
+		}
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString(this.mc.creativeDebugEnabled ? "Cheats" : "Creative", 8, 6, this.mc.options.getTextColor());
+		for (int i = 1; i < 9; i++) {
+			String label = this.inventory.getLabel(i + row);
+			if (label != null) {
+				this.fontRenderer.drawStringWithShadow(label, 12, i * 18 + 4, 0xFFFFFF);
+			}
+		}
+	}
+
+	private void setupItems() {
+		this.inventory.pickOne = this.mc.thePlayer.creative;
+
+		this.inventorySlots.clear();
+		for (int i = this.row * 8; i < 64 + this.row * 8; i++) {
+			this.inventorySlots.add(new SlotInventory(this, this.inventory, i, ((i - this.row * 8) % 8) * 18 + 8,
+					((i - this.row * 8) / 8) * 18 + 18));
+		}
+		for (int i = 0; i < 9; i++) {
+			this.inventorySlots.add(i, new SlotInventory(this, this.inventoryPlayer, i, (i % 9) * 18 + 8, 166));
+		}
+	}
+
+	private void setupControls() {
+		int posX = (this.width - this.xSize) / 2 + 151;
+		int posY = (this.height - this.ySize) / 2 + 17;
+
+//		this.controlList.add(new GuiButton(0, posX, posY, 18, 18, "^4"));
+//		this.controlList.add(new GuiButton(1, posX, posY + 18, 18, 18, "^1"));
+//		this.controlList.add(new GuiButton(2, posX, posY + 36, 18, 18, "v1"));
+//		this.controlList.add(new GuiButton(3, posX, posY + 54, 18, 18, "v4"));
+
+		if (this.mc.creativeDebugEnabled) {
+			this.controlList.add(new GuiButton(101, posX + 18, posY + 81, 18, 18, "FB"));
+			this.controlList.add(new GuiButton(102, posX + 18, posY + 99, 18, 18, "NC"));
+			this.controlList.add(new GuiButton(103, posX + 38, posY + 81, 64, 18, "Day"));
+			this.controlList.add(new GuiButton(104, posX + 38, posY + 99, 64, 18, "Night"));
+		}
+
+//		this.rowSlider = new GuiSliderGeneric(4, (this.width - this.xSize) / 2 + 97, (this.height - this.ySize) / 2 + 4, 72, 12, "Page", 0.0F, this.maxRow);
+		this.rowSlider = new GuiSliderGeneric(4, (this.width - this.xSize) / 2 + 151, (this.height - this.ySize) / 2 + 17, 18, 144, "Page", 0.0F, this.maxRow);
+		this.rowSlider.round = true;
+		this.rowSlider.vertical = true;
+		this.rowSlider.displayString = this.rowSlider.getDisplayString();
+		this.controlList.add(this.rowSlider);
+
+		if (this.inventory.labels != null) {
+			int y = 8;
+			for (Iterator<Map.Entry<Integer, String>> it = this.inventory.labels
+					.entrySet()
+					.stream()
+					.sorted(Comparator.comparingInt(Map.Entry::getKey))
+					.iterator(); it.hasNext(); ) {
+				Map.Entry<Integer, String> label = it.next();
+				this.controlList.add(new GuiTransparentButton(200 + label.getKey(), 8, y, (this.width - this.xSize) / 2, 12, label.getValue()));
+				y += 12;
+			}
+		}
+	}
+
+	protected void actionPerformed(GuiButton guiButton1) {
+		switch (guiButton1.id) {
+			case 0:
+				this.row = Math.max(this.row - 4, 0);
+				break;
+
+			case 1:
+				this.row = Math.max(this.row - 1, 0);
+				break;
+
+			case 2:
+				this.row = Math.min(this.row + 1, this.maxRow);
+				break;
+
+			case 3:
+				this.row = Math.min(this.row + 4, this.maxRow);
+				break;
+
+			case 100:
+				this.mc.creativeDebugEnabled = !this.mc.creativeDebugEnabled;
+
+				this.controlList.clear();
+				this.controlList.add(guiButton1);
+				guiButton1.displayString = (this.mc.creativeDebugEnabled ? "Disable " : "Enable ") + "Debug ;)";
+
+				this.inventory = this.mc.creativeDebugEnabled
+						? InventoryReadonly.generateCreativeInventory(true)
+						: InventoryReadonly.getCreativeInventory();
+				this.maxRow = this.inventory.getSizeInventory() / 8 - 7;
+				this.row = 0;
+
+				this.setupItems();
+				this.setupControls();
+				break;
+
+			case 101:
+				this.mc.renderGlobal.toggleFullbright();
+				break;
+
+			case 102:
+				this.mc.thePlayer.noClip = !this.mc.thePlayer.noClip;
+				break;
+
+			case 103:
+				this.mc.theWorld.worldTime = 1000;
+				break;
+
+			case 104:
+				this.mc.theWorld.worldTime = 14000;
+				break;
+		}
+
+		if (guiButton1.id >= 200) {
+			this.row = guiButton1.id - 201;
+			if (this.row > this.maxRow) {
+				this.row = this.maxRow;
+			}
+		}
+
+		setupItems();
+		if (guiButton1.id != 4) {
+			this.rowSlider.sliderValue = row / rowSlider.multiplier;
+			this.rowSlider.displayString = this.rowSlider.getDisplayString();
+		}
+	}
+
+	public void updateScreen() {
+		if (this.rowSlider.dragging) {
+			int oldRow = this.row;
+			this.row = (int) this.rowSlider.getValue();
+			if (this.row != oldRow) {
+				setupItems();
+			}
+		}
+	}
+}
--- net/minecraft/src/CraftingRecipe.java
+++ net/minecraft/src/CraftingRecipe.java
@@ -4,25 +4,27 @@
 	private int width;
 	private int height;
 	private int[] ingredientMap;
+	private int[] metadataMap;
 	private ItemStack resultStack;
 	public final int resultId;
 
-	public CraftingRecipe(int var1, int var2, int[] var3, ItemStack var4) {
-		this.resultId = var4.itemID;
-		this.width = var1;
-		this.height = var2;
-		this.ingredientMap = var3;
-		this.resultStack = var4;
+	public CraftingRecipe(int width, int height, int[] ingredientMap, int[] metadataMap, ItemStack resultStack) {
+		this.resultId = resultStack.itemID;
+		this.width = width;
+		this.height = height;
+		this.ingredientMap = ingredientMap;
+		this.metadataMap = metadataMap;
+		this.resultStack = resultStack;
 	}
 
-	public boolean matches(int[] var1) {
+	public boolean matches(int[] var1, int[] metadata) {
 		for(int var2 = 0; var2 <= 3 - this.width; ++var2) {
 			for(int var3 = 0; var3 <= 3 - this.height; ++var3) {
-				if(this.checkMatch(var1, var2, var3, true)) {
+				if(this.checkMatch(var1, var2, var3, metadata, true)) {
 					return true;
 				}
 
-				if(this.checkMatch(var1, var2, var3, false)) {
+				if(this.checkMatch(var1, var2, var3, metadata, false)) {
 					return true;
 				}
 			}
@@ -31,21 +33,24 @@
 		return false;
 	}
 
-	private boolean checkMatch(int[] var1, int var2, int var3, boolean var4) {
+	private boolean checkMatch(int[] var1, int var2, int var3, int[] metaMap, boolean var4) {
 		for(int var5 = 0; var5 < 3; ++var5) {
 			for(int var6 = 0; var6 < 3; ++var6) {
 				int var7 = var5 - var2;
 				int var8 = var6 - var3;
 				int var9 = -1;
+				int metadata = -1;
 				if(var7 >= 0 && var8 >= 0 && var7 < this.width && var8 < this.height) {
 					if(var4) {
 						var9 = this.ingredientMap[this.width - var7 - 1 + var8 * this.width];
+						metadata = this.metadataMap[this.width - var7 - 1 + var8 * this.width];
 					} else {
 						var9 = this.ingredientMap[var7 + var8 * this.width];
+						metadata = this.metadataMap[var7 + var8 * this.width];
 					}
 				}
 
-				if(var1[var5 + var6 * 3] != var9) {
+				if(var1[var5 + var6 * 3] != var9 || (metadata >= 0 && metaMap[var5 + var6 * 3] != metadata)) {
 					return false;
 				}
 			}
@@ -54,11 +59,25 @@
 		return true;
 	}
 
-	public ItemStack getCraftingResult(int[] var1) {
-		return new ItemStack(this.resultStack.itemID, this.resultStack.stackSize);
+	public ItemStack getCraftingResult() {
+		return new ItemStack(this.resultStack.itemID, this.resultStack.stackSize).withMetadata(this.resultStack.itemMetadata);
 	}
 
 	public int getRecipeSize() {
 		return this.width * this.height;
+	}
+
+	public ItemStack[] asItemStacks() {
+		ItemStack[] items = new ItemStack[10];
+		for (int y = 0; y < this.height; y++) {
+			for (int x = 0; x < this.width; x++) {
+				int item = this.ingredientMap[x + y * this.width];
+				if (item > 0) {
+					items[x + y * 3] = new ItemStack(item, 1).withMetadata(this.metadataMap[x + y * this.width]);
+				}
+			}
+		}
+		items[9] = this.resultStack;
+		return items;
 	}
 }
--- net/minecraft/src/Packet0KeepAlive.java
+++ net/minecraft/src/Packet0KeepAlive.java
@@ -4,13 +4,13 @@
 import java.io.DataOutputStream;
 
 public class Packet0KeepAlive extends Packet {
-	public void processPacket(NetHandler var1) {
-	}
-
-	public void readPacketData(DataInputStream var1) {
-	}
-
-	public void writePacket(DataOutputStream var1) {
+	public void processPacket(NetHandler netHandler) {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) {
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) {
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TileEntityRefabricatorRender.java
@@ -1,0 +1,19 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+import org.lwjgl.opengl.GL11;
+
+public class TileEntityRefabricatorRender extends TileEntitySpecialRenderer {
+	public void renderTileEntityRefabricatorAt(TileEntityRefabricator tileEntity1, double var2, double var4, double var6, float var8) {
+		EntityItem displayItem = tileEntity1.getDisplayItem();
+		if (displayItem != null && displayItem.item != null) {
+			float brightness = tileEntity1.worldObj.getBrightness(tileEntity1.xCoord, tileEntity1.yCoord + 1, tileEntity1.zCoord);
+			GL11.glColor3f(brightness, brightness, brightness);
+			RenderManager.instance.renderEntityWithPosYaw(displayItem, var2 + 0.5D, var4 + 1.2D, var6 + 0.5D, 0.0F, 0.0F);
+		}
+	}
+
+	public void renderTileEntityAt(TileEntity tileEntity1, double var2, double var4, double var6, float var8) {
+		this.renderTileEntityRefabricatorAt((TileEntityRefabricator) tileEntity1, var2, var4, var6, var8);
+	}
+}
--- net/minecraft/src/Slot.java
+++ net/minecraft/src/Slot.java
@@ -4,16 +4,16 @@
 	public final int slotIndex;
 	public final IInventory inventory;
 
-	public Slot(IInventory var1, int var2) {
-		this.inventory = var1;
-		this.slotIndex = var2;
+	public Slot(IInventory inventory, int slotIndex) {
+		this.inventory = inventory;
+		this.slotIndex = slotIndex;
 	}
 
 	public void onPickupFromSlot() {
 		this.onSlotChanged();
 	}
 
-	public boolean isItemValid(ItemStack var1) {
+	public boolean isItemValid(ItemStack itemStack) {
 		return true;
 	}
 
@@ -21,8 +21,8 @@
 		return this.inventory.getStackInSlot(this.slotIndex);
 	}
 
-	public void putStack(ItemStack var1) {
-		this.inventory.setInventorySlotContents(this.slotIndex, var1);
+	public void putStack(ItemStack itemStack) {
+		this.inventory.setInventorySlotContents(this.slotIndex, itemStack);
 		this.onSlotChanged();
 	}
 
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -1,52 +1,90 @@
 package net.minecraft.src;
 
+import java.util.List;
+import java.util.stream.Collectors;
+
 public class GuiControls extends GuiScreen {
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Controls";
 	private GameSettings options;
 	private int buttonId = -1;
+	private final int maxPages;
+	private int currentPage;
 
-	public GuiControls(GuiScreen var1, GameSettings var2) {
-		this.parentScreen = var1;
-		this.options = var2;
+	public GuiControls(GuiScreen prevScreen, GameSettings gameSettings) {
+		this.parentScreen = prevScreen;
+		this.options = gameSettings;
+		this.maxPages = Math.floorDiv(this.options.keyBindings.length, 10) + 1;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.keyBindings.length; ++var1) {
-			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBindingDescription(var1)));
-		}
-
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		for(int var2 = 0; var2 < this.options.keyBindings.length; ++var2) {
-			((GuiButton)this.controlList.get(var2)).displayString = this.options.getKeyBindingDescription(var2);
-		}
-
-		if(var1.id == 200) {
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 132, "Done"));
+		this.controlList.add(new GuiButton(300, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(301, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		initPage();
+	}
+
+	public void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 200).collect(Collectors.toList());
+		for(int var1 = 0; var1 < Math.min(this.options.keyBindings.length - currentPage * 10, 10); ++var1) {
+			int var11 = var1 + currentPage * 10;
+			this.controlList.add(new GuiSmallButton(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBindingDescription(var11)));
+		}
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id < 200) {
+			this.buttonId = button.id;
+			button.displayString = "> " + this.options.getKeyBindingDescription(button.id) + " <";
+		}
+
+		if(button.id == 200) {
 			this.mc.displayGuiScreen(this.parentScreen);
-		} else {
-			this.buttonId = var1.id;
-			var1.displayString = "> " + this.options.getKeyBindingDescription(var1.id) + " <";
-		}
-
+		}
+
+		if(button.id == 300) {
+			this.currentPage--;
+			if (this.currentPage < 0) {
+				this.currentPage = maxPages - 1;
+			}
+			this.initPage();
+		}
+
+		if(button.id == 301) {
+			this.currentPage++;
+			if (this.currentPage >= maxPages) {
+				this.currentPage = 0;
+			}
+			this.initPage();
+		}
+
+		for (int i = currentPage * 10; i < Math.min(currentPage * 10 + 1, this.mc.options.keyBindings.length); i++) {
+			int finalI = i;
+			((GuiButton) this.controlList
+					.stream()
+					.filter(o -> o instanceof GuiButton && ((GuiButton) o).id == finalI)
+					.findAny()
+					.get()).displayString = this.options.getKeyBindingDescription(i);
+		}
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 		if(this.buttonId >= 0) {
-			this.options.setKeyBinding(this.buttonId, var2);
-			((GuiButton)this.controlList.get(this.buttonId)).displayString = this.options.getKeyBindingDescription(this.buttonId);
+			this.options.setKeyBinding(this.buttonId, key);
+			((GuiButton) this.controlList
+					.stream()
+					.filter(o -> o instanceof GuiButton && ((GuiButton) o).id == this.buttonId)
+					.findAny()
+					.get()).displayString = this.options.getKeyBindingDescription(this.buttonId);
 			this.buttonId = -1;
 		} else {
-			super.keyTyped(var1, var2);
+			super.keyTyped(character, key);
 		}
-
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -3,28 +3,32 @@
 import java.util.Random;
 
 public class BlockFurnace extends BlockContainer {
-	private final boolean isActive;
-
-	protected BlockFurnace(int var1, boolean var2) {
-		super(var1, Material.rock);
-		this.isActive = var2;
+	protected final boolean isActive;
+
+	protected BlockFurnace(int blockID, boolean isActive) {
+		this(blockID, isActive, Material.rock);
+	}
+
+	protected BlockFurnace(int blockID, boolean isActive, Material material) {
+		super(blockID, material);
+		this.isActive = isActive;
 		this.blockIndexInTexture = 45;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Block.stoneOvenIdle.blockID;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.setDefaultDirection(var1, var2, var3, var4);
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		super.onBlockAdded(worldObj, x, y, z);
+		this.setDefaultDirection(worldObj, x, y, z);
 	}
 
-	private void setDefaultDirection(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4 - 1);
-		int var6 = var1.getBlockId(var2, var3, var4 + 1);
-		int var7 = var1.getBlockId(var2 - 1, var3, var4);
-		int var8 = var1.getBlockId(var2 + 1, var3, var4);
+	private void setDefaultDirection(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockId(x, y, z - 1);
+		int var6 = worldObj.getBlockId(x, y, z + 1);
+		int var7 = worldObj.getBlockId(x - 1, y, z);
+		int var8 = worldObj.getBlockId(x + 1, y, z);
 		byte var9 = 3;
 		if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
 			var9 = 3;
@@ -42,66 +46,66 @@
 			var9 = 4;
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var9);
 	}
 
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 1) {
 			return Block.stone.blockIndexInTexture;
-		} else if(var5 == 0) {
+		} else if(side == 0) {
 			return Block.stone.blockIndexInTexture;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var5 != var6 ? this.blockIndexInTexture : (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture - 1);
+			int var6 = blockAccess.getBlockMetadata(x, y, z);
+			return side != var6 ? this.blockIndexInTexture : (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture - 1);
 		}
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.isActive) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			float var7 = (float)var2 + 0.5F;
-			float var8 = (float)var3 + 0.0F + var5.nextFloat() * 6.0F / 16.0F;
-			float var9 = (float)var4 + 0.5F;
+			int var6 = worldObj.getBlockMetadata(x, y, z);
+			float var7 = (float)x + 0.5F;
+			float var8 = (float)y + 0.0F + rand.nextFloat() * 6.0F / 16.0F;
+			float var9 = (float)z + 0.5F;
 			float var10 = 0.52F;
-			float var11 = var5.nextFloat() * 0.6F - 0.3F;
+			float var11 = rand.nextFloat() * 0.6F - 0.3F;
 			if(var6 == 4) {
-				var1.spawnParticle("smoke", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("smoke", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 5) {
-				var1.spawnParticle("smoke", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("smoke", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 2) {
-				var1.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
 			} else if(var6 == 3) {
-				var1.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
 			}
 
 		}
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? Block.stone.blockID : (var1 == 0 ? Block.stone.blockID : (var1 == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? Block.stone.blockID : (side == 0 ? Block.stone.blockID : (side == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		TileEntityFurnace var6 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
-		var5.displayGUIFurnace(var6);
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityFurnace tileEntityFurnace6 = (TileEntityFurnace)worldObj.getBlockTileEntity(x, y, z);
+		entityPlayer.displayGUIFurnace(tileEntityFurnace6);
 		return true;
 	}
 
-	public static void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-		if(var0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenActive.blockID);
+	public void updateFurnaceBlockState(boolean isActive, World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		TileEntity tileEntity6 = worldObj.getBlockTileEntity(x, y, z);
+		if(isActive) {
+			worldObj.setBlockWithNotify(x, y, z, Block.stoneOvenActive.blockID);
 		} else {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenIdle.blockID);
+			worldObj.setBlockWithNotify(x, y, z, Block.stoneOvenIdle.blockID);
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-		var1.setBlockTileEntity(var2, var3, var4, var6);
+		worldObj.setBlockMetadataWithNotify(x, y, z, var5);
+		worldObj.setBlockTileEntity(x, y, z, tileEntity6);
 	}
 
 	protected TileEntity getBlockEntity() {
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.util.Random;
+
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
@@ -9,23 +10,37 @@
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
 
 public class SoundManager {
+	public enum MusicType {
+		NORMAL,
+		CAVE,
+		TITLE
+	}
+
 	private static SoundSystem sndSystem;
-	private SoundPool soundPoolSounds = new SoundPool();
-	private SoundPool soundPoolStreaming = new SoundPool();
-	private SoundPool soundPoolMusic = new SoundPool();
+	private final SoundPool soundPoolSounds = new SoundPool();
+	private final SoundPool soundPoolStreaming = new SoundPool();
+	private final SoundPool soundPoolMusic = new SoundPool();
+	private final SoundPool soundPoolCaveMusic = new SoundPool();
+	private final SoundPool soundPoolTitleMusic = new SoundPool();
 	private int playedSoundsCount = 0;
 	private GameSettings options;
 	private static boolean loaded = false;
 	private Random rand = new Random();
-	private int ticksBeforeMusic = this.rand.nextInt(12000);
+	private int ticksBeforeMusic = 0;
+	private int fadeOutTicks = 0;
+	private MusicType musicType = MusicType.TITLE;
 
-	public void loadSoundSettings(GameSettings var1) {
+	public void loadSoundSettings(GameSettings settings) {
 		this.soundPoolStreaming.isGetRandomSound = false;
-		this.options = var1;
-		if(!loaded && (var1 == null || var1.soundVolume != 0.0F || var1.musicVolume != 0.0F)) {
+		this.options = settings;
+		if(!loaded && (settings == null || settings.soundVolume != 0.0F || settings.musicVolume != 0.0F)) {
 			this.tryToSetLibraryAndCodecs();
 		}
 
+	}
+
+	public MusicType getMusicType() {
+		return this.musicType;
 	}
 
 	private void tryToSetLibraryAndCodecs() {
@@ -43,8 +58,8 @@
 			this.options.soundVolume = var1;
 			this.options.musicVolume = var2;
 			this.options.saveOptions();
-		} catch (Throwable var3) {
-			var3.printStackTrace();
+		} catch (Throwable throwable3) {
+			throwable3.printStackTrace();
 			System.err.println("error linking with the LibraryJavaSound plug-in");
 		}
 
@@ -71,47 +86,107 @@
 
 	}
 
-	public void addSound(String var1, File var2) {
-		this.soundPoolSounds.addSound(var1, var2);
-	}
-
-	public void addStreaming(String var1, File var2) {
-		this.soundPoolStreaming.addSound(var1, var2);
-	}
-
-	public void addMusic(String var1, File var2) {
-		this.soundPoolMusic.addSound(var1, var2);
-	}
-
-	public void playRandomMusicIfReady() {
+	public void addSound(String name, File file) {
+		this.soundPoolSounds.addSound(name, file);
+	}
+
+	public void addStreaming(String name, File file) {
+		this.soundPoolStreaming.addSound(name, file);
+	}
+
+	public void addMusic(String name, File file) {
+		this.soundPoolMusic.addSound(name, file);
+	}
+
+	public void addCaveMusic(String name, File file) {
+		this.soundPoolCaveMusic.addSound(name, file);
+	}
+
+	public void addTitleMusic(String name, File file) {
+		this.soundPoolTitleMusic.addSound(name, file);
+	}
+
+	public void tickMusic() {
 		if(loaded && this.options.musicVolume != 0.0F) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
 				if(this.ticksBeforeMusic > 0) {
 					--this.ticksBeforeMusic;
+				}
+			}
+			if(this.fadeOutTicks > 0) {
+				--this.fadeOutTicks;
+			}
+		}
+	}
+
+	private void playRandomMusicFromPool(SoundPool soundPool, MusicType type) {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
+				if(this.ticksBeforeMusic > 0) {
 					return;
 				}
 
-				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
-				if(var1 != null) {
-					this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
-					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
+				SoundPoolEntry soundPoolEntry1 = soundPool.getRandomSound();
+				if(soundPoolEntry1 != null) {
+					this.ticksBeforeMusic = (int) ((this.rand.nextInt(12000) + 12000) * this.options.musicDelay);
+					sndSystem.backgroundMusic("BgMusic", soundPoolEntry1.soundUrl, soundPoolEntry1.soundName, false);
 					sndSystem.setVolume("BgMusic", this.options.musicVolume);
 					sndSystem.play("BgMusic");
+					this.musicType = type;
 				}
 			}
-
-		}
-	}
-
-	public void setListener(EntityLiving var1, float var2) {
+		}
+	}
+
+	public void playRandomMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolMusic, MusicType.NORMAL);
+	}
+
+	public void playRandomCaveMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolCaveMusic, MusicType.CAVE);
+	}
+
+	public void playRandomTitleMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolTitleMusic, MusicType.TITLE);
+		this.ticksBeforeMusic = 0;
+	}
+
+	public void fadeOutBackgroundMusic() {
+		if (!loaded || fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+			return;
+		}
+		sndSystem.fadeOut("BgMusic", null, 2500);
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 60;
+	}
+
+	public void fadeOutTitleMusic() {
+		if (!loaded || fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType != MusicType.TITLE) {
+			return;
+		}
+		sndSystem.fadeOut("BgMusic", null, 2500);
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 60;
+	}
+
+	public void stopBackgroundMusic() {
+		if (!loaded || !sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+			return;
+		}
+		sndSystem.stop("BgMusic");
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 0;
+	}
+
+	public void setListener(EntityLiving listener, float partialTick) {
 		if(loaded && this.options.soundVolume != 0.0F) {
-			if(var1 != null) {
-				float var3 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-				double var4 = var1.prevPosX + (var1.posX - var1.prevPosX) * (double)var2;
-				double var6 = var1.prevPosY + (var1.posY - var1.prevPosY) * (double)var2;
-				double var8 = var1.prevPosZ + (var1.posZ - var1.prevPosZ) * (double)var2;
-				float var10 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-				float var11 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+			if(listener != null) {
+				float var3 = listener.prevRotationYaw + (listener.rotationYaw - listener.prevRotationYaw) * partialTick;
+				double var4 = listener.prevPosX + (listener.posX - listener.prevPosX) * (double)partialTick;
+				double var6 = listener.prevPosY + (listener.posY - listener.prevPosY) * (double)partialTick;
+				double var8 = listener.prevPosZ + (listener.posZ - listener.prevPosZ) * (double)partialTick;
+				float var10 = MathHelper.cos(-var3 * 0.017453292F - (float)Math.PI);
+				float var11 = MathHelper.sin(-var3 * 0.017453292F - (float)Math.PI);
 				float var12 = -var11;
 				float var13 = 0.0F;
 				float var14 = -var10;
@@ -124,22 +199,22 @@
 		}
 	}
 
-	public void playStreaming(String var1, float var2, float var3, float var4, float var5, float var6) {
+	public void playStreaming(String sound, float posX, float posY, float posZ, float volume, float pitch) {
 		if(loaded && this.options.soundVolume != 0.0F) {
 			String var7 = "streaming";
 			if(sndSystem.playing("streaming")) {
 				sndSystem.stop("streaming");
 			}
 
-			if(var1 != null) {
-				SoundPoolEntry var8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(var1);
-				if(var8 != null && var5 > 0.0F) {
+			if(sound != null) {
+				SoundPoolEntry soundPoolEntry8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(sound);
+				if(soundPoolEntry8 != null && volume > 0.0F) {
 					if(sndSystem.playing("BgMusic")) {
 						sndSystem.stop("BgMusic");
 					}
 
 					float var9 = 16.0F;
-					sndSystem.newStreamingSource(true, var7, var8.soundUrl, var8.soundName, false, var2, var3, var4, 2, var9 * 4.0F);
+					sndSystem.newStreamingSource(true, var7, soundPoolEntry8.soundUrl, soundPoolEntry8.soundName, false, posX, posY, posZ, 2, var9 * 4.0F);
 					sndSystem.setVolume(var7, 0.5F * this.options.soundVolume);
 					sndSystem.play(var7);
 				}
@@ -148,44 +223,44 @@
 		}
 	}
 
-	public void playSound(String var1, float var2, float var3, float var4, float var5, float var6) {
+	public void playSound(String sound, float posX, float posY, float posZ, float volume, float pitch) {
 		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var7 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var7 != null && var5 > 0.0F) {
+			SoundPoolEntry soundPoolEntry7 = this.soundPoolSounds.getRandomSoundFromSoundPool(sound);
+			if(soundPoolEntry7 != null && volume > 0.0F) {
 				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
 				String var8 = "sound_" + this.playedSoundsCount;
 				float var9 = 16.0F;
-				if(var5 > 1.0F) {
-					var9 *= var5;
-				}
-
-				sndSystem.newSource(var5 > 1.0F, var8, var7.soundUrl, var7.soundName, false, var2, var3, var4, 2, var9);
-				sndSystem.setPitch(var8, var6);
-				if(var5 > 1.0F) {
-					var5 = 1.0F;
-				}
-
-				sndSystem.setVolume(var8, var5 * this.options.soundVolume);
+				if(volume > 1.0F) {
+					var9 *= volume;
+				}
+
+				sndSystem.newSource(volume > 1.0F, var8, soundPoolEntry7.soundUrl, soundPoolEntry7.soundName, false, posX, posY, posZ, 2, var9);
+				sndSystem.setPitch(var8, pitch);
+				if(volume > 1.0F) {
+					volume = 1.0F;
+				}
+
+				sndSystem.setVolume(var8, volume * this.options.soundVolume);
 				sndSystem.play(var8);
 			}
 
 		}
 	}
 
-	public void playSoundFX(String var1, float var2, float var3) {
+	public void playSoundFX(String sound, float volume, float pitch) {
 		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var4 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var4 != null) {
+			SoundPoolEntry soundPoolEntry4 = this.soundPoolSounds.getRandomSoundFromSoundPool(sound);
+			if(soundPoolEntry4 != null) {
 				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
 				String var5 = "sound_" + this.playedSoundsCount;
-				sndSystem.newSource(false, var5, var4.soundUrl, var4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
-				if(var2 > 1.0F) {
-					var2 = 1.0F;
+				sndSystem.newSource(false, var5, soundPoolEntry4.soundUrl, soundPoolEntry4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
+				if(volume > 1.0F) {
+					volume = 1.0F;
 				}
 
-				var2 *= 0.25F;
-				sndSystem.setPitch(var5, var3);
-				sndSystem.setVolume(var5, var2 * this.options.soundVolume);
+				volume *= 0.25F;
+				sndSystem.setPitch(var5, pitch);
+				sndSystem.setVolume(var5, volume * this.options.soundVolume);
 				sndSystem.play(var5);
 			}
 
--- net/minecraft/src/Packet22Collect.java
+++ net/minecraft/src/Packet22Collect.java
@@ -11,26 +11,26 @@
 	public Packet22Collect() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.collectedEntityId = var1.readInt();
-		this.collectorEntityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.collectedEntityId);
-		var1.writeInt(this.collectorEntityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleCollect(this);
+	public Packet22Collect(int collectedEntityID, int collectorEntityID) {
+		this.collectedEntityId = collectedEntityID;
+		this.collectorEntityId = collectorEntityID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.collectedEntityId = dataInputStream.readInt();
+		this.collectorEntityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.collectedEntityId);
+		dataOutputStream.writeInt(this.collectorEntityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleCollect(this);
 	}
 
 	public int getPacketSize() {
 		return 8;
-	}
-
-	public Packet22Collect(int var1, int var2) {
-		this.collectedEntityId = var1;
-		this.collectorEntityId = var2;
 	}
 }
--- net/minecraft/src/SlotCrafting.java
+++ net/minecraft/src/SlotCrafting.java
@@ -3,12 +3,12 @@
 public class SlotCrafting extends SlotInventory {
 	private final IInventory craftMatrix;
 
-	public SlotCrafting(GuiContainer var1, IInventory var2, IInventory var3, int var4, int var5, int var6) {
-		super(var1, var3, var4, var5, var6);
-		this.craftMatrix = var2;
+	public SlotCrafting(GuiContainer guiContainer, IInventory inventory, IInventory resultInventory, int slotIndex, int x, int y) {
+		super(guiContainer, resultInventory, slotIndex, x, y);
+		this.craftMatrix = inventory;
 	}
 
-	public boolean isItemValid(ItemStack var1) {
+	public boolean isItemValid(ItemStack itemStack) {
 		return false;
 	}
 
--- net/minecraft/src/GuiFurnace.java
+++ net/minecraft/src/GuiFurnace.java
@@ -3,33 +3,33 @@
 import org.lwjgl.opengl.GL11;
 
 public class GuiFurnace extends GuiContainer {
-	private TileEntityFurnace furnaceInventory;
+	private final TileEntityFurnace furnaceInventory;
 
-	public GuiFurnace(InventoryPlayer var1, TileEntityFurnace var2) {
-		this.furnaceInventory = var2;
-		this.inventorySlots.add(new SlotInventory(this, var2, 0, 56, 17));
-		this.inventorySlots.add(new SlotInventory(this, var2, 1, 56, 53));
-		this.inventorySlots.add(new SlotInventory(this, var2, 2, 116, 35));
+	public GuiFurnace(InventoryPlayer inventoryPlayer1, TileEntityFurnace tileEntityFurnace2) {
+		this.furnaceInventory = tileEntityFurnace2;
+		this.inventorySlots.add(new SlotInventory(this, tileEntityFurnace2, 0, 56, 17));
+		this.inventorySlots.add(new SlotInventory(this, tileEntityFurnace2, 1, 56, 53));
+		this.inventorySlots.add(new SlotInventory(this, tileEntityFurnace2, 2, 116, 35));
 
 		int var3;
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(int var4 = 0; var4 < 9; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+				this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
 			}
 		}
 
 		for(var3 = 0; var3 < 9; ++var3) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var3, 8 + var3 * 18, 142));
+			this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var3, 8 + var3 * 18, 142));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Furnace", 60, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Furnace", 60, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
 		int var2 = this.mc.renderEngine.getTexture("/gui/furnace.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
--- net/minecraft/src/Packet53BlockChange.java
+++ net/minecraft/src/Packet53BlockChange.java
@@ -15,36 +15,36 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.type = var1.read();
-		this.metadata = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.type);
-		var1.write(this.metadata);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockChange(this);
+	public Packet53BlockChange(int xPosition, int yPosition, int zPosition, World world) {
+		this.isChunkDataPacket = true;
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.type = world.getBlockId(xPosition, yPosition, zPosition);
+		this.metadata = world.getBlockMetadata(xPosition, yPosition, zPosition);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.type = dataInputStream.read();
+		this.metadata = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.type);
+		dataOutputStream.write(this.metadata);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockChange(this);
 	}
 
 	public int getPacketSize() {
 		return 11;
-	}
-
-	public Packet53BlockChange(int var1, int var2, int var3, World var4) {
-		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-		this.type = var4.getBlockId(var1, var2, var3);
-		this.metadata = var4.getBlockMetadata(var1, var2, var3);
 	}
 }
--- net/minecraft/src/BlockReed.java
+++ net/minecraft/src/BlockReed.java
@@ -3,59 +3,64 @@
 import java.util.Random;
 
 public class BlockReed extends Block {
-	protected BlockReed(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
-		float var3 = 6.0F / 16.0F;
+	protected BlockReed(int id, int tex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = tex;
+		float var3 = 0.375F;
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 1.0F, 0.5F + var3);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockId(x, y + 1, z) == 0) {
 			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+			for(var6 = 1; worldObj.getBlockId(x, y - var6, z) == this.blockID; ++var6) {
 			}
 
 			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
+				int var7 = worldObj.getBlockMetadata(x, y, z);
 				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+					worldObj.setBlockWithNotify(x, y + 1, z, this.blockID);
+					worldObj.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					worldObj.setBlockMetadataWithNotify(x, y, z, var7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkBlockCoordValid(var1, var2, var3, var4);
-	}
-
-	protected final void checkBlockCoordValid(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int var5 = world.getBlockId(x, y - 1, z);
+		return var5 == this.blockID ? true
+			: (var5 != Block.grass.blockID && var5 != Block.dirt.blockID && var5 != Block.sand.blockID ? false
+			: (world.getBlockMaterial(x - 1, y - 1, z) == Material.water ? true
+			: (world.getBlockMaterial(x + 1, y - 1, z) == Material.water ? true
+			: (world.getBlockMaterial(x, y - 1, z - 1) == Material.water ? true
+			: world.getBlockMaterial(x, y - 1, z + 1) == Material.water))));
+	}
+
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		this.checkBlockCoordValid(worldObj, x, y, z);
+	}
+
+	protected final void checkBlockCoordValid(World worldObj, int x, int y, int z) {
+		if(!this.canBlockStay(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return this.canPlaceBlockAt(var1, var2, var3, var4);
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return this.canPlaceBlockAt(world, x, y, z);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
 		return null;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int metadata, Random rand) {
 		return Item.reed.shiftedIndex;
 	}
 
--- net/minecraft/src/OSMapIsom.java
+++ /dev/null
@@ -1,28 +1,0 @@
-package net.minecraft.src;
-
-class OSMapIsom {
-	static final int[] osValues = new int[EnumOSIsom.values().length];
-
-	static {
-		try {
-			osValues[EnumOSIsom.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
-		}
-
-		try {
-			osValues[EnumOSIsom.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
-		}
-
-		try {
-			osValues[EnumOSIsom.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
-		}
-
-		try {
-			osValues[EnumOSIsom.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
-		}
-
-	}
-}
--- net/minecraft/src/Pathfinder.java
+++ net/minecraft/src/Pathfinder.java
@@ -6,123 +6,119 @@
 	private MCHashTable pointMap = new MCHashTable();
 	private PathPoint[] pathOptions = new PathPoint[32];
 
-	public Pathfinder(IBlockAccess var1) {
-		this.worldMap = var1;
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, Entity var2, float var3) {
-		return this.createEntityPathTo(var1, var2.posX, var2.boundingBox.minY, var2.posZ, var3);
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, int var2, int var3, int var4, float var5) {
-		return this.createEntityPathTo(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), var5);
-	}
-
-	private PathEntity createEntityPathTo(Entity var1, double var2, double var4, double var6, float var8) {
+	public Pathfinder(IBlockAccess blockAccess) {
+		this.worldMap = blockAccess;
+	}
+
+	public PathEntity createEntityPathTo(Entity fromEntity, Entity toEntity, float distance) {
+		return this.createEntityPathTo(fromEntity, toEntity.posX, toEntity.boundingBox.minY, toEntity.posZ, distance);
+	}
+
+	public PathEntity createEntityPathTo(Entity fromEntity, int toX, int toY, int toZ, float distance) {
+		return this.createEntityPathTo(fromEntity, (double)((float)toX + 0.5F), (double)((float)toY + 0.5F), (double)((float)toZ + 0.5F), distance);
+	}
+
+	private PathEntity createEntityPathTo(Entity fromEntity, double toX, double toY, double toZ, float distance) {
 		this.path.clearPath();
 		this.pointMap.clearMap();
-		PathPoint var9 = this.openPoint(MathHelper.floor_double(var1.boundingBox.minX), MathHelper.floor_double(var1.boundingBox.minY), MathHelper.floor_double(var1.boundingBox.minZ));
-		PathPoint var10 = this.openPoint(MathHelper.floor_double(var2 - (double)(var1.width / 2.0F)), MathHelper.floor_double(var4), MathHelper.floor_double(var6 - (double)(var1.width / 2.0F)));
-		PathPoint var11 = new PathPoint(MathHelper.floor_float(var1.width + 1.0F), MathHelper.floor_float(var1.height + 1.0F), MathHelper.floor_float(var1.width + 1.0F));
-		PathEntity var12 = this.addToPath(var1, var9, var10, var11, var8);
-		return var12;
+		PathPoint pathPoint9 = this.openPoint(MathHelper.floor_double(fromEntity.boundingBox.minX), MathHelper.floor_double(fromEntity.boundingBox.minY), MathHelper.floor_double(fromEntity.boundingBox.minZ));
+		PathPoint pathPoint10 = this.openPoint(MathHelper.floor_double(toX - (double)(fromEntity.width / 2.0F)), MathHelper.floor_double(toY), MathHelper.floor_double(toZ - (double)(fromEntity.width / 2.0F)));
+		PathPoint pathPoint11 = new PathPoint(MathHelper.floor_float(fromEntity.width + 1.0F), MathHelper.floor_float(fromEntity.height + 1.0F), MathHelper.floor_float(fromEntity.width + 1.0F));
+		PathEntity pathEntity12 = this.addToPath(fromEntity, pathPoint9, pathPoint10, pathPoint11, distance);
+		return pathEntity12;
 	}
 
-	private PathEntity addToPath(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
-		var2.totalPathDistance = 0.0F;
-		var2.distanceToNext = var2.distanceTo(var3);
-		var2.distanceToTarget = var2.distanceToNext;
+	private PathEntity addToPath(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
+		pathPoint1.totalPathDistance = 0.0F;
+		pathPoint1.distanceToNext = pathPoint1.distanceTo(pathPoint2);
+		pathPoint1.distanceToTarget = pathPoint1.distanceToNext;
 		this.path.clearPath();
-		this.path.addPoint(var2);
-		PathPoint var6 = var2;
+		this.path.addPoint(pathPoint1);
+		PathPoint pathPoint6 = pathPoint1;
 
 		while(!this.path.isPathEmpty()) {
-			PathPoint var7 = this.path.dequeue();
-			if(var7.hash == var3.hash) {
-				return this.createEntityPath(var2, var3);
-			}
-
-			if(var7.distanceTo(var3) < var6.distanceTo(var3)) {
-				var6 = var7;
-			}
-
-			var7.isFirst = true;
-			int var8 = this.findPathOptions(var1, var7, var4, var3, var5);
+			PathPoint pathPoint7 = this.path.dequeue();
+			if(pathPoint7.hash == pathPoint2.hash) {
+				return this.createEntityPath(pathPoint1, pathPoint2);
+			}
+
+			if(pathPoint7.distanceTo(pathPoint2) < pathPoint6.distanceTo(pathPoint2)) {
+				pathPoint6 = pathPoint7;
+			}
+
+			pathPoint7.isFirst = true;
+			int var8 = this.findPathOptions(entity, pathPoint7, pathPoint3, pathPoint2, distance);
 
 			for(int var9 = 0; var9 < var8; ++var9) {
-				PathPoint var10 = this.pathOptions[var9];
-				float var11 = var7.totalPathDistance + var7.distanceTo(var10);
-				if(!var10.isAssigned() || var11 < var10.totalPathDistance) {
-					var10.previous = var7;
-					var10.totalPathDistance = var11;
-					var10.distanceToNext = var10.distanceTo(var3);
-					if(var10.isAssigned()) {
-						this.path.changeDistance(var10, var10.totalPathDistance + var10.distanceToNext);
+				PathPoint pathPoint10 = this.pathOptions[var9];
+				float var11 = pathPoint7.totalPathDistance + pathPoint7.distanceTo(pathPoint10);
+				if(!pathPoint10.isAssigned() || var11 < pathPoint10.totalPathDistance) {
+					pathPoint10.previous = pathPoint7;
+					pathPoint10.totalPathDistance = var11;
+					pathPoint10.distanceToNext = pathPoint10.distanceTo(pathPoint2);
+					if(pathPoint10.isAssigned()) {
+						this.path.changeDistance(pathPoint10, pathPoint10.totalPathDistance + pathPoint10.distanceToNext);
 					} else {
-						var10.distanceToTarget = var10.totalPathDistance + var10.distanceToNext;
-						this.path.addPoint(var10);
+						pathPoint10.distanceToTarget = pathPoint10.totalPathDistance + pathPoint10.distanceToNext;
+						this.path.addPoint(pathPoint10);
 					}
 				}
 			}
 		}
 
-		if(var6 == var2) {
+		if(pathPoint6 == pathPoint1) {
 			return null;
 		} else {
-			return this.createEntityPath(var2, var6);
+			return this.createEntityPath(pathPoint1, pathPoint6);
 		}
 	}
 
-	private int findPathOptions(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
+	private int findPathOptions(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
 		int var6 = 0;
 		byte var7 = 0;
-		if(this.getVerticalOffset(var1, var2.xCoord, var2.yCoord + 1, var2.zCoord, var3) > 0) {
+		if(this.getVerticalOffset(entity, pathPoint1.xCoord, pathPoint1.yCoord + 1, pathPoint1.zCoord, pathPoint2) > 0) {
 			var7 = 1;
 		}
 
-		PathPoint var8 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord + 1, var3, var7);
-		PathPoint var9 = this.getSafePoint(var1, var2.xCoord - 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var10 = this.getSafePoint(var1, var2.xCoord + 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var11 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord - 1, var3, var7);
-		if(var8 != null && !var8.isFirst && var8.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var8;
-		}
-
-		if(var9 != null && !var9.isFirst && var9.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var9;
-		}
-
-		if(var10 != null && !var10.isFirst && var10.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var10;
-		}
-
-		if(var11 != null && !var11.isFirst && var11.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var11;
+		PathPoint pathPoint8 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord + 1, pathPoint2, var7);
+		PathPoint pathPoint9 = this.getSafePoint(entity, pathPoint1.xCoord - 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, var7);
+		PathPoint pathPoint10 = this.getSafePoint(entity, pathPoint1.xCoord + 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, var7);
+		PathPoint pathPoint11 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord - 1, pathPoint2, var7);
+		if(pathPoint8 != null && !pathPoint8.isFirst && pathPoint8.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[var6++] = pathPoint8;
+		}
+
+		if(pathPoint9 != null && !pathPoint9.isFirst && pathPoint9.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[var6++] = pathPoint9;
+		}
+
+		if(pathPoint10 != null && !pathPoint10.isFirst && pathPoint10.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[var6++] = pathPoint10;
+		}
+
+		if(pathPoint11 != null && !pathPoint11.isFirst && pathPoint11.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[var6++] = pathPoint11;
 		}
 
 		return var6;
 	}
 
-	private PathPoint getSafePoint(Entity var1, int var2, int var3, int var4, PathPoint var5, int var6) {
-		PathPoint var7 = null;
-		if(this.getVerticalOffset(var1, var2, var3, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3, var4);
+	private PathPoint getSafePoint(Entity var1, int var2, int var3, int var4, PathPoint pathPoint5, int var6) {
+		PathPoint pathPoint7 = null;
+		if(this.getVerticalOffset(var1, var2, var3, var4, pathPoint5) > 0) {
+			pathPoint7 = this.openPoint(var2, var3, var4);
 		}
 
-		if(var7 == null && this.getVerticalOffset(var1, var2, var3 + var6, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3 + var6, var4);
+		if(pathPoint7 == null && this.getVerticalOffset(var1, var2, var3 + var6, var4, pathPoint5) > 0) {
+			pathPoint7 = this.openPoint(var2, var3 + var6, var4);
 			var3 += var6;
 		}
 
-		if(var7 != null) {
+		if(pathPoint7 != null) {
 			int var8 = 0;
 
-			for(boolean var9 = false; var3 > 0; --var3) {
-				int var10 = this.getVerticalOffset(var1, var2, var3 - 1, var4, var5);
-				if(var10 <= 0) {
-					break;
-				}
-
+			int var10;
+			for(boolean var9 = false; var3 > 0 && (var10 = this.getVerticalOffset(var1, var2, var3 - 1, var4, pathPoint5)) > 0; --var3) {
 				if(var10 < 0) {
 					return null;
 				}
@@ -134,34 +130,34 @@
 			}
 
 			if(var3 > 0) {
-				var7 = this.openPoint(var2, var3, var4);
+				pathPoint7 = this.openPoint(var2, var3, var4);
 			}
 		}
 
-		return var7;
+		return pathPoint7;
 	}
 
 	private final PathPoint openPoint(int var1, int var2, int var3) {
 		int var4 = var1 | var2 << 10 | var3 << 20;
-		PathPoint var5 = (PathPoint)this.pointMap.lookup(var4);
-		if(var5 == null) {
-			var5 = new PathPoint(var1, var2, var3);
-			this.pointMap.addKey(var4, var5);
+		PathPoint pathPoint5 = (PathPoint)this.pointMap.lookup(var4);
+		if(pathPoint5 == null) {
+			pathPoint5 = new PathPoint(var1, var2, var3);
+			this.pointMap.addKey(var4, pathPoint5);
 		}
 
-		return var5;
+		return pathPoint5;
 	}
 
-	private int getVerticalOffset(Entity var1, int var2, int var3, int var4, PathPoint var5) {
-		for(int var6 = var2; var6 < var2 + var5.xCoord; ++var6) {
-			for(int var7 = var3; var7 < var3 + var5.yCoord; ++var7) {
-				for(int var8 = var4; var8 < var4 + var5.zCoord; ++var8) {
-					Material var9 = this.worldMap.getBlockMaterial(var2, var3, var4);
-					if(var9.getIsSolid()) {
+	private int getVerticalOffset(Entity var1, int var2, int var3, int var4, PathPoint pathPoint5) {
+		for(int var6 = var2; var6 < var2 + pathPoint5.xCoord; ++var6) {
+			for(int var7 = var3; var7 < var3 + pathPoint5.yCoord; ++var7) {
+				for(int var8 = var4; var8 < var4 + pathPoint5.zCoord; ++var8) {
+					Material material9 = this.worldMap.getBlockMaterial(var2, var3, var4);
+					if(material9.getIsSolid()) {
 						return 0;
 					}
 
-					if(var9 == Material.water || var9 == Material.lava) {
+					if(material9 == Material.water || material9 == Material.lava) {
 						return -1;
 					}
 				}
@@ -171,23 +167,23 @@
 		return 1;
 	}
 
-	private PathEntity createEntityPath(PathPoint var1, PathPoint var2) {
+	private PathEntity createEntityPath(PathPoint fromPathPoint, PathPoint toPathPoint) {
 		int var3 = 1;
 
-		PathPoint var4;
-		for(var4 = var2; var4.previous != null; var4 = var4.previous) {
+		PathPoint pathPoint4;
+		for(pathPoint4 = toPathPoint; pathPoint4.previous != null; pathPoint4 = pathPoint4.previous) {
 			++var3;
 		}
 
-		PathPoint[] var5 = new PathPoint[var3];
-		var4 = var2;
+		PathPoint[] pathPoint5 = new PathPoint[var3];
+		pathPoint4 = toPathPoint;
 		--var3;
 
-		for(var5[var3] = var2; var4.previous != null; var5[var3] = var4) {
-			var4 = var4.previous;
+		for(pathPoint5[var3] = toPathPoint; pathPoint4.previous != null; pathPoint5[var3] = pathPoint4) {
+			pathPoint4 = pathPoint4.previous;
 			--var3;
 		}
 
-		return new PathEntity(var5);
+		return new PathEntity(pathPoint5);
 	}
 }
--- net/minecraft/src/Packet51MapChunk.java
+++ net/minecraft/src/Packet51MapChunk.java
@@ -21,68 +21,68 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readShort();
-		this.zPosition = var1.readInt();
-		this.xSize = var1.read() + 1;
-		this.ySize = var1.read() + 1;
-		this.zSize = var1.read() + 1;
-		int var2 = var1.readInt();
+	public Packet51MapChunk(int xPosition, int yPosition, int zPosition, int xSize, int ySize, int zSize, World world) {
+		this.isChunkDataPacket = true;
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.xSize = xSize;
+		this.ySize = ySize;
+		this.zSize = zSize;
+		byte[] var8 = world.getChunkData(xPosition, yPosition, zPosition, xSize, ySize, zSize);
+		Deflater deflater9 = new Deflater(1);
+
+		try {
+			deflater9.setInput(var8);
+			deflater9.finish();
+			this.chunkData = new byte[xSize * ySize * zSize * 5 / 2];
+			this.tempLength = deflater9.deflate(this.chunkData);
+		} finally {
+			deflater9.end();
+		}
+
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readShort();
+		this.zPosition = dataInputStream.readInt();
+		this.xSize = dataInputStream.read() + 1;
+		this.ySize = dataInputStream.read() + 1;
+		this.zSize = dataInputStream.read() + 1;
+		int var2 = dataInputStream.readInt();
 		byte[] var3 = new byte[var2];
-		var1.readFully(var3);
+		dataInputStream.readFully(var3);
 		this.chunkData = new byte[this.xSize * this.ySize * this.zSize * 5 / 2];
-		Inflater var4 = new Inflater();
-		var4.setInput(var3);
+		Inflater inflater4 = new Inflater();
+		inflater4.setInput(var3);
 
 		try {
-			var4.inflate(this.chunkData);
-		} catch (DataFormatException var9) {
+			inflater4.inflate(this.chunkData);
+		} catch (DataFormatException dataFormatException9) {
 			throw new IOException("Bad compressed data format");
 		} finally {
-			var4.end();
+			inflater4.end();
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeShort(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.xSize - 1);
-		var1.write(this.ySize - 1);
-		var1.write(this.zSize - 1);
-		var1.writeInt(this.tempLength);
-		var1.write(this.chunkData, 0, this.tempLength);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeShort(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.xSize - 1);
+		dataOutputStream.write(this.ySize - 1);
+		dataOutputStream.write(this.zSize - 1);
+		dataOutputStream.writeInt(this.tempLength);
+		dataOutputStream.write(this.chunkData, 0, this.tempLength);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleMapChunk(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMapChunk(this);
 	}
 
 	public int getPacketSize() {
 		return 17 + this.tempLength;
-	}
-
-	public Packet51MapChunk(int var1, int var2, int var3, int var4, int var5, int var6, World var7) {
-		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-		this.xSize = var4;
-		this.ySize = var5;
-		this.zSize = var6;
-		byte[] var8 = var7.getChunkData(var1, var2, var3, var4, var5, var6);
-		Deflater var9 = new Deflater(1);
-
-		try {
-			var9.setInput(var8);
-			var9.finish();
-			this.chunkData = new byte[var4 * var5 * var6 * 5 / 2];
-			this.tempLength = var9.deflate(this.chunkData);
-		} finally {
-			var9.end();
-		}
-
 	}
 }
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -10,36 +10,36 @@
 		if(this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
-
-	}
-
-	protected void keyTyped(char var1, int var2) {
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	}
+
+	protected void keyTyped(char character, int key) {
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			;
 		}
 
-		if(var1.id == 1) {
-			this.mc.respawn();
+		if(button.id == 1) {
+			this.mc.thePlayer.respawnPlayer();
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 
-		if(var1.id == 2) {
+		if(button.id == 2) {
 			this.mc.changeWorld1((World)null);
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
 		GL11.glPushMatrix();
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
-		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 0xFFFFFF);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Score: " + this.mc.thePlayer.getScore(), this.width / 2, 100, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
 	public boolean doesGuiPauseGame() {
--- net/minecraft/src/ThreadCommandReader.java
+++ net/minecraft/src/ThreadCommandReader.java
@@ -3,6 +3,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+
 import net.minecraft.server.MinecraftServer;
 
 public class ThreadCommandReader extends Thread {
@@ -13,20 +14,15 @@
 	}
 
 	public void run() {
-		BufferedReader var1 = new BufferedReader(new InputStreamReader(System.in));
+		BufferedReader bufferedReader1 = new BufferedReader(new InputStreamReader(System.in));
 		String var2 = null;
 
 		try {
-			while(!this.mcServer.serverStopped && MinecraftServer.isServerRunning(this.mcServer)) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					break;
-				}
-
+			while(!this.mcServer.serverStopped && MinecraftServer.isServerRunning(this.mcServer) && (var2 = bufferedReader1.readLine()) != null) {
 				this.mcServer.addCommand(var2, this.mcServer);
 			}
-		} catch (IOException var4) {
-			var4.printStackTrace();
+		} catch (IOException iOException4) {
+			iOException4.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/RenderCow.java
+++ net/minecraft/src/RenderCow.java
@@ -5,8 +5,8 @@
 		super(var1, var2);
 	}
 
-	public void renderCow(EntityCow var1, double var2, double var4, double var6, float var8, float var9) {
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+	public void renderCow(EntityCow entityCow1, double var2, double var4, double var6, float var8, float var9) {
+		super.doRenderLiving(entityCow1, var2, var4, var6, var8, var9);
 	}
 
 	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
--- net/minecraft/src/ConsoleLogFormatter.java
+++ net/minecraft/src/ConsoleLogFormatter.java
@@ -10,35 +10,35 @@
 final class ConsoleLogFormatter extends Formatter {
 	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 
-	public String format(LogRecord var1) {
-		StringBuilder var2 = new StringBuilder();
-		var2.append(this.dateFormat.format(Long.valueOf(var1.getMillis())));
-		Level var3 = var1.getLevel();
-		if(var3 == Level.FINEST) {
-			var2.append(" [FINEST] ");
-		} else if(var3 == Level.FINER) {
-			var2.append(" [FINER] ");
-		} else if(var3 == Level.FINE) {
-			var2.append(" [FINE] ");
-		} else if(var3 == Level.INFO) {
-			var2.append(" [INFO] ");
-		} else if(var3 == Level.WARNING) {
-			var2.append(" [WARNING] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append(" [SEVERE] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append(" [" + var3.getLocalizedName() + "] ");
-		}
-
-		var2.append(var1.getMessage());
-		var2.append('\n');
-		Throwable var4 = var1.getThrown();
-		if(var4 != null) {
-			StringWriter var5 = new StringWriter();
-			var4.printStackTrace(new PrintWriter(var5));
-			var2.append(var5.toString());
-		}
-
-		return var2.toString();
+	public String format(LogRecord logRecord) {
+		StringBuilder stringBuilder2 = new StringBuilder();
+		stringBuilder2.append(this.dateFormat.format(logRecord.getMillis()));
+		Level level3 = logRecord.getLevel();
+		if(level3 == Level.FINEST) {
+			stringBuilder2.append(" [FINEST] ");
+		} else if(level3 == Level.FINER) {
+			stringBuilder2.append(" [FINER] ");
+		} else if(level3 == Level.FINE) {
+			stringBuilder2.append(" [FINE] ");
+		} else if(level3 == Level.INFO) {
+			stringBuilder2.append(" [INFO] ");
+		} else if(level3 == Level.WARNING) {
+			stringBuilder2.append(" [WARNING] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append(" [SEVERE] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append(" [" + level3.getLocalizedName() + "] ");
+		}
+
+		stringBuilder2.append(logRecord.getMessage());
+		stringBuilder2.append('\n');
+		Throwable throwable4 = logRecord.getThrown();
+		if(throwable4 != null) {
+			StringWriter stringWriter5 = new StringWriter();
+			throwable4.printStackTrace(new PrintWriter(stringWriter5));
+			stringBuilder2.append(stringWriter5.toString());
+		}
+
+		return stringBuilder2.toString();
 	}
 }
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -1,28 +1,30 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemTool extends Item {
-	private Block[] blocksEffectiveAgainst;
-	private float efficiencyOnProperMaterial = 4.0F;
-	private int damageVsEntity;
+	private final Block[] blocksEffectiveAgainst;
+	protected float efficiencyOnProperMaterial;
+	private final int damageVsEntity;
 	protected int toolMaterial;
 
-	public ItemTool(int var1, int var2, int var3, Block[] var4) {
-		super(var1);
-		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+	public ItemTool(int id, int attackDmg, int strength, Block[] blocks) {
+		super(id);
+		this.toolMaterial = strength;
+		this.blocksEffectiveAgainst = blocks;
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var3;
-		if(var3 == 3) {
+		this.maxDamage = 32 << strength;
+		if(strength == 3) {
 			this.maxDamage *= 4;
 		}
 
-		this.efficiencyOnProperMaterial = (float)((var3 + 1) * 2);
-		this.damageVsEntity = var2 + var3;
+		this.efficiencyOnProperMaterial = (float)((strength + 1) * 2);
+		this.damageVsEntity = attackDmg + strength;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack itemStack, Block block) {
 		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
+			if(this.blocksEffectiveAgainst[var3] == block) {
 				return this.efficiencyOnProperMaterial;
 			}
 		}
@@ -30,19 +32,39 @@
 		return 1.0F;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		var1.damageItem(2);
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(1);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		itemStack.damageItem(2);
+	}
+
+	public void onBlockDestroyed(ItemStack itemStack, int id, int x, int y, int z) {
+		itemStack.damageItem(1);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return this.damageVsEntity;
 	}
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public boolean effectiveAgainst(Block block) {
+		for (Block value : this.blocksEffectiveAgainst) {
+			if (value == block) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				"x" + this.efficiencyOnProperMaterial + " efficiency",
+				ItemTooltip.INFO_COL,
+				this.damageVsEntity + " attack damage",
+				ItemTooltip.INFO_COL,
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -1,9 +1,13 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+import net.minecraft.server.MinecraftServer;
+
 import java.util.List;
 
 public class EntityLiving extends Entity {
 	public int heartsHalvesLife = 20;
+	public int healthRegen = 0;
 	public float unusedRotationPitch2;
 	public float unusedFloat;
 	public float unusedRotationPitch;
@@ -46,14 +50,15 @@
 	private double newPosZ;
 	private double newRotationYaw;
 	private double newRotationPitch;
-	float unusedFloat3 = 0.0F;
+	protected int prevDamage = 0;
 	protected int entityAge = 0;
 	protected float moveStrafing;
 	protected float moveForward;
 	protected float randomYawVelocity;
 	protected boolean isJumping = false;
 	protected float defaultPitch = 0.0F;
-	protected float moveSpeed = 0.7F;
+	public float moveSpeed = 0.7F;
+	public float runSpeed = 1.4F;
 	private Entity currentTarget;
 	private int numTicksToChaseTarget = 0;
 
@@ -63,13 +68,13 @@
 		this.unusedRotationPitch = (float)(Math.random() + 1.0D) * 0.01F;
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.unusedRotationPitch2 = (float)Math.random() * 12398.0F;
-		this.rotationYaw = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
+		this.rotationYaw = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
 		this.unusedFloat = 1.0F;
 		this.stepHeight = 0.5F;
 	}
 
-	protected boolean canEntityBeSeen(Entity var1) {
-		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(var1.posX, var1.posY + (double)var1.getEyeHeight(), var1.posZ)) == null;
+	protected boolean canEntityBeSeen(Entity entity) {
+		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(entity.posX, entity.posY + (double)entity.getEyeHeight(), entity.posZ)) == null;
 	}
 
 	public String getTexture() {
@@ -179,14 +184,14 @@
 		this.prevRidingRotUnused = 0.0F;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
 		this.yOffset = 0.0F;
-		this.newPosX = var1;
-		this.newPosY = var3;
-		this.newPosZ = var5;
-		this.newRotationYaw = (double)var7;
-		this.newRotationPitch = (double)var8;
-		this.newPosRotationIncrements = var9;
+		this.newPosX = x;
+		this.newPosY = y;
+		this.newPosZ = z;
+		this.newRotationYaw = (double)rotationYaw;
+		this.newRotationPitch = (double)rotationPitch;
+		this.newPosRotationIncrements = newPosRotationIncrements;
 	}
 
 	public void onUpdate() {
@@ -278,13 +283,13 @@
 		this.rotationUnused += var7;
 	}
 
-	protected void setSize(float var1, float var2) {
-		super.setSize(var1, var2);
+	protected void setSize(float width, float height) {
+		super.setSize(width, height);
 	}
 
-	public void heal(int var1) {
+	public void heal(int health) {
 		if(this.health > 0) {
-			this.health += var1;
+			this.health += health;
 			if(this.health > 20) {
 				this.health = 20;
 			}
@@ -293,47 +298,54 @@
 		}
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(this.worldObj.multiplayerWorld) {
-			var2 = 0;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(!this.worldObj.canDoClientAction()) {
+			return false;
 		}
 
 		this.entityAge = 0;
 		if(this.health <= 0) {
 			return false;
 		} else {
+			boolean hurt = true;
+
 			this.limbYaw = 1.5F;
 			if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
-				if(this.prevHealth - var2 >= this.health) {
+				if(damage <= this.prevDamage) {
 					return false;
 				}
 
-				this.health = this.prevHealth - var2;
+				this.damageEntity(damage - this.prevDamage);
+				this.prevDamage = damage;
+				hurt = false;
 			} else {
 				this.prevHealth = this.health;
 				this.heartsLife = this.heartsHalvesLife;
-				this.health -= var2;
 				this.hurtTime = this.maxHurtTime = 10;
+				this.damageEntity(damage);
 			}
 
 			this.attackedAtYaw = 0.0F;
-			if(var1 != null) {
-				double var3 = var1.posX - this.posX;
-
-				double var5;
-				for(var5 = var1.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
-					var3 = (Math.random() - Math.random()) * 0.01D;
+			if(hurt) {
+				this.worldObj.sendTrackedEntityStatusUpdatePacket(this, (byte) 2);
+				if (entity != null) {
+					double var3 = entity.posX - this.posX;
+
+					double var5;
+					for(var5 = entity.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
+						var3 = (Math.random() - Math.random()) * 0.01D;
+					}
+
+					this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)(float)Math.PI) - this.rotationYaw;
+					this.knockBack(entity, damage, var3, var5);
+				} else {
+					this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 				}
-
-				this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - this.rotationYaw;
-				this.knockBack(var1, var2, var3, var5);
-			} else {
-				this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 			}
 
 			if(this.health <= 0) {
 				this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-				this.onDeath(var1);
+				this.onDeath(entity);
 			} else {
 				this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
@@ -358,60 +370,74 @@
 		return "random.hurt";
 	}
 
-	public void knockBack(Entity var1, int var2, double var3, double var5) {
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
+	public void knockBack(Entity entity, int x, double y, double z) {
+		float var7 = MathHelper.sqrt_double(y * y + z * z);
 		float var8 = 0.4F;
 		this.motionX /= 2.0D;
 		this.motionY /= 2.0D;
 		this.motionZ /= 2.0D;
-		this.motionX -= var3 / (double)var7 * (double)var8;
+		this.motionX -= y / (double)var7 * (double)var8;
 		this.motionY += (double)0.4F;
-		this.motionZ -= var5 / (double)var7 * (double)var8;
+		this.motionZ -= z / (double)var7 * (double)var8;
 		if(this.motionY > (double)0.4F) {
 			this.motionY = (double)0.4F;
 		}
 
 	}
 
-	public void onDeath(Entity var1) {
-		if(this.scoreValue > 0 && var1 != null) {
-			var1.addToPlayerScore(this, this.scoreValue);
+	public void onDeath(Entity entity) {
+		if(this.scoreValue > 0 && entity != null) {
+			entity.addToPlayerScore(this, this.scoreValue);
 		}
 
 		this.dead = true;
-		int var2 = this.getDropItemId();
-		if(var2 > 0) {
-			int var3 = this.rand.nextInt(3);
-
-			for(int var4 = 0; var4 < var3; ++var4) {
-				this.dropItem(var2, 1);
+		int[] items = this.getDropItems();
+
+		if (this.worldObj.canDoClientAction()) {
+			for (int var2 : items) {
+				if(var2 > 0) {
+					int var3 = this.rand.nextInt(3);
+
+					for(int var4 = 0; var4 < var3; ++var4) {
+						this.dropItem(var2, 1);
+					}
+				}
 			}
 		}
 
+		this.worldObj.sendTrackedEntityStatusUpdatePacket(this, (byte) 3);
 	}
 
 	protected int getDropItemId() {
 		return 0;
 	}
 
-	protected void fall(float var1) {
-		int var2 = (int)Math.ceil((double)(var1 - 3.0F));
+	protected int[] getDropItems() {
+		return new int[] { getDropItemId() };
+	}
+
+	protected void fall(float distance) {
+		super.fall(distance);
+		int var2 = (int)Math.ceil((double)(distance - 3.0F));
 		if(var2 > 0) {
 			this.attackEntityFrom((Entity)null, var2);
 			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
 			if(var3 > 0) {
-				StepSound var4 = Block.blocksList[var3].stepSound;
-				this.worldObj.playSoundAtEntity(this, var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
+				StepSound stepSound4 = Block.blocksList[var3].stepSound;
+				this.worldObj.playSoundAtEntity(this, stepSound4.getStepSound(), stepSound4.getVolume() * 0.5F, stepSound4.getPitch() * 0.75F);
 			}
 		}
-
-	}
-
-	public void moveEntityWithHeading(float var1, float var2) {
+	}
+
+	protected void damageEntity(int var1) {
+		this.health -= var1;
+	}
+
+	public void moveEntityWithHeading(float moveX, float moveZ) {
 		double var3;
 		if(this.handleWaterMovement()) {
 			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			this.moveFlying(moveX, moveZ, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
 			this.motionX *= (double)0.8F;
 			this.motionY *= (double)0.8F;
@@ -422,7 +448,7 @@
 			}
 		} else if(this.handleLavaMovement()) {
 			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			this.moveFlying(moveX, moveZ, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
 			this.motionX *= 0.5D;
 			this.motionY *= 0.5D;
@@ -434,7 +460,7 @@
 		} else {
 			float var8 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
+				var8 = 0.54600006F;
 				int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
 				if(var4 > 0) {
 					var8 = Block.blocksList[var4].slipperiness * 0.91F;
@@ -442,10 +468,10 @@
 			}
 
 			float var9 = 0.16277136F / (var8 * var8 * var8);
-			this.moveFlying(var1, var2, this.onGround ? 0.1F * var9 : 0.02F);
+			this.moveFlying(moveX, moveZ, (this.onGround ? 0.1F : 0.02F) * (this.isRunning() ? this.runSpeed : 1.0F));
 			var8 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
+				var8 = 0.54600006F;
 				int var5 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
 				if(var5 > 0) {
 					var8 = Block.blocksList[var5].slipperiness * 0.91F;
@@ -489,22 +515,24 @@
 		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID || this.worldObj.getBlockId(var1, var2 + 1, var3) == Block.ladder.blockID;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)this.health);
-		var1.setShort("HurtTime", (short)this.hurtTime);
-		var1.setShort("DeathTime", (short)this.deathTime);
-		var1.setShort("AttackTime", (short)this.attackTime);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setShort("Health", (short)this.health);
+		compoundTag.setShort("HealthRegen", (short)this.healthRegen);
+		compoundTag.setShort("HurtTime", (short)this.hurtTime);
+		compoundTag.setShort("DeathTime", (short)this.deathTime);
+		compoundTag.setShort("AttackTime", (short)this.attackTime);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health");
-		if(!var1.hasKey("Health")) {
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.health = compoundTag.getShort("Health");
+		if(!compoundTag.hasKey("Health")) {
 			this.health = 10;
 		}
+		this.healthRegen = compoundTag.getShort("HealthRegen");
 
-		this.hurtTime = var1.getShort("HurtTime");
-		this.deathTime = var1.getShort("DeathTime");
-		this.attackTime = var1.getShort("AttackTime");
+		this.hurtTime = compoundTag.getShort("HurtTime");
+		this.deathTime = compoundTag.getShort("DeathTime");
+		this.attackTime = compoundTag.getShort("AttackTime");
 	}
 
 	public boolean isEntityAlive() {
@@ -557,10 +585,10 @@
 		this.moveForward *= 0.98F;
 		this.randomYawVelocity *= 0.9F;
 		this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
-		List var10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var10 != null && var10.size() > 0) {
-			for(int var4 = 0; var4 < var10.size(); ++var4) {
-				Entity var11 = (Entity)var10.get(var4);
+		List list10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list10 != null && list10.size() > 0) {
+			for(int var4 = 0; var4 < list10.size(); ++var4) {
+				Entity var11 = (Entity)list10.get(var4);
 				if(var11.canBePushed()) {
 					var11.applyEntityCollision(this);
 				}
@@ -629,20 +657,20 @@
 
 	}
 
-	public void faceEntity(Entity var1, float var2) {
-		double var3 = var1.posX - this.posX;
-		double var7 = var1.posZ - this.posZ;
+	public void faceEntity(Entity entity, float var2) {
+		double var3 = entity.posX - this.posX;
+		double var7 = entity.posZ - this.posZ;
 		double var5;
-		if(var1 instanceof EntityLiving) {
-			EntityLiving var9 = (EntityLiving)var1;
+		if(entity instanceof EntityLiving) {
+			EntityLiving var9 = (EntityLiving)entity;
 			var5 = var9.posY + (double)var9.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
 		} else {
-			var5 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
+			var5 = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
 		}
 
 		double var13 = (double)MathHelper.sqrt_double(var3 * var3 + var7 * var7);
-		float var11 = (float)(Math.atan2(var7, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-		float var12 = (float)(Math.atan2(var5, var13) * 180.0D / (double)((float)Math.PI));
+		float var11 = (float)(Math.atan2(var7, var3) * 180.0D / (double)(float)Math.PI) - 90.0F;
+		float var12 = (float)(Math.atan2(var5, var13) * 180.0D / (double)(float)Math.PI);
 		this.rotationPitch = this.updateRotation(this.rotationPitch, var12, var2);
 		this.rotationYaw = this.updateRotation(this.rotationYaw, var11, var2);
 	}
@@ -678,52 +706,69 @@
 		this.attackEntityFrom((Entity)null, 4);
 	}
 
-	public float getSwingProgress(float var1) {
+	public float getSwingProgress(float renderPartialTick) {
 		float var2 = this.swingProgress - this.prevSwingProgress;
 		if(var2 < 0.0F) {
 			++var2;
 		}
 
-		return this.prevSwingProgress + var2 * var1;
+		return this.prevSwingProgress + var2 * renderPartialTick;
 	}
 
-	public Vec3D getPosition(float var1) {
-		if(var1 == 1.0F) {
+	public Vec3D getPosition(float renderPartialTick) {
+		if(renderPartialTick == 1.0F) {
 			return Vec3D.createVector(this.posX, this.posY, this.posZ);
 		} else {
-			double var2 = this.prevPosX + (this.posX - this.prevPosX) * (double)var1;
-			double var4 = this.prevPosY + (this.posY - this.prevPosY) * (double)var1;
-			double var6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var1;
+			double var2 = this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick;
+			double var4 = this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick;
+			double var6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick;
 			return Vec3D.createVector(var2, var4, var6);
 		}
 	}
 
-	public Vec3D getLook(float var1) {
+	public Vec3D getLook(float renderPartialTick) {
 		float var2;
 		float var3;
 		float var4;
 		float var5;
-		if(var1 == 1.0F) {
-			var2 = MathHelper.cos(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var3 = MathHelper.sin(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var4 = -MathHelper.cos(-this.rotationPitch * ((float)Math.PI / 180.0F));
-			var5 = MathHelper.sin(-this.rotationPitch * ((float)Math.PI / 180.0F));
+		if(renderPartialTick == 1.0F) {
+			var2 = MathHelper.cos(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			var3 = MathHelper.sin(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			var4 = -MathHelper.cos(-this.rotationPitch * 0.017453292F);
+			var5 = MathHelper.sin(-this.rotationPitch * 0.017453292F);
 			return Vec3D.createVector((double)(var3 * var4), (double)var5, (double)(var2 * var4));
 		} else {
-			var2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * var1;
-			var3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * var1;
-			var4 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var5 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			float var6 = -MathHelper.cos(-var2 * ((float)Math.PI / 180.0F));
-			float var7 = MathHelper.sin(-var2 * ((float)Math.PI / 180.0F));
+			var2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * renderPartialTick;
+			var3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * renderPartialTick;
+			var4 = MathHelper.cos(-var3 * 0.017453292F - (float)Math.PI);
+			var5 = MathHelper.sin(-var3 * 0.017453292F - (float)Math.PI);
+			float var6 = -MathHelper.cos(-var2 * 0.017453292F);
+			float var7 = MathHelper.sin(-var2 * 0.017453292F);
 			return Vec3D.createVector((double)(var5 * var6), (double)var7, (double)(var4 * var6));
 		}
 	}
 
-	public MovingObjectPosition rayTrace(double var1, float var3) {
-		Vec3D var4 = this.getPosition(var3);
-		Vec3D var5 = this.getLook(var3);
-		Vec3D var6 = var4.addVector(var5.xCoord * var1, var5.yCoord * var1, var5.zCoord * var1);
-		return this.worldObj.rayTraceBlocks(var4, var6);
+	public MovingObjectPosition rayTrace(double var1, float renderPartialTick) {
+		Vec3D vec3D4 = this.getPosition(renderPartialTick);
+		Vec3D vec3D5 = this.getLook(renderPartialTick);
+		Vec3D vec3D6 = vec3D4.addVector(vec3D5.xCoord * var1, vec3D5.yCoord * var1, vec3D5.zCoord * var1);
+		return this.worldObj.rayTraceBlocks(vec3D4, vec3D6);
+	}
+
+	public void handleHealthUpdate(byte var1) {
+		if(var1 == 2) {
+			this.limbYaw = 1.5F;
+			this.heartsLife = this.heartsHalvesLife;
+			this.hurtTime = this.maxHurtTime = 10;
+			this.attackedAtYaw = 0.0F;
+			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.attackEntityFrom((Entity)null, 0);
+		} else if(var1 == 3) {
+			this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.health = 0;
+			this.onDeath((Entity)null);
+		} else {
+			super.handleHealthUpdate(var1);
+		}
 	}
 }
--- net/minecraft/src/GuiStatsListener.java
+++ net/minecraft/src/GuiStatsListener.java
@@ -6,11 +6,11 @@
 class GuiStatsListener implements ActionListener {
 	final GuiStatsComponent component;
 
-	GuiStatsListener(GuiStatsComponent var1) {
-		this.component = var1;
+	GuiStatsListener(GuiStatsComponent component) {
+		this.component = component;
 	}
 
-	public void actionPerformed(ActionEvent var1) {
+	public void actionPerformed(ActionEvent actionEvent) {
 		GuiStatsComponent.update(this.component);
 	}
 }
--- net/minecraft/src/ItemMinecart.java
+++ net/minecraft/src/ItemMinecart.java
@@ -3,17 +3,17 @@
 public class ItemMinecart extends Item {
 	public int minecartType;
 
-	public ItemMinecart(int var1, int var2) {
-		super(var1);
+	public ItemMinecart(int id, int type) {
+		super(id);
 		this.maxStackSize = 1;
-		this.minecartType = var2;
+		this.minecartType = type;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
+	public boolean onItemUse(ItemStack itemStack, EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		int var8 = worldObj.getBlockId(x, y, z);
 		if(var8 == Block.minecartTrack.blockID) {
-			var3.spawnEntityInWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
-			--var1.stackSize;
+			worldObj.spawnEntityInWorld(new EntityMinecart(worldObj, (double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), this.minecartType));
+			--itemStack.stackSize;
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/NetworkReaderThread.java
+++ net/minecraft/src/NetworkReaderThread.java
@@ -3,14 +3,14 @@
 class NetworkReaderThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkReaderThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkReaderThread(NetworkManager networkManager, String name) {
+		super(name);
+		this.netManager = networkManager;
 	}
 
 	public void run() {
 		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numReadThreads;
 		}
 
@@ -34,7 +34,7 @@
 			} finally {
 				if(var11) {
 					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
+					synchronized(NetworkManager.threadSyncObject) {
 						--NetworkManager.numReadThreads;
 					}
 				}
@@ -42,7 +42,7 @@
 		}
 
 		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		synchronized(NetworkManager.threadSyncObject) {
 			--NetworkManager.numReadThreads;
 		}
 	}
--- net/minecraft/src/TexturedQuad.java
+++ net/minecraft/src/TexturedQuad.java
@@ -5,49 +5,49 @@
 	public int nVertices;
 	private boolean invertNormal;
 
-	public TexturedQuad(PositionTexureVertex[] var1) {
+	public TexturedQuad(PositionTexureVertex[] positionTexureVertex1) {
 		this.nVertices = 0;
 		this.invertNormal = false;
-		this.vertexPositions = var1;
-		this.nVertices = var1.length;
+		this.vertexPositions = positionTexureVertex1;
+		this.nVertices = positionTexureVertex1.length;
 	}
 
-	public TexturedQuad(PositionTexureVertex[] var1, int var2, int var3, int var4, int var5) {
-		this(var1);
+	public TexturedQuad(PositionTexureVertex[] positionTexureVertex1, int var2, int var3, int var4, int var5) {
+		this(positionTexureVertex1);
 		float var6 = 0.0015625F;
 		float var7 = 0.003125F;
-		var1[0] = var1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / 32.0F + var7);
-		var1[1] = var1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / 32.0F + var7);
-		var1[2] = var1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / 32.0F - var7);
-		var1[3] = var1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / 32.0F - var7);
+		positionTexureVertex1[0] = positionTexureVertex1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / 32.0F + var7);
+		positionTexureVertex1[1] = positionTexureVertex1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / 32.0F + var7);
+		positionTexureVertex1[2] = positionTexureVertex1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / 32.0F - var7);
+		positionTexureVertex1[3] = positionTexureVertex1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / 32.0F - var7);
 	}
 
 	public void flipFace() {
-		PositionTexureVertex[] var1 = new PositionTexureVertex[this.vertexPositions.length];
+		PositionTexureVertex[] positionTexureVertex1 = new PositionTexureVertex[this.vertexPositions.length];
 
 		for(int var2 = 0; var2 < this.vertexPositions.length; ++var2) {
-			var1[var2] = this.vertexPositions[this.vertexPositions.length - var2 - 1];
+			positionTexureVertex1[var2] = this.vertexPositions[this.vertexPositions.length - var2 - 1];
 		}
 
-		this.vertexPositions = var1;
+		this.vertexPositions = positionTexureVertex1;
 	}
 
-	public void draw(Tessellator var1, float var2) {
-		Vec3D var3 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[0].vector3D);
-		Vec3D var4 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[2].vector3D);
-		Vec3D var5 = var4.crossProduct(var3).normalize();
-		var1.startDrawingQuads();
+	public void draw(Tessellator tessellator1, float var2) {
+		Vec3D vec3D3 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[0].vector3D);
+		Vec3D vec3D4 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[2].vector3D);
+		Vec3D vec3D5 = vec3D4.crossProduct(vec3D3).normalize();
+		tessellator1.startDrawingQuads();
 		if(this.invertNormal) {
-			var1.setNormal(-((float)var5.xCoord), -((float)var5.yCoord), -((float)var5.zCoord));
+			tessellator1.setNormal(-((float)vec3D5.xCoord), -((float)vec3D5.yCoord), -((float)vec3D5.zCoord));
 		} else {
-			var1.setNormal((float)var5.xCoord, (float)var5.yCoord, (float)var5.zCoord);
+			tessellator1.setNormal((float)vec3D5.xCoord, (float)vec3D5.yCoord, (float)vec3D5.zCoord);
 		}
 
 		for(int var6 = 0; var6 < 4; ++var6) {
-			PositionTexureVertex var7 = this.vertexPositions[var6];
-			var1.addVertexWithUV((double)((float)var7.vector3D.xCoord * var2), (double)((float)var7.vector3D.yCoord * var2), (double)((float)var7.vector3D.zCoord * var2), (double)var7.texturePositionX, (double)var7.texturePositionY);
+			PositionTexureVertex positionTexureVertex7 = this.vertexPositions[var6];
+			tessellator1.addVertexWithUV((double)((float)positionTexureVertex7.vector3D.xCoord * var2), (double)((float)positionTexureVertex7.vector3D.yCoord * var2), (double)((float)positionTexureVertex7.vector3D.zCoord * var2), (double)positionTexureVertex7.texturePositionX, (double)positionTexureVertex7.texturePositionY);
 		}
 
-		var1.draw();
+		tessellator1.draw();
 	}
 }
--- net/minecraft/src/ChunkProviderIso.java
+++ net/minecraft/src/ChunkProviderIso.java
@@ -6,53 +6,53 @@
 	private Chunk[] chunks = new Chunk[256];
 	private World worldObj;
 	private IChunkLoader chunkLoader;
-	byte[] blocks = new byte[-Short.MIN_VALUE];
-
-	public ChunkProviderIso(World var1, IChunkLoader var2) {
-		this.worldObj = var1;
-		this.chunkLoader = var2;
-	}
-
-	public boolean chunkExists(int var1, int var2) {
-		int var3 = var1 & 15 | (var2 & 15) * 16;
-		return this.chunks[var3] != null && this.chunks[var3].isAtLocation(var1, var2);
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		int var3 = var1 & 15 | (var2 & 15) * 16;
+	byte[] blocks = new byte[32768];
+
+	public ChunkProviderIso(World worldObj, IChunkLoader chunkLoader) {
+		this.worldObj = worldObj;
+		this.chunkLoader = chunkLoader;
+	}
+
+	public boolean chunkExists(int chunkX, int chunkZ) {
+		int var3 = chunkX & 15 | (chunkZ & 15) * 16;
+		return this.chunks[var3] != null && this.chunks[var3].isAtLocation(chunkX, chunkZ);
+	}
+
+	public Chunk provideChunk(int chunkX, int chunkZ) {
+		int var3 = chunkX & 15 | (chunkZ & 15) * 16;
 
 		try {
-			if(!this.chunkExists(var1, var2)) {
-				Chunk var4 = this.getChunkAt(var1, var2);
-				if(var4 == null) {
-					var4 = new Chunk(this.worldObj, this.blocks, var1, var2);
-					var4.isChunkRendered = true;
-					var4.neverSave = true;
+			if(!this.chunkExists(chunkX, chunkZ)) {
+				Chunk chunk4 = this.getChunkAt(chunkX, chunkZ);
+				if(chunk4 == null) {
+					chunk4 = new Chunk(this.worldObj, this.blocks, chunkX, chunkZ);
+					chunk4.isChunkRendered = true;
+					chunk4.neverSave = true;
 				}
 
-				this.chunks[var3] = var4;
+				this.chunks[var3] = chunk4;
 			}
 
 			return this.chunks[var3];
-		} catch (Exception var5) {
-			var5.printStackTrace();
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
 			return null;
 		}
 	}
 
-	private synchronized Chunk getChunkAt(int var1, int var2) {
+	private synchronized Chunk getChunkAt(int chunkX, int chunkZ) {
 		try {
-			return this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-		} catch (IOException var4) {
-			var4.printStackTrace();
+			return this.chunkLoader.loadChunk(this.worldObj, chunkX, chunkZ);
+		} catch (IOException iOException4) {
+			iOException4.printStackTrace();
 			return null;
 		}
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int chunkX, int chunkZ) {
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean var1, IProgressUpdate progressUpdate) {
 		return true;
 	}
 
--- net/minecraft/src/PathPoint.java
+++ net/minecraft/src/PathPoint.java
@@ -12,22 +12,22 @@
 	PathPoint previous;
 	public boolean isFirst = false;
 
-	public PathPoint(int var1, int var2, int var3) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.hash = var1 | var2 << 10 | var3 << 20;
+	public PathPoint(int x, int y, int z) {
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
+		this.hash = x | y << 10 | z << 20;
 	}
 
-	public float distanceTo(PathPoint var1) {
-		float var2 = (float)(var1.xCoord - this.xCoord);
-		float var3 = (float)(var1.yCoord - this.yCoord);
-		float var4 = (float)(var1.zCoord - this.zCoord);
+	public float distanceTo(PathPoint pathPoint) {
+		float var2 = (float)(pathPoint.xCoord - this.xCoord);
+		float var3 = (float)(pathPoint.yCoord - this.yCoord);
+		float var4 = (float)(pathPoint.zCoord - this.zCoord);
 		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
 	}
 
-	public boolean equals(Object var1) {
-		return ((PathPoint)var1).hash == this.hash;
+	public boolean equals(Object pathPoint) {
+		return ((PathPoint)pathPoint).hash == this.hash;
 	}
 
 	public int hashCode() {
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 
@@ -11,30 +12,30 @@
 	private long systemTime = System.currentTimeMillis();
 	private boolean noError = false;
 
-	public LoadingScreenRenderer(Minecraft var1) {
-		this.mc = var1;
+	public LoadingScreenRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void resetProgressAndMessage(String var1) {
+	public void resetProgressAndMessage(String msg) {
 		this.noError = false;
-		this.drawScreen(var1);
+		this.drawScreen(msg);
 	}
 
-	public void displayProgressMessage(String var1) {
+	public void displayProgressMessage(String msg) {
 		this.noError = true;
 		this.drawScreen(this.currentlyDisplayedText);
 	}
 
-	public void drawScreen(String var1) {
+	public void drawScreen(String msg) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
 			}
 		} else {
-			this.currentlyDisplayedText = var1;
-			ScaledResolution var2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-			int var3 = var2.getScaledWidth();
-			int var4 = var2.getScaledHeight();
+			this.currentlyDisplayedText = msg;
+			ScaledResolution scaledResolution2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			int var3 = scaledResolution2.getScaledWidth();
+			int var4 = scaledResolution2.getScaledHeight();
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 			GL11.glMatrixMode(GL11.GL_PROJECTION);
 			GL11.glLoadIdentity();
@@ -45,20 +46,20 @@
 		}
 	}
 
-	public void displayLoadingString(String var1) {
+	public void displayLoadingString(String string) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
 			}
 		} else {
 			this.systemTime = 0L;
-			this.currentlyDisplayedProgress = var1;
+			this.currentlyDisplayedProgress = string;
 			this.setLoadingProgress(-1);
 			this.systemTime = 0L;
 		}
 	}
 
-	public void setLoadingProgress(int var1) {
+	public void setLoadingProgress(int progress) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
@@ -67,9 +68,9 @@
 			long var2 = System.currentTimeMillis();
 			if(var2 - this.systemTime >= 20L) {
 				this.systemTime = var2;
-				ScaledResolution var4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-				int var5 = var4.getScaledWidth();
-				int var6 = var4.getScaledHeight();
+				ScaledResolution scaledResolution4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+				int var5 = scaledResolution4.getScaledWidth();
+				int var6 = scaledResolution4.getScaledHeight();
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 				GL11.glMatrixMode(GL11.GL_PROJECTION);
 				GL11.glLoadIdentity();
@@ -77,46 +78,46 @@
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
 				GL11.glLoadIdentity();
 				GL11.glTranslatef(0.0F, 0.0F, -200.0F);
-				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-				Tessellator var7 = Tessellator.instance;
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+				Tessellator tessellator7 = Tessellator.instance;
 				int var8 = this.mc.renderEngine.getTexture("/dirt.png");
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
 				float var9 = 32.0F;
-				var7.startDrawingQuads();
-				var7.setColorOpaque_I(4210752);
-				var7.addVertexWithUV(0.0D, (double)var6, 0.0D, 0.0D, (double)((float)var6 / var9));
-				var7.addVertexWithUV((double)var5, (double)var6, 0.0D, (double)((float)var5 / var9), (double)((float)var6 / var9));
-				var7.addVertexWithUV((double)var5, 0.0D, 0.0D, (double)((float)var5 / var9), 0.0D);
-				var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-				var7.draw();
-				if(var1 >= 0) {
+				tessellator7.startDrawingQuads();
+				tessellator7.setColorOpaque_I(4210752);
+				tessellator7.addVertexWithUV(0.0D, (double)var6, 0.0D, 0.0D, (double)((float)var6 / var9));
+				tessellator7.addVertexWithUV((double)var5, (double)var6, 0.0D, (double)((float)var5 / var9), (double)((float)var6 / var9));
+				tessellator7.addVertexWithUV((double)var5, 0.0D, 0.0D, (double)((float)var5 / var9), 0.0D);
+				tessellator7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+				tessellator7.draw();
+				if(progress >= 0) {
 					byte var10 = 100;
 					byte var11 = 2;
 					int var12 = var5 / 2 - var10 / 2;
 					int var13 = var6 / 2 + 16;
 					GL11.glDisable(GL11.GL_TEXTURE_2D);
-					var7.startDrawingQuads();
-					var7.setColorOpaque_I(8421504);
-					var7.addVertex((double)var12, (double)var13, 0.0D);
-					var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var10), (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var10), (double)var13, 0.0D);
-					var7.setColorOpaque_I(8454016);
-					var7.addVertex((double)var12, (double)var13, 0.0D);
-					var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)var13, 0.0D);
-					var7.draw();
+					tessellator7.startDrawingQuads();
+					tessellator7.setColorOpaque_I(8421504);
+					tessellator7.addVertex((double)var12, (double)var13, 0.0D);
+					tessellator7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
+					tessellator7.addVertex((double)(var12 + var10), (double)(var13 + var11), 0.0D);
+					tessellator7.addVertex((double)(var12 + var10), (double)var13, 0.0D);
+					tessellator7.setColorOpaque_I(8454016);
+					tessellator7.addVertex((double)var12, (double)var13, 0.0D);
+					tessellator7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
+					tessellator7.addVertex((double)(var12 + progress), (double)(var13 + var11), 0.0D);
+					tessellator7.addVertex((double)(var12 + progress), (double)var13, 0.0D);
+					tessellator7.draw();
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
 				}
 
-				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedText, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedText)) / 2, var6 / 2 - 4 - 16, 16777215);
-				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedProgress, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedProgress)) / 2, var6 / 2 - 4 + 8, 16777215);
+				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedText, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedText)) / 2, var6 / 2 - 4 - 16, 0xFFFFFF);
+				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedProgress, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedProgress)) / 2, var6 / 2 - 4 + 8, 0xFFFFFF);
 				Display.update();
 
 				try {
 					Thread.yield();
-				} catch (Exception var14) {
+				} catch (Exception exception14) {
 				}
 
 			}
--- net/minecraft/src/PathEntity.java
+++ net/minecraft/src/PathEntity.java
@@ -5,9 +5,9 @@
 	public final int pathLength;
 	private int pathIndex;
 
-	public PathEntity(PathPoint[] var1) {
-		this.points = var1;
-		this.pathLength = var1.length;
+	public PathEntity(PathPoint[] pathPoints) {
+		this.points = pathPoints;
+		this.pathLength = pathPoints.length;
 	}
 
 	public void incrementPathIndex() {
@@ -18,10 +18,10 @@
 		return this.pathIndex >= this.points.length;
 	}
 
-	public Vec3D getPosition(Entity var1) {
-		double var2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
+	public Vec3D getPosition(Entity entity) {
+		double var2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
 		double var4 = (double)this.points[this.pathIndex].yCoord;
-		double var6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
+		double var6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
 		return Vec3D.createVector(var2, var4, var6);
 	}
 }
--- net/minecraft/src/BlockOreBlock.java
+++ net/minecraft/src/BlockOreBlock.java
@@ -1,12 +1,12 @@
 package net.minecraft.src;
 
 public class BlockOreBlock extends Block {
-	public BlockOreBlock(int var1, int var2) {
-		super(var1, Material.iron);
-		this.blockIndexInTexture = var2;
+	public BlockOreBlock(int id, int tex) {
+		super(id, Material.iron);
+		this.blockIndexInTexture = tex;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
 	}
 }
--- net/minecraft/src/RenderSpider.java
+++ net/minecraft/src/RenderSpider.java
@@ -8,18 +8,18 @@
 		this.setRenderPassModel(new ModelSpider());
 	}
 
-	protected float setSpiderDeathMaxRotation(EntitySpider var1) {
+	protected float setSpiderDeathMaxRotation(EntitySpider entitySpider1) {
 		return 180.0F;
 	}
 
-	protected boolean setSpiderEyeBrightness(EntitySpider var1, int var2) {
+	protected boolean setSpiderEyeBrightness(EntitySpider entitySpider1, int var2) {
 		if(var2 != 0) {
 			return false;
 		} else if(var2 != 0) {
 			return false;
 		} else {
 			this.loadTexture("/mob/spider_eyes.png");
-			float var3 = (1.0F - var1.getBrightness(1.0F)) * 0.5F;
+			float var3 = (1.0F - entitySpider1.getBrightness(1.0F)) * 0.5F;
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glDisable(GL11.GL_ALPHA_TEST);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
--- net/minecraft/src/WorldManager.java
+++ net/minecraft/src/WorldManager.java
@@ -9,18 +9,18 @@
 		this.mcServer = var1;
 	}
 
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-	}
-
-	public void obtainEntitySkin(Entity var1) {
-		this.mcServer.entityTracker.trackEntity(var1);
-	}
-
-	public void releaseEntitySkin(Entity var1) {
-		this.mcServer.entityTracker.untrackEntity(var1);
-	}
-
-	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
+	public void spawnParticle(String name, double x, double y, double z, double var8, double var10, double var12) {
+	}
+
+	public void obtainEntitySkin(Entity entity) {
+		this.mcServer.entityTracker.trackEntity(entity);
+	}
+
+	public void releaseEntitySkin(Entity entity) {
+		this.mcServer.entityTracker.untrackEntity(entity);
+	}
+
+	public void playSound(String name, double x, double y, double z, float volume, float pitch) {
 	}
 
 	public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
@@ -29,14 +29,14 @@
 	public void updateAllRenderers() {
 	}
 
-	public void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3) {
-		this.mcServer.configManager.markBlockNeedsUpdate(var1, var2, var3);
-	}
-
-	public void playRecord(String var1, int var2, int var3, int var4) {
-	}
-
-	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		this.mcServer.configManager.sentTileEntityToPlayer(var1, var2, var3, var4);
+	public void markBlockAndNeighborsNeedsUpdate(int x, int y, int z) {
+		this.mcServer.configManager.markBlockNeedsUpdate(x, y, z);
+	}
+
+	public void playRecord(String name, int x, int y, int z, String author) {
+	}
+
+	public void doNothingWithTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		this.mcServer.configManager.sentTileEntityToPlayer(x, y, z, tileEntity);
 	}
 }
--- net/minecraft/src/EnumArt.java
+++ net/minecraft/src/EnumArt.java
@@ -24,7 +24,13 @@
 	Pointer("Pointer", 64, 64, 0, 192),
 	Pigscene("Pigscene", 64, 64, 64, 192),
 	Skeleton("Skeleton", 64, 48, 192, 64),
-	DonkeyKong("DonkeyKong", 64, 48, 192, 112);
+	DonkeyKong("DonkeyKong", 64, 48, 192, 112),
+	SuperbBird("SuperbBird", 32, 32, 160, 128),
+	Arid("Arid", 16, 16, 112, 0),
+	Tropical("Tropical", 32, 16, 160, 32),
+	Maple("Maple", 32, 16, 0, 48),
+	Winter("Winter", 16, 32, 32, 64),
+	PackPNG("PackPNG", 64, 64, 128, 192);
 
 	public final String title;
 	public final int sizeX;
@@ -32,11 +38,11 @@
 	public final int offsetX;
 	public final int offsetY;
 
-	private EnumArt(String var3, int var4, int var5, int var6, int var7) {
-		this.title = var3;
-		this.sizeX = var4;
-		this.sizeY = var5;
-		this.offsetX = var6;
-		this.offsetY = var7;
+	private EnumArt(String title, int sizeX, int sizeY, int offsetX, int offsetY) {
+		this.title = title;
+		this.sizeX = sizeX;
+		this.sizeY = sizeY;
+		this.offsetX = offsetX;
+		this.offsetY = offsetY;
 	}
 }
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -3,10 +3,10 @@
 import java.util.Random;
 
 public class BlockDoor extends Block {
-	protected BlockDoor(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockDoor(int var1, Material material2) {
+		super(var1, material2);
 		this.blockIndexInTexture = 97;
-		if(var2 == Material.iron) {
+		if(material2 == Material.iron) {
 			++this.blockIndexInTexture;
 		}
 
@@ -15,15 +15,15 @@
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		if(var1 != 0 && var1 != 1) {
-			int var3 = this.getState(var2);
-			if((var3 == 0 || var3 == 2) ^ var1 <= 3) {
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		if(side != 0 && side != 1) {
+			int var3 = this.getState(metadata);
+			if((var3 == 0 || var3 == 2) ^ side <= 3) {
 				return this.blockIndexInTexture;
 			} else {
-				int var4 = var3 / 2 + (var1 & 1 ^ var3);
-				var4 += (var2 & 4) / 4;
-				int var5 = this.blockIndexInTexture - (var2 & 8) * 2;
+				int var4 = var3 / 2 + (side & 1 ^ var3);
+				var4 += (metadata & 4) / 4;
+				int var5 = this.blockIndexInTexture - (metadata & 8) * 2;
 				if((var4 & 1) != 0) {
 					var5 = -var5;
 				}
@@ -47,67 +47,67 @@
 		return 7;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		this.setDoorRotation(this.getState(var1.getBlockMetadata(var2, var3, var4)));
-	}
-
-	public void setDoorRotation(int var1) {
-		float var2 = 3.0F / 16.0F;
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.getCollisionBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		this.setDoorRotation(this.getState(blockAccess.getBlockMetadata(x, y, z)));
+	}
+
+	public void setDoorRotation(int metadata) {
+		float var2 = 0.1875F;
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
-		if(var1 == 0) {
+		if(metadata == 0) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
 		}
 
-		if(var1 == 1) {
+		if(metadata == 1) {
 			this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		}
 
-		if(var1 == 2) {
+		if(metadata == 2) {
 			this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
 		}
 
-		if(var1 == 3) {
+		if(metadata == 3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
 		}
 
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
+	public void onBlockClicked(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(worldObj, x, y, z, entityPlayer);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+	public boolean blockActivated(World worldObj, int x, int y, int z, EntityPlayer entityPlayer) {
 		if(this.material == Material.iron) {
 			return true;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			int var6 = worldObj.getBlockMetadata(x, y, z);
 			if((var6 & 8) != 0) {
-				if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-					this.blockActivated(var1, var2, var3 - 1, var4, var5);
+				if(worldObj.getBlockId(x, y - 1, z) == this.blockID) {
+					this.blockActivated(worldObj, x, y - 1, z, entityPlayer);
 				}
 
 				return true;
 			} else {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+				if(worldObj.getBlockId(x, y + 1, z) == this.blockID) {
+					worldObj.setBlockMetadataWithNotify(x, y + 1, z, (var6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				worldObj.setBlockMetadataWithNotify(x, y, z, var6 ^ 4);
+				worldObj.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, worldObj.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, worldObj.rand.nextFloat() * 0.1F + 0.9F);
 				}
 
 				return true;
@@ -115,81 +115,81 @@
 		}
 	}
 
-	public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void onPoweredBlockChange(World worldObj, int x, int y, int z, boolean var5) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-				this.onPoweredBlockChange(var1, var2, var3 - 1, var4, var5);
+			if(worldObj.getBlockId(x, y - 1, z) == this.blockID) {
+				this.onPoweredBlockChange(worldObj, x, y - 1, z, var5);
 			}
 
 		} else {
-			boolean var7 = (var1.getBlockMetadata(var2, var3, var4) & 4) > 0;
+			boolean var7 = (worldObj.getBlockMetadata(x, y, z) & 4) > 0;
 			if(var7 != var5) {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+				if(worldObj.getBlockId(x, y + 1, z) == this.blockID) {
+					worldObj.setBlockMetadataWithNotify(x, y + 1, z, (var6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				worldObj.setBlockMetadataWithNotify(x, y, z, var6 ^ 4);
+				worldObj.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, worldObj.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					worldObj.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, worldObj.rand.nextFloat() * 0.1F + 0.9F);
 				}
 
 			}
 		}
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		int var6 = worldObj.getBlockMetadata(x, y, z);
 		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+			if(worldObj.getBlockId(x, y - 1, z) != this.blockID) {
+				worldObj.setBlockWithNotify(x, y, z, 0);
 			}
 
-			if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				this.onNeighborBlockChange(var1, var2, var3 - 1, var4, var5);
+			if(id > 0 && Block.blocksList[id].canProvidePower()) {
+				this.onNeighborBlockChange(worldObj, x, y - 1, z, id);
 			}
 		} else {
 			boolean var7 = false;
-			if(var1.getBlockId(var2, var3 + 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+			if(worldObj.getBlockId(x, y + 1, z) != this.blockID) {
+				worldObj.setBlockWithNotify(x, y, z, 0);
 				var7 = true;
 			}
 
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+			if(!worldObj.isBlockNormalCube(x, y - 1, z)) {
+				worldObj.setBlockWithNotify(x, y, z, 0);
 				var7 = true;
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, 0);
+				if(worldObj.getBlockId(x, y + 1, z) == this.blockID) {
+					worldObj.setBlockWithNotify(x, y + 1, z, 0);
 				}
 			}
 
 			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			} else if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				boolean var8 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-				this.onPoweredBlockChange(var1, var2, var3, var4, var8);
+				this.dropBlockAsItem(worldObj, x, y, z, var6);
+			} else if(id > 0 && Block.blocksList[id].canProvidePower()) {
+				boolean var8 = worldObj.isBlockIndirectlyGettingPowered(x, y, z) || worldObj.isBlockIndirectlyGettingPowered(x, y + 1, z);
+				this.onPoweredBlockChange(worldObj, x, y, z, var8);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return (var1 & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
-	}
-
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
-	}
-
-	public int getState(int var1) {
-		return (var1 & 4) == 0 ? var1 - 1 & 3 : var1 & 3;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 127 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+	public int idDropped(int metadata, Random rand) {
+		return (metadata & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
+	}
+
+	public MovingObjectPosition collisionRayTrace(World worldObj, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.collisionRayTrace(worldObj, x, y, z, vector1, vector2);
+	}
+
+	public int getState(int metadata) {
+		return (metadata & 4) == 0 ? metadata - 1 & 3 : metadata & 3;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return y >= 127 ? false : world.isBlockNormalCube(x, y - 1, z) && super.canPlaceBlockAt(world, x, y, z) && super.canPlaceBlockAt(world, x, y + 1, z);
 	}
 }
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -1,9 +1,11 @@
 package net.minecraft.src;
 
 public class RecipesCrafting {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
-		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Block.chest), "###", "# #", "###", '#', Block.planks);
+		craftingManager.addRecipe(new ItemStack(Block.stoneOvenIdle), "###", "# #", "###", '#', Block.cobblestone);
+		craftingManager.addRecipe(new ItemStack(Block.workbench), "##", "##", '#', Block.planks);
+		craftingManager.addRecipe(new ItemStack(Block.blasterIdle), "###", "#X#", "###", '#', Item.ingotIron, 'X', Block.blockRuby);
+		craftingManager.addRecipe(new ItemStack(Block.refabricator), "xxx", "#S#", "#D#", 'x', Item.starDust, '#', Item.ingotGold, 'S', Block.blockSapphire, 'D', Block.blockDiamond);
 	}
 }
--- net/minecraft/src/RenderPig.java
+++ net/minecraft/src/RenderPig.java
@@ -6,9 +6,9 @@
 		this.setRenderPassModel(var2);
 	}
 
-	protected boolean renderSaddledPig(EntityPig var1, int var2) {
+	protected boolean renderSaddledPig(EntityPig entityPig1, int var2) {
 		this.loadTexture("/mob/saddle.png");
-		return var2 == 0 && var1.saddled;
+		return var2 == 0 && entityPig1.saddled;
 	}
 
 	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
--- net/minecraft/src/ThreadDownloadImageData.java
+++ net/minecraft/src/ThreadDownloadImageData.java
@@ -8,7 +8,7 @@
 	public int textureName = -1;
 	public boolean textureSetupComplete = false;
 
-	public ThreadDownloadImageData(String var1, ImageBuffer var2) {
-		(new ThreadDownloadImage(this, var1, var2)).start();
+	public ThreadDownloadImageData(String location, ImageBuffer imageBuffer) {
+		(new ThreadDownloadImage(this, location, imageBuffer)).start();
 	}
 }
--- net/minecraft/src/Packet24MobSpawn.java
+++ net/minecraft/src/Packet24MobSpawn.java
@@ -16,38 +16,38 @@
 	public Packet24MobSpawn() {
 	}
 
-	public Packet24MobSpawn(EntityLiving var1) {
-		this.entityId = var1.entityID;
-		this.type = (byte)EntityList.getEntityID(var1);
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleMobSpawn(this);
+	public Packet24MobSpawn(EntityLiving entityLiving) {
+		this.entityId = entityLiving.entityID;
+		this.type = (byte)EntityList.getEntityID(entityLiving);
+		this.xPosition = MathHelper.floor_double(entityLiving.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityLiving.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityLiving.posZ * 32.0D);
+		this.yaw = (byte)((int)(entityLiving.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityLiving.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMobSpawn(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -1,13 +1,39 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.BlockStoneType;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStone extends Block {
-	public BlockStone(int var1, int var2) {
-		super(var1, var2, Material.rock);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Block.cobblestone.blockID;
+	private final BlockStoneType type;
+
+	public BlockStone(int id, int tex, BlockStoneType type) {
+		super(id, tex, Material.rock);
+		this.type = type;
+	}
+
+	public int idDropped(int metadata, Random rand) {
+		return type == BlockStoneType.STONE ? Block.cobblestone.blockID : this.blockID;
+	}
+
+	public int metadataDropped(int metadata, Random rand) {
+		return metadata;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		if (metadata == 0) {
+			return this.blockIndexInTexture;
+		}
+		if (this.type == BlockStoneType.STONE) return textureXY(8, 5 + metadata);
+		if (this.type == BlockStoneType.COBBLESTONE) return textureXY(11, 5 + metadata);
+		if (this.type == BlockStoneType.POLISHED) return textureXY(10, 5 + metadata);
+		if (this.type == BlockStoneType.BRICK) return textureXY(13, 5 + metadata);
+		if (this.type == BlockStoneType.MOSSY) return textureXY(12, 5 + metadata);
+		return this.blockIndexInTexture;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockBlaster.java
@@ -1,0 +1,51 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.Random;
+
+import net.minecraft.src.*;
+
+public class BlockBlaster extends BlockFurnace {
+	public BlockBlaster(int var1, boolean var2) {
+		super(var1, var2, Material.iron);
+		this.blockIndexInTexture = textureXY(14, 2);
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Block.blasterIdle.blockID;
+	}
+
+	public int getBlockTexture(IBlockAccess iBlockAccess1, int var2, int var3, int var4, int var5) {
+		if (var5 == 1) {
+			return Block.blockSteel.blockIndexInTexture - 16;
+		} else if (var5 == 0) {
+			return Block.blockSteel.blockIndexInTexture + 16;
+		} else {
+			int var6 = iBlockAccess1.getBlockMetadata(var2, var3, var4);
+			return var5 != var6 ? Block.blockSteel.blockIndexInTexture
+					: (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+		}
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return var1 == 1 ? Block.blockSteel.blockIndexInTexture - 16
+				: (var1 == 0 ? Block.blockSteel.blockIndexInTexture + 16
+						: (var1 == 3 ? this.blockIndexInTexture : Block.blockSteel.blockIndexInTexture));
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityFurnace(50, 2);
+	}
+
+	public void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4);
+		TileEntity tileEntity6 = var1.getBlockTileEntity(var2, var3, var4);
+		if (var0) {
+			var1.setBlockWithNotify(var2, var3, var4, Block.blasterActive.blockID);
+		} else {
+			var1.setBlockWithNotify(var2, var3, var4, Block.blasterIdle.blockID);
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
+		var1.setBlockTileEntity(var2, var3, var4, tileEntity6);
+	}
+}
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -10,25 +11,25 @@
 
 	public RenderItem() {
 		this.shadowSize = 0.15F;
-		this.shadowOpaque = 12.0F / 16.0F;
+		this.shadowOpaque = 0.75F;
 	}
 
-	public void doRenderItem(EntityItem var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderItem(EntityItem entityItem1, double var2, double var4, double var6, float var8, float var9) {
 		this.random.setSeed(187L);
-		ItemStack var10 = var1.item;
+		ItemStack var10 = entityItem1.item;
 		GL11.glPushMatrix();
-		float var11 = MathHelper.sin(((float)var1.age + var9) / 10.0F + var1.hoverStart) * 0.1F + 0.1F;
-		float var12 = (((float)var1.age + var9) / 20.0F + var1.hoverStart) * (180.0F / (float)Math.PI);
+		float var11 = MathHelper.sin(((float)entityItem1.age + var9) / 10.0F + entityItem1.hoverStart) * 0.1F + 0.1F;
+		float var12 = (((float)entityItem1.age + var9) / 20.0F + entityItem1.hoverStart) * 57.295776F;
 		byte var13 = 1;
-		if(var1.item.stackSize > 1) {
+		if(entityItem1.item.stackSize > 1) {
 			var13 = 2;
 		}
 
-		if(var1.item.stackSize > 5) {
+		if(entityItem1.item.stackSize > 5) {
 			var13 = 3;
 		}
 
-		if(var1.item.stackSize > 20) {
+		if(entityItem1.item.stackSize > 20) {
 			var13 = 4;
 		}
 
@@ -41,9 +42,9 @@
 			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
 			this.loadTexture("/terrain.png");
 			float var27 = 0.25F;
-			if(!Block.blocksList[var10.itemID].renderAsNormalBlock() && var10.itemID != Block.stairSingle.blockID) {
-				var27 = 0.5F;
-			}
+//			if(!Block.blocksList[var10.itemID].renderAsNormalBlock() && var10.itemID != Block.stairSingle.blockID) {
+//				var27 = 0.5F;
+//			}
 
 			GL11.glScalef(var27, var27, var27);
 
@@ -56,7 +57,7 @@
 					GL11.glTranslatef(var16, var17, var18);
 				}
 
-				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID]);
+				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID], Math.max(var10.itemMetadata, 0));
 				GL11.glPopMatrix();
 			}
 		} else {
@@ -68,7 +69,7 @@
 				this.loadTexture("/gui/items.png");
 			}
 
-			Tessellator var15 = Tessellator.instance;
+			Tessellator tessellator15 = Tessellator.instance;
 			var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
 			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
 			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
@@ -87,13 +88,13 @@
 				}
 
 				GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-				var15.startDrawingQuads();
-				var15.setNormal(0.0F, 1.0F, 0.0F);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var17, (double)var18);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var16, (double)var18);
-				var15.draw();
+				tessellator15.startDrawingQuads();
+				tessellator15.setNormal(0.0F, 1.0F, 0.0F);
+				tessellator15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
+				tessellator15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
+				tessellator15.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var17, (double)var18);
+				tessellator15.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var16, (double)var18);
+				tessellator15.draw();
 				GL11.glPopMatrix();
 			}
 		}
@@ -102,21 +103,21 @@
 		GL11.glPopMatrix();
 	}
 
-	public void renderItemIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
+	public void renderItemIntoGUI(FontRenderer fontRenderer1, RenderEngine var2, ItemStack var3, int var4, int var5) {
 		if(var3 != null) {
 			if(var3.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.itemID].getRenderType())) {
 				int var6 = var3.itemID;
 				var2.bindTexture(var2.getTexture("/terrain.png"));
 				Block var7 = Block.blocksList[var6];
 				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var4 - 2), (float)(var5 + 3), 0.0F);
+				GL11.glTranslatef((float)(var4 - 2), (float)(var5 + 3), -3.0F);
 				GL11.glScalef(10.0F, 10.0F, 10.0F);
-				GL11.glTranslatef(1.0F, 0.5F, 8.0F);
+				GL11.glTranslatef(1.0F, 0.5F, 1.0F);
+				GL11.glScalef(1.0F, 1.0F, -1.0F);
 				GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-				GL11.glScalef(1.0F, 1.0F, 1.0F);
-				this.itemRenderBlocks.renderBlockOnInventory(var7);
+//				GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+				this.itemRenderBlocks.renderBlockOnInventory(var7, Math.max(var3.itemMetadata, 0));
 				GL11.glPopMatrix();
 			} else if(var3.getIconIndex() >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
@@ -134,13 +135,13 @@
 		}
 	}
 
-	public void renderItemOverlayIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
+	public void renderItemOverlayIntoGUI(FontRenderer fontRenderer1, RenderEngine var2, ItemStack var3, int var4, int var5) {
 		if(var3 != null) {
 			if(var3.stackSize > 1) {
 				String var6 = "" + var3.stackSize;
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				var1.drawStringWithShadow(var6, var4 + 19 - 2 - var1.getStringWidth(var6), var5 + 6 + 3, 16777215);
+				fontRenderer1.drawStringWithShadow(var6, var4 + 19 - 2 - fontRenderer1.getStringWidth(var6), var5 + 6 + 3, 0xFFFFFF);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
@@ -151,12 +152,12 @@
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
-				Tessellator var8 = Tessellator.instance;
+				Tessellator tessellator8 = Tessellator.instance;
 				int var9 = 255 - var7 << 16 | var7 << 8;
 				int var10 = (255 - var7) / 4 << 16 | 16128;
-				this.renderQuad(var8, var4 + 2, var5 + 13, 13, 2, 0);
-				this.renderQuad(var8, var4 + 2, var5 + 13, 12, 1, var10);
-				this.renderQuad(var8, var4 + 2, var5 + 13, var11, 1, var9);
+				this.renderQuad(tessellator8, var4 + 2, var5 + 13, 13, 2, 0);
+				this.renderQuad(tessellator8, var4 + 2, var5 + 13, 12, 1, var10);
+				this.renderQuad(tessellator8, var4 + 2, var5 + 13, var11, 1, var9);
 				GL11.glEnable(GL11.GL_TEXTURE_2D);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
@@ -166,27 +167,27 @@
 		}
 	}
 
-	private void renderQuad(Tessellator var1, int var2, int var3, int var4, int var5, int var6) {
-		var1.startDrawingQuads();
-		var1.setColorOpaque_I(var6);
-		var1.addVertex((double)(var2 + 0), (double)(var3 + 0), 0.0D);
-		var1.addVertex((double)(var2 + 0), (double)(var3 + var5), 0.0D);
-		var1.addVertex((double)(var2 + var4), (double)(var3 + var5), 0.0D);
-		var1.addVertex((double)(var2 + var4), (double)(var3 + 0), 0.0D);
-		var1.draw();
+	private void renderQuad(Tessellator tessellator1, int var2, int var3, int var4, int var5, int var6) {
+		tessellator1.startDrawingQuads();
+		tessellator1.setColorOpaque_I(var6);
+		tessellator1.addVertex((double)(var2 + 0), (double)(var3 + 0), 0.0D);
+		tessellator1.addVertex((double)(var2 + 0), (double)(var3 + var5), 0.0D);
+		tessellator1.addVertex((double)(var2 + var4), (double)(var3 + var5), 0.0D);
+		tessellator1.addVertex((double)(var2 + var4), (double)(var3 + 0), 0.0D);
+		tessellator1.draw();
 	}
 
 	public void renderIcon(int var1, int var2, int var3, int var4, int var5, int var6) {
 		float var7 = 0.0F;
-		float var8 = 1.0F / 256.0F;
-		float var9 = 1.0F / 256.0F;
-		Tessellator var10 = Tessellator.instance;
-		var10.startDrawingQuads();
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
-		var10.draw();
+		float var8 = 0.00390625F;
+		float var9 = 0.00390625F;
+		Tessellator tessellator10 = Tessellator.instance;
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
+		tessellator10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
+		tessellator10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
+		tessellator10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
+		tessellator10.draw();
 	}
 
 	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
--- net/minecraft/src/TextureFlamesFX.java
+++ net/minecraft/src/TextureFlamesFX.java
@@ -52,9 +52,9 @@
 			var5 = (int)(var13 * 155.0F + 100.0F);
 			var6 = (int)(var13 * var13 * 255.0F);
 			int var7 = (int)(var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * 255.0F);
-			short var8 = 255;
+			short s8 = 255;
 			if(var13 < 0.5F) {
-				var8 = 0;
+				s8 = 0;
 			}
 
 			var4 = (var13 - 0.5F) * 2.0F;
@@ -70,7 +70,7 @@
 			this.imageData[var2 * 4 + 0] = (byte)var5;
 			this.imageData[var2 * 4 + 1] = (byte)var6;
 			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = (byte)var8;
+			this.imageData[var2 * 4 + 3] = (byte)s8;
 		}
 
 	}
--- net/minecraft/src/NextTickListEntry.java
+++ net/minecraft/src/NextTickListEntry.java
@@ -9,19 +9,19 @@
 	public long scheduledTime;
 	private long tickEntryID = nextTickEntryID++;
 
-	public NextTickListEntry(int var1, int var2, int var3, int var4) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.blockID = var4;
+	public NextTickListEntry(int x, int y, int z, int id) {
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
+		this.blockID = id;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof NextTickListEntry)) {
+	public boolean equals(Object tickListEntry) {
+		if(!(tickListEntry instanceof NextTickListEntry)) {
 			return false;
 		} else {
-			NextTickListEntry var2 = (NextTickListEntry)var1;
-			return this.xCoord == var2.xCoord && this.yCoord == var2.yCoord && this.zCoord == var2.zCoord && this.blockID == var2.blockID;
+			NextTickListEntry nextTickListEntry2 = (NextTickListEntry)tickListEntry;
+			return this.xCoord == nextTickListEntry2.xCoord && this.yCoord == nextTickListEntry2.yCoord && this.zCoord == nextTickListEntry2.zCoord && this.blockID == nextTickListEntry2.blockID;
 		}
 	}
 
@@ -29,16 +29,16 @@
 		return (this.xCoord * 128 * 1024 + this.zCoord * 128 + this.yCoord) * 256 + this.blockID;
 	}
 
-	public NextTickListEntry setScheduledTime(long var1) {
-		this.scheduledTime = var1;
+	public NextTickListEntry setScheduledTime(long time) {
+		this.scheduledTime = time;
 		return this;
 	}
 
-	public int comparer(NextTickListEntry var1) {
-		return this.scheduledTime < var1.scheduledTime ? -1 : (this.scheduledTime > var1.scheduledTime ? 1 : (this.tickEntryID < var1.tickEntryID ? -1 : (this.tickEntryID > var1.tickEntryID ? 1 : 0)));
+	public int comparer(NextTickListEntry nextTickListEntry1) {
+		return this.scheduledTime < nextTickListEntry1.scheduledTime ? -1 : (this.scheduledTime > nextTickListEntry1.scheduledTime ? 1 : (this.tickEntryID < nextTickListEntry1.tickEntryID ? -1 : (this.tickEntryID > nextTickListEntry1.tickEntryID ? 1 : 0)));
 	}
 
-	public int compareTo(Object var1) {
-		return this.comparer((NextTickListEntry)var1);
+	public int compareTo(Object nextTickListEntry) {
+		return this.comparer((NextTickListEntry)nextTickListEntry);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/FurnaceRecipe.java
@@ -1,0 +1,26 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.ItemStack;
+
+public class FurnaceRecipe {
+	private final ItemStack input, output;
+
+	public FurnaceRecipe(ItemStack input, ItemStack output) {
+		this.input = input;
+		this.output = output;
+	}
+
+	public ItemStack getInput() {
+		return input;
+	}
+
+	public ItemStack getOutput(ItemStack input) {
+		return output.itemMetadata == -1 ? output.copy().withMetadata(input.itemMetadata) : output;
+	}
+
+	public boolean canSmelt(ItemStack input) {
+		return this.input.itemID == input.itemID
+				&& (this.input.itemMetadata < 0
+					|| this.input.itemMetadata == input.itemMetadata);
+	}
+}
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -12,13 +12,25 @@
 	public int fuel;
 	public double pushX;
 	public double pushZ;
-	private static final int[][][] matrix = new int[][][]{{{0, 0, -1}, {0, 0, 1}}, {{-1, 0, 0}, {1, 0, 0}}, {{-1, -1, 0}, {1, 0, 0}}, {{-1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, {-1, 0, 0}}, {{0, 0, -1}, {-1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
+	private static final int[][][] matrix = new int[][][]{
+			{{0, 0, -1}, {0, 0, 1}},
+			{{-1, 0, 0}, {1, 0, 0}},
+			{{-1, -1, 0}, {1, 0, 0}},
+			{{-1, 0, 0}, {1, -1, 0}},
+			{{0, 0, -1}, {0, -1, 1}},
+			{{0, -1, -1}, {0, 0, 1}},
+			{{0, 0, 1}, {1, 0, 0}},
+			{{0, 0, 1}, {-1, 0, 0}},
+			{{0, 0, -1}, {-1, 0, 0}},
+			{{0, 0, -1}, {1, 0, 0}}
+	};
 	private int turnProgress;
 	private double minecartX;
 	private double minecartY;
 	private double minecartZ;
 	private double minecartYaw;
 	private double minecartPitch;
+	private double boost;
 
 	public EntityMinecart(World var1) {
 		super(var1);
@@ -33,8 +45,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -45,26 +57,26 @@
 		return true;
 	}
 
-	public EntityMinecart(World var1, double var2, double var4, double var6, int var8) {
-		this(var1);
-		this.setPosition(var2, var4 + (double)this.yOffset, var6);
+	public EntityMinecart(World worldObj, double x, double y, double z, int minecartType) {
+		this(worldObj);
+		this.setPosition(x, y + (double)this.yOffset, z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
-		this.minecartType = var8;
+		this.prevPosX = x;
+		this.prevPosY = y;
+		this.prevPosZ = z;
+		this.minecartType = minecartType;
 	}
 
 	public double getMountedYOffset() {
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
 			this.entityDropItem(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
 			if(this.minecartType == 1) {
@@ -98,12 +110,12 @@
 					}
 
 					var2.stackSize -= var6;
-					EntityItem var7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.itemDmg));
+					EntityItem entityItem7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.itemDmg));
 					float var8 = 0.05F;
-					var7.motionX = (double)((float)this.rand.nextGaussian() * var8);
-					var7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
-					var7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
-					this.worldObj.spawnEntityInWorld(var7);
+					entityItem7.motionX = (double)((float)this.rand.nextGaussian() * var8);
+					entityItem7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
+					entityItem7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
+					this.worldObj.spawnEntityInWorld(entityItem7);
 				}
 			}
 		}
@@ -113,7 +125,7 @@
 
 	public void onUpdate() {
 		double var7;
-		if(this.worldObj.multiplayerWorld) {
+		if(!this.worldObj.canDoClientAction()) {
 			if(this.turnProgress > 0) {
 				double var41 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
 				double var42 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
@@ -152,15 +164,15 @@
 			int var1 = MathHelper.floor_double(this.posX);
 			int var2 = MathHelper.floor_double(this.posY);
 			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
+			if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var1, var2 - 1, var3)) {
 				--var2;
 			}
 
 			double var4 = 0.4D;
 			boolean var6 = false;
-			var7 = 1.0D / 128.0D;
-			if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
-				Vec3D var9 = this.getPos(this.posX, this.posY, this.posZ);
+			var7 = 2.0D / 256D;
+			if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var1, var2, var3)) {
+				Vec3D vec3D9 = this.getPos(this.posX, this.posY, this.posZ);
 				int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
 				this.posY = (double)var2;
 				if(var10 >= 2 && var10 <= 5) {
@@ -183,6 +195,18 @@
 					this.motionZ -= var7;
 				}
 
+				if (this.worldObj.getBlockId(var1, var2, var3) == Block.boosterTrack.blockID) {
+					if (boost < 1.0D) {
+						this.playSound("diverge.boost", 0.25F, 1.0F);
+					}
+					boost = 1.0D;
+				} else if (boost > 0.0D) {
+					boost -= 0.1D;
+				}
+
+				this.motionX *= 1.0D + boost;
+				this.motionZ *= 1.0D + boost;
+
 				int[][] var11 = matrix[var10];
 				double var12 = (double)(var11[1][0] - var11[0][0]);
 				double var14 = (double)(var11[1][2] - var11[0][2]);
@@ -245,7 +269,7 @@
 					var34 = var4;
 				}
 
-				this.moveEntity(var32, 0.0D, var34);
+				this.moveEntity(var32 * 1.5D, 0.0D, var34 * 1.5D);
 				if(var11[0][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[0][0] && MathHelper.floor_double(this.posZ) - var3 == var11[0][2]) {
 					this.setPosition(this.posX, this.posY + (double)var11[0][1], this.posZ);
 				} else if(var11[1][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[1][0] && MathHelper.floor_double(this.posZ) - var3 == var11[1][2]) {
@@ -253,9 +277,11 @@
 				}
 
 				if(this.riddenByEntity != null) {
-					this.motionX *= (double)0.997F;
+					if (boost > 0.0D) {
+						this.motionX *= (double)0.997F;
+						this.motionZ *= (double)0.997F;
+					}
 					this.motionY *= 0.0D;
-					this.motionZ *= (double)0.997F;
 				} else {
 					if(this.minecartType == 2) {
 						var36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
@@ -281,16 +307,16 @@
 					this.motionZ *= (double)0.96F;
 				}
 
-				Vec3D var46 = this.getPos(this.posX, this.posY, this.posZ);
-				if(var46 != null && var9 != null) {
-					double var37 = (var9.yCoord - var46.yCoord) * 0.05D;
+				Vec3D vec3D46 = this.getPos(this.posX, this.posY, this.posZ);
+				if(vec3D46 != null && vec3D9 != null) {
+					double var37 = (vec3D9.yCoord - vec3D46.yCoord) * 0.05D;
 					var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 					if(var20 > 0.0D) {
 						this.motionX = this.motionX / var20 * (var20 + var37);
 						this.motionZ = this.motionZ / var20 * (var20 + var37);
 					}
 
-					this.setPosition(this.posX, var46.yCoord, this.posZ);
+					this.setPosition(this.posX, vec3D46.yCoord, this.posZ);
 				}
 
 				int var47 = MathHelper.floor_double(this.posX);
@@ -370,10 +396,10 @@
 			}
 
 			this.setRotation(this.rotationYaw, this.rotationPitch);
-			List var15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-			if(var15 != null && var15.size() > 0) {
-				for(int var45 = 0; var45 < var15.size(); ++var45) {
-					Entity var17 = (Entity)var15.get(var45);
+			List list15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+			if(list15 != null && list15.size() > 0) {
+				for(int var45 = 0; var45 < list15.size(); ++var45) {
+					Entity var17 = (Entity)list15.get(var45);
 					if(var17 != this.riddenByEntity && var17.canBePushed() && var17 instanceof EntityMinecart) {
 						var17.applyEntityCollision(this);
 					}
@@ -396,19 +422,19 @@
 		}
 	}
 
-	public Vec3D getPosOffset(double var1, double var3, double var5, double var7) {
-		int var9 = MathHelper.floor_double(var1);
-		int var10 = MathHelper.floor_double(var3);
-		int var11 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var9, var10 - 1, var11) == Block.minecartTrack.blockID) {
+	public Vec3D getPosOffset(double x, double y, double z, double offset) {
+		int var9 = MathHelper.floor_double(x);
+		int var10 = MathHelper.floor_double(y);
+		int var11 = MathHelper.floor_double(z);
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var9, var10 - 1, var11)) {
 			--var10;
 		}
 
-		if(this.worldObj.getBlockId(var9, var10, var11) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var9, var10, var11)) {
 			int var12 = this.worldObj.getBlockMetadata(var9, var10, var11);
-			var3 = (double)var10;
+			y = (double)var10;
 			if(var12 >= 2 && var12 <= 5) {
-				var3 = (double)(var10 + 1);
+				y = (double)(var10 + 1);
 			}
 
 			int[][] var13 = matrix[var12];
@@ -417,33 +443,33 @@
 			double var18 = Math.sqrt(var14 * var14 + var16 * var16);
 			var14 /= var18;
 			var16 /= var18;
-			var1 += var14 * var7;
-			var5 += var16 * var7;
-			if(var13[0][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[0][0] && MathHelper.floor_double(var5) - var11 == var13[0][2]) {
-				var3 += (double)var13[0][1];
-			} else if(var13[1][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[1][0] && MathHelper.floor_double(var5) - var11 == var13[1][2]) {
-				var3 += (double)var13[1][1];
+			x += var14 * offset;
+			z += var16 * offset;
+			if(var13[0][1] != 0 && MathHelper.floor_double(x) - var9 == var13[0][0] && MathHelper.floor_double(z) - var11 == var13[0][2]) {
+				y += (double)var13[0][1];
+			} else if(var13[1][1] != 0 && MathHelper.floor_double(x) - var9 == var13[1][0] && MathHelper.floor_double(z) - var11 == var13[1][2]) {
+				y += (double)var13[1][1];
 			}
 
-			return this.getPos(var1, var3, var5);
+			return this.getPos(x, y, z);
 		} else {
 			return null;
 		}
 	}
 
-	public Vec3D getPos(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
+	public Vec3D getPos(double x, double y, double z) {
+		int var7 = MathHelper.floor_double(x);
+		int var8 = MathHelper.floor_double(y);
+		int var9 = MathHelper.floor_double(z);
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var7, var8 - 1, var9)) {
 			--var8;
 		}
 
-		if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var7, var8, var9)) {
 			int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
-			var3 = (double)var8;
+			y = (double)var8;
 			if(var10 >= 2 && var10 <= 5) {
-				var3 = (double)(var8 + 1);
+				y = (double)(var8 + 1);
 			}
 
 			int[][] var11 = matrix[var10];
@@ -458,73 +484,75 @@
 			double var28 = (var22 - var16) * 2.0D;
 			double var30 = var24 - var18;
 			if(var26 == 0.0D) {
-				var1 = (double)var7 + 0.5D;
-				var12 = var5 - (double)var9;
+				x = (double)var7 + 0.5D;
+				var12 = z - (double)var9;
 			} else if(var30 == 0.0D) {
-				var5 = (double)var9 + 0.5D;
-				var12 = var1 - (double)var7;
+				z = (double)var9 + 0.5D;
+				var12 = x - (double)var7;
 			} else {
-				double var32 = var1 - var14;
-				double var34 = var5 - var18;
+				double var32 = x - var14;
+				double var34 = z - var18;
 				double var36 = (var32 * var26 + var34 * var30) * 2.0D;
 				var12 = var36;
 			}
 
-			var1 = var14 + var26 * var12;
-			var3 = var16 + var28 * var12;
-			var5 = var18 + var30 * var12;
+			x = var14 + var26 * var12;
+			y = var16 + var28 * var12;
+			z = var18 + var30 * var12;
 			if(var28 < 0.0D) {
-				++var3;
+				++y;
 			}
 
 			if(var28 > 0.0D) {
-				var3 += 0.5D;
+				y += 0.5D;
 			}
 
-			return Vec3D.createVector(var1, var3, var5);
+			return Vec3D.createVector(x, y, z);
 		} else {
 			return null;
 		}
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setInteger("Type", this.minecartType);
+	protected void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setInteger("Type", this.minecartType);
 		if(this.minecartType == 2) {
-			var1.setDouble("PushX", this.pushX);
-			var1.setDouble("PushZ", this.pushZ);
-			var1.setShort("Fuel", (short)this.fuel);
+			compoundTag.setDouble("PushX", this.pushX);
+			compoundTag.setDouble("PushZ", this.pushZ);
+			compoundTag.setShort("Fuel", (short)this.fuel);
+			compoundTag.setDouble("Boost", this.boost);
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = new NBTTagList();
+			NBTTagList nBTTagList2 = new NBTTagList();
 
 			for(int var3 = 0; var3 < this.cargoItems.length; ++var3) {
 				if(this.cargoItems[var3] != null) {
-					NBTTagCompound var4 = new NBTTagCompound();
-					var4.setByte("Slot", (byte)var3);
-					this.cargoItems[var3].writeToNBT(var4);
-					var2.setTag(var4);
+					NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+					nBTTagCompound4.setByte("Slot", (byte)var3);
+					this.cargoItems[var3].writeToNBT(nBTTagCompound4);
+					nBTTagList2.setTag(nBTTagCompound4);
 				}
 			}
 
-			var1.setTag("Items", var2);
+			compoundTag.setTag("Items", nBTTagList2);
 		}
 
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.minecartType = var1.getInteger("Type");
+	protected void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.minecartType = compoundTag.getInteger("Type");
 		if(this.minecartType == 2) {
-			this.pushX = var1.getDouble("PushX");
-			this.pushZ = var1.getDouble("PushZ");
-			this.fuel = var1.getShort("Fuel");
+			this.pushX = compoundTag.getDouble("PushX");
+			this.pushZ = compoundTag.getDouble("PushZ");
+			this.fuel = compoundTag.getShort("Fuel");
+			this.boost = compoundTag.getDouble("Boost");
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = var1.getTagList("Items");
+			NBTTagList nBTTagList2 = compoundTag.getTagList("Items");
 			this.cargoItems = new ItemStack[this.getSizeInventory()];
 
-			for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-				NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-				int var5 = var4.getByte("Slot") & 255;
+			for(int var3 = 0; var3 < nBTTagList2.tagCount(); ++var3) {
+				NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(var3);
+				int var5 = nBTTagCompound4.getByte("Slot") & 255;
 				if(var5 >= 0 && var5 < this.cargoItems.length) {
-					this.cargoItems[var5] = new ItemStack(var4);
+					this.cargoItems[var5] = new ItemStack(nBTTagCompound4);
 				}
 			}
 		}
@@ -535,16 +563,16 @@
 		return 0.0F;
 	}
 
-	public void applyEntityCollision(Entity var1) {
-		if(var1 != this.riddenByEntity) {
-			if(var1 instanceof EntityLiving && !(var1 instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && var1.ridingEntity == null) {
-				var1.mountEntity(this);
+	public void applyEntityCollision(Entity entity) {
+		if(entity != this.riddenByEntity) {
+			if(entity instanceof EntityLiving && !(entity instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && entity.ridingEntity == null) {
+				entity.mountEntity(this);
 			}
 
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
+			double var2 = entity.posX - this.posX;
+			double var4 = entity.posZ - this.posZ;
 			double var6 = var2 * var2 + var4 * var4;
-			if(var6 >= (double)1.0E-4F) {
+			if(var6 >= 9.999999747378752E-5D) {
 				var6 = (double)MathHelper.sqrt_double(var6);
 				var2 /= var6;
 				var4 /= var6;
@@ -561,19 +589,19 @@
 				var4 *= (double)(1.0F - this.entityCollisionReduction);
 				var2 *= 0.5D;
 				var4 *= 0.5D;
-				if(var1 instanceof EntityMinecart) {
-					double var10 = var1.motionX + this.motionX;
-					double var12 = var1.motionZ + this.motionZ;
-					if(((EntityMinecart)var1).minecartType == 2 && this.minecartType != 2) {
+				if(entity instanceof EntityMinecart) {
+					double var10 = entity.motionX + this.motionX;
+					double var12 = entity.motionZ + this.motionZ;
+					if(((EntityMinecart)entity).minecartType == 2 && this.minecartType != 2) {
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
-						this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
-						var1.motionX *= (double)0.7F;
-						var1.motionZ *= (double)0.7F;
-					} else if(((EntityMinecart)var1).minecartType != 2 && this.minecartType == 2) {
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
+						this.addVelocity(entity.motionX - var2, 0.0D, entity.motionZ - var4);
+						entity.motionX *= (double)0.7F;
+						entity.motionZ *= (double)0.7F;
+					} else if(((EntityMinecart)entity).minecartType != 2 && this.minecartType == 2) {
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
 						this.motionX *= (double)0.7F;
 						this.motionZ *= (double)0.7F;
 					} else {
@@ -582,13 +610,13 @@
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
 						this.addVelocity(var10 - var2, 0.0D, var12 - var4);
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(var10 + var2, 0.0D, var12 + var4);
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(var10 + var2, 0.0D, var12 + var4);
 					}
 				} else {
 					this.addVelocity(-var2, 0.0D, -var4);
-					var1.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
+					entity.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
 				}
 			}
 
@@ -599,21 +627,21 @@
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.cargoItems[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.cargoItems[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.cargoItems[var1] != null) {
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.cargoItems[slot] != null) {
 			ItemStack var3;
-			if(this.cargoItems[var1].stackSize <= var2) {
-				var3 = this.cargoItems[var1];
-				this.cargoItems[var1] = null;
+			if(this.cargoItems[slot].stackSize <= stackSize) {
+				var3 = this.cargoItems[slot];
+				this.cargoItems[slot] = null;
 				return var3;
 			} else {
-				var3 = this.cargoItems[var1].splitStack(var2);
-				if(this.cargoItems[var1].stackSize == 0) {
-					this.cargoItems[var1] = null;
+				var3 = this.cargoItems[slot].splitStack(stackSize);
+				if(this.cargoItems[slot].stackSize == 0) {
+					this.cargoItems[slot] = null;
 				}
 
 				return var3;
@@ -623,10 +651,10 @@
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.cargoItems[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.cargoItems[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 	}
@@ -642,34 +670,34 @@
 	public void onInventoryChanged() {
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		if(this.minecartType == 0) {
-			var1.mountEntity(this);
+			entityPlayer.mountEntity(this);
 		} else if(this.minecartType == 1) {
-			var1.displayGUIChest(this);
+			entityPlayer.displayGUIChest(this);
 		} else if(this.minecartType == 2) {
-			ItemStack var2 = var1.inventory.getCurrentItem();
+			ItemStack var2 = entityPlayer.inventory.getCurrentItem();
 			if(var2 != null && var2.itemID == Item.coal.shiftedIndex) {
 				if(--var2.stackSize == 0) {
-					var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+					entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem, (ItemStack)null);
 				}
 
 				this.fuel += 1200;
 			}
 
-			this.pushX = this.posX - var1.posX;
-			this.pushZ = this.posZ - var1.posZ;
+			this.pushX = this.posX - entityPlayer.posX;
+			this.pushZ = this.posZ - entityPlayer.posZ;
 		}
 
 		return true;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
-		this.minecartX = var1;
-		this.minecartY = var3;
-		this.minecartZ = var5;
-		this.minecartYaw = (double)var7;
-		this.minecartPitch = (double)var8;
-		this.turnProgress = var9;
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
+		this.minecartX = x;
+		this.minecartY = y;
+		this.minecartZ = z;
+		this.minecartYaw = (double)rotationYaw;
+		this.minecartPitch = (double)rotationPitch;
+		this.turnProgress = newPosRotationIncrements;
 	}
 }
--- net/minecraft/src/EntityPainting.java
+++ net/minecraft/src/EntityPainting.java
@@ -19,38 +19,38 @@
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityPainting(World var1, int var2, int var3, int var4, int var5) {
-		this(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		ArrayList var6 = new ArrayList();
-		EnumArt[] var7 = EnumArt.values();
-		int var8 = var7.length;
+	public EntityPainting(World worldObj, int xPosition, int yPosition, int zPosition, int direction) {
+		this(worldObj);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		ArrayList arrayList6 = new ArrayList();
+		EnumArt[] enumArt7 = EnumArt.values();
+		int var8 = enumArt7.length;
 
 		for(int var9 = 0; var9 < var8; ++var9) {
-			EnumArt var10 = var7[var9];
-			this.art = var10;
-			this.setDirection(var5);
+			EnumArt enumArt10 = enumArt7[var9];
+			this.art = enumArt10;
+			this.setDirection(direction);
 			if(this.onValidSurface()) {
-				var6.add(var10);
+				arrayList6.add(enumArt10);
 			}
 		}
 
-		if(var6.size() > 0) {
-			this.art = (EnumArt)var6.get(this.rand.nextInt(var6.size()));
+		if(arrayList6.size() > 0) {
+			this.art = (EnumArt)arrayList6.get(this.rand.nextInt(arrayList6.size()));
 		}
 
-		this.setDirection(var5);
+		this.setDirection(direction);
 	}
 
-	public void setDirection(int var1) {
-		this.direction = var1;
-		this.prevRotationYaw = this.rotationYaw = (float)(var1 * 90);
+	public void setDirection(int direction) {
+		this.direction = direction;
+		this.prevRotationYaw = this.rotationYaw = (float)(direction * 90);
 		float var2 = (float)this.art.sizeX;
 		float var3 = (float)this.art.sizeY;
 		float var4 = (float)this.art.sizeX;
-		if(var1 != 0 && var1 != 2) {
+		if(direction != 0 && direction != 2) {
 			var2 = 0.5F;
 		} else {
 			var4 = 0.5F;
@@ -62,47 +62,47 @@
 		float var5 = (float)this.xPosition + 0.5F;
 		float var6 = (float)this.yPosition + 0.5F;
 		float var7 = (float)this.zPosition + 0.5F;
-		float var8 = 9.0F / 16.0F;
-		if(var1 == 0) {
+		float var8 = 0.5625F;
+		if(direction == 0) {
 			var7 -= var8;
 		}
 
-		if(var1 == 1) {
+		if(direction == 1) {
 			var5 -= var8;
 		}
 
-		if(var1 == 2) {
+		if(direction == 2) {
 			var7 += var8;
 		}
 
-		if(var1 == 3) {
+		if(direction == 3) {
 			var5 += var8;
 		}
 
-		if(var1 == 0) {
+		if(direction == 0) {
 			var5 -= this.getArtSize(this.art.sizeX);
 		}
 
-		if(var1 == 1) {
+		if(direction == 1) {
 			var7 += this.getArtSize(this.art.sizeX);
 		}
 
-		if(var1 == 2) {
+		if(direction == 2) {
 			var5 += this.getArtSize(this.art.sizeX);
 		}
 
-		if(var1 == 3) {
+		if(direction == 3) {
 			var7 -= this.getArtSize(this.art.sizeX);
 		}
 
 		var6 += this.getArtSize(this.art.sizeY);
 		this.setPosition((double)var5, (double)var6, (double)var7);
-		float var9 = -(0.1F / 16.0F);
+		float var9 = -0.00625F;
 		this.boundingBox.setBounds((double)(var5 - var2 - var9), (double)(var6 - var3 - var9), (double)(var7 - var4 - var9), (double)(var5 + var2 + var9), (double)(var6 + var3 + var9), (double)(var7 + var4 + var9));
 	}
 
-	private float getArtSize(int var1) {
-		return var1 == 32 ? 0.5F : (var1 == 64 ? 0.5F : 0.0F);
+	private float getArtSize(int pixelSize) {
+		return pixelSize == 32 ? 0.5F : (pixelSize == 64 ? 0.5F : 0.0F);
 	}
 
 	public void onUpdate() {
@@ -144,23 +144,23 @@
 			int var7;
 			for(int var6 = 0; var6 < var1; ++var6) {
 				for(var7 = 0; var7 < var2; ++var7) {
-					Material var8;
+					Material material8;
 					if(this.direction != 0 && this.direction != 2) {
-						var8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
+						material8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
 					} else {
-						var8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
+						material8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
 					}
 
-					if(!var8.isSolid()) {
+					if(!material8.isSolid()) {
 						return false;
 					}
 				}
 			}
 
-			List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
+			List list9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
 
-			for(var7 = 0; var7 < var9.size(); ++var7) {
-				if(var9.get(var7) instanceof EntityPainting) {
+			for(var7 = 0; var7 < list9.size(); ++var7) {
+				if(list9.get(var7) instanceof EntityPainting) {
 					return false;
 				}
 			}
@@ -173,33 +173,33 @@
 		return true;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.setEntityDead();
 		this.worldObj.spawnEntityInWorld(new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.painting)));
 		return true;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Dir", (byte)this.direction);
-		var1.setString("Motive", this.art.title);
-		var1.setInteger("TileX", this.xPosition);
-		var1.setInteger("TileY", this.yPosition);
-		var1.setInteger("TileZ", this.zPosition);
+	public void writeEntityToNBT(NBTTagCompound compoundTag) {
+		compoundTag.setByte("Dir", (byte)this.direction);
+		compoundTag.setString("Motive", this.art.title);
+		compoundTag.setInteger("TileX", this.xPosition);
+		compoundTag.setInteger("TileY", this.yPosition);
+		compoundTag.setInteger("TileZ", this.zPosition);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.direction = var1.getByte("Dir");
-		this.xPosition = var1.getInteger("TileX");
-		this.yPosition = var1.getInteger("TileY");
-		this.zPosition = var1.getInteger("TileZ");
-		String var2 = var1.getString("Motive");
-		EnumArt[] var3 = EnumArt.values();
-		int var4 = var3.length;
+	public void readEntityFromNBT(NBTTagCompound compoundTag) {
+		this.direction = compoundTag.getByte("Dir");
+		this.xPosition = compoundTag.getInteger("TileX");
+		this.yPosition = compoundTag.getInteger("TileY");
+		this.zPosition = compoundTag.getInteger("TileZ");
+		String var2 = compoundTag.getString("Motive");
+		EnumArt[] enumArt3 = EnumArt.values();
+		int var4 = enumArt3.length;
 
 		for(int var5 = 0; var5 < var4; ++var5) {
-			EnumArt var6 = var3[var5];
-			if(var6.title.equals(var2)) {
-				this.art = var6;
+			EnumArt enumArt6 = enumArt3[var5];
+			if(enumArt6.title.equals(var2)) {
+				this.art = enumArt6;
 			}
 		}
 
--- net/minecraft/src/EntitySlimeFX.java
+++ net/minecraft/src/EntitySlimeFX.java
@@ -13,20 +13,20 @@
 		return 2;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
 		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
+		float var9 = var8 + 0.015609375F;
 		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
+		float var11 = var10 + 0.015609375F;
 		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float var16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 - zOffset * var12 - zOffset2 * var12), (double)var8, (double)var11);
+		tessellator.addVertexWithUV((double)(var13 - xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 - zOffset * var12 + zOffset2 * var12), (double)var8, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 + xOffset2 * var12), (double)(var14 + yOffset * var12), (double)(var15 + zOffset * var12 + zOffset2 * var12), (double)var9, (double)var10);
+		tessellator.addVertexWithUV((double)(var13 + xOffset * var12 - xOffset2 * var12), (double)(var14 - yOffset * var12), (double)(var15 + zOffset * var12 - zOffset2 * var12), (double)var9, (double)var11);
 	}
 }
--- net/minecraft/src/NBTTagEnd.java
+++ net/minecraft/src/NBTTagEnd.java
@@ -5,10 +5,10 @@
 import java.io.IOException;
 
 public class NBTTagEnd extends NBTBase {
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 	}
 
 	public byte getType() {
--- net/minecraft/src/EntityTrackerEntry.java
+++ net/minecraft/src/EntityTrackerEntry.java
@@ -41,10 +41,10 @@
 		return this.trackedEntity.entityID;
 	}
 
-	public void updatePlayerList(List var1) {
+	public void updatePlayerList(List list1) {
 		this.playerEntitiesUpdated = false;
 		if(!this.firstUpdateDone || this.trackedEntity.getDistanceSq(this.lastTrackedEntityPosX, this.lastTrackedEntityPosY, this.lastTrackedEntityPosZ) > 16.0D) {
-			this.updatePlayerEntities(var1);
+			this.updatePlayerEntities(list1);
 			this.lastTrackedEntityPosX = this.trackedEntity.posX;
 			this.lastTrackedEntityPosY = this.trackedEntity.posY;
 			this.lastTrackedEntityPosZ = this.trackedEntity.posZ;
@@ -91,14 +91,20 @@
 
 	}
 
-	public void sendPacketToTrackedPlayers(Packet var1) {
-		Iterator var2 = this.trackedPlayers.iterator();
-
-		while(var2.hasNext()) {
-			EntityPlayerMP var3 = (EntityPlayerMP)var2.next();
-			var3.playerNetServerHandler.sendPacket(var1);
-		}
-
+	public void sendPacketToTrackedPlayers(Packet packet1) {
+		Iterator iterator2 = this.trackedPlayers.iterator();
+
+		while(iterator2.hasNext()) {
+			EntityPlayerMP var3 = (EntityPlayerMP)iterator2.next();
+			var3.playerNetServerHandler.sendPacket(packet1);
+		}
+	}
+
+	public void sendPacketToTrackedPlayersAndTrackedEntity(Packet packet1) {
+		this.sendPacketToTrackedPlayers(packet1);
+		if(this.trackedEntity instanceof EntityPlayerMP) {
+			((EntityPlayerMP)this.trackedEntity).playerNetServerHandler.sendPacket(packet1);
+		}
 	}
 
 	public void removeFromTrackedPlayers() {
@@ -110,7 +116,7 @@
 			double var2 = var1.posX - (double)(this.encodedPosX / 32);
 			double var4 = var1.posZ - (double)(this.encodedPosZ / 32);
 			if(var2 >= (double)(-this.trackingDistanceThreshold) && var2 <= (double)this.trackingDistanceThreshold && var4 >= (double)(-this.trackingDistanceThreshold) && var4 <= (double)this.trackingDistanceThreshold) {
-				if(!this.trackedPlayers.contains(var1)) {
+				if(!var1.dead && !this.trackedPlayers.contains(var1)) {
 					this.trackedPlayers.add(var1);
 					var1.playerNetServerHandler.sendPacket(this.getSpawnPacket());
 				}
@@ -122,49 +128,56 @@
 		}
 	}
 
-	public void updatePlayerEntities(List var1) {
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.updatePlayerEntity((EntityPlayerMP)var1.get(var2));
+	public void updatePlayerEntities(List list1) {
+		for(int var2 = 0; var2 < list1.size(); ++var2) {
+			this.updatePlayerEntity((EntityPlayerMP)list1.get(var2));
 		}
 
 	}
 
 	private Packet getSpawnPacket() {
 		if(this.trackedEntity instanceof EntityItem) {
-			EntityItem var3 = (EntityItem)this.trackedEntity;
-			Packet21PickupSpawn var2 = new Packet21PickupSpawn(var3);
-			var3.posX = (double)var2.xPosition / 32.0D;
-			var3.posY = (double)var2.yPosition / 32.0D;
-			var3.posZ = (double)var2.zPosition / 32.0D;
-			var3.motionX = (double)var2.rotation / 128.0D;
-			var3.motionY = (double)var2.pitch / 128.0D;
-			var3.motionZ = (double)var2.roll / 128.0D;
-			return var2;
+			EntityItem entityItem3 = (EntityItem)this.trackedEntity;
+			Packet21PickupSpawn packet21PickupSpawn2 = new Packet21PickupSpawn(entityItem3);
+			entityItem3.posX = (double)packet21PickupSpawn2.xPosition / 32.0D;
+			entityItem3.posY = (double)packet21PickupSpawn2.yPosition / 32.0D;
+			entityItem3.posZ = (double)packet21PickupSpawn2.zPosition / 32.0D;
+			entityItem3.motionX = (double)packet21PickupSpawn2.rotation / 128.0D;
+			entityItem3.motionY = (double)packet21PickupSpawn2.pitch / 128.0D;
+			entityItem3.motionZ = (double)packet21PickupSpawn2.roll / 128.0D;
+			return packet21PickupSpawn2;
 		} else if(this.trackedEntity instanceof EntityPlayerMP) {
 			return new Packet20NamedEntitySpawn((EntityPlayer)this.trackedEntity);
 		} else {
 			if(this.trackedEntity instanceof EntityMinecart) {
-				EntityMinecart var1 = (EntityMinecart)this.trackedEntity;
-				if(var1.minecartType == 0) {
+				EntityMinecart entityMinecart1 = (EntityMinecart)this.trackedEntity;
+				if(entityMinecart1.minecartType == 0) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 10);
 				}
 
-				if(var1.minecartType == 1) {
+				if(entityMinecart1.minecartType == 1) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 11);
 				}
 
-				if(var1.minecartType == 2) {
+				if(entityMinecart1.minecartType == 2) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 12);
 				}
 			}
 
 			if(this.trackedEntity instanceof EntityBoat) {
 				return new Packet23VehicleSpawn(this.trackedEntity, 1);
-			} else if(this.trackedEntity instanceof IAnimals) {
+			} else if(this.trackedEntity instanceof IAnimal) {
 				return new Packet24MobSpawn((EntityLiving)this.trackedEntity);
 			} else {
 				throw new IllegalArgumentException("Don\'t know how to add " + this.trackedEntity.getClass() + "!");
 			}
+		}
+	}
+
+	public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
+		if(this.trackedPlayers.contains(var1)) {
+			this.trackedPlayers.remove(var1);
+			var1.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(this.trackedEntity.entityID));
 		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldType.java
@@ -1,0 +1,35 @@
+package io.github.bluestaggo.mcdiverge;
+
+public enum WorldType {
+	NORMAL,
+	CLASSIC,
+	WINTER(0x88e7ff, 0xc0fffc, 0xffffff),
+	ARID(0xfff988, 0xfff8bf, 0xffffff),
+	TROPICAL(0x80ffdb, 0xc2fff9, 0xffffff);
+
+	private final long skyColor;
+	private final long fogColor;
+	private final long cloudColor;
+
+	WorldType() {
+		this(8961023L, 12638463L, 16777215L);
+	}
+
+	WorldType(long skyColor, long fogColor, long cloudColor) {
+		this.skyColor = skyColor;
+		this.fogColor = fogColor;
+		this.cloudColor = cloudColor;
+	}
+
+	public long getSkyColor() {
+		return skyColor;
+	}
+
+	public long getFogColor() {
+		return fogColor;
+	}
+
+	public long getCloudColor() {
+		return cloudColor;
+	}
+}
--- net/minecraft/src/ImageBuffer.java
+++ net/minecraft/src/ImageBuffer.java
@@ -3,5 +3,5 @@
 import java.awt.image.BufferedImage;
 
 public interface ImageBuffer {
-	BufferedImage parseUserSkin(BufferedImage var1);
+	BufferedImage parseUserSkin(BufferedImage bufferedImage1);
 }
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -7,11 +7,11 @@
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
 	}
 
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return Block.opaqueCubeLookup[var1];
+	protected boolean canThisPlantGrowOnThisBlockID(int blockID) {
+		return Block.opaqueCubeLookup[blockID];
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockLightValue(var2, var3, var4) <= 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return world.getBlockLightValue(x, y, z) <= 13 && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
 	}
 }
--- net/minecraft/src/BlockFarmland.java
+++ net/minecraft/src/BlockFarmland.java
@@ -3,16 +3,16 @@
 import java.util.Random;
 
 public class BlockFarmland extends Block {
-	protected BlockFarmland(int var1) {
-		super(var1, Material.grass);
+	protected BlockFarmland(int blockID) {
+		super(blockID, Material.grass);
 		this.blockIndexInTexture = 87;
 		this.setTickOnLoad(true);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 15.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
 		this.setLightOpacity(255);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)(var2 + 0), (double)(var3 + 0), (double)(var4 + 0), (double)(var2 + 1), (double)(var3 + 1), (double)(var4 + 1));
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)(x + 0), (double)(y + 0), (double)(z + 0), (double)(x + 1), (double)(y + 1), (double)(z + 1));
 	}
 
 	public boolean isOpaqueCube() {
@@ -23,39 +23,39 @@
 		return false;
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 && var2 > 0 ? this.blockIndexInTexture - 1 : (var1 == 1 ? this.blockIndexInTexture : 2);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return side == 1 && metadata > 0 ? this.blockIndexInTexture - 1 : (side == 1 ? this.blockIndexInTexture : 2);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(5) == 0) {
-			if(this.isWaterNearby(var1, var2, var3, var4)) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(rand.nextInt(5) == 0) {
+			if(this.isWaterNearby(worldObj, x, y, z)) {
+				worldObj.setBlockMetadataWithNotify(x, y, z, 7);
 			} else {
-				int var6 = var1.getBlockMetadata(var2, var3, var4);
+				int var6 = worldObj.getBlockMetadata(x, y, z);
 				if(var6 > 0) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 - 1);
-				} else if(!this.isCropsNearby(var1, var2, var3, var4)) {
-					var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+					worldObj.setBlockMetadataWithNotify(x, y, z, var6 - 1);
+				} else if(!this.isCropsNearby(worldObj, x, y, z)) {
+					worldObj.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 				}
 			}
 		}
 
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.rand.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onEntityWalking(World worldObj, int x, int y, int z, Entity entity) {
+		if(worldObj.rand.nextInt(4) == 0) {
+			worldObj.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	private boolean isCropsNearby(World var1, int var2, int var3, int var4) {
+	private boolean isCropsNearby(World worldObj, int x, int y, int z) {
 		byte var5 = 0;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var4 - var5; var7 <= var4 + var5; ++var7) {
-				if(var1.getBlockId(var6, var3 + 1, var7) == Block.crops.blockID) {
+		for(int var6 = x - var5; var6 <= x + var5; ++var6) {
+			for(int var7 = z - var5; var7 <= z + var5; ++var7) {
+				if(worldObj.getBlockId(var6, y + 1, var7) == Block.crops.blockID) {
 					return true;
 				}
 			}
@@ -64,11 +64,11 @@
 		return false;
 	}
 
-	private boolean isWaterNearby(World var1, int var2, int var3, int var4) {
-		for(int var5 = var2 - 4; var5 <= var2 + 4; ++var5) {
-			for(int var6 = var3; var6 <= var3 + 1; ++var6) {
-				for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
-					if(var1.getBlockMaterial(var5, var6, var7) == Material.water) {
+	private boolean isWaterNearby(World worldObj, int x, int y, int z) {
+		for(int var5 = x - 4; var5 <= x + 4; ++var5) {
+			for(int var6 = y; var6 <= y + 1; ++var6) {
+				for(int var7 = z - 4; var7 <= z + 4; ++var7) {
+					if(worldObj.getBlockMaterial(var5, var6, var7) == Material.water) {
 						return true;
 					}
 				}
@@ -78,16 +78,16 @@
 		return false;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-		if(var6.isSolid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
+		Material material6 = worldObj.getBlockMaterial(x, y + 1, z);
+		if(material6.isSolid()) {
+			worldObj.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int metadata, Random rand) {
+		return Block.dirt.idDropped(0, rand);
 	}
 }
--- net/minecraft/src/RenderSorter.java
+++ net/minecraft/src/RenderSorter.java
@@ -9,10 +9,14 @@
 		this.baseEntity = var1;
 	}
 
-	public int doCompare(WorldRenderer var1, WorldRenderer var2) {
-		boolean var3 = var1.isInFrustum;
-		boolean var4 = var2.isInFrustum;
-		return var3 && !var4 ? 1 : (var4 && !var3 ? -1 : (var1.distanceToEntitySquared(this.baseEntity) < var2.distanceToEntitySquared(this.baseEntity) ? 1 : -1));
+	public int doCompare(WorldRenderer worldRenderer1, WorldRenderer worldRenderer2) {
+		boolean var3 = worldRenderer1.isInFrustum;
+		boolean var4 = worldRenderer2.isInFrustum;
+		return var3 && !var4
+			? 1
+			: (var4 && !var3
+				? -1
+				: (Float.compare(worldRenderer2.distanceToEntitySquared(this.baseEntity), worldRenderer1.distanceToEntitySquared(this.baseEntity))));
 	}
 
 	public int compare(Object var1, Object var2) {
--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -11,32 +11,14 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.ConsoleLogManager;
-import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.EntityTracker;
-import net.minecraft.src.ICommandListener;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.IUpdatePlayerListBox;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.NetworkListenThread;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.Packet4UpdateTime;
-import net.minecraft.src.PropertyManager;
-import net.minecraft.src.ServerCommand;
-import net.minecraft.src.ServerConfigurationManager;
-import net.minecraft.src.ServerGUI;
-import net.minecraft.src.ThreadCommandReader;
-import net.minecraft.src.ThreadServerApplication;
-import net.minecraft.src.ThreadSleepForeverServer;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.WorldManager;
-import net.minecraft.src.WorldServer;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.*;
 
 public class MinecraftServer implements ICommandListener, Runnable {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	public static HashMap playerList = new HashMap();
+	private static MinecraftServer instance;
 	public NetworkListenThread networkServer;
 	public PropertyManager propertyManagerObj;
 	public WorldServer worldMngr;
@@ -52,15 +34,20 @@
 	public boolean onlineMode;
 
 	public MinecraftServer() {
+		instance = this;
 		new ThreadSleepForeverServer(this);
 	}
 
+	public static MinecraftServer getInstance() {
+		return instance;
+	}
+
 	private boolean startServer() throws IOException {
-		ThreadCommandReader var1 = new ThreadCommandReader(this);
-		var1.setDaemon(true);
-		var1.start();
+		ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
+		threadCommandReader1.setDaemon(true);
+		threadCommandReader1.start();
 		ConsoleLogManager.init();
-		logger.info("Starting minecraft server version 0.2.1");
+		logger.info("Starting Minecraft Diverge server version 0.2.0");
 		if(Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
 			logger.warning("**** NOT ENOUGH RAM!");
 			logger.warning("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
@@ -70,19 +57,19 @@
 		this.propertyManagerObj = new PropertyManager(new File("server.properties"));
 		String var2 = this.propertyManagerObj.getStringProperty("server-ip", "");
 		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
-		InetAddress var3 = null;
+		InetAddress inetAddress3 = null;
 		if(var2.length() > 0) {
-			var3 = InetAddress.getByName(var2);
+			inetAddress3 = InetAddress.getByName(var2);
 		}
 
 		int var4 = this.propertyManagerObj.getIntProperty("server-port", 25565);
 		logger.info("Starting Minecraft server on " + (var2.length() == 0 ? "*" : var2) + ":" + var4);
 
 		try {
-			this.networkServer = new NetworkListenThread(this, var3, var4);
-		} catch (IOException var6) {
+			this.networkServer = new NetworkListenThread(this, inetAddress3, var4);
+		} catch (IOException iOException6) {
 			logger.warning("**** FAILED TO BIND TO PORT!");
-			logger.log(Level.WARNING, "The exception was: " + var6.toString());
+			logger.log(Level.WARNING, "The exception was: " + iOException6.toString());
 			logger.warning("Perhaps a server is already running on that port?");
 			return false;
 		}
@@ -103,9 +90,9 @@
 		return true;
 	}
 
-	private void initWorld(String var1) {
+	private void initWorld(String worldName) {
 		logger.info("Preparing start region");
-		this.worldMngr = new WorldServer(new File("."), var1, this.propertyManagerObj.getBooleanProperty("monsters", false));
+		this.worldMngr = new WorldServer(this, new File("."), worldName, this.propertyManagerObj.getBooleanProperty("monsters", true), this.propertyManagerObj.getCreateWorldInfo());
 		this.worldMngr.addWorldAccess(new WorldManager(this));
 		this.worldMngr.difficultySetting = 1;
 		this.configManager.setPlayerManager(this.worldMngr);
@@ -126,10 +113,10 @@
 		this.clearCurrentTask();
 	}
 
-	private void outputPercentRemaining(String var1, int var2) {
-		this.currentTask = var1;
-		this.percentDone = var2;
-		System.out.println(var1 + ": " + var2 + "%");
+	private void outputPercentRemaining(String currentTask, int percent) {
+		this.currentTask = currentTask;
+		this.percentDone = percent;
+		System.out.println(currentTask + ": " + percent + "%");
 	}
 
 	private void clearCurrentTask() {
@@ -168,7 +155,7 @@
 					long var5 = System.currentTimeMillis();
 					long var7 = var5 - var1;
 					if(var7 > 2000L) {
-						logger.warning("Can\'t keep up! Did the system time change, or is the server overloaded?");
+						logger.warning("Can't keep up! Did the system time change, or is the server overloaded?");
 						var7 = 2000L;
 					}
 
@@ -193,22 +180,22 @@
 
 					try {
 						Thread.sleep(10L);
-					} catch (InterruptedException var15) {
-						var15.printStackTrace();
+					} catch (InterruptedException interruptedException15) {
+						interruptedException15.printStackTrace();
 					}
 				}
 			}
-		} catch (Exception var16) {
-			var16.printStackTrace();
-			logger.log(Level.SEVERE, "Unexpected exception", var16);
+		} catch (Exception exception16) {
+			exception16.printStackTrace();
+			logger.log(Level.SEVERE, "Unexpected exception", exception16);
 
 			while(this.serverRunning) {
 				this.commandLineParser();
 
 				try {
 					Thread.sleep(10L);
-				} catch (InterruptedException var14) {
-					var14.printStackTrace();
+				} catch (InterruptedException interruptedException14) {
+					interruptedException14.printStackTrace();
 				}
 			}
 		} finally {
@@ -220,22 +207,23 @@
 	}
 
 	private void doTick() throws IOException {
-		ArrayList var1 = new ArrayList();
-		Iterator var2 = playerList.keySet().iterator();
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = playerList.keySet().iterator();
 
-		while(var2.hasNext()) {
-			String var3 = (String)var2.next();
+		while(iterator2.hasNext()) {
+			String var3 = (String)iterator2.next();
 			int var4 = ((Integer)playerList.get(var3)).intValue();
 			if(var4 > 0) {
-				playerList.put(var3, Integer.valueOf(var4 - 1));
+				playerList.put(var3, var4 - 1);
 			} else {
-				var1.add(var3);
+				arrayList1.add(var3);
 			}
 		}
 
 		int var6;
-		for(var6 = 0; var6 < var1.size(); ++var6) {
-			playerList.remove(var1.get(var6));
+		for(var6 = 0; var6 < arrayList1.size(); ++var6) {
+
+			playerList.remove(arrayList1.get(var6));
 		}
 
 		AxisAlignedBB.clearBoundingBoxPool();
@@ -261,14 +249,13 @@
 
 		try {
 			this.commandLineParser();
-		} catch (Exception var5) {
-			logger.log(Level.WARNING, "Unexpected exception while parsing console command", var5);
+		} catch (Exception exception5) {
+			logger.log(Level.WARNING, "Unexpected exception while parsing console command", exception5);
 		}
-
 	}
 
-	public void addCommand(String var1, ICommandListener var2) {
-		this.commands.add(new ServerCommand(var1, var2));
+	public void addCommand(String command, ICommandListener commandListener) {
+		this.commands.add(new ServerCommand(command, commandListener));
 	}
 
 	public void commandLineParser() {
@@ -342,7 +329,7 @@
 								var12.playerNetServerHandler.kickPlayer("Kicked by admin");
 								this.print(var4, "Kicking " + var12.username);
 							} else {
-								var3.addHelpCommandMessage("Can\'t find user " + var11 + ". No kick.");
+								var3.addHelpCommandMessage("Can't find user " + var11 + ". No kick.");
 							}
 						} else {
 							String[] var5;
@@ -353,9 +340,9 @@
 									var12 = this.configManager.getPlayerEntity(var5[1]);
 									var7 = this.configManager.getPlayerEntity(var5[2]);
 									if(var12 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[1] + ". No tp.");
+										var3.addHelpCommandMessage("Can't find user " + var5[1] + ". No tp.");
 									} else if(var7 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[2] + ". No tp.");
+										var3.addHelpCommandMessage("Can't find user " + var5[2] + ". No tp.");
 									} else {
 										var12.playerNetServerHandler.teleportTo(var7.posX, var7.posY, var7.posZ, var7.rotationYaw, var7.rotationPitch);
 										this.print(var4, "Teleporting " + var5[1] + " to " + var5[2] + ".");
@@ -391,13 +378,13 @@
 
 											var7.dropPlayerItem(new ItemStack(var8, var9));
 										} else {
-											var3.addHelpCommandMessage("There\'s no item with id " + var8);
+											var3.addHelpCommandMessage("There's no item with id " + var8);
 										}
-									} catch (NumberFormatException var10) {
-										var3.addHelpCommandMessage("There\'s no item with id " + var5[2]);
+									} catch (NumberFormatException numberFormatException10) {
+										var3.addHelpCommandMessage("There's no item with id " + var5[2]);
 									}
 								} else {
-									var3.addHelpCommandMessage("Can\'t find user " + var6);
+									var3.addHelpCommandMessage("Can't find user " + var6);
 								}
 							} else if(var2.toLowerCase().startsWith("say ")) {
 								var2 = var2.substring(var2.indexOf(" ")).trim();
@@ -426,23 +413,23 @@
 				var3.addHelpCommandMessage("To run the server without a gui, start it like this:");
 				var3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
 				var3.addHelpCommandMessage("Console commands:");
-				var3.addHelpCommandMessage("   help  or  ?               shows this message");
-				var3.addHelpCommandMessage("   kick <player>             removes a player from the server");
-				var3.addHelpCommandMessage("   ban <player>              bans a player from the server");
-				var3.addHelpCommandMessage("   pardon <player>           pardons a banned player so that they can connect again");
-				var3.addHelpCommandMessage("   ban-ip <ip>               bans an IP address from the server");
-				var3.addHelpCommandMessage("   pardon-ip <ip>            pardons a banned IP address so that they can connect again");
-				var3.addHelpCommandMessage("   op <player>               turns a player into an op");
-				var3.addHelpCommandMessage("   deop <player>             removes op status from a player");
-				var3.addHelpCommandMessage("   tp <player1> <player2>    moves one player to the same location as another player");
+				var3.addHelpCommandMessage("   help  or  ?			   shows this message");
+				var3.addHelpCommandMessage("   kick <player>			 removes a player from the server");
+				var3.addHelpCommandMessage("   ban <player>			  bans a player from the server");
+				var3.addHelpCommandMessage("   pardon <player>		   pardons a banned player so that they can connect again");
+				var3.addHelpCommandMessage("   ban-ip <ip>			   bans an IP address from the server");
+				var3.addHelpCommandMessage("   pardon-ip <ip>			pardons a banned IP address so that they can connect again");
+				var3.addHelpCommandMessage("   op <player>			   turns a player into an op");
+				var3.addHelpCommandMessage("   deop <player>			 removes op status from a player");
+				var3.addHelpCommandMessage("   tp <player1> <player2>	moves one player to the same location as another player");
 				var3.addHelpCommandMessage("   give <player> <id> [num]  gives a player a resource");
 				var3.addHelpCommandMessage("   tell <player> <message>   sends a private message to a player");
-				var3.addHelpCommandMessage("   stop                      gracefully stops the server");
-				var3.addHelpCommandMessage("   save-all                  forces a server-wide level save");
-				var3.addHelpCommandMessage("   save-off                  disables terrain saving (useful for backup scripts)");
-				var3.addHelpCommandMessage("   save-on                   re-enables terrain saving");
-				var3.addHelpCommandMessage("   list                      lists all currently connected players");
-				var3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+				var3.addHelpCommandMessage("   stop					  gracefully stops the server");
+				var3.addHelpCommandMessage("   save-all				  forces a server-wide level save");
+				var3.addHelpCommandMessage("   save-off				  disables terrain saving (useful for backup scripts)");
+				var3.addHelpCommandMessage("   save-on				   re-enables terrain saving");
+				var3.addHelpCommandMessage("   list					  lists all currently connected players");
+				var3.addHelpCommandMessage("   say <message>			 broadcasts a message to all players");
 			}
 		}
 
@@ -454,45 +441,47 @@
 		logger.info(var3);
 	}
 
-	private int parseInt(String var1, int var2) {
+	private int parseInt(String string, int defaultValue) {
 		try {
-			return Integer.parseInt(var1);
-		} catch (NumberFormatException var4) {
-			return var2;
+			return Integer.parseInt(string);
+		} catch (NumberFormatException numberFormatException4) {
+			return defaultValue;
 		}
 	}
 
-	public void addToOnlinePlayerList(IUpdatePlayerListBox var1) {
-		this.playersOnline.add(var1);
+	public void addToOnlinePlayerList(IUpdatePlayerListBox playerListBox) {
+		this.playersOnline.add(playerListBox);
 	}
 
-	public static void main(String[] var0) {
+	public static void main(String[] args) {
 		try {
 			MinecraftServer var1 = new MinecraftServer();
-			if(!GraphicsEnvironment.isHeadless() && (var0.length <= 0 || !var0[0].equals("nogui"))) {
+			if(!GraphicsEnvironment.isHeadless() && (args.length <= 0 || !args[0].equals("nogui"))) {
 				ServerGUI.initGui(var1);
 			}
 
 			(new ThreadServerApplication("Server thread", var1)).start();
-		} catch (Exception var2) {
-			logger.log(Level.SEVERE, "Failed to start the minecraft server", var2);
+		} catch (Exception exception2) {
+			logger.log(Level.SEVERE, "Failed to start the minecraft server", exception2);
 		}
 
 	}
 
-	public File getFile(String var1) {
-		return new File(var1);
+	public File getFile(String fileName) {
+		return new File(fileName);
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		logger.info(var1);
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		logger.info(helpCommandMessage);
 	}
 
 	public String getUsername() {
 		return "CONSOLE";
 	}
 
-	public static boolean isServerRunning(MinecraftServer var0) {
-		return var0.serverRunning;
+	public static boolean isServerRunning(MinecraftServer mcServer) {
+		return mcServer.serverRunning;
 	}
+
+
 }
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -5,47 +5,70 @@
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.PrintWriter;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.Display;
 
 public class GameSettings {
-	private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
-	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+	private static final String[] RENDER_DISTANCES = new String[] { "FAR", "NORMAL", "SHORT", "TINY" };
+	private static final String[] DIFFICULTY_LEVELS = new String[] { "Peaceful", "Easy", "Normal", "Hard" };
 	public float musicVolume = 1.0F;
 	public float soundVolume = 1.0F;
+	public float musicDelay = 1.0F;
 	public float mouseSensitivity = 0.5F;
+	public float brightness = 0.5F;
+	public float fov = 70.0F;
+	public float fovEffects = 1.0F;
 	public boolean invertMouse = false;
 	public int renderDistance = 0;
 	public boolean viewBobbing = true;
 	public boolean anaglyph = false;
 	public boolean limitFramerate = false;
 	public boolean fancyGraphics = true;
-	public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
-	public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
-	public KeyBinding keyBindBack = new KeyBinding("Back", 31);
-	public KeyBinding keyBindRight = new KeyBinding("Right", 32);
-	public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
-	public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
-	public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
-	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-	public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public boolean caveSounds = false;
+	public boolean creativeDebug = false;
+	public boolean darkMode = false;
+	public KeyBinding keyBindForward = new KeyBinding("Forward", Keyboard.KEY_W);
+	public KeyBinding keyBindLeft = new KeyBinding("Left", Keyboard.KEY_A);
+	public KeyBinding keyBindBack = new KeyBinding("Back", Keyboard.KEY_S);
+	public KeyBinding keyBindRight = new KeyBinding("Right", Keyboard.KEY_D);
+	public KeyBinding keyBindJump = new KeyBinding("Jump", Keyboard.KEY_SPACE);
+	public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_E);
+	public KeyBinding keyBindDrop = new KeyBinding("Drop", Keyboard.KEY_Q);
+	public KeyBinding keyBindChat = new KeyBinding("Chat", Keyboard.KEY_T);
+	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", Keyboard.KEY_F);
+	public KeyBinding keyBindSneak = new KeyBinding("Sneak", Keyboard.KEY_LSHIFT);
+	public KeyBinding keyBindRun = new KeyBinding("Run", Keyboard.KEY_LCONTROL);
+	public KeyBinding keyBindCreative = new KeyBinding("Creative", Keyboard.KEY_C);
+	public KeyBinding keyBindRecipeGuide = new KeyBinding("Recipe guide", Keyboard.KEY_R);
+	public KeyBinding keyBindHideHud = new KeyBinding("Hide HUD", Keyboard.KEY_F1);
+	public KeyBinding keyBindZoom = new KeyBinding("Zoom", Keyboard.KEY_GRAVE);
+	public KeyBinding[] keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack,
+			this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory,
+			this.keyBindChat, this.keyBindToggleFog, this.keyBindRun, this.keyBindCreative, this.keyBindRecipeGuide,
+			this.keyBindHideHud, this.keyBindZoom };
 	protected Minecraft mc;
 	private File optionsFile;
-	public int numberOfOptions = 10;
+	public int numberOfOptions = 16;
 	public int difficulty = 2;
 	public boolean thirdPersonView = false;
+	public boolean debugMenu = false;
 
-	public GameSettings(Minecraft var1, File var2) {
-		this.mc = var1;
-		this.optionsFile = new File(var2, "options.txt");
+	public GameSettings(Minecraft minecraft, File file) {
+		this.mc = minecraft;
+		this.optionsFile = new File(file, "options.txt");
 		this.loadOptions();
 	}
 
 	public GameSettings() {
 	}
 
+	public int getTextColor() {
+		return this.darkMode ? 14737632 : 4210752;
+	}
+
 	public String getKeyBindingDescription(int var1) {
 		return this.keyBindings[var1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[var1].keyCode);
 	}
@@ -56,134 +79,237 @@
 	}
 
 	public void setOptionFloatValue(int var1, float var2) {
-		if(var1 == 0) {
+		if (var1 == 0) {
 			this.musicVolume = var2;
 			this.mc.sndManager.onSoundOptionsChanged();
 		}
 
-		if(var1 == 1) {
+		if (var1 == 1) {
 			this.soundVolume = var2;
 			this.mc.sndManager.onSoundOptionsChanged();
 		}
 
-		if(var1 == 3) {
+		if (var1 == 3) {
 			this.mouseSensitivity = var2;
 		}
 
+		if (var1 == 11) {
+			this.brightness = var2;
+			RenderGlobal.globalBrightness = this.brightness * 0.2F;
+			this.mc.renderGlobal.loadRenderers();
+		}
+
+		if (var1 == 12) {
+			this.musicDelay = var2;
+		}
+
+		if (var1 == 14) {
+			this.fov = var2 * 90.0F + 30.0F;
+		}
+
+		if (var1 == 15) {
+			this.fovEffects = var2 * 2.0F;
+		}
 	}
 
 	public void setOptionValue(int var1, int var2) {
-		if(var1 == 2) {
+		if (var1 == 2) {
 			this.invertMouse = !this.invertMouse;
 		}
 
-		if(var1 == 4) {
+		if (var1 == 4) {
 			this.renderDistance = this.renderDistance + var2 & 3;
 		}
 
-		if(var1 == 5) {
+		if (var1 == 5) {
 			this.viewBobbing = !this.viewBobbing;
 		}
 
-		if(var1 == 6) {
+		if (var1 == 6) {
 			this.anaglyph = !this.anaglyph;
 			this.mc.renderEngine.refreshTextures();
 		}
 
-		if(var1 == 7) {
+		if (var1 == 7) {
 			this.limitFramerate = !this.limitFramerate;
+			Display.setVSyncEnabled(this.limitFramerate);
 		}
 
-		if(var1 == 8) {
+		if (var1 == 8) {
 			this.difficulty = this.difficulty + var2 & 3;
 		}
 
-		if(var1 == 9) {
+		if (var1 == 9) {
 			this.fancyGraphics = !this.fancyGraphics;
 			this.mc.renderGlobal.loadRenderers();
 		}
 
+		if (var1 == 10) {
+			this.caveSounds = !this.caveSounds;
+			if (this.caveSounds) {
+				this.mc.sndManager.playSoundFX("ambient.cave.cave", 1.0F, 1.0F);
+			}
+		}
+
+		if (var1 == 13) {
+			this.darkMode = !this.darkMode;
+		}
+
 		this.saveOptions();
 	}
 
 	public int isSlider(int var1) {
-		return var1 == 0 ? 1 : (var1 == 1 ? 1 : (var1 == 3 ? 1 : 0));
+		return var1 == 0 || var1 == 1 || var1 == 3 || var1 == 11 || var1 == 12 || var1 == 14 || var1 == 15 ? 1 : 0;
 	}
 
 	public float getOptionFloatValue(int var1) {
-		return var1 == 0 ? this.musicVolume : (var1 == 1 ? this.soundVolume : (var1 == 3 ? this.mouseSensitivity : 0.0F));
+		switch (var1) {
+			case 0: return this.musicVolume;
+			case 1: return this.soundVolume;
+			case 3: return this.mouseSensitivity;
+			case 11: return this.brightness;
+			case 12: return this.musicDelay;
+			case 14: return (this.fov - 30.0F) / 90.0F;
+			case 15: return this.fovEffects / 2.0F;
+			default: return 0.0F;
+		}
 	}
 
 	public String getOptionDisplayString(int var1) {
-		return var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+		switch (var1) {
+			case 0:
+				return "Music: " + (this.musicVolume > 0.0F ? (int) (this.musicVolume * 100.0F) + "%" : "OFF");
+			case 1:
+				return "Sound: " + (this.soundVolume > 0.0F ? (int) (this.soundVolume * 100.0F) + "%" : "OFF");
+			case 2:
+				return "Invert mouse: " + (this.invertMouse ? "ON" : "OFF");
+			case 3:
+				return (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*"
+						: (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!"
+								: "Sensitivity: " + (int) (this.mouseSensitivity * 200.0F) + "%"));
+			case 4:
+				return "Render distance: " + RENDER_DISTANCES[this.renderDistance];
+			case 5:
+				return "View bobbing: " + (this.viewBobbing ? "ON" : "OFF");
+			case 6:
+				return "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF");
+			case 7:
+				return "VSync: " + (this.limitFramerate ? "ON" : "OFF");
+			case 8:
+				return "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty];
+			case 9:
+				return "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST");
+			case 10:
+				return "Cave sounds: " + (this.caveSounds ? "ON" : "OFF");
+			case 11:
+				return "Brightness: " + (
+						this.brightness <= 0.0F ? "Moody"
+						: this.brightness >= 1.0F ? "Bright"
+						: (int) (this.brightness * 100.0F) + "%");
+			case 12:
+				float delay = (int) (this.musicDelay * 100.0F) / 10.0F;
+				return "Music Delay: " + delay + "-" + delay * 2.0F + " mins";
+			case 13:
+				return "Dark Mode: " + (this.darkMode ? "ON" : "OFF");
+			case 14:
+				return "FOV: " + (int) this.fov;
+			case 15:
+				return "FOV Effects: " + (this.fovEffects > 0.0F ? (int) (this.fovEffects * 100.0F) + "%" : "OFF");
+			default:
+				return "NULL";
+		}
 	}
 
 	public void loadOptions() {
 		try {
-			if(!this.optionsFile.exists()) {
+			if (!this.optionsFile.exists()) {
 				return;
 			}
 
-			BufferedReader var1 = new BufferedReader(new FileReader(this.optionsFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.optionsFile));
+			String var2;
+
+			while ((var2 = bufferedReader1.readLine()) != null) {
 				String[] var3 = var2.split(":");
-				if(var3[0].equals("music")) {
+				if (var3[0].equals("music")) {
 					this.musicVolume = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("sound")) {
+				if (var3[0].equals("sound")) {
 					this.soundVolume = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("mouseSensitivity")) {
+				if (var3[0].equals("mouseSensitivity")) {
 					this.mouseSensitivity = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("invertYMouse")) {
+				if (var3[0].equals("invertYMouse")) {
 					this.invertMouse = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("viewDistance")) {
+				if (var3[0].equals("viewDistance")) {
 					this.renderDistance = Integer.parseInt(var3[1]);
 				}
 
-				if(var3[0].equals("bobView")) {
+				if (var3[0].equals("bobView")) {
 					this.viewBobbing = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("anaglyph3d")) {
+				if (var3[0].equals("anaglyph3d")) {
 					this.anaglyph = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("limitFramerate")) {
+				if (var3[0].equals("limitFramerate")) {
 					this.limitFramerate = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("difficulty")) {
+				if (var3[0].equals("difficulty")) {
 					this.difficulty = Integer.parseInt(var3[1]);
 				}
 
-				if(var3[0].equals("fancyGraphics")) {
+				if (var3[0].equals("fancyGraphics")) {
 					this.fancyGraphics = var3[1].equals("true");
 				}
 
-				for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
-					if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
+				if (var3[0].equals("caveSounds")) {
+					this.caveSounds = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("brightness")) {
+					this.brightness = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("musicDelay")) {
+					this.musicDelay = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("darkMode")) {
+					this.darkMode = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("creativeDebug")) {
+					this.creativeDebug = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("fov")) {
+					this.fov = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("fovEffects")) {
+					this.fovEffects = this.parseFloat(var3[1]);
+				}
+
+				for (int var4 = 0; var4 < this.keyBindings.length; ++var4) {
+					if (var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
 						this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
 					}
 				}
 			}
-		} catch (Exception var5) {
+
+			bufferedReader1.close();
+		} catch (Exception exception5) {
 			System.out.println("Failed to load options");
-			var5.printStackTrace();
+			exception5.printStackTrace();
 		}
 
 	}
@@ -194,27 +320,35 @@
 
 	public void saveOptions() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.optionsFile));
-			var1.println("music:" + this.musicVolume);
-			var1.println("sound:" + this.soundVolume);
-			var1.println("invertYMouse:" + this.invertMouse);
-			var1.println("mouseSensitivity:" + this.mouseSensitivity);
-			var1.println("viewDistance:" + this.renderDistance);
-			var1.println("bobView:" + this.viewBobbing);
-			var1.println("anaglyph3d:" + this.anaglyph);
-			var1.println("limitFramerate:" + this.limitFramerate);
-			var1.println("difficulty:" + this.difficulty);
-			var1.println("fancyGraphics:" + this.fancyGraphics);
-
-			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
-				var1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
-			}
-
-			var1.close();
-		} catch (Exception var3) {
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.optionsFile));
+			printWriter1.println("music:" + Math.floor(this.musicVolume * 100.0F) / 100.0F);
+			printWriter1.println("sound:" + Math.floor(this.soundVolume * 100.0F) / 100.0F);
+			printWriter1.println("invertYMouse:" + this.invertMouse);
+			printWriter1.println("mouseSensitivity:" + Math.floor(this.mouseSensitivity * 100.0F) / 100.0F);
+			printWriter1.println("viewDistance:" + this.renderDistance);
+			printWriter1.println("bobView:" + this.viewBobbing);
+			printWriter1.println("anaglyph3d:" + this.anaglyph);
+			printWriter1.println("limitFramerate:" + this.limitFramerate);
+			printWriter1.println("difficulty:" + this.difficulty);
+			printWriter1.println("fancyGraphics:" + this.fancyGraphics);
+			printWriter1.println("caveSounds:" + this.caveSounds);
+			printWriter1.println("brightness:" + Math.floor(this.brightness * 100.0F) / 100.0F);
+			printWriter1.println("darkMode:" + this.darkMode);
+			printWriter1.println("musicDelay:" + Math.floor(this.musicDelay * 100.0F) / 100.0F);
+			printWriter1.println("fov:" + Math.floor(this.fov));
+			printWriter1.println("fovEffects:" + Math.floor(this.fovEffects * 100.0F) / 100.0F);
+			if (this.creativeDebug) {
+				printWriter1.println("creativeDebug:true");
+			}
+
+			for (int var2 = 0; var2 < this.keyBindings.length; ++var2) {
+				printWriter1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
+			}
+
+			printWriter1.close();
+		} catch (Exception exception3) {
 			System.out.println("Failed to save options");
-			var3.printStackTrace();
+			exception3.printStackTrace();
 		}
-
 	}
 }
--- net/minecraft/src/BlockCactus.java
+++ net/minecraft/src/BlockCactus.java
@@ -3,42 +3,42 @@
 import java.util.Random;
 
 public class BlockCactus extends Block {
-	protected BlockCactus(int var1, int var2) {
-		super(var1, var2, Material.cactus);
+	protected BlockCactus(int id, int tex) {
+		super(id, tex, Material.cactus);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockId(x, y + 1, z) == 0) {
 			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+			for(var6 = 1; worldObj.getBlockId(x, y - var6, z) == this.blockID; ++var6) {
 			}
 
 			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
+				int var7 = worldObj.getBlockMetadata(x, y, z);
 				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+					worldObj.setBlockWithNotify(x, y + 1, z, this.blockID);
+					worldObj.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					worldObj.setBlockMetadataWithNotify(x, y, z, var7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)(var3 + 1), (double)((float)(var4 + 1) - var5));
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		float var5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + var5), (double)y, (double)((float)z + var5), (double)((float)(x + 1) - var5), (double)((float)(y + 1) - var5), (double)((float)(z + 1) - var5));
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		float var5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + var5), (double)y, (double)((float)z + var5), (double)((float)(x + 1) - var5), (double)(y + 1), (double)((float)(z + 1) - var5));
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
 	}
 
 	public boolean renderAsNormalBlock() {
@@ -53,34 +53,34 @@
 		return 13;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return !super.canPlaceBlockAt(var1, var2, var3, var4) ? false : this.canBlockStay(var1, var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return !super.canPlaceBlockAt(world, x, y, z) ? false : this.canBlockStay(world, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		if(!this.canBlockStay(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		if(world.getBlockMaterial(x - 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x + 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z - 1).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z + 1).isSolid()) {
 			return false;
 		} else {
-			int var5 = var1.getBlockId(var2, var3 - 1, var4);
+			int var5 = world.getBlockId(x, y - 1, z);
 			return var5 == Block.cactus.blockID || var5 == Block.sand.blockID;
 		}
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		var5.attackEntityFrom((Entity)null, 1);
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		entity.attackEntityFrom((Entity)null, 1);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemWardingRing.java
@@ -1,0 +1,13 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemWardingRing extends ItemCharm {
+	public ItemWardingRing(int id) {
+		super(id);
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.slowHealing = true;
+	}
+}
--- net/minecraft/src/BlockStationary.java
+++ net/minecraft/src/BlockStationary.java
@@ -3,44 +3,44 @@
 import java.util.Random;
 
 public class BlockStationary extends BlockFluid {
-	protected BlockStationary(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockStationary(int var1, Material material2) {
+		super(var1, material2);
 		this.setTickOnLoad(false);
-		if(var2 == Material.lava) {
+		if(material2 == Material.lava) {
 			this.setTickOnLoad(true);
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			this.setNotStationary(var1, var2, var3, var4);
+	public void onNeighborBlockChange(World worldObj, int x, int y, int z, int id) {
+		super.onNeighborBlockChange(worldObj, x, y, z, id);
+		if(worldObj.getBlockId(x, y, z) == this.blockID) {
+			this.setNotStationary(worldObj, x, y, z);
 		}
 
 	}
 
-	private void setNotStationary(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.editingBlocks = true;
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID - 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID - 1);
-		var1.editingBlocks = false;
+	private void setNotStationary(World worldObj, int x, int y, int z) {
+		int var5 = worldObj.getBlockMetadata(x, y, z);
+		worldObj.editingBlocks = true;
+		worldObj.setBlockAndMetadata(x, y, z, this.blockID - 1, var5);
+		worldObj.markBlocksDirty(x, y, z, x, y, z);
+		worldObj.scheduleBlockUpdate(x, y, z, this.blockID - 1);
+		worldObj.editingBlocks = false;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.material == Material.lava) {
-			int var6 = var5.nextInt(3);
+			int var6 = rand.nextInt(3);
 
 			for(int var7 = 0; var7 < var6; ++var7) {
-				var2 += var5.nextInt(3) - 1;
-				++var3;
-				var4 += var5.nextInt(3) - 1;
-				int var8 = var1.getBlockId(var2, var3, var4);
+				x += rand.nextInt(3) - 1;
+				++y;
+				z += rand.nextInt(3) - 1;
+				int var8 = worldObj.getBlockId(x, y, z);
 				if(var8 == 0) {
-					if(this.isFlammable(var1, var2 - 1, var3, var4) || this.isFlammable(var1, var2 + 1, var3, var4) || this.isFlammable(var1, var2, var3, var4 - 1) || this.isFlammable(var1, var2, var3, var4 + 1) || this.isFlammable(var1, var2, var3 - 1, var4) || this.isFlammable(var1, var2, var3 + 1, var4)) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
+					if(this.isFlammable(worldObj, x - 1, y, z) || this.isFlammable(worldObj, x + 1, y, z) || this.isFlammable(worldObj, x, y, z - 1) || this.isFlammable(worldObj, x, y, z + 1) || this.isFlammable(worldObj, x, y - 1, z) || this.isFlammable(worldObj, x, y + 1, z)) {
+						worldObj.setBlockWithNotify(x, y, z, Block.fire.blockID);
 						return;
 					}
 				} else if(Block.blocksList[var8].material.getIsSolid()) {
@@ -51,7 +51,7 @@
 
 	}
 
-	private boolean isFlammable(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).getCanBurn();
+	private boolean isFlammable(World worldObj, int x, int y, int z) {
+		return worldObj.getBlockMaterial(x, y, z).getCanBurn();
 	}
 }
--- net/minecraft/src/ServerWindowAdapter.java
+++ net/minecraft/src/ServerWindowAdapter.java
@@ -2,6 +2,7 @@
 
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+
 import net.minecraft.server.MinecraftServer;
 
 final class ServerWindowAdapter extends WindowAdapter {
@@ -11,14 +12,14 @@
 		this.mcServer = var1;
 	}
 
-	public void windowClosing(WindowEvent var1) {
+	public void windowClosing(WindowEvent windowEvent1) {
 		this.mcServer.stopRunning();
 
 		while(!this.mcServer.serverStopped) {
 			try {
 				Thread.sleep(100L);
-			} catch (InterruptedException var3) {
-				var3.printStackTrace();
+			} catch (InterruptedException interruptedException3) {
+				interruptedException3.printStackTrace();
 			}
 		}
 
--- net/minecraft/src/BlockContainer.java
+++ net/minecraft/src/BlockContainer.java
@@ -1,23 +1,23 @@
 package net.minecraft.src;
 
 public abstract class BlockContainer extends Block {
-	protected BlockContainer(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockContainer(int var1, Material material2) {
+		super(var1, material2);
 		isBlockContainer[var1] = true;
 	}
 
-	protected BlockContainer(int var1, int var2, Material var3) {
-		super(var1, var2, var3);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		var1.setBlockTileEntity(var2, var3, var4, this.getBlockEntity());
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.removeBlockTileEntity(var2, var3, var4);
+	protected BlockContainer(int var1, int var2, Material material3) {
+		super(var1, var2, material3);
+	}
+
+	public void onBlockAdded(World worldObj, int x, int y, int z) {
+		super.onBlockAdded(worldObj, x, y, z);
+		worldObj.setBlockTileEntity(x, y, z, this.getBlockEntity());
+	}
+
+	public void onBlockRemoval(World worldObj, int x, int y, int z) {
+		super.onBlockRemoval(worldObj, x, y, z);
+		worldObj.removeBlockTileEntity(x, y, z);
 	}
 
 	protected abstract TileEntity getBlockEntity();
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet19WorldType.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet19WorldType extends Packet {
+	public byte worldType;
+	public boolean creative;
+
+	public Packet19WorldType() {
+	}
+
+	public Packet19WorldType(WorldType worldType, boolean creative) {
+		this((byte) worldType.ordinal(), creative);
+	}
+
+	public Packet19WorldType(byte worldType, boolean creative) {
+		this.worldType = worldType;
+		this.creative = creative;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.worldType = dataInputStream1.readByte();
+		this.creative = dataInputStream1.readBoolean();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeByte(this.worldType);
+		dataOutputStream1.writeBoolean(this.creative);
+	}
+
+	public void processPacket(NetHandler netHandler1) {
+		netHandler1.handleWorldType(this);
+	}
+
+	public int getPacketSize() {
+		return 2;
+	}
+}
--- net/minecraft/src/BlockCrops.java
+++ net/minecraft/src/BlockCrops.java
@@ -11,51 +11,51 @@
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.25F, 0.5F + var3);
 	}
 
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.tilledField.blockID;
+	protected boolean canThisPlantGrowOnThisBlockID(int blockID) {
+		return blockID == Block.tilledField.blockID;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
+	public void updateTick(World worldObj, int x, int y, int z, Random rand) {
+		super.updateTick(worldObj, x, y, z, rand);
+		if(worldObj.getBlockLightValue(x, y + 1, z) >= 9) {
+			int var6 = worldObj.getBlockMetadata(x, y, z);
 			if(var6 < 7) {
-				float var7 = this.getGrowthRate(var1, var2, var3, var4);
-				if(var5.nextInt((int)(100.0F / var7)) == 0) {
+				float var7 = this.getGrowthRate(worldObj, x, y, z);
+				if(rand.nextInt((int)(100.0F / var7)) == 0) {
 					++var6;
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+					worldObj.setBlockMetadataWithNotify(x, y, z, var6);
 				}
 			}
 		}
 
 	}
 
-	private float getGrowthRate(World var1, int var2, int var3, int var4) {
+	private float getGrowthRate(World worldObj, int x, int y, int z) {
 		float var5 = 1.0F;
-		int var6 = var1.getBlockId(var2, var3, var4 - 1);
-		int var7 = var1.getBlockId(var2, var3, var4 + 1);
-		int var8 = var1.getBlockId(var2 - 1, var3, var4);
-		int var9 = var1.getBlockId(var2 + 1, var3, var4);
-		int var10 = var1.getBlockId(var2 - 1, var3, var4 - 1);
-		int var11 = var1.getBlockId(var2 + 1, var3, var4 - 1);
-		int var12 = var1.getBlockId(var2 + 1, var3, var4 + 1);
-		int var13 = var1.getBlockId(var2 - 1, var3, var4 + 1);
+		int var6 = worldObj.getBlockId(x, y, z - 1);
+		int var7 = worldObj.getBlockId(x, y, z + 1);
+		int var8 = worldObj.getBlockId(x - 1, y, z);
+		int var9 = worldObj.getBlockId(x + 1, y, z);
+		int var10 = worldObj.getBlockId(x - 1, y, z - 1);
+		int var11 = worldObj.getBlockId(x + 1, y, z - 1);
+		int var12 = worldObj.getBlockId(x + 1, y, z + 1);
+		int var13 = worldObj.getBlockId(x - 1, y, z + 1);
 		boolean var14 = var8 == this.blockID || var9 == this.blockID;
 		boolean var15 = var6 == this.blockID || var7 == this.blockID;
 		boolean var16 = var10 == this.blockID || var11 == this.blockID || var12 == this.blockID || var13 == this.blockID;
 
-		for(int var17 = var2 - 1; var17 <= var2 + 1; ++var17) {
-			for(int var18 = var4 - 1; var18 <= var4 + 1; ++var18) {
-				int var19 = var1.getBlockId(var17, var3 - 1, var18);
+		for(int var17 = x - 1; var17 <= x + 1; ++var17) {
+			for(int var18 = z - 1; var18 <= z + 1; ++var18) {
+				int var19 = worldObj.getBlockId(var17, y - 1, var18);
 				float var20 = 0.0F;
 				if(var19 == Block.tilledField.blockID) {
 					var20 = 1.0F;
-					if(var1.getBlockMetadata(var17, var3 - 1, var18) > 0) {
+					if(worldObj.getBlockMetadata(var17, y - 1, var18) > 0) {
 						var20 = 3.0F;
 					}
 				}
 
-				if(var17 != var2 || var18 != var4) {
+				if(var17 != x || var18 != z) {
 					var20 /= 4.0F;
 				}
 
@@ -70,41 +70,41 @@
 		return var5;
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		if(var2 < 0) {
-			var2 = 7;
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		if(metadata < 0) {
+			metadata = 7;
 		}
 
-		return this.blockIndexInTexture + var2;
+		return this.blockIndexInTexture + metadata;
 	}
 
 	public int getRenderType() {
 		return 6;
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		super.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
+	public void onBlockDestroyedByPlayer(World worldObj, int x, int y, int z, int metadata) {
+		super.onBlockDestroyedByPlayer(worldObj, x, y, z, metadata);
 
 		for(int var6 = 0; var6 < 3; ++var6) {
-			if(var1.rand.nextInt(15) <= var5) {
+			if(worldObj.rand.nextInt(15) <= metadata) {
 				float var7 = 0.7F;
-				float var8 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var9 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var10 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				EntityItem var11 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(Item.seeds));
-				var11.delayBeforeCanPickup = 10;
-				var1.spawnEntityInWorld(var11);
+				float var8 = worldObj.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
+				float var9 = worldObj.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
+				float var10 = worldObj.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
+				EntityItem entityItem11 = new EntityItem(worldObj, (double)((float)x + var8), (double)((float)y + var9), (double)((float)z + var10), new ItemStack(Item.seeds));
+				entityItem11.delayBeforeCanPickup = 10;
+				worldObj.spawnEntityInWorld(entityItem11);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		System.out.println("Get resource: " + var1);
-		return var1 == 7 ? Item.wheat.shiftedIndex : -1;
+	public int idDropped(int metadata, Random rand) {
+		System.out.println("Get resource: " + metadata);
+		return metadata == 7 ? Item.wheat.shiftedIndex : -1;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 1;
 	}
 }
--- net/minecraft/src/Packet23VehicleSpawn.java
+++ net/minecraft/src/Packet23VehicleSpawn.java
@@ -14,35 +14,35 @@
 	public Packet23VehicleSpawn() {
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleVehicleSpawn(this);
+	public Packet23VehicleSpawn(Entity entity, int type) {
+		this.entityId = entity.entityID;
+		this.xPosition = MathHelper.floor_double(entity.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entity.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entity.posZ * 32.0D);
+		this.type = type;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleVehicleSpawn(this);
 	}
 
 	public int getPacketSize() {
 		return 17;
-	}
-
-	public Packet23VehicleSpawn(Entity var1, int var2) {
-		this.entityId = var1.entityID;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.type = var2;
 	}
 }
--- net/minecraft/src/ItemInWorldManager.java
+++ net/minecraft/src/ItemInWorldManager.java
@@ -11,8 +11,8 @@
 	private int posY;
 	private int posZ;
 
-	public ItemInWorldManager(World var1) {
-		this.worldObj = var1;
+	public ItemInWorldManager(World world) {
+		this.worldObj = world;
 	}
 
 	public void onBlockClicked(int var1, int var2, int var3) {
@@ -95,8 +95,29 @@
 		return var6;
 	}
 
-	public boolean activeBlockOrUseItem(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
-		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
+	public boolean activeBlockOrUseItem(EntityPlayer entityPlayer, World world, ItemStack itemStack, int x, int y, int z, int side) {
+		int var8 = world.getBlockId(x, y, z);
+		int oldStackSize = itemStack != null ? itemStack.stackSize : 0;
+		boolean result = var8 > 0 && Block.blocksList[var8].blockActivated(world, x, y, z, entityPlayer)
+				|| (itemStack != null && itemStack.useItem(entityPlayer, world, x, y, z, side));
+		if (entityPlayer.creative && itemStack != null) {
+			itemStack.stackSize = oldStackSize;
+		}
+		return result;
+	}
+
+	public boolean func_6154_a(EntityPlayer var1, World var2, ItemStack var3) {
+		int var4 = var3.stackSize;
+		ItemStack var5 = var3.useItemRightClick(var2, var1);
+		if(var5 != var3 || var5 != null && var5.stackSize != var4) {
+			var1.inventory.mainInventory[var1.inventory.currentItem] = var5;
+			if(var5.stackSize == 0) {
+				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+			}
+
+			return true;
+		} else {
+			return false;
+		}
 	}
 }
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockGlass extends BlockBreakable {
-	public BlockGlass(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3, var4);
+	public BlockGlass(int var1, int var2, Material material3, boolean var4) {
+		super(var1, var2, material3, var4);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random rand) {
 		return 0;
 	}
 }
--- net/minecraft/src/SpawnerClient.java
+++ net/minecraft/src/SpawnerClient.java
@@ -3,9 +3,9 @@
 class SpawnerClient extends SpawnerAnimals {
 	final PlayerControllerSP playerController;
 
-	SpawnerClient(PlayerControllerSP var1, int var2, Class var3, Class[] var4) {
-		super(var2, var3, var4);
-		this.playerController = var1;
+	SpawnerClient(PlayerControllerSP playerControllerSP1, int var2, Class class3, Class[] class4) {
+		super(var2, class3, class4);
+		this.playerController = playerControllerSP1;
 	}
 
 	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
--- net/minecraft/src/ChunkCoordinates.java
+++ net/minecraft/src/ChunkCoordinates.java
@@ -4,17 +4,17 @@
 	public final int posX;
 	public final int posZ;
 
-	public ChunkCoordinates(int var1, int var2) {
-		this.posX = var1;
-		this.posZ = var2;
+	public ChunkCoordinates(int posX, int posZ) {
+		this.posX = posX;
+		this.posZ = posZ;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkCoordinates)) {
+	public boolean equals(Object chunkCoordinates) {
+		if(!(chunkCoordinates instanceof ChunkCoordinates)) {
 			return false;
 		} else {
-			ChunkCoordinates var2 = (ChunkCoordinates)var1;
-			return this.posX == var2.posX && this.posZ == var2.posZ;
+			ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)chunkCoordinates;
+			return this.posX == chunkCoordinates2.posX && this.posZ == chunkCoordinates2.posZ;
 		}
 	}
 
