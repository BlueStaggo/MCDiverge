--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -38,19 +38,19 @@
 			}
 		}
 
-		if(var1.stackSize == 0) {
-			return false;
-		} else {
-			if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false)) {
-				Block var8 = Block.blocksList[this.blockID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.blockID)) {
-					Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
-				}
+		if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false)) {
+			Block var8 = Block.blocksList[this.blockID];
+			if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.blockID, var1.itemMetadata)) {
+				Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
+				var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
+				--var1.stackSize;
 			}
-
-			return true;
 		}
+
+		return true;
+	}
+
+	public int getIconIndex(ItemStack var1) {
+		return Block.blocksList[blockID].getBlockTextureFromSideAndMetadata(2, var1.itemMetadata);
 	}
 }
--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class GuiIngameMenu extends GuiScreen {
 	private int updateCounter2 = 0;
 	private int updateCounter = 0;
@@ -26,6 +28,7 @@
 				this.mc.theWorld.sendQuittingDisconnectingPacket();
 			}
 
+			GuiScreen.setBgType(new Random().nextInt(4));
 			this.mc.changeWorld1((World)null);
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
--- net/minecraft/src/RecipesWeapons.java
+++ net/minecraft/src/RecipesWeapons.java
@@ -4,17 +4,20 @@
 	private String[][] recipePatterns = new String[][]{{"X", "X", "#"}};
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.swordWood, Item.swordStone, Item.swordSteel, Item.swordDiamond, Item.swordGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), this.recipePatterns[var4], '#', Item.stick, 'X', var3);
 			}
 		}
 
-		var1.addRecipe(new ItemStack(Item.bow, 1), new Object[]{" #X", "# X", " #X", Character.valueOf('X'), Item.silk, Character.valueOf('#'), Item.stick});
-		var1.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", Character.valueOf('Y'), Item.feather, Character.valueOf('X'), Item.flint, Character.valueOf('#'), Item.stick});
+		craftingManager.addRecipe(new ItemStack(Item.bow, 1), " #X", "# X", " #X", 'X', Item.silk, '#', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.arrow, 4), "X", "#", "Y", 'Y', Item.feather, 'X', Item.flint, '#', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffRuby, 1), "#", "o", "/", '#', Item.ruby, 'o', Item.ingotGold, '/', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffSapphire, 1), "#", "o", "/", '#', Item.sapphire, 'o', Item.ingotIron, '/', Item.stick);
+		craftingManager.addRecipe(new ItemStack(Item.staffSparkle, 1), "#", "/", "/", '#', Item.starChunk, '/', Item.stick);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiTransparentButton.java
@@ -1,0 +1,34 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.FontRenderer;
+import net.minecraft.src.GuiButton;
+import org.lwjgl.opengl.GL11;
+
+public class GuiTransparentButton extends GuiButton {
+	public GuiTransparentButton(int var1, int var2, int var3, String var4) {
+		super(var1, var2, var3, var4);
+	}
+
+	public GuiTransparentButton(int var1, int var2, int var3, int var4, int var5, String var6) {
+		super(var1, var2, var3, var4, var5, var6);
+	}
+
+	public void drawButton(Minecraft var1, int var2, int var3) {
+		if(this.visible) {
+			FontRenderer fontRenderer4 = var1.fontRenderer;
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			boolean var5 = var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
+			int var6 = this.getHoverState(var5);
+			this.mouseDragged(var1, var2, var3);
+			if(!this.enabled) {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, -6250336);
+			} else if(var5) {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, 16777120);
+			} else {
+				this.drawString(fontRenderer4, this.displayString, this.xPosition, this.yPosition + (this.height - 8) / 2, 14737632);
+			}
+
+		}
+	}
+}
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -1,10 +1,15 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockLog extends Block {
-	protected BlockLog(int var1) {
-		super(var1, Material.wood);
+	private final List<Integer[]> leavesToUpdate = new ArrayList<>();
+
+	protected BlockLog(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 20;
 	}
 
@@ -12,11 +17,68 @@
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.wood.blockID;
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return var2 == 0 ? getBlockTextureFromSide(var1)
+			: textureXY(6, 8 + var2) + (var1 <= 1 ? 1 : 0);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
 		return var1 == 1 ? 21 : (var1 == 0 ? 21 : 20);
+	}
+
+	private boolean recursiveDestroy(World worldObj, int x, int y, int z, int metadata, EntityPlayer player, ItemStack currentItem) {
+		for (int rx = x - 1; rx <= x + 1; rx++) {
+			for (int ry = y; ry <= y + 1; ry++) {
+				for (int rz = z - 1; rz <= z + 1; rz++) {
+					if (worldObj.getBlockId(rx, ry, rz) == this.blockID
+						&& currentItem.itemDmg <= currentItem.getMaxDamage()
+						&& (rx != x || ry != y || rz != z)) {
+						currentItem.onDestroyBlock(this.blockID, rx, ry, rz);
+						if (currentItem.stackSize == 0) {
+							currentItem.onItemDestroyedByUse(player);
+							player.destroyCurrentEquippedItem();
+							return false;
+						}
+
+						this.dropBlockAsItem(worldObj, rx, ry, rz, metadata);
+						worldObj.setBlockWithNotify(rx, ry, rz, 0);
+						if (!this.recursiveDestroy(worldObj, rx, ry, rz, metadata, player, currentItem)) {
+							return false;
+						}
+					} else if (worldObj.getBlockId(rx, ry, rz) == Block.leaves.blockID) {
+						leavesToUpdate.add(new Integer[] {rx, ry, rz});
+					}
+				}
+			}
+		}
+		return true;
+	}
+
+	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
+		EntityPlayer player = var1.getClosestPlayer(var2, var3, var4, 10);
+		ItemStack currentItem = player.inventory.getCurrentItem();
+		if (currentItem == null) {
+			return;
+		}
+		Item heldItem = currentItem.getItem();
+		if (!(heldItem instanceof ItemTool
+			  && ((ItemTool) heldItem).effectiveAgainst(this)
+			  && player.isSneaking())) {
+			return;
+		}
+
+		recursiveDestroy(var1, var2, var3, var4, var5, player, currentItem);
+		for (Integer[] leaf : leavesToUpdate) {
+			Block.leaves.fall(var1, leaf[0], leaf[1], leaf[2]);
+		}
+		leavesToUpdate.clear();
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -29,6 +29,13 @@
 
 	public void onUpdate() {
 		super.onUpdate();
+
+		if(this.item != null && this.item.itemID == Item.starChunk.shiftedIndex
+			&& this.worldObj.isDaytime()) {
+			this.setEntityDead();
+			return;
+		}
+
 		if(this.delayBeforeCanPickup > 0) {
 			--this.delayBeforeCanPickup;
 		}
@@ -177,14 +184,23 @@
 	}
 
 	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(!this.worldObj.multiplayerWorld) {
+		if(this.worldObj.canDoClientAction()) {
 			int var2 = this.item.stackSize;
 			if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
 				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
 				var1.onItemPickup(this, var2);
 				this.setEntityDead();
 			}
-
 		}
+	}
+
+	public float getBrightness(float var1) {
+		return this.item.itemID == Item.starChunk.shiftedIndex ? 1.0F : super.getBrightness(var1);
+	}
+
+	public boolean isInRangeToRenderDist(double var1) {
+		double var3 = this.boundingBox.getAverageEdgeLength();
+		var3 *= 2048.0D * this.renderDistanceWeight;
+		return var1 < var3 * var3;
 	}
 }
--- net/minecraft/src/ModelRenderer.java
+++ net/minecraft/src/ModelRenderer.java
@@ -18,6 +18,7 @@
 	public boolean mirror = false;
 	public boolean showModel = true;
 	public boolean isHidden = false;
+	public boolean bigTex = false;
 
 	public ModelRenderer(int var1, int var2) {
 		this.textureOffsetX = var1;
@@ -62,12 +63,12 @@
 		this.corners[5] = var16;
 		this.corners[6] = var17;
 		this.corners[7] = var18;
-		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
-		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
-		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
-		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
-		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
-		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
+		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5, this.bigTex);
+		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5, this.bigTex);
+		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.bigTex);
+		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6, this.bigTex);
+		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5, this.bigTex);
+		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5, this.bigTex);
 		if(this.mirror) {
 			for(int var19 = 0; var19 < this.faces.length; ++var19) {
 				this.faces[var19].flipFace();
--- net/minecraft/src/SlotInventory.java
+++ net/minecraft/src/SlotInventory.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class SlotInventory extends Slot {
 	private final GuiContainer guiContainer;
 	public final int xDisplayPosition;
@@ -18,5 +20,9 @@
 		var1 -= var3;
 		var2 -= var4;
 		return var1 >= this.xDisplayPosition - 1 && var1 < this.xDisplayPosition + 16 + 1 && var2 >= this.yDisplayPosition - 1 && var2 < this.yDisplayPosition + 16 + 1;
+	}
+
+	public ItemTooltip getTooltip() {
+		return this.getStack().getTooltip();
 	}
 }
--- net/minecraft/src/NetworkAcceptThread.java
+++ net/minecraft/src/NetworkAcceptThread.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.net.Socket;
+
 import net.minecraft.server.MinecraftServer;
 
 class NetworkAcceptThread extends Thread {
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,13 +1,25 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay};
+	private static Block[] blocksEffectiveAgainst = new Block[] {
+	Block.grass,
+	Block.dirt,
+	Block.sand,
+	Block.gravel,
+	Block.snow,
+	Block.blockSnow,
+	Block.blockClay
+	};
 
 	public ItemSpade(int var1, int var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+		super(var1, 1, Math.abs(var2), blocksEffectiveAgainst, var2 < 0);
+		if (var2 < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.snow ? true : var1 == Block.blockSnow;
+		return var1 == Block.snow || var1 == Block.blockSnow;
 	}
 }
--- net/minecraft/src/GuiSlider.java
+++ net/minecraft/src/GuiSlider.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class GuiSlider extends GuiButton {
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -1,17 +1,42 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemFood extends Item {
-	private int healAmount;
+	private final int healAmount;
+	private final float energyAmount;
 
 	public ItemFood(int var1, int var2) {
+		this(var1, var2, 0.0F);
+	}
+
+	public ItemFood(int var1, int var2, float energyAmount) {
 		super(var1);
 		this.healAmount = var2;
-		this.maxStackSize = 1;
+		this.energyAmount = energyAmount;
+		this.maxStackSize = 4;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.heal(this.healAmount);
+		var3.healthRegen = Math.min(var3.healthRegen + this.healAmount, 20 - var3.health);
+		if (var3.energyBoost < this.energyAmount) {
+			var3.energyBoost = this.energyAmount;
+		}
 		return var1;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return this.energyAmount > 0.0D
+				? new Object[] {
+						"Heals " + healAmount / 2.0F + (healAmount == 2 ? " heart" : " hearts"),
+						ItemTooltip.INFO_COL,
+						"Gives an energy boost",
+						ItemTooltip.INFO_COL
+				}
+				: new Object[] {
+						"Heals " + healAmount / 2.0F + (healAmount == 2 ? " heart" : " hearts"),
+						ItemTooltip.INFO_COL
+				};
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockStepType.java
@@ -1,0 +1,23 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class BlockStepType {
+	public final int sideTexture;
+	public final int topTexture;
+
+	public BlockStepType(int texture) {
+		this(texture, texture);
+	}
+
+	public BlockStepType(int texture, boolean autoSide) {
+		this(autoSide ? texture - 1 : texture, texture);
+	}
+
+	public BlockStepType(int sideTexture, int topTexture) {
+		this.sideTexture = sideTexture;
+		this.topTexture = topTexture;
+	}
+
+	public int getTextureFromSide(int side) {
+		return side <= 1 ? topTexture : sideTexture;
+	}
+}
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
 import org.lwjgl.opengl.GL11;
 
 public class RenderBlocks {
@@ -24,13 +25,27 @@
 	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
 		int var5 = var1.getRenderType();
 		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack(var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : false)))))))))))));
+		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4)
+				: (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4)
+				: (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4)
+				: (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4)
+				: (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4)
+				: (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4)
+				: (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4)
+				: (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4)
+				: (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4)
+				: (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4)
+				: (var5 == 9 ? this.renderBlockMinecartTrack(var1, var2, var3, var4)
+				: (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4)
+				: (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4)
+				: (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4)
+				: false)))))))))))));
 	}
 
 	public boolean renderBlockTorch(Block var1, int var2, int var3, int var4) {
 		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		Tessellator var6 = Tessellator.instance;
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var7 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		if(Block.lightValue[var1.blockID] > 0) {
 			var7 = 1.0F;
 		}
@@ -86,7 +101,7 @@
 			this.overrideBlockTexture = -1;
 		}
 
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var13 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		if(Block.lightValue[var1.blockID] > 0) {
 			var13 = 1.0F;
 		}
@@ -153,7 +168,7 @@
 				var21[var25].zCoord += (double)var4 + 0.5D;
 			} else {
 				var21[var25].xCoord += (double)var2 + 0.5D;
-				var21[var25].yCoord += (double)((float)var3 + 2.0F / 16.0F);
+				var21[var25].yCoord += (double)((float)var3 + 0.125F);
 				var21[var25].zCoord += (double)var4 + 0.5D;
 			}
 		}
@@ -224,7 +239,7 @@
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var7 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
@@ -412,7 +427,7 @@
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var7 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
@@ -565,7 +580,7 @@
 			var7 = this.overrideBlockTexture;
 		}
 
-		float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var8 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var8, var8, var8);
 		int var9 = (var7 & 15) << 4;
 		int var10 = var7 & 240;
@@ -645,7 +660,7 @@
 			var6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var7 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var7, var7, var7);
 		int var8 = (var6 & 15) << 4;
 		int var9 = var6 & 240;
@@ -689,7 +704,7 @@
 
 	public boolean renderBlockReed(Block var1, int var2, int var3, int var4) {
 		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var6 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var6, var6, var6);
 		this.renderCrossedSquares(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)var3, (double)var4);
 		return true;
@@ -697,7 +712,7 @@
 
 	public boolean renderBlockCrops(Block var1, int var2, int var3, int var4) {
 		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var6 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var6, var6, var6);
 		this.renderBlockCropsImpl(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)((float)var3 - 1.0F / 16.0F), (double)var4);
 		return true;
@@ -887,7 +902,7 @@
 
 				var32 = MathHelper.sin(var25) * 8.0F / 256.0F;
 				var33 = MathHelper.cos(var25) * 8.0F / 256.0F;
-				var34 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+				var34 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 				var5.setColorOpaque_F(var11 * var34, var11 * var34, var11 * var34);
 				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var20), (double)(var4 + 0), var28 - (double)var33 - (double)var32, var30 - (double)var33 + (double)var32);
 				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var21), (double)(var4 + 1), var28 - (double)var33 + (double)var32, var30 + (double)var33 + (double)var32);
@@ -896,7 +911,7 @@
 			}
 
 			if(this.renderAllFaces || var7) {
-				float var48 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
+				float var48 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 - 1, var4);
 				var5.setColorOpaque_F(var10 * var48, var10 * var48, var10 * var48);
 				this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
 				var9 = true;
@@ -964,7 +979,7 @@
 					double var41 = (double)(((float)var51 + (1.0F - var31) * 16.0F) / 256.0F);
 					double var43 = (double)(((float)var51 + (1.0F - var32) * 16.0F) / 256.0F);
 					double var45 = ((double)(var51 + 16) - 0.01D) / 256.0D;
-					float var47 = var1.getBlockBrightness(this.blockAccess, var49, var3, var27);
+					float var47 = var1.getBlockRenderBrightness(this.blockAccess, var49, var3, var27);
 					if(var24 < 2) {
 						var47 *= var12;
 					} else {
@@ -1017,56 +1032,56 @@
 		return 1.0F - var6 / (float)var5;
 	}
 
-	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5) {
+	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5, int m) {
 		float var6 = 0.5F;
 		float var7 = 1.0F;
 		float var8 = 0.8F;
 		float var9 = 0.6F;
 		Tessellator var10 = Tessellator.instance;
 		var10.startDrawingQuads();
-		float var11 = var1.getBlockBrightness(var2, var3, var4, var5);
-		float var12 = var1.getBlockBrightness(var2, var3, var4 - 1, var5);
+		float var11 = var1.getBlockRenderBrightness(var2, var3, var4, var5);
+		float var12 = var1.getBlockRenderBrightness(var2, var3, var4 - 1, var5);
 		if(var12 < var11) {
 			var12 = var11;
 		}
 
 		var10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
-		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(0));
-		var12 = var1.getBlockBrightness(var2, var3, var4 + 1, var5);
+		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(0, m));
+		var12 = var1.getBlockRenderBrightness(var2, var3, var4 + 1, var5);
 		if(var12 < var11) {
 			var12 = var11;
 		}
 
 		var10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
-		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(1));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 - 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 + 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(3));
-		var12 = var1.getBlockBrightness(var2, var3 - 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(4));
-		var12 = var1.getBlockBrightness(var2, var3 + 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
+		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(1, m));
+		var12 = var1.getBlockRenderBrightness(var2, var3, var4, var5 - 1);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(2, m));
+		var12 = var1.getBlockRenderBrightness(var2, var3, var4, var5 + 1);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(3, m));
+		var12 = var1.getBlockRenderBrightness(var2, var3 - 1, var4, var5);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(4, m));
+		var12 = var1.getBlockRenderBrightness(var2, var3 + 1, var4, var5);
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(5, m));
 		var10.draw();
 	}
 
@@ -1097,17 +1112,17 @@
 		float var23 = var11 * var7;
 		float var24 = var12 * var7;
 		float var25 = var13 * var7;
-		float var26 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var26 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		float var27;
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 - 1, var4);
 			var8.setColorOpaque_F(var14 * var27, var18 * var27, var22 * var27);
 			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
 			var9 = true;
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 + 1, var4);
 			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
 				var27 = var26;
 			}
@@ -1118,7 +1133,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 - 1);
 			if(var1.minZ > 0.0D) {
 				var27 = var26;
 			}
@@ -1129,7 +1144,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 + 1);
 			if(var1.maxZ < 1.0D) {
 				var27 = var26;
 			}
@@ -1140,7 +1155,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2 - 1, var3, var4);
 			if(var1.minX > 0.0D) {
 				var27 = var26;
 			}
@@ -1151,7 +1166,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
+			var27 = var1.getBlockRenderBrightness(this.blockAccess, var2 + 1, var3, var4);
 			if(var1.maxX < 1.0D) {
 				var27 = var26;
 			}
@@ -1192,17 +1207,17 @@
 		float var24 = var12 * var7;
 		float var25 = var13 * var7;
 		float var26 = 1.0F / 16.0F;
-		float var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var27 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
 		float var28;
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 - 1, var4);
 			var8.setColorOpaque_F(var14 * var28, var18 * var28, var22 * var28);
 			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
 			var9 = true;
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 + 1, var4);
 			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
 				var28 = var27;
 			}
@@ -1213,7 +1228,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 - 1);
 			if(var1.minZ > 0.0D) {
 				var28 = var27;
 			}
@@ -1226,7 +1241,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 + 1);
 			if(var1.maxZ < 1.0D) {
 				var28 = var27;
 			}
@@ -1239,7 +1254,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2 - 1, var3, var4);
 			if(var1.minX > 0.0D) {
 				var28 = var27;
 			}
@@ -1252,7 +1267,7 @@
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
+			var28 = var1.getBlockRenderBrightness(this.blockAccess, var2 + 1, var3, var4);
 			if(var1.maxX < 1.0D) {
 				var28 = var27;
 			}
@@ -1327,7 +1342,7 @@
 
 	public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
 		boolean var5 = false;
-		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
+		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4) % 4;
 		if(var6 == 0) {
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
@@ -1362,8 +1377,8 @@
 		float var9 = 1.0F;
 		float var10 = 0.8F;
 		float var11 = 0.6F;
-		float var12 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
+		float var12 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4);
+		float var13 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 - 1, var4);
 		if(var6.minY > 0.0D) {
 			var13 = var12;
 		}
@@ -1375,7 +1390,7 @@
 		var5.setColorOpaque_F(var8 * var13, var8 * var13, var8 * var13);
 		this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
 		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
+		var13 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3 + 1, var4);
 		if(var6.maxY < 1.0D) {
 			var13 = var12;
 		}
@@ -1387,7 +1402,7 @@
 		var5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
 		this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
 		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
+		var13 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 - 1);
 		if(var6.minZ > 0.0D) {
 			var13 = var12;
 		}
@@ -1406,7 +1421,7 @@
 		this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var14);
 		var7 = true;
 		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
+		var13 = var1.getBlockRenderBrightness(this.blockAccess, var2, var3, var4 + 1);
 		if(var6.maxZ < 1.0D) {
 			var13 = var12;
 		}
@@ -1425,7 +1440,7 @@
 		this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var14);
 		var7 = true;
 		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
+		var13 = var1.getBlockRenderBrightness(this.blockAccess, var2 - 1, var3, var4);
 		if(var6.minX > 0.0D) {
 			var13 = var12;
 		}
@@ -1444,7 +1459,7 @@
 		this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var14);
 		var7 = true;
 		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
+		var13 = var1.getBlockRenderBrightness(this.blockAccess, var2 + 1, var3, var4);
 		if(var6.maxX < 1.0D) {
 			var13 = var12;
 		}
@@ -1719,7 +1734,7 @@
 
 	}
 
-	public void renderBlockOnInventory(Block var1) {
+	public void renderBlockOnInventory(Block var1, int metadata) {
 		byte var2 = -1;
 		Tessellator var3 = Tessellator.instance;
 		int var4 = var1.getRenderType();
@@ -1728,27 +1743,27 @@
 			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 0.0F, -1.0F);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 0.0F, 1.0F);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(-1.0F, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(1.0F, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
 			var3.draw();
 			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 		} else if(var4 == 1) {
@@ -1762,34 +1777,34 @@
 			float var5 = 1.0F / 16.0F;
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 0.0F, -1.0F);
 			var3.setTranslationF(0.0F, 0.0F, var5);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
 			var3.setTranslationF(0.0F, 0.0F, -var5);
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(0.0F, 0.0F, 1.0F);
 			var3.setTranslationF(0.0F, 0.0F, -var5);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
 			var3.setTranslationF(0.0F, 0.0F, var5);
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(-1.0F, 0.0F, 0.0F);
 			var3.setTranslationF(var5, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
 			var3.setTranslationF(-var5, 0.0F, 0.0F);
 			var3.draw();
 			var3.startDrawingQuads();
 			var3.setNormal(1.0F, 0.0F, 0.0F);
 			var3.setTranslationF(-var5, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
 			var3.setTranslationF(var5, 0.0F, 0.0F);
 			var3.draw();
 			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
@@ -1818,33 +1833,34 @@
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
 					var3.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
+				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			} else if(var4 == 11) {
 				for(var7 = 0; var7 < 4; ++var7) {
-					float var6 = 2.0F / 16.0F;
+					float var6 = 0.125F;
 					if(var7 == 0) {
 						var1.setBlockBounds(0.5F - var6, 0.0F, 0.0F, 0.5F + var6, 1.0F, var6 * 2.0F);
 					}
@@ -1865,27 +1881,27 @@
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, metadata));
 					var3.draw();
 					var3.startDrawingQuads();
 					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, metadata));
 					var3.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
--- net/minecraft/src/NetLoginHandler.java
+++ net/minecraft/src/NetLoginHandler.java
@@ -4,6 +4,8 @@
 import java.net.Socket;
 import java.util.Random;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet19WorldType;
 import net.minecraft.server.MinecraftServer;
 
 public class NetLoginHandler extends NetHandler {
@@ -55,7 +57,7 @@
 
 	public void handleLogin(Packet1Login var1) {
 		this.username = var1.username;
-		if(var1.protocolVersion != 2) {
+		if(var1.protocolVersion != 85000005) {
 			this.kickUser("Outdated client!");
 		} else {
 			if(!this.mcServer.onlineMode) {
@@ -74,6 +76,7 @@
 			NetServerHandler var3 = new NetServerHandler(this.mcServer, this.netManager, var2);
 			var3.sendPacket(new Packet1Login("", "", 0));
 			var3.sendPacket(new Packet6SpawnPosition(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnY, this.mcServer.worldMngr.spawnZ));
+			var3.sendPacket(new Packet19WorldType(this.mcServer.worldMngr.worldType, this.mcServer.worldMngr.creative));
 			this.mcServer.configManager.playerLoggedIn(var2);
 			var3.teleportTo(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
 			var3.sendInventoryPackets();
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -1,20 +1,20 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.SimplexOctaves;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
+import java.util.*;
 
 public class World implements IBlockAccess {
+	public final boolean birthday;
 	private List lightingToUpdate;
 	public List loadedEntityList;
 	private List unloadedEntityList;
@@ -22,7 +22,7 @@
 	private Set scheduledTickSet;
 	public List loadedTileEntityList;
 	public long worldTime;
-	public boolean snowCovered;
+	public WorldType worldType;
 	private long skyColor;
 	private long fogColor;
 	private long cloudColor;
@@ -51,9 +51,12 @@
 	public boolean worldChunkLoadOverride;
 	private ArrayList collidingBoundingBoxes;
 	private Set positionsToUpdate;
-	private int soundCounter;
+	public int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean multiplayerWorld;
+	public String displayName;
+	public boolean creative;
+	public int starfallChance;
 
 	public static NBTTagCompound getLevelData(File var0, String var1) {
 		File var2 = new File(var0, "saves");
@@ -97,7 +100,7 @@
 	}
 
 	public World(File var1, String var2) {
-		this(var1, var2, (new Random()).nextLong());
+		this(var1, var2, (new Random()).nextLong(), null);
 	}
 
 	public World(String var1) {
@@ -108,7 +111,7 @@
 		this.scheduledTickSet = new HashSet();
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
-		this.snowCovered = false;
+		this.worldType = WorldType.NORMAL;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -130,11 +133,16 @@
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
 		this.levelName = var1;
+		this.displayName = var1;
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
 		this.calculateInitialSkylight();
+
+		Calendar calendar1 = Calendar.getInstance();
+		calendar1.setTime(new Date());
+		this.birthday = calendar1.get(Calendar.MONTH) == Calendar.NOVEMBER && calendar1.get(Calendar.DATE) == 8;
 	}
 
-	public World(File var1, String var2, long var3) {
+	public World(File var1, String var2, long var3, CreateWorldInfo info) {
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
@@ -142,7 +150,7 @@
 		this.scheduledTickSet = new HashSet();
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
-		this.snowCovered = false;
+		this.worldType = WorldType.NORMAL;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -164,10 +172,15 @@
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
 		this.levelName = var2;
+		this.displayName = var2;
 		var1.mkdirs();
 		this.saveDirectory = new File(var1, var2);
 		this.saveDirectory.mkdirs();
 
+		Calendar calendar1 = Calendar.getInstance();
+		calendar1.setTime(new Date());
+		this.birthday = calendar1.get(Calendar.MONTH) == Calendar.NOVEMBER && calendar1.get(Calendar.DATE) == 8;
+
 		File var5;
 		try {
 			var5 = new File(this.saveDirectory, "session.lock");
@@ -182,6 +195,8 @@
 			throw new RuntimeException("Failed to check session lock, aborting");
 		}
 
+		boolean var15 = false;
+
 		var5 = new File(this.saveDirectory, "level.dat");
 		this.isNewWorld = !var5.exists();
 		if(var5.exists()) {
@@ -194,7 +209,16 @@
 				this.spawnZ = var7.getInteger("SpawnZ");
 				this.worldTime = var7.getLong("Time");
 				this.sizeOnDisk = var7.getLong("SizeOnDisk");
-				this.snowCovered = var7.getBoolean("SnowCovered");
+				this.worldType = var7.getBoolean("SnowCovered") ? WorldType.WINTER
+						: var7.hasKey("WorldType")
+								? WorldType.values()[var7.getByte("WorldType")]
+								: WorldType.NORMAL;
+				this.displayName = var7.getString("DisplayName");
+				this.creative = var7.getBoolean("Creative");
+				this.starfallChance = var7.getInteger("StarfallChance");
+				if(this.displayName.isEmpty()) {
+					this.displayName = var2;
+				}
 				if(var7.hasKey("Player")) {
 					this.nbtCompoundPlayer = var7.getCompoundTag("Player");
 				}
@@ -202,10 +226,14 @@
 				var11.printStackTrace();
 			}
 		} else {
-			this.snowCovered = this.rand.nextInt(4) == 0;
+			this.applyCreationInfo(info);
+			var15 = true;
 		}
 
-		boolean var15 = false;
+		this.skyColor = this.worldType.getSkyColor();
+		this.fogColor = this.worldType.getFogColor();
+		this.cloudColor = this.worldType.getCloudColor();
+
 		if(this.randomSeed == 0L) {
 			this.randomSeed = var3;
 			var15 = true;
@@ -227,6 +255,17 @@
 		this.calculateInitialSkylight();
 	}
 
+	public boolean canDoClientAction() {
+		return !this.multiplayerWorld;
+	}
+
+	public void setWorldType(WorldType worldType) {
+		this.worldType = worldType;
+		this.skyColor = worldType.getSkyColor();
+		this.fogColor = worldType.getFogColor();
+		this.cloudColor = worldType.getCloudColor();
+	}
+
 	protected IChunkProvider getChunkProvider(File var1) {
 		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
 	}
@@ -245,7 +284,10 @@
 
 	private boolean findSpawn(int var1, int var2) {
 		int var3 = this.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
+		int var4 = this.getHeightValue(var1, var2);
+		return var3 == Block.sand.blockID
+				&& var4 > 50
+				&& var4 < 70;
 	}
 
 	private int getFirstUncoveredBlock(int var1, int var2) {
@@ -294,7 +336,10 @@
 		var1.setInteger("SpawnZ", this.spawnZ);
 		var1.setLong("Time", this.worldTime);
 		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setBoolean("SnowCovered", this.snowCovered);
+		var1.setByte("WorldType", (byte)this.worldType.ordinal());
+		var1.setString("DisplayName", this.displayName);
+		var1.setBoolean("Creative", this.creative);
+		var1.setInteger("StarfallChance", this.starfallChance);
 		var1.setLong("LastPlayed", System.currentTimeMillis());
 		EntityPlayer var2 = null;
 		if(this.playerEntities.size() > 0) {
@@ -352,7 +397,11 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 && var2 < 128 && this.chunkExists(var1 >> 4, var3 >> 4);
+	}
+
+	public Biome getBiome(int x, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4).getBiome(x & 15, z & 15);
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
@@ -521,7 +570,7 @@
 	}
 
 	private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
-		if(!this.editingBlocks && !this.multiplayerWorld) {
+		if(!this.editingBlocks && this.canDoClientAction()) {
 			Block var5 = Block.blocksList[this.getBlockId(var1, var2, var3)];
 			if(var5 != null) {
 				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
@@ -543,7 +592,8 @@
 			int var5;
 			if(var4) {
 				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
+				Block b = Block.blocksList[var5];
+				if((b instanceof BlockStep && !((BlockStep) b).blockType) || var5 == Block.tilledField.blockID) {
 					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
 					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
 					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
@@ -838,9 +888,9 @@
 
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
+	public void playRecord(String var1, int var2, int var3, int var4, String author) {
 		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
+			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4, author);
 		}
 
 	}
@@ -1455,7 +1505,7 @@
 
 	public boolean isBlockNormalCube(int var1, int var2, int var3) {
 		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
+		return var4 != null && var4.isOpaqueCube();
 	}
 
 	public void saveWorldIndirectly(IProgressUpdate var1) {
@@ -1501,11 +1551,11 @@
 			}
 
 			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-			if(this.lightingToUpdate.size() > 100000) {
-				while(this.lightingToUpdate.size() > '\uc350') {
-					this.updatingLighting();
-				}
-			}
+//			if(this.lightingToUpdate.size() > 100000) {
+//				while(this.lightingToUpdate.size() > 50000) {
+//					this.updatingLighting();
+//				}
+//			}
 
 		}
 	}
@@ -1534,6 +1584,7 @@
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
 
+		this.miscUpdates();
 		this.tickUpdates(false);
 		this.updateBlocksAndPlayCaveSounds();
 	}
@@ -1590,13 +1641,14 @@
 				}
 			}
 
-			if(this.snowCovered && this.rand.nextInt(4) == 0) {
+			if(this.rand.nextInt(16) == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
 				var6 = this.updateLCG >> 2;
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+				if((this.worldType == WorldType.WINTER || var14.getBiome(var7, var8) == Biome.TUNDRA)
+						&& var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
 					var10 = var14.getBlockID(var7, var9 - 1, var8);
 					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
 						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
@@ -1837,7 +1889,7 @@
 	}
 
 	public byte[] getChunkData(int var1, int var2, int var3, int var4, int var5, int var6) {
-		byte[] var7 = new byte[var4 * var5 * var6 * 5 / 2];
+		byte[] var7 = new byte[var4 * var5 * var6 * 7 / 2 + var4 * var6];
 		int var8 = var1 >> 4;
 		int var9 = var3 >> 4;
 		int var10 = var1 + var4 - 1 >> 4;
@@ -1968,6 +2020,93 @@
 			this.loadedEntityList.add(var1);
 		}
 
+	}
+
+	public void applyCreationInfo(CreateWorldInfo info) {
+		this.displayName = info.name;
+		this.randomSeed = info.seed;
+		this.worldType = info.worldType;
+		this.creative = info.creative;
+	}
+
+	public boolean hasSolidCeiling(int x, int y, int z) {
+		for (; y < 128; y++) {
+			if (this.getBlockMaterial(x, y, z).isSolid()) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	public void miscUpdates() {
+		if (this.worldTime % 24000 >= 13000 && this.worldTime % 24000 < 23000) {
+			for (EntityPlayer player : (List<EntityPlayer>)this.playerEntities) {
+				if (rand.nextInt(this.starfallChance) != 0) continue;
+
+				EntityItem star = new EntityItem(
+						this,
+						player.posX + (rand.nextDouble() * 512.0 - 256.0),
+						200,
+						player.posZ + (rand.nextDouble() * 512.0 - 256.0),
+						new ItemStack(Item.starChunk)
+				);
+				this.spawnEntityInWorld(star);
+			}
+		} else if (this.worldTime % 24000 < 13000) {
+			this.starfallChance = rand.nextInt(750) + 250;
+		}
+	}
+
+	public void sendTrackedEntityStatusUpdatePacket(Entity var1, byte var2) {
+	}
+
+	public void removePlayer(Entity var1) {
+		var1.setEntityDead();
+		if(var1 instanceof EntityPlayer) {
+			this.playerEntities.remove((EntityPlayer)var1);
+		}
+
+		int var2 = var1.chunkCoordX;
+		int var3 = var1.chunkCoordZ;
+		if(var1.addedToChunk && this.chunkExists(var2, var3)) {
+			this.getChunkFromChunkCoords(var2, var3).removeEntity(var1);
+		}
+
+		this.loadedEntityList.remove(var1);
+		this.releaseEntitySkin(var1);
+	}
+
+	public Biome generateBiome(int x, int z) {
+		if (this.worldType == WorldType.CLASSIC) {
+			return Biome.PLAINS;
+		}
+		if (this.worldType == WorldType.WINTER) {
+			return Biome.TUNDRA;
+		}
+
+		double biomeSize = 250000.0D;
+		float biomeBlend = 0.005F;
+
+		float temperature = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(this.randomSeed,
+				x / biomeSize, z / biomeSize, 1000, 8) / 256 * 1.2F + 0.6F
+				+ (this.rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+				0.0F, 1.0F);
+		float humidity = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(this.randomSeed,
+				x / biomeSize, z / biomeSize, -1000, 8) / 256 * 1.2F + 0.6F
+				+ (this.rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+				0.0F, 1.0F);
+
+		if (this.worldType == WorldType.ARID) {
+			temperature = 1.0F;
+			humidity *= 0.35F;
+		}
+
+		if (this.worldType == WorldType.TROPICAL) {
+			temperature = temperature / 3.0F + 0.66F;
+			humidity = humidity / 3.0F + 0.66F;
+		}
+
+		return Biome.getBiome(temperature, humidity);
 	}
 
 	static {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/InventoryReadonly.java
@@ -1,0 +1,170 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.*;
+
+import net.minecraft.src.*;
+import org.lwjgl.input.Keyboard;
+
+public class InventoryReadonly implements IInventory {
+	private final ItemStack[] items;
+	private final boolean pickable;
+	public final Map<Integer, String> labels;
+	public boolean pickOne;
+
+	public InventoryReadonly(ItemStack[] items) {
+		this(items, false, null);
+	}
+
+	public InventoryReadonly(ItemStack[] items, boolean pickable) {
+		this(items, pickable, null);
+	}
+
+	public InventoryReadonly(ItemStack[] items, boolean pickable, Map<Integer, String> labels) {
+		this.items = items;
+		this.pickable = pickable;
+		this.labels = labels;
+	}
+
+	public String getLabel(int row) {
+		return labels != null ? labels.get(row) : null;
+	}
+
+	public static InventoryReadonly generateCreativeInventory(boolean debug) {
+		List<ItemStack> items = new ArrayList<>();
+		for (int i = 0; i < Item.itemsList.length; i++) {
+			if (i < 256) {
+				if (Block.blocksList[i] == null) {
+					continue;
+				}
+				for (int m : Block.blocksList[i].availableMetadata()) {
+					ItemStack stack = new ItemStack(i, 1).withMetadata(m);
+					if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+						items.add(stack);
+					}
+				}
+			} else {
+				if (Item.itemsList[i] == null) {
+					continue;
+				}
+				for (int m : Item.itemsList[i].availableMetadata()) {
+					ItemStack stack = new ItemStack(i, 1).withMetadata(m);
+					if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+						items.add(stack);
+					}
+				}
+			}
+		}
+		ItemStack[] itemArray = new ItemStack[items.size()];
+		items.toArray(itemArray);
+		return new InventoryReadonly(itemArray, true);
+	}
+
+	public static InventoryReadonly getCreativeInventory() {
+		try {
+			List<String> ids = new ArrayList<>();
+			BufferedReader reader = new BufferedReader(
+					new InputStreamReader(
+							Objects.requireNonNull(InventoryReadonly.class.getResourceAsStream("/gui/creative_items.txt"))));
+
+			String line;
+			while ((line = reader.readLine()) != null) {
+				if (!line.matches("\\s*#.*") && !line.isEmpty()) {
+					if (line.startsWith(": ")) {
+						ids.add(line);
+					} else {
+						ids.addAll(Arrays.asList(line.trim().split("#")[0].split("\\s+")));
+					}
+				}
+			}
+
+			List<ItemStack> items = new ArrayList<>();
+			Map<Integer, String> labels = new HashMap<>();
+			for (String id : ids) {
+				if (id.startsWith(": ")) {
+					labels.put(items.size() / 8, id.substring(2));
+					continue;
+				}
+
+				if (id.equals("/br") && (items.size() % 8) == 0) {
+					continue;
+				}
+
+				if (id.equals("/br") || id.equals("/n")) {
+					int emptyItems = 8 - (items.size() % 8);
+
+					for (int i = 0; i < emptyItems; i++) {
+						items.add(null);
+					}
+					continue;
+				}
+
+				String[] idSplit = id.split("-");
+
+				boolean isItem = idSplit[0].startsWith("i");
+				if (isItem) {
+					idSplit[0] = idSplit[0].substring(1);
+				}
+
+				int itemID = Integer.parseInt(idSplit[0]);
+				int itemMetadata = idSplit.length >= 2 ? Integer.parseInt(idSplit[1]) : 0;
+				if (isItem) {
+					itemID += 256;
+				}
+
+				if (itemID <= 0 || itemMetadata < 0) {
+					items.add(null);
+					continue;
+				}
+
+				ItemStack item = new ItemStack(itemID, 1).withMetadata(itemMetadata);
+				items.add(item);
+			}
+
+			ItemStack[] itemArray = new ItemStack[items.size()];
+			items.toArray(itemArray);
+
+			return new InventoryReadonly(itemArray, true, labels);
+		} catch (Exception e) {
+			System.out.println("Could not get creative inventory!");
+			e.printStackTrace();
+			System.out.println("Generating creative inventory instead...");
+			return generateCreativeInventory(false);
+		}
+	}
+
+	public int getSizeInventory() {
+		return items.length;
+	}
+
+	public ItemStack getStackInSlot(int var1) {
+		return var1 < items.length
+			? items[var1] == null
+				? null
+				: items[var1].copy()
+			: null;
+	}
+
+	public ItemStack decrStackSize(int var1, int var2) {
+		return this.pickable
+				? new ItemStack(items[var1].itemID,
+						this.pickOne && !Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 1 : items[var1].getMaxStackSize(),
+						items[var1].itemDmg).withMetadata(items[var1].itemMetadata)
+				: null;
+	}
+
+	public void setInventorySlotContents(int var1, ItemStack var2) {
+	}
+
+	public String getInvName() {
+		return "Readonly Inventory";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void onInventoryChanged() {
+	}
+}
--- net/minecraft/src/RecipesFood.java
+++ net/minecraft/src/RecipesFood.java
@@ -1,8 +1,9 @@
 package net.minecraft.src;
 
 public class RecipesFood {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomBrown, Character.valueOf('Y'), Block.mushroomRed, Character.valueOf('#'), Item.bowlEmpty});
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomRed, Character.valueOf('Y'), Block.mushroomBrown, Character.valueOf('#'), Item.bowlEmpty});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), "Y", "X", "#", 'X', Block.mushroomBrown, 'Y', Block.mushroomRed, '#', Item.bowlEmpty);
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), "Y", "X", "#", 'X', Block.mushroomRed, 'Y', Block.mushroomBrown, '#', Item.bowlEmpty);
+		craftingManager.addRecipe(new ItemStack(Item.cookie), "X#X", 'X', Item.sugar, '#', Item.wheat);
 	}
 }
--- net/minecraft/src/RenderSnowball.java
+++ net/minecraft/src/RenderSnowball.java
@@ -9,7 +9,7 @@
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glScalef(0.5F, 0.5F, 0.5F);
-		int var10 = Item.snowball.getIconIndex((ItemStack)null);
+		int var10 = var1.iconIndex;
 		this.loadTexture("/gui/items.png");
 		Tessellator var11 = Tessellator.instance;
 		float var12 = (float)(var10 % 16 * 16 + 0) / 256.0F;
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -41,15 +41,25 @@
 	}
 
 	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = Item.snowball.shiftedIndex;
-		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
-		var1.setBlockWithNotify(var2, var3, var4, 0);
+		ItemStack itemStack = new ItemStack(Item.snowball.shiftedIndex);
+		float var10 = 0.7F;
+		double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, itemStack);
+		var17.delayBeforeCanPickup = 10;
+		var1.spawnEntityInWorld(var17);
+	}
+
+	public void harvestBlockSilk(World var1, int var2, int var3, int var4, int var5) {
+		ItemStack itemStack = new ItemStack(this.blockID);
+		float var10 = 0.7F;
+		double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+		EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, itemStack);
+		var17.delayBeforeCanPickup = 10;
+		var1.spawnEntityInWorld(var17);
 	}
 
 	public int idDropped(int var1, Random var2) {
@@ -58,6 +68,10 @@
 
 	public int quantityDropped(Random var1) {
 		return 0;
+	}
+
+	public int idDroppedSilk(int var1, Random var2) {
+		return this.blockID;
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -3,7 +3,11 @@
 import java.nio.FloatBuffer;
 import java.util.List;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.WorldType;
 import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
@@ -96,19 +100,32 @@
 		}
 	}
 
+	private float fov = 0.0F;
+
 	private float getFOVModifier(float var1) {
 		EntityPlayerSP var2 = this.mc.thePlayer;
-		float var3 = 70.0F;
-		if(var2.isInsideOfMaterial(Material.water)) {
-			var3 = 60.0F;
-		}
-
-		if(var2.health <= 0) {
+		float var3 = this.mc.options.fov;
+
+		if (Keyboard.isKeyDown(this.mc.options.keyBindZoom.keyCode) && this.mc.currentScreen == null) {
+			var3 = 30.0F;
+		}
+
+		if (var2.isInsideOfMaterial(Material.water)) {
+			var3 *= 0.85F;
+		}
+
+		if (var2.health <= 0) {
 			float var4 = (float)var2.deathTime + var1;
-			var3 /= (1.0F - 500.0F / (var4 + 500.0F)) * 2.0F + 1.0F;
-		}
-
-		return var3;
+			var3 /= ((1.0F - 500.0F / (var4 + 500.0F)) * 2.0F) * this.mc.options.fovEffects + 1.0F;
+		}
+
+		if (var2.isRunning()) {
+			var3 *= 1.0F + 0.05F * this.mc.options.fovEffects;
+		}
+		var3 *= 1.0F + var2.energyBoost * this.mc.options.fovEffects;
+
+		fov = MathHelper.lerp(fov, var3, (float)(1 - Math.pow(0.5D, var1)));
+		return fov;
 	}
 
 	private void hurtCameraEffect(float var1) {
@@ -131,7 +148,7 @@
 	}
 
 	private void setupViewBobbing(float var1) {
-		if(!this.mc.options.thirdPersonView) {
+		if(this.mc.options.thirdPersonView == 0) {
 			EntityPlayerSP var2 = this.mc.thePlayer;
 			float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
 			float var4 = var2.distanceWalkedModified + var3 * var1;
@@ -149,21 +166,34 @@
 		double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var1;
 		double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var1;
 		double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var1;
-		if(this.mc.options.thirdPersonView) {
+		if (this.mc.options.thirdPersonView > 0) {
 			double var9 = 4.0D;
 			float var11 = var2.rotationYaw;
 			float var12 = var2.rotationPitch;
+			float var4 = 0.0F;
 			double var13 = (double)(-MathHelper.sin(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
 			double var15 = (double)(MathHelper.cos(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
 			double var17 = (double)(-MathHelper.sin(var12 / 180.0F * (float)Math.PI)) * var9;
 
+			if (this.mc.options.thirdPersonView == 2) {
+				var13 = (double)(-MathHelper.sin((var11 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var12 / 180.0F * (float)Math.PI)) * var9;
+				var15 = (double)(MathHelper.cos((var11 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var12 / 180.0F * (float)Math.PI)) * var9;
+				var17 = (double)(-MathHelper.sin(-var12 / 180.0F * (float)Math.PI)) * var9;
+			}
+
 			for(int var19 = 0; var19 < 8; ++var19) {
 				float var20 = (float)((var19 & 1) * 2 - 1);
 				float var21 = (float)((var19 >> 1 & 1) * 2 - 1);
 				float var22 = (float)((var19 >> 2 & 1) * 2 - 1);
-				var20 *= 0.1F;
-				var21 *= 0.1F;
-				var22 *= 0.1F;
+				if (this.mc.options.thirdPersonView == 2) {
+					var20 *= -0.1F;
+					var21 *= -0.1F;
+					var22 *= -0.1F;
+				} else {
+					var20 *= 0.1F;
+					var21 *= 0.1F;
+					var22 *= 0.1F;
+				}
 				MovingObjectPosition var23 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var3 + (double)var20, var5 + (double)var21, var7 + (double)var22), Vec3D.createVector(var3 - var13 + (double)var20 + (double)var22, var5 - var17 + (double)var21, var7 - var15 + (double)var22));
 				if(var23 != null) {
 					double var24 = var23.hitVec.distanceTo(Vec3D.createVector(var3, var5, var7));
@@ -173,8 +203,13 @@
 				}
 			}
 
+			if (this.mc.options.thirdPersonView == 2) {
+				var4 = 180.0F;
+				var9 *= -1.0D;
+			}
+
 			GL11.glRotatef(var2.rotationPitch - var12, 1.0F, 0.0F, 0.0F);
-			GL11.glRotatef(var2.rotationYaw - var11, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(var2.rotationYaw - var11 + var4, 0.0F, 1.0F, 0.0F);
 			GL11.glTranslatef(0.0F, 0.0F, (float)(-var9));
 			GL11.glRotatef(var11 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
 			GL11.glRotatef(var12 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
@@ -222,12 +257,12 @@
 			this.setupViewBobbing(var1);
 		}
 
-		if(!this.mc.options.thirdPersonView) {
+		if(this.mc.options.thirdPersonView == 0) {
 			this.itemRenderer.renderItemInFirstPerson(var1);
 		}
 
 		GL11.glPopMatrix();
-		if(!this.mc.options.thirdPersonView) {
+		if(this.mc.options.thirdPersonView == 0) {
 			this.itemRenderer.renderOverlays(var1);
 			this.hurtCameraEffect(var1);
 		}
@@ -253,16 +288,15 @@
 			float var3 = var2 * var2 * var2 * 8.0F;
 			float var4 = (float)this.mc.mouseHelper.deltaX * var3;
 			float var5 = (float)this.mc.mouseHelper.deltaY * var3;
-			byte var6 = 1;
 			if(this.mc.options.invertMouse) {
-				var6 = -1;
+				var5 *= -1.0F;
 			}
 
-			this.mc.thePlayer.setAngles(var4, var5 * (float)var6);
+			this.mc.thePlayer.setAngles(var4, var5);
 		}
 
 		if(!this.mc.skipRenderWorld) {
-			ScaledResolution var7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			ScaledResolution var7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 			int var8 = var7.getScaledWidth();
 			int var9 = var7.getScaledHeight();
 			int var10 = Mouse.getX() * var8 / this.mc.displayWidth;
@@ -335,7 +369,7 @@
 			RenderHelper.disableStandardItemLighting();
 			this.setupFog(0);
 			var4.renderParticles(var2, var1);
-			if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water)) {
+			if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water) && this.mc.showHud) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
 				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
@@ -369,7 +403,7 @@
 			GL11.glDepthMask(true);
 			GL11.glEnable(GL11.GL_CULL_FACE);
 			GL11.glDisable(GL11.GL_BLEND);
-			if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water)) {
+			if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water) && this.mc.showHud) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
 				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
@@ -377,7 +411,7 @@
 			}
 
 			GL11.glDisable(GL11.GL_FOG);
-			if(this.mc.theWorld.snowCovered) {
+			if(this.mc.theWorld.worldType == WorldType.WINTER) {
 				this.renderSnow(var1);
 			}
 
@@ -390,7 +424,9 @@
 			GL11.glDisable(GL11.GL_FOG);
 			this.setupFog(1);
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-			this.renderHand(var1, var11);
+			if(this.mc.showHud) {
+				this.renderHand(var1, var11);
+			}
 			if(!this.mc.options.anaglyph) {
 				return;
 			}
@@ -495,7 +531,7 @@
 	}
 
 	public void setupOverlayRendering() {
-		ScaledResolution var1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		ScaledResolution var1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 		int var2 = var1.getScaledWidth();
 		int var3 = var1.getScaledHeight();
 		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
@@ -600,9 +636,9 @@
 		GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
 	}
 
-	private FloatBuffer setFogColorBuffer(float var1, float var2, float var3, float var4) {
+	private FloatBuffer setFogColorBuffer(float r, float g, float b, float a) {
 		this.fogColorBuffer.clear();
-		this.fogColorBuffer.put(var1).put(var2).put(var3).put(var4);
+		this.fogColorBuffer.put(r).put(g).put(b).put(a);
 		this.fogColorBuffer.flip();
 		return this.fogColorBuffer;
 	}
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -1,17 +1,63 @@
 package net.minecraft.src;
 
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockOre extends Block {
-	public BlockOre(int var1, int var2) {
+	private final int altTex;
+	private final int dropId;
+	private final int dropExtra;
+
+	public BlockOre(int var1, int var2, int var3) {
+		this(var1, var2, var3, var1, 0);
+	}
+
+	public BlockOre(int var1, int var2, int var3, int var4) {
+		this(var1, var2, var3, var4, 0);
+	}
+
+	public BlockOre(int var1, int var2, int var3, int var4, int var5) {
 		super(var1, var2, Material.rock);
+		this.altTex = var3;
+		this.dropId = var4;
+		this.dropExtra = var5;
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
+		return this.dropId;
 	}
 
 	public int quantityDropped(Random var1) {
+		return var1.nextInt(this.dropExtra + 1) + 1;
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return this.dropId == this.blockID ? var1 : 0;
+	}
+
+	public int idDroppedSilk(int var1, Random var2) {
+		return this.blockID;
+	}
+
+	public int quantityDroppedSilk(Random var1) {
 		return 1;
+	}
+
+	public int metadataDroppedSilk(int var1, Random var2) {
+		return var1;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return var2 == 0 ? blockIndexInTexture : altTex + (var2 - 1) * 16;
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		if (version < Chunk.CHUNK_VERSION_0_2 && metadata == 1) {
+			chunk.setBlockMetadata(x, y, z, 2);
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockRefabricator.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class BlockRefabricator extends BlockContainer {
+	public BlockRefabricator(int id) {
+		super(id, Material.iron);
+		this.blockIndexInTexture = textureXY(8, 1);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? textureXY(15, 6) : side == 0 ? textureXY(8, 3) : textureXY(15, 7);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		TileEntityRefabricator tileEntityRefabricator = (TileEntityRefabricator) var1.getBlockTileEntity(var2, var3, var4);
+		var5.displayGUIRefabricator(tileEntityRefabricator);
+		return true;
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityRefabricator();
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemStaff.java
@@ -1,0 +1,42 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemStaff extends ItemMagic {
+	public final int staffDamage;
+	public final int burn;
+	public final float pierce;
+
+	public ItemStaff(int var1, float var2, int var3, int maxDmg) {
+		this(var1, var2, var3, maxDmg, 0, 1.0F);
+	}
+
+	public ItemStaff(int var1, float var2, int var3, int maxDmg, int burn, float pierce) {
+		super(var1, var2);
+		this.maxStackSize = 1;
+		this.maxDamage = maxDmg;
+		this.staffDamage = var3;
+		this.burn = burn;
+		this.pierce = pierce;
+		this.bFull3D = true;
+	}
+
+	public ItemStack onMagicItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		var2.playSoundAtEntity(var3, "diverge.wand", 1.0F, rand.nextFloat() * 0.2F + 0.9F);
+		var2.spawnEntityInWorld(new EntitySnowball(var2, var3, this.iconIndex + 16, this.staffDamage, this.burn, this.pierce));
+		var1.damageItem(1);
+
+		return var1;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				this.staffDamage + " attack damage",
+				ItemTooltip.INFO_COL,
+				"Uses " + this.useMana + " points of mana",
+				ItemTooltip.INFO_COL,
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
+	}
+}
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -11,19 +11,20 @@
 	public GuiInventory(IInventory var1, ItemStack[] var2) {
 		this.allowUserInput = true;
 		this.craftingInventory = new CraftingInventoryPlayerCB(var2);
-		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 144, 36));
+		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 144, 27));
 
 		int var3;
 		int var4;
 		for(var3 = 0; var3 < 2; ++var3) {
 			for(var4 = 0; var4 < 2; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
+				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 17 + var3 * 18));
 			}
 		}
 
 		for(var3 = 0; var3 < 4; ++var3) {
 			this.inventorySlots.add(new SlotArmor(this, this, var1, var1.getSizeInventory() - 1 - var3, 8, 8 + var3 * 18, var3));
 		}
+		this.inventorySlots.add(new SlotArmor(this, this, var1, var1.getSizeInventory() - 5, 80, 62, 4));
 
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 9; ++var4) {
@@ -38,7 +39,7 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
+		this.fontRenderer.drawString("Crafting", 86, 7, 4210752);
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -1,6 +1,10 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.WorldGenMahoganyTrees;
+import io.github.bluestaggo.mcdiverge.WorldGenSpruceTrees;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockSapling extends BlockFlower {
 	protected BlockSapling(int var1, int var2) {
@@ -11,22 +15,57 @@
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(5) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 15) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
+		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(30) == 0) {
+			int type = var1.getBlockMetadata(var2, var3, var4);
+
+			if ((type & 8) == 0) {
+				var1.setBlockMetadataWithNotify(var2, var3, var4, type | 8);
 			} else {
+				type &= 3;
 				var1.setBlock(var2, var3, var4, 0);
-				Object var7 = new WorldGenTrees();
+				WorldGenerator gen = getTreeGenerator(type);
 				if(var5.nextInt(10) == 0) {
-					var7 = new WorldGenBigTree();
+					gen = getBigTreeGenerator(type);
 				}
 
-				if(!((WorldGenerator)var7).generate(var1, var5, var2, var3, var4)) {
-					var1.setBlock(var2, var3, var4, this.blockID);
+				if(!gen.generate(var1, var5, var2, var3, var4)) {
+					var1.setBlockAndMetadata(var2, var3, var4, this.blockID, type);
 				}
 			}
 		}
-
+	}
+
+	private static WorldGenerator getTreeGenerator(int metadata) {
+		switch (metadata) {
+			default: return new WorldGenTrees();
+			case 1: return new WorldGenSpruceTrees();
+			case 2: return new WorldGenTrees().withAltForm(2, 10).withScale(2, 2, 2);
+			case 3: return new WorldGenMahoganyTrees();
+		}
+	}
+
+	private static WorldGenerator getBigTreeGenerator(int metadata) {
+		switch (metadata) {
+			default: return new WorldGenBigTree();
+			case 1: return new WorldGenSpruceTrees().makeBig().withScale(3, 2, 2);
+			case 2: return new WorldGenBigTree().withAltForm(2, 10);
+			case 3: return new WorldGenMahoganyTrees().withScale(5, 8, 6);
+		}
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return (metadata % 8) == 0 ? this.blockIndexInTexture : textureXY(11, 8 + (metadata % 8));
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1 % 8;
+	}
+
+	public int tickRate() {
+		return 1;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/WorldGenDungeons.java
+++ net/minecraft/src/WorldGenDungeons.java
@@ -3,47 +3,92 @@
 import java.util.Random;
 
 public class WorldGenDungeons extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		byte var6 = 3;
-		int var7 = var2.nextInt(2) + 2;
-		int var8 = var2.nextInt(2) + 2;
+	private static final int[] floorMaterials = {
+			Block.cobblestone.blockID,
+			Block.cobblestoneMossy.blockID,
+			Block.stoneBricks.blockID,
+			Block.polishedStone.blockID
+	};
+	private static final int[] wallMaterials = {
+			Block.cobblestone.blockID,
+			Block.stoneBricks.blockID
+	};
+	private boolean pickedCharm = false;
+
+	public boolean generate(World var1, Random var2, int spawnX, int spawnY, int spawnZ) {
+		this.pickedCharm = false;
+
+		// Variables
+		byte height = 3;
+		int width = var2.nextInt(4) + 2;
+		int depth = var2.nextInt(4) + 2;
 		int var9 = 0;
 
-		int var10;
-		int var11;
-		int var12;
-		for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-			for(var11 = var4 - 1; var11 <= var4 + var6 + 1; ++var11) {
-				for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-					Material var13 = var1.getBlockMaterial(var10, var11, var12);
-					if(var11 == var4 - 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if(var11 == var4 + var6 + 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if((var10 == var3 - var7 - 1 || var10 == var3 + var7 + 1 || var12 == var5 - var8 - 1 || var12 == var5 + var8 + 1) && var11 == var4 && var1.getBlockId(var10, var11, var12) == 0 && var1.getBlockId(var10, var11 + 1, var12) == 0) {
-						++var9;
+		int x;
+		int y;
+		int z;
+
+		int floor = floorMaterials[var2.nextInt(floorMaterials.length)];
+		int wall = wallMaterials[var2.nextInt(wallMaterials.length)];
+		int metadata = -1;
+
+		// Check for space
+		for(x = spawnX - width - 1; x <= spawnX + width + 1; ++x) {
+			for(y = spawnY - 1; y <= spawnY + height + 1; ++y) {
+				for(z = spawnZ - depth - 1; z <= spawnZ + depth + 1; ++z) {
+					Material var13 = var1.getBlockMaterial(x, y, z);
+					if(y == spawnY - 1 && !var13.isSolid()) {
+//						return false;
+					}
+
+					if(y == spawnY + height + 1 && !var13.isSolid()) {
+//						return false;
+					}
+
+					if(
+						(x == spawnX - width - 1
+						 || x == spawnX + width + 1
+						 || z == spawnZ - depth - 1
+						 || z == spawnZ + depth + 1)
+						&& y == spawnY && var1.getBlockId(x, y, z) == 0
+						&& var1.getBlockId(x, y + 1, z) == 0) {
+						++var9; // Suitable entrance found
+					}
+
+					if(var1.getBlockId(x, y, z) == Block.stone.blockID && metadata == -1) {
+						metadata = var1.getBlockMetadata(x, y, z);
 					}
 				}
 			}
+		}
+
+		if (metadata == -1) {
+			metadata = 0;
 		}
 
 		if(var9 >= 1 && var9 <= 5) {
-			for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-				for(var11 = var4 + var6; var11 >= var4 - 1; --var11) {
-					for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-						if(var10 != var3 - var7 - 1 && var11 != var4 - 1 && var12 != var5 - var8 - 1 && var10 != var3 + var7 + 1 && var11 != var4 + var6 + 1 && var12 != var5 + var8 + 1) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var11 >= 0 && !var1.getBlockMaterial(var10, var11 - 1, var12).isSolid()) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var1.getBlockMaterial(var10, var11, var12).isSolid()) {
-							if(var11 == var4 - 1 && var2.nextInt(4) != 0) {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestoneMossy.blockID);
+			// Walls + floor
+			for(x = spawnX - width - 1; x <= spawnX + width + 1; ++x) {
+				for(y = spawnY + height; y >= spawnY - 1; --y) {
+					for(z = spawnZ - depth - 1; z <= spawnZ + depth + 1; ++z) {
+						if(x != spawnX - width - 1
+						   && y != spawnY - 1
+						   && z != spawnZ - depth - 1
+						   && x != spawnX + width + 1
+						   && y != spawnY + height + 1
+						   && z != spawnZ + depth + 1) {
+							var1.setBlockWithNotify(x, y, z, 0);
+						} else if(y >= 0 && !var1.getBlockMaterial(x, y - 1, z).isSolid()) {
+							var1.setBlockWithNotify(x, y, z, 0);
+						} else if(var1.getBlockMaterial(x, y, z).isSolid()
+								  || y == spawnY + height + 1
+								  || y == spawnY - 1) {
+							if(y == spawnY - 1 || y == spawnY + height) {
+								var1.setBlockWithNotify(x, y, z, floor);
+								var1.setBlockMetadataWithNotify(x, y, z, metadata);
 							} else {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestone.blockID);
+								var1.setBlockWithNotify(x, y, z, wall);
+								var1.setBlockMetadataWithNotify(x, y, z, metadata);
 							}
 						}
 					}
@@ -51,41 +96,41 @@
 			}
 
 			label110:
-			for(var10 = 0; var10 < 2; ++var10) {
-				for(var11 = 0; var11 < 3; ++var11) {
-					var12 = var3 + var2.nextInt(var7 * 2 + 1) - var7;
-					int var14 = var5 + var2.nextInt(var8 * 2 + 1) - var8;
-					if(var1.getBlockId(var12, var4, var14) == 0) {
+			for(x = 0; x < 4; ++x) {
+				for(y = 0; y < 4; ++y) {
+					z = spawnX + var2.nextInt(width * 2 + 1) - width;
+					int var14 = spawnZ + var2.nextInt(depth * 2 + 1) - depth;
+					if(var1.getBlockId(z, spawnY, var14) == 0) {
 						int var15 = 0;
-						if(var1.getBlockMaterial(var12 - 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12 + 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 - 1).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 + 1).isSolid()) {
+						if(var1.getBlockMaterial(z - 1, spawnY, var14).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z + 1, spawnY, var14).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z, spawnY, var14 - 1).isSolid()) {
+							++var15;
+						}
+
+						if(var1.getBlockMaterial(z, spawnY, var14 + 1).isSolid()) {
 							++var15;
 						}
 
 						if(var15 == 1) {
-							var1.setBlockWithNotify(var12, var4, var14, Block.chest.blockID);
-							TileEntityChest var16 = (TileEntityChest)var1.getBlockTileEntity(var12, var4, var14);
+							var1.setBlockWithNotify(z, spawnY, var14, Block.chest.blockID);
+							TileEntityChest tileEntityChest16 = (TileEntityChest)var1.getBlockTileEntity(z, spawnY, var14);
 							int var17 = 0;
 
 							while(true) {
-								if(var17 >= 8) {
+								if(var17 >= 16) {
 									continue label110;
 								}
 
 								ItemStack var18 = this.pickCheckLootItem(var2);
 								if(var18 != null) {
-									var16.setInventorySlotContents(var2.nextInt(var16.getSizeInventory()), var18);
+									tileEntityChest16.setInventorySlotContents(var2.nextInt(tileEntityChest16.getSizeInventory()), var18);
 								}
 
 								++var17;
@@ -95,22 +140,70 @@
 				}
 			}
 
-			var1.setBlockWithNotify(var3, var4, var5, Block.mobSpawner.blockID);
-			TileEntityMobSpawner var19 = (TileEntityMobSpawner)var1.getBlockTileEntity(var3, var4, var5);
-			var19.mobID = this.pickMobSpawner(var2);
+			int spawners = var2.nextInt(2) + 1;
+			int spx;
+			int spz;
+			for (int spi = 0; spi < spawners; spi++) {
+				do {
+					spx = spawnX + var2.nextInt(width * 2 + 1) - width;
+					spz = spawnZ + var2.nextInt(depth * 2 + 1) - depth;
+				} while (var1.getBlockId(spx, spawnY, spz) == Block.chest.blockID);
+				var1.setBlockWithNotify(spx, spawnY, spz, Block.mobSpawner.blockID);
+				TileEntityMobSpawner tileEntityMobSpawner19 = (TileEntityMobSpawner)var1.getBlockTileEntity(spx, spawnY, spz);
+				tileEntityMobSpawner19.mobID = this.pickMobSpawner(var2);
+			}
 			return true;
 		} else {
 			return false;
 		}
 	}
 
+	private static final Item[] charms = new Item[] {
+			Item.wardingRing,
+			Item.repairKit,
+			Item.slimeShoes
+	};
+
 	private ItemStack pickCheckLootItem(Random var1) {
-		int var2 = var1.nextInt(11);
-		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(2)]) : null)))))))));
+		int var2 = var1.nextInt(13);
+		switch (var2) {
+			case 0: return new ItemStack(Item.silk);
+			case 1: return new ItemStack(Item.ingotIron, var1.nextInt(3) + 1);
+			case 2: return new ItemStack(Item.bread);
+			case 3: return new ItemStack(Item.wheat, var1.nextInt(3) + 1);
+			case 4: return new ItemStack(Item.gunpowder, var1.nextInt(3) + 1);
+			case 5: return new ItemStack(Item.arrow, var1.nextInt(3) + 1);
+		}
+		if (var2 == 6 && var1.nextInt(5) == 0) {
+			return new ItemStack(Item.bucketEmpty);
+		}
+		if (var2 == 7 && var1.nextInt(100) == 0) {
+			return new ItemStack(Item.appleGold);
+		}
+		if (var2 == 8 && var1.nextInt(2) == 0) {
+			return new ItemStack(Item.redstone, var1.nextInt(3) + 1);
+		}
+		if (var2 == 9 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(6)]);
+		}
+		if (var2 == 10 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.diamond, var1.nextInt(3) + 1);
+		}
+		if (var2 == 11 && var1.nextInt(10) == 0) {
+			return new ItemStack(Item.saddle);
+		}
+		if (var2 == 12 && !this.pickedCharm && var1.nextInt(5) == 0) {
+			this.pickedCharm = true;
+			return new ItemStack(charms[var1.nextInt(charms.length)]);
+		}
+		return null;
 	}
 
 	private String pickMobSpawner(Random var1) {
-		int var2 = var1.nextInt(4);
-		return var2 == 0 ? "Skeleton" : (var2 == 1 ? "Zombie" : (var2 == 2 ? "Zombie" : (var2 == 3 ? "Spider" : "")));
+		int var2 = var1.nextInt(5);
+		return var2 == 0 ? "Skeleton"
+				: (var2 == 1 || var2 == 2 ? "Zombie"
+				: (var2 == 3 ? "Spider"
+				: (var2 == 4 ? "Phantom" : "")));
 	}
 }
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,46 +1,75 @@
 package net.minecraft.src;
 
 import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.GuiCredits;
+import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
 public class GuiMainMenu extends GuiScreen {
 	private static final Random rand = new Random();
-	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "};
+	private static final Block[] titleBlocks = {
+			Block.stone,
+			Block.cobblestone,
+			Block.bedrock,
+			Block.wood,
+			Block.planks,
+			Block.obsidian,
+			Block.cobblestoneMossy,
+			Block.dirt,
+			Block.gravel,
+			Block.blockClay
+	};
+	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***",
+											" ** ** * **  * *   *   * * * * *    * ",
+											" * * * * * * * **  *   **  *** **   * ",
+											" *   * * *  ** *   *   * * * * *    * ",
+											" *   * * *   * *** *** * * * * *    * "};
 	private LogoEffectRandomizer[][] logoEffects;
-	private float updateCounter = 0.0F;
 	private String splashString = "missingno";
+	private Block drawBlock;
 
 	public GuiMainMenu() {
+		if (rand.nextDouble() <= 0.0001F) {
+			logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***",
+										   " ** ** * **  * *   *   * * * * *    * ",
+										   " * * * * * * * *   *** **  *** **   * ",
+										   " *   * * *  ** *   *   * * * * *    * ",
+										   " *   * * *   * *** *** * * * * *    * "};
+		}
+
 		try {
 			ArrayList var1 = new ArrayList();
 			BufferedReader var2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")));
 			String var3 = "";
 
-			while(true) {
-				var3 = var2.readLine();
-				if(var3 == null) {
-					this.splashString = (String)var1.get(rand.nextInt(var1.size()));
-					break;
-				}
-
+			while((var3 = var2.readLine()) != null) {
 				var3 = var3.trim();
 				if(var3.length() > 0) {
 					var1.add(var3);
 				}
 			}
+
+			this.splashString = (String)var1.get(rand.nextInt(var1.size()));
+			this.drawBlock = titleBlocks[rand.nextInt(titleBlocks.length)];
 		} catch (Exception var4) {
 		}
 
 	}
 
 	public void updateScreen() {
-		++this.updateCounter;
+		this.mc.sndManager.tickMusic();
+		this.mc.sndManager.playRandomTitleMusicIfReady();
+
 		if(this.logoEffects != null) {
 			for(int var1 = 0; var1 < this.logoEffects.length; ++var1) {
 				for(int var2 = 0; var2 < this.logoEffects[var1].length; ++var2) {
@@ -55,70 +84,100 @@
 	}
 
 	public void initGui() {
-		Calendar var1 = Calendar.getInstance();
-		var1.setTime(new Date());
-		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
-			this.splashString = "Happy birthday, ez!";
-		} else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
-			this.splashString = "Happy birthday, Notch!";
-		} else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
-			this.splashString = "Merry X-mas!";
-		} else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
-			this.splashString = "Happy new year!";
+		this.mc.sndManager.stopBackgroundMusic();
+
+		if(rand.nextInt(2) == 0) {
+			Calendar var1 = Calendar.getInstance();
+			var1.setTime(new Date());
+
+			if(var1.get(Calendar.MONTH) == Calendar.NOVEMBER && var1.get(Calendar.DATE) == 9) {
+				this.splashString = "Happy birthday, ez!";
+			} else if(var1.get(Calendar.MONTH) == Calendar.JUNE && var1.get(Calendar.DATE) == 1) {
+				this.splashString = "Happy birthday, Notch!";
+			} else if(var1.get(Calendar.MONTH) == Calendar.DECEMBER && (var1.get(Calendar.DATE) == 24 || var1.get(Calendar.DATE) == 25)) {
+				this.splashString = "Merry X-mas!";
+			} else if(var1.get(Calendar.MONTH) == Calendar.JANUARY && var1.get(Calendar.DATE) == 1) {
+				this.splashString = "Happy new year!";
+			} else if(var1.get(Calendar.MONTH) == Calendar.MAY && var1.get(Calendar.DATE) == 17) {
+				this.splashString = "Happy birthday, Minecraft!";
+			}
 		}
 
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Singleplayer"));
 		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer"));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Play tutorial level"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Options..."));
-		((GuiButton)this.controlList.get(2)).enabled = false;
-		if(this.mc.session == null) {
+		this.controlList.add(new GuiButton(3, 10, this.height - 30, 60, 20, "Credits"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 132, "Options..."));
+		if (this.mc.options.creativeDebug) {
+			this.controlList.add(new GuiButton(4, 10, this.height - 54, 60, 20, "Biome map"));
+		}
+		if (this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
 
+		File var3 = Minecraft.getMinecraftDir();
+		World.deleteWorld(var3, "World-1");
 	}
 
 	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
-		}
-
-		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiSelectWorld(this));
-		}
-
-		if(var1.id == 2) {
-			this.mc.displayGuiScreen(new GuiMultiplayer(this));
-		}
-
+		switch (var1.id) {
+			case 0:
+				this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
+				break;
+
+			case 1:
+				this.mc.displayGuiScreen(new GuiSelectWorld(this));
+				break;
+
+			case 2:
+				this.mc.displayGuiScreen(new GuiMultiplayer(this));
+				break;
+
+			case 3:
+				this.mc.displayGuiScreen(new GuiCredits(this));
+				break;
+
+			case 4:
+				try {
+					Biome.generateBiomeMap();
+					Biome.generateWorldBiomeMap();
+				} catch (IOException e) {
+					// Don't care
+				}
+				break;
+		}
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
+		this.drawString(this.fontRenderer, Minecraft.version, 2, 2, 0xFF7F7F7F);
 		Tessellator var4 = Tessellator.instance;
 		this.drawLogo(var3);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		var4.setColorOpaque_I(16777215);
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
-		GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-		float var5 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-		var5 = var5 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
-		GL11.glScalef(var5, var5, var5);
+		GL11.glScalef(3.0F, 3.0F, 3.0F);
+		this.drawCenteredString(this.fontRenderer, "DIVERGE", this.width / 2 / 3, 80 / 3, 0xFF00FFFF);
+		GL11.glPopMatrix();
+		GL11.glPushMatrix();
+		GL11.glTranslatef((float)(this.width / 2), (float)(this.height / 4 + 124), 0.0F);
+		float var5 = MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F);
+		float var6 = (1.8F - MathHelper.abs(var5) * 0.1F) * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
+		float var7 = var5 * 2.5F;
+		GL11.glScalef(var6, var6, var6);
+		GL11.glRotatef(var7, 0.0F, 0.0F, 1.0F);
 		this.drawCenteredString(this.fontRenderer, this.splashString, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		String var6 = "Copyright Mojang Specifications. Do not distribute.";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
-		long var7 = Runtime.getRuntime().maxMemory();
+		String var6x = "Copyright Mojang Specifications. Do not distribute.";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, this.height - 10, 16777215);
+		long var7x = Runtime.getRuntime().maxMemory();
 		long var9 = Runtime.getRuntime().totalMemory();
 		long var11 = Runtime.getRuntime().freeMemory();
-		long var13 = var7 - var11;
-		var6 = "Free memory: " + var13 * 100L / var7 + "% of " + var7 / 1024L / 1024L + "MB";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 2, 8421504);
-		var6 = "Allocated memory: " + var9 * 100L / var7 + "% (" + var9 / 1024L / 1024L + "MB)";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 12, 8421504);
+		long var13 = var7x - var11;
+		var6x = "Free memory: " + var13 * 100L / var7x + "% of " + var7x / 1024L / 1024L + "MB";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, 2, 8421504);
+		var6x = "Allocated memory: " + var9 * 100L / var7x + "% (" + var9 / 1024L / 1024L + "MB)";
+		this.drawString(this.fontRenderer, var6x, this.width - this.fontRenderer.getStringWidth(var6x) - 2, 12, 8421504);
 		super.drawScreen(var1, var2, var3);
 	}
 
@@ -137,7 +196,7 @@
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
-		ScaledResolution var14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		ScaledResolution var14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 		var3 = 120 * var14.scaleFactor;
 		GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)var3, 0.05F, 100.0F);
 		GL11.glViewport(0, this.mc.displayHeight - var3, this.mc.displayWidth, var3);
@@ -189,7 +248,6 @@
 						float var10 = (float)(var9.prevHeight + (var9.height - var9.prevHeight) * (double)var1);
 						float var11 = 1.0F;
 						float var12 = 1.0F;
-						float var13 = 0.0F;
 						if(var4 == 0) {
 							var11 = var10 * 0.04F + 1.0F;
 							var12 = 1.0F / var11;
@@ -198,8 +256,7 @@
 
 						GL11.glTranslatef((float)var7, (float)var6, var10);
 						GL11.glScalef(var11, var11, var11);
-						GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-						var5.renderBlockAsItem(Block.stone, var12);
+						var5.renderBlockAsItem(this.drawBlock, var12);
 						GL11.glPopMatrix();
 					}
 				}
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -54,7 +54,8 @@
 			int var6;
 			if(var4) {
 				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
+				Block b = Block.blocksList[var5];
+				if((b instanceof BlockStep && !((BlockStep) b).blockType) || var5 == Block.tilledField.blockID) {
 					var6 = this.getLightValueExt(var1, var2 + 1, var3, false);
 					int var7 = this.getLightValueExt(var1 + 1, var2, var3, false);
 					int var8 = this.getLightValueExt(var1 - 1, var2, var3, false);
--- net/minecraft/src/IWorldAccess.java
+++ net/minecraft/src/IWorldAccess.java
@@ -15,7 +15,7 @@
 
 	void updateAllRenderers();
 
-	void playRecord(String var1, int var2, int var3, int var4);
+	void playRecord(String var1, int var2, int var3, int var4, String author);
 
 	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4);
 }
--- net/minecraft/src/BlockMinecartTrack.java
+++ net/minecraft/src/BlockMinecartTrack.java
@@ -5,7 +5,7 @@
 public class BlockMinecartTrack extends Block {
 	protected BlockMinecartTrack(int var1, int var2) {
 		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 	}
 
 	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -3,6 +3,11 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+import io.github.bluestaggo.mcdiverge.ModelFox;
+import io.github.bluestaggo.mcdiverge.RenderPhantom;
 import org.lwjgl.opengl.GL11;
 
 public class RenderManager {
@@ -29,10 +34,12 @@
 		this.entityRenderMap.put(EntitySheep.class, new RenderSheep(new ModelSheep(), new ModelSheepFur(), 0.7F));
 		this.entityRenderMap.put(EntityCow.class, new RenderCow(new ModelCow(), 0.7F));
 		this.entityRenderMap.put(EntityChicken.class, new RenderChicken(new ModelChicken(), 0.3F));
+		this.entityRenderMap.put(EntityFox.class, new RenderLiving(new ModelFox(), 0.4F));
 		this.entityRenderMap.put(EntityCreeper.class, new RenderCreeper());
 		this.entityRenderMap.put(EntitySkeleton.class, new RenderLiving(new ModelSkeleton(), 0.5F));
 		this.entityRenderMap.put(EntityZombie.class, new RenderLiving(new ModelZombie(), 0.5F));
 		this.entityRenderMap.put(EntitySlime.class, new RenderSlime(new ModelSlime(16), new ModelSlime(0), 0.25F));
+		this.entityRenderMap.put(EntityPhantom.class, new RenderPhantom(new ModelBiped(), 0.5F));
 		this.entityRenderMap.put(EntityPlayer.class, new RenderPlayer());
 		this.entityRenderMap.put(EntityGiantZombie.class, new RenderGiantZombie(new ModelZombie(), 0.5F, 6.0F));
 		this.entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
--- net/minecraft/src/ScaledResolution.java
+++ net/minecraft/src/ScaledResolution.java
@@ -5,17 +5,19 @@
 	private int scaledHeight;
 	public int scaleFactor;
 
-	public ScaledResolution(int var1, int var2) {
+	public ScaledResolution(int var1, int var2, int var3) {
 		this.scaledWidth = var1;
 		this.scaledHeight = var2;
+		if (var3 <= 0)
+			var3 = 1000;
 
-		for(this.scaleFactor = 1; this.scaledWidth / (this.scaleFactor + 1) >= 320 && this.scaledHeight / (this.scaleFactor + 1) >= 240; ++this.scaleFactor) {
+		while(this.scaleFactor < var3 && this.scaledWidth / (this.scaleFactor + 1) >= 320 && this.scaledHeight / (this.scaleFactor + 1) >= 240) {
+			++this.scaleFactor;
 		}
 
 		this.scaledWidth /= this.scaleFactor;
 		this.scaledHeight /= this.scaleFactor;
 	}
-
 	public int getScaledWidth() {
 		return this.scaledWidth;
 	}
--- net/minecraft/src/Biome.java
+++ /dev/null
@@ -1,316 +1,0 @@
-package io.github.bluestaggo.mcdiverge;
-
-import net.minecraft.src.*;
-
-import javax.imageio.ImageIO;
-import java.awt.*;
-import java.awt.font.FontRenderContext;
-import java.awt.font.GlyphVector;
-import java.awt.image.BufferedImage;
-import java.awt.image.WritableRaster;
-import java.io.File;
-import java.io.IOException;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Random;
-
-public enum Biome {
-	DESERT(0.75F, 0.00F, 1.00F, 0.25F) {
-		public void populate(PopulatorHost host) {
-			int cactiCount = host.rand.nextInt(5) - 2;
-			if (cactiCount > 0)
-				host.generateSurface(new WorldGenCactus().withScale(4, 1, 0), cactiCount, 8);
-		}
-
-		public Block getSurface() {
-			return Block.sand;
-		}
-
-		public Block getSoil() {
-			return Block.sand;
-		}
-
-		public int getStoneMetadata() {
-			return 3;
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 255, 128, 0 };
-		}
-	},
-	TUNDRA(0.00F, 0.00F, 0.30F, 1.00F) {
-		public void populate(PopulatorHost host) {
-			TUNDRA_TREES.populate(host);
-
-			for(int x = host.x + 8; x < host.x + 24; ++x) {
-				for(int z = host.z + 8; z < host.z + 24; ++z) {
-					int y = host.worldObj.getTopSolidOrLiquidBlock(x, z);
-					if(	   (host.chunkProvider.getBiome(x - 16, z - 16) == this
-							&& host.chunkProvider.getBiome(x - 16, z + 16) == this
-							&& host.chunkProvider.getBiome(x + 16, z - 16) == this
-							&& host.chunkProvider.getBiome(x + 16, z + 16) == this)
-
-							&& y > 0 && y < 128 && host.worldObj.getBlockId(x, y, z) == 0
-							&& host.worldObj.getBlockMaterial(x, y - 1, z).getIsSolid()
-							&& host.worldObj.getBlockMaterial(x, y - 1, z) != Material.ice) {
-						host.worldObj.setBlockWithNotify(x, y, z, Block.snow.blockID);
-					}
-				}
-			}
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 0, 128, 255 };
-		}
-	},
-	RAINFOREST(0.75F, 0.60F, 1.00F, 1.00F) {
-		public void populate(PopulatorHost host) {
-			host.generateSurface(new WorldGenShrubs().withMetadata(3), 4, 8);
-			RAINFOREST_TREES.populate(host);
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 128, 255, 0 };
-		}
-	},
-	SAVANNA(0.50F, 0.00F, 1.00F, 0.40F) {
-		public void populate(PopulatorHost host) {
-			SAVANNA_TREES.populate(host);
-		}
-
-		public Block getSurface() {
-			return Block.dirt;
-		}
-
-		public int getSurfaceMetadata() {
-			return 1;
-		}
-
-		public int getStoneMetadata() {
-			return 3;
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 255, 255, 0 };
-		}
-	},
-	SEASONAL_FOREST(0.60F, 0.40F, 1.00F, 1.00F) {
-		public void populate(PopulatorHost host) {
-			SEASONAL_FOREST_TREES.populate(host);
-			host.generateFlowers(4);
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 0, 200, 100 };
-		}
-	},
-	PLAINS(0.00F, 0.00F, 1.00F, 1.00F) {
-		public void populate(PopulatorHost host) {
-			PLAINS_TREES.populate(host);
-			host.generateFlowers(2);
-		}
-
-		public int[] getMapColor() {
-			return new int[] { 0, 255, 0 };
-		}
-	};
-
-	//#region Biome Properties
-	private static final TreePopulator PLAINS_TREES = new TreePopulator()
-			.withTree(new WorldGenTrees())
-			.withBigTree(new WorldGenBigTree(), 20, 2)
-			.withHighTree(new WorldGenSpruceTrees(), 80, 100)
-			.withShrub(new WorldGenShrubs(), 1)
-			.withDensity(4.0D, 8.0D, 2.0D);
-
-	private static final TreePopulator TUNDRA_TREES = new TreePopulator()
-			.withTree(new WorldGenSpruceTrees())
-			.withBigTree(new WorldGenSpruceTrees().makeBig().withScale(6, 6, 5), 15, 1)
-			.withDensity(1.0D, 4.0D, 1.0D);
-
-	private static final TreePopulator SEASONAL_FOREST_TREES = new TreePopulator()
-			.withTree(new WorldGenTrees().withAltForm(2, 0.5D))
-			.withBigTree(new WorldGenBigTree().withAltForm(2, 0.75D), 20, 2)
-			.withShrub(new WorldGenShrubs(), -2)
-			.withDensity(8.0D, 12.0D, 2.0D);
-
-	private static final TreePopulator SAVANNA_TREES = new TreePopulator()
-			.withTree(new WorldGenMahoganyTrees())
-			.withShrub(new WorldGenShrubs().withMetadata(3), -5)
-			.withDensity(2.0D, 3.0D, 2.0D);
-
-	private static final TreePopulator RAINFOREST_TREES = new TreePopulator()
-			.withTree(new WorldGenMahoganyTrees())
-			.withDensity(16.0D, 24.0D, 1.0D);
-	//#endregion
-
-	//#region Properties
-	private final float minTemperature, minHumidity, maxTemperature, maxHumidity;
-
-	public float getMinTemperature() {
-		return minTemperature;
-	}
-
-	public float getMinHumidity() {
-		return minHumidity;
-	}
-
-	public float getMaxTemperature() {
-		return maxTemperature;
-	}
-
-	public float getMaxHumidity() {
-		return maxHumidity;
-	}
-
-	public Block getSurface() {
-		return Block.grass;
-	}
-
-	public Block getSoil() {
-		return Block.dirt;
-	}
-
-	public int getSurfaceMetadata() {
-		return 0;
-	}
-
-	public int getStoneMetadata() {
-		return 0;
-	}
-
-	public int[] getMapColor() {
-		return new int[] {
-				(int) MathHelper.clamp((minTemperature + maxTemperature) / 2.0F * 255.0F, 0.0F, 255.0F),
-				(int) MathHelper.clamp((minHumidity + maxHumidity) / 2.0F * 255.0F, 0.0F, 255.0F),
-				128
-		};
-	}
-
-	Biome(float minTemperature, float minHumidity, float maxTemperature, float maxHumidity) {
-		this.minTemperature = minTemperature;
-		this.minHumidity = minHumidity;
-		this.maxTemperature = maxTemperature;
-		this.maxHumidity = maxHumidity;
-	}
-
-	public void populate(PopulatorHost host) { }
-	//#endregion Properties
-
-	public static Biome getBiome(float temp, float hum) {
-		for (Biome biome : Biome.values()) {
-			if (temp >= biome.getMinTemperature()
-					&& temp <= biome.getMaxTemperature()
-					&& hum >= biome.getMinHumidity()
-					&& hum <= biome.getMaxHumidity()) {
-				return biome;
-			}
-		}
-		return Biome.PLAINS;
-	}
-
-	//#region Biome Maps
-	public static void generateBiomeMap() throws IOException {
-		Instant generationBegin = Instant.now();
-
-		BufferedImage img = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_RGB);
-		WritableRaster raster = img.getRaster();
-		Graphics2D gfx = img.createGraphics();
-
-		for (int x = 0; x < 1000; x++)
-			for (int y = 0; y < 1000; y++) {
-				Biome biome = Biome.getBiome(x / 1000.0F, y / 1000.0F);
-				int[] color = biome.getMapColor();
-				raster.setPixel(x, y, color);
-			}
-
-		Font font = new Font(Font.DIALOG, Font.PLAIN, 16);
-		Stroke stroke = new BasicStroke(2.0F, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL);
-		Stroke originalStroke = gfx.getStroke();
-
-		gfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-		gfx.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
-
-		for (Biome biome : Biome.values()) {
-			String biomeName = biome.name().toLowerCase();
-			biomeName = Character.toUpperCase(biomeName.charAt(0)) + biomeName.substring(1);
-			biomeName = biomeName.replace('_', ' ');
-
-			int labelX = (int)MathHelper.clamp(biome.getMinTemperature() * 1000.0F, 0.0F, 1000.0F);
-			int labelY = (int)MathHelper.clamp(biome.getMinHumidity() * 1000.0F, 0.0F, 1000.0F);
-
-			FontRenderContext fctx = gfx.getFontRenderContext();
-			GlyphVector glyphVector = font.createGlyphVector(fctx, biomeName);
-
-			Rectangle bounds = glyphVector.getPixelBounds(fctx, labelX, labelY + 16);
-			if (bounds.getMaxX() > 1000.0F) labelX -= bounds.width;
-			if (bounds.getMaxY() > 1000.0F) labelY -= bounds.height;
-			Shape textShape = glyphVector.getOutline(labelX, labelY + 16);
-
-			gfx.setColor(Color.black);
-			gfx.setStroke(stroke);
-			gfx.draw(textShape);
-
-			gfx.setColor(Color.white);
-			gfx.setStroke(originalStroke);
-			gfx.fill(textShape);
-		}
-
-		gfx.dispose();
-
-		File imgFile = new File("C:/tmp/mcdiverge-biomemap.png");
-		ImageIO.write(img, "png", imgFile);
-
-		Instant generationEnd = Instant.now();
-		System.out.println("Saved biome map to C:/tmp/mcdiverge-biomemap.png in "
-				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
-	}
-
-	public static void generateWorldBiomeMap() throws IOException {
-		Instant generationBegin = Instant.now();
-
-		final int size = 2048;
-		final int scale = 16;
-		final double biomeSize = 250000.0D / scale;
-//		final float biomeBlend = 0.005F / scale;
-		final float biomeBlend = 0.0F;
-		Random rand = new Random();
-
-		BufferedImage img = new BufferedImage(size * 2, size * 2, BufferedImage.TYPE_INT_RGB);
-		WritableRaster raster = img.getRaster();
-
-		long seed = rand.nextLong();
-
-		for (int x = 0; x < size; x++)
-			for (int y = 0; y < size; y++) {
-				float temperature = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
-								x / biomeSize, y / biomeSize, 1000, 8) / 256 * 1.2F + 0.6F
-								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
-						0.0F, 1.0F);
-				float humidity = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
-								x / biomeSize, y / biomeSize, -1000, 8) / 256 * 1.2F + 0.6F
-								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
-						0.0F, 1.0F);
-
-				Biome biome = Biome.getBiome(temperature, humidity);
-				raster.setPixel(x, y, biome.getMapColor());
-
-				int tempCol = (int)(temperature * 255.0F);
-				int humCol = (int)(humidity * 255.0F);
-				raster.setPixel(x + size, y, new int[] { tempCol, tempCol, tempCol });
-				raster.setPixel(x + size, y + size, new int[] { humCol, humCol, humCol });
-				raster.setPixel(x, y + size, new int[] { tempCol, humCol, 0 });
-			}
-
-		Graphics2D gfx = img.createGraphics();
-		gfx.drawString("Scale: 1:" + scale, 4, 20);
-
-		File imgFile = new File("C:/tmp/mcdiverge-worldbiomemap.png");
-		ImageIO.write(img, "png", imgFile);
-
-		Instant generationEnd = Instant.now();
-		System.out.println("Saved world biome map to C:/tmp/mcdiverge-worldbiomemap.png in "
-				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
-	}
-	//#endregion Biome Maps
-}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RenderPhantom.java
@@ -1,0 +1,23 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityLiving;
+import net.minecraft.src.ModelBase;
+import net.minecraft.src.RenderLiving;
+import org.lwjgl.opengl.GL11;
+
+public class RenderPhantom extends RenderLiving {
+	public RenderPhantom(ModelBase var1, float var2) {
+		super(var1, var2);
+	}
+
+	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
+
+		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_LIGHTING);
+	}
+}
--- net/minecraft/src/CanvasIsomPreview.java
+++ net/minecraft/src/CanvasIsomPreview.java
@@ -44,7 +44,7 @@
 	public File getWorkingDirectory(String var1) {
 		String var2 = System.getProperty("user.home", ".");
 		File var3;
-		switch(OSMapIsom.osValues[getPlatform().ordinal()]) {
+		switch(CanvasIsomPreview.SyntheticClass_1.$SwitchMap$net$minecraft$src$EnumOSIsom[getPlatform().ordinal()]) {
 		case 1:
 		case 2:
 			var3 = new File(var2, '.' + var1 + '/');
@@ -374,5 +374,32 @@
 
 	static boolean isRunning(CanvasIsomPreview var0) {
 		return var0.running;
+	}
+
+	static final class SyntheticClass_1 {
+		static final int[] $SwitchMap$net$minecraft$src$EnumOSIsom = new int[EnumOSIsom.values().length];
+
+		static {
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.linux.ordinal()] = 1;
+			} catch (NoSuchFieldError noSuchFieldError4) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.solaris.ordinal()] = 2;
+			} catch (NoSuchFieldError noSuchFieldError3) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.windows.ordinal()] = 3;
+			} catch (NoSuchFieldError noSuchFieldError2) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOSIsom[EnumOSIsom.macos.ordinal()] = 4;
+			} catch (NoSuchFieldError noSuchFieldError1) {
+			}
+
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet8UpdateHealth.java
@@ -1,0 +1,35 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet8UpdateHealth extends Packet {
+	public int healthMP;
+
+	public Packet8UpdateHealth() {
+	}
+
+	public Packet8UpdateHealth(int var1) {
+		this.healthMP = var1;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.healthMP = dataInputStream1.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeShort(this.healthMP);
+	}
+
+	public void processPacket(NetHandler var1) {
+		var1.handleHealth(this);
+	}
+
+	public int getPacketSize() {
+		return 2;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemEquipable.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class ItemEquipable extends Item {
+	public final int armorType;
+
+	public ItemEquipable(int var1, int var2) {
+		this(var1, var2, 0);
+	}
+
+	public ItemEquipable(int var1, int var2, int var3) {
+		super(var1);
+		this.maxStackSize = 1;
+		this.armorType = var2;
+		this.maxDamage = var3;
+	}
+}
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -3,15 +3,17 @@
 import java.util.Random;
 
 public class BlockRedstoneOre extends Block {
-	private boolean glowing;
+	private final boolean glowing;
+	private final int altTex;
 
-	public BlockRedstoneOre(int var1, int var2, boolean var3) {
+	public BlockRedstoneOre(int var1, int var2, int var3, boolean var4) {
 		super(var1, var2, Material.rock);
-		if(var3) {
+		this.altTex = var3;
+		if(var4) {
 			this.setTickOnLoad(true);
 		}
 
-		this.glowing = var3;
+		this.glowing = var4;
 	}
 
 	public int tickRate() {
@@ -36,14 +38,16 @@
 	private void glow(World var1, int var2, int var3, int var4) {
 		this.sparkle(var1, var2, var3, var4);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			int metadata = var1.getBlockMetadata(var2, var3, var4);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID, metadata);
 		}
 
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			int metadata = var1.getBlockMetadata(var2, var3, var4);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstone.blockID, metadata);
 		}
 
 	}
@@ -99,6 +103,9 @@
 				var1.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
 			}
 		}
+	}
 
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return var2 == 0 ? blockIndexInTexture : altTex + (var2 - 1) * 16;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet38EntityStatus.java
@@ -1,0 +1,39 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet38EntityStatus extends Packet {
+	public int entityId;
+	public byte entityStatus;
+
+	public Packet38EntityStatus() {
+	}
+
+	public Packet38EntityStatus(int var1, byte var2) {
+		this.entityId = var1;
+		this.entityStatus = var2;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.entityId = dataInputStream1.readInt();
+		this.entityStatus = dataInputStream1.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeInt(this.entityId);
+		dataOutputStream1.writeByte(this.entityStatus);
+	}
+
+	public void processPacket(NetHandler var1) {
+		var1.handleEntityStatus(this);
+	}
+
+	public int getPacketSize() {
+		return 5;
+	}
+}
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -1,12 +1,16 @@
 package net.minecraft.src;
 
-public abstract class EntityAnimal extends EntityCreature implements IAnimals {
+public abstract class EntityAnimal extends EntityCreature implements IAnimal {
 	public EntityAnimal(World var1) {
 		super(var1);
 	}
 
 	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
+		int block = this.worldObj.getBlockId(var1, var2 - 1, var3);
+		return block == Block.grass.blockID
+				|| block == Block.dirt.blockID
+						? 10.0F
+						: this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
@@ -21,7 +25,9 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.boundingBox.minY);
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID && this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
+		int var4 = this.worldObj.getBlockId(var1, var2 - 1, var3);
+		return (var4 == Block.grass.blockID || var4 == Block.dirt.blockID || var4 == Block.snow.blockID)
+				&& var2 >= 64 && this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
 	}
 
 	public int getTalkInterval() {
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -49,6 +49,14 @@
 		return var0 < 0 ? -((-var0 - 1) / var1) - 1 : var0 / var1;
 	}
 
+	public static float clamp(float x, float min, float max) {
+		return Math.min(Math.max(x, min), max);
+	}
+
+	public static float lerp(float a, float b, float t) {
+		return a + (b - a) * t;
+	}
+
 	static {
 		for(int var0 = 0; var0 < 65536; ++var0) {
 			SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -33,8 +33,8 @@
 		return 0.4F;
 	}
 
-	protected int getDropItemId() {
-		return Item.leather.shiftedIndex;
+	protected int[] getDropItems() {
+		return new int[] { Item.leather.shiftedIndex, Item.beefRaw.shiftedIndex };
 	}
 
 	public boolean interact(EntityPlayer var1) {
--- net/minecraft/src/RenderPlayer.java
+++ net/minecraft/src/RenderPlayer.java
@@ -1,11 +1,16 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemCharm;
+import io.github.bluestaggo.mcdiverge.ModelStaggo;
 import org.lwjgl.opengl.GL11;
 
 public class RenderPlayer extends RenderLiving {
 	private ModelBiped modelBipedMain = (ModelBiped)this.mainModel;
+	private ModelBiped modelStaggo = new ModelStaggo(0.0F);
 	private ModelBiped modelArmorChestplate = new ModelBiped(1.0F);
 	private ModelBiped modelArmor = new ModelBiped(0.5F);
+	private ModelBiped modelCharmUpper = new ModelBiped(1.1F);
+	private ModelBiped modelCharmLower = new ModelBiped(0.6F);
 	private static final String[] armorFilenamePrefix = new String[]{"cloth", "chain", "iron", "diamond", "gold"};
 
 	public RenderPlayer() {
@@ -13,7 +18,12 @@
 	}
 
 	protected boolean setArmorModel(EntityPlayer var1, int var2) {
-		ItemStack var3 = var1.inventory.armorItemInSlot(3 - var2);
+		ModelBiped mainModelBiped = (ModelBiped)this.mainModel;
+		boolean charmUpper = var2 == 5;
+		if (charmUpper) {
+			var2 = 4;
+		}
+		ItemStack var3 = var1.inventory.armorItemInSlot(4 - var2);
 		if(var3 != null) {
 			Item var4 = var3.getItem();
 			if(var4 instanceof ItemArmor) {
@@ -27,8 +37,30 @@
 				var6.bipedLeftArm.showModel = var2 == 1;
 				var6.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
 				var6.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
+				var6.heldItemLeft = mainModelBiped.heldItemLeft;
+				var6.heldItemRight = mainModelBiped.heldItemRight;
+				var6.isSneak = mainModelBiped.isSneak;
+				var6.swingProgress = mainModelBiped.swingProgress;
+				var6.isRiding = mainModelBiped.isRiding;
 				this.setRenderPassModel(var6);
 				return true;
+			} else if(var4 instanceof ItemCharm && var2 == 4 && ((ItemCharm) var4).textureName != null) {
+				this.loadTexture("/charm/" + ((ItemCharm) var4).textureName + (charmUpper ? "_upper.png" : "_lower.png"));
+				ModelBiped modelCharm = charmUpper ? modelCharmUpper : modelCharmLower;
+				modelCharm.bipedHead.showModel = true;
+				modelCharm.bipedHeadwear.showModel = true;
+				modelCharm.bipedBody.showModel = true;
+				modelCharm.bipedRightArm.showModel = true;
+				modelCharm.bipedLeftArm.showModel = true;
+				modelCharm.bipedRightLeg.showModel = true;
+				modelCharm.bipedLeftLeg.showModel = true;
+				modelCharm.heldItemLeft = mainModelBiped.heldItemLeft;
+				modelCharm.heldItemRight = mainModelBiped.heldItemRight;
+				modelCharm.isSneak = mainModelBiped.isSneak;
+				modelCharm.swingProgress = mainModelBiped.swingProgress;
+				modelCharm.isRiding = mainModelBiped.isRiding;
+				this.setRenderPassModel(modelCharm);
+				return true;
 			}
 		}
 
@@ -36,12 +68,13 @@
 	}
 
 	public void renderPlayer(EntityPlayer var1, double var2, double var4, double var6, float var8, float var9) {
+		this.mainModel = var1.blueStaggo ? this.modelStaggo : this.modelBipedMain;
 		ItemStack var10 = var1.inventory.getCurrentItem();
-		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = var10 != null;
-		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = var1.isSneaking();
+		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelStaggo.heldItemRight = this.modelBipedMain.heldItemRight = var10 != null;
+		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelStaggo.isSneak = this.modelBipedMain.isSneak = var1.isSneaking();
 		super.doRenderLiving(var1, var2, var4 - (double)var1.yOffset, var6, var8, var9);
-		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = false;
-		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = false;
+		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelStaggo.isSneak = this.modelBipedMain.isSneak = false;
+		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelStaggo.heldItemRight = this.modelBipedMain.heldItemRight = false;
 		FontRenderer var11 = this.getFontRendererFromRenderManager();
 		float var12 = 1.6F;
 		float var13 = (float)(1.0D / 60.0D) * var12;
@@ -84,14 +117,15 @@
 		ItemStack var3 = var1.inventory.getCurrentItem();
 		if(var3 != null) {
 			GL11.glPushMatrix();
-			this.modelBipedMain.bipedRightArm.renderWithRotation(1.0F / 16.0F);
+			ModelBiped model = var1.blueStaggo ? this.modelStaggo : this.modelBipedMain;
+			model.bipedRightArm.renderWithRotation(1.0F / 16.0F);
 			GL11.glTranslatef(-(1.0F / 16.0F), 7.0F / 16.0F, 1.0F / 16.0F);
 			float var4;
 			if(var3.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.itemID].getRenderType())) {
 				var4 = 0.5F;
 				GL11.glTranslatef(0.0F, 3.0F / 16.0F, -(5.0F / 16.0F));
 				var4 *= 12.0F / 16.0F;
-				GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F) ;
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 				GL11.glScalef(var4, -var4, var4);
 			} else if(Item.itemsList[var3.itemID].isFull3D()) {
@@ -120,10 +154,11 @@
 		GL11.glScalef(var3, var3, var3);
 	}
 
-	public void drawFirstPersonHand() {
-		this.modelBipedMain.swingProgress = 0.0F;
-		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
-		this.modelBipedMain.bipedRightArm.render(1.0F / 16.0F);
+	public void drawFirstPersonHand(boolean staggo) {
+		ModelBiped model = staggo ? this.modelStaggo : this.modelBipedMain;
+		model.swingProgress = 0.0F;
+		model.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
+		model.bipedRightArm.render(1.0F / 16.0F);
 	}
 
 	protected void preRenderCallback(EntityLiving var1, float var2) {
@@ -144,5 +179,9 @@
 
 	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
 		this.renderPlayer((EntityPlayer)var1, var2, var4, var6, var8, var9);
+	}
+
+	protected float maxRenderPasses() {
+		return 6;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Pair.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.Objects;
+
+public class Pair<I0, I1> {
+	public I0 var0;
+	public I1 var1;
+
+	public Pair(I0 var0, I1 var1) {
+		this.var0 = var0;
+		this.var1 = var1;
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		Pair<?, ?> pair = (Pair<?, ?>) o;
+		return Objects.equals(var0, pair.var0) && Objects.equals(var1, pair.var1);
+	}
+
+	public int hashCode() {
+		return Objects.hash(var0, var1);
+	}
+}
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -47,7 +47,7 @@
 	public void onDeath(Entity var1) {
 		super.onDeath(var1);
 		if(var1 instanceof EntitySkeleton) {
-			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(2), 1);
+			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(6), 1);
 		}
 
 	}
--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -28,7 +28,7 @@
 		this.checkFlowerChange(var1, var2, var3, var4);
 	}
 
-	protected final void g(World var1, int var2, int var3, int var4) {
+	protected final void checkFlowerChange(World var1, int var2, int var3, int var4) {
 		if(!this.canBlockStay(var1, var2, var3, var4)) {
 			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
 			var1.setBlockWithNotify(var2, var3, var4, 0);
@@ -36,7 +36,7 @@
 
 	}
 
-	protected final void checkFlowerChange(World var1, int var2, int var3, int var4) {
+	protected final void g(World var1, int var2, int var3, int var4) {
 		if(!this.canBlockStay(var1, var2, var3, var4)) {
 			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
 			var1.setBlockWithNotify(var2, var3, var4, 0);
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -4,8 +4,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
-import org.lwjgl.input.Keyboard;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -26,7 +27,11 @@
 	}
 
 	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
-		ScaledResolution var5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		if (!var2 && !this.mc.showHud) {
+			return;
+		}
+
+		ScaledResolution var5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 		int var6 = var5.getScaledWidth();
 		int var7 = var5.getScaledHeight();
 		FontRenderer var8 = this.mc.fontRenderer;
@@ -54,11 +59,17 @@
 
 		int var11 = this.mc.thePlayer.health;
 		int var12 = this.mc.thePlayer.prevHealth;
+		float cf0 = this.mc.thePlayer.energy;
+		float cf1 = this.mc.thePlayer.mana;
+		boolean cz1 = this.mc.thePlayer.energyRegen;
+		boolean cz2 = rand.nextFloat() < this.mc.thePlayer.energyBoost * 25.0F;
+		boolean cz3 = this.mc.thePlayer.showMana;
+		boolean cz4 = this.mc.thePlayer.creative;
 		this.rand.setSeed((long)(this.updateCounter * 312871));
 		int var13;
 		int var14;
 		int var15;
-		if(this.mc.playerController.shouldDrawHUD()) {
+		if(this.mc.playerController.shouldDrawHUD() && !cz4) {
 			var13 = this.mc.thePlayer.getPlayerArmorValue();
 
 			int var16;
@@ -67,15 +78,15 @@
 				if(var13 > 0) {
 					var16 = var6 / 2 + 91 - var14 * 8 - 9;
 					if(var14 * 2 + 1 < var13) {
-						this.drawTexturedModalRect(var16, var15, 34, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 34, 9, 9, 9);
 					}
 
 					if(var14 * 2 + 1 == var13) {
-						this.drawTexturedModalRect(var16, var15, 25, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 25, 9, 9, 9);
 					}
 
 					if(var14 * 2 + 1 > var13) {
-						this.drawTexturedModalRect(var16, var15, 16, 9, 9, 9);
+						this.drawTexturedModalRect(var16, var15 - 10, 16, 9, 9, 9);
 					}
 				}
 
@@ -107,18 +118,44 @@
 				if(var14 * 2 + 1 == var11) {
 					this.drawTexturedModalRect(var17, var15, 61, 0, 9, 9);
 				}
+
+				var15 = var7 - 32;
+				if (cz1) {
+					var15 += this.rand.nextInt(2);
+				}
+				var16 = var6 / 2 + 91 - var14 * 8 - 9;
+
+				this.drawTexturedModalRect(var16, var15, 34 + (cz2 ? 9 : 0), 18, 9, 9);
+				int ci3 = MathHelper.floor_float(MathHelper.clamp((var14 * 2 + 2 - cf0) * 9, 0, 9));
+				this.drawTexturedModalRect(var16 + ci3, var15, 52 + ci3, 18, 9, 9);
+
+				if (cz3) {
+					var15 = var7 - 42;
+					var16 = var6 / 2 - 91 + var14 * 8;
+					this.drawTexturedModalRect(var16, var15, 16, 27, 9, 9);
+					int ci5 = MathHelper.floor_float(MathHelper.clamp((cf1 - (var14 * 2 + 1)) * 9, 0, 9));
+					this.drawTexturedModalRect(var16, var15, 25, 27, ci5, 9);
+				}
 			}
 
 			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
+				if (cz3) {
+					var7 -= 10;
+				}
+
 				var14 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
 				var15 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var14;
 
 				for(var16 = 0; var16 < var14 + var15; ++var16) {
 					if(var16 < var14) {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 16, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 42, 16, 18, 9, 9);
 					} else {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 25, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 42, 25, 18, 9, 9);
 					}
+				}
+
+				if (cz3) {
+					var7 += 10;
 				}
 			}
 		}
@@ -139,11 +176,14 @@
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		String var21;
-		if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
+		if(this.mc.options.debugMenu) {
+			var8.drawStringWithShadow(Minecraft.version + " (" + this.mc.debug + ")", 2, 2, 16777215);
+			var8.drawStringWithShadow(this.mc.debugInfoLocation(), 2, 12, 16777215);
+			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 22, 16777215);
+			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 32, 16777215);
+			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 42, 16777215);
+			var8.drawStringWithShadow(this.mc.debugInfoSeed(), 2, 52, 16777215);
+			var8.drawStringWithShadow(this.mc.debugInfoWorld(), 2, 62, 16777215);
 			long var22 = Runtime.getRuntime().maxMemory();
 			long var27 = Runtime.getRuntime().totalMemory();
 			long var28 = Runtime.getRuntime().freeMemory();
@@ -153,7 +193,7 @@
 			var21 = "Allocated memory: " + var27 * 100L / var22 + "% (" + var27 / 1024L / 1024L + "MB)";
 			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 12, 14737632);
 		} else {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01", 2, 2, 16777215);
+			var8.drawStringWithShadow(Minecraft.version, 2, 2, 16777215);
 		}
 
 		if(this.recordPlayingUpFor > 0) {
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,10 +1,19 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemHoe extends Item {
+	private final boolean silk;
+
 	public ItemHoe(int var1, int var2) {
 		super(var1);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
+		this.maxDamage = 32 << Math.abs(var2);
+		this.silk = var2 < 0;
+	}
+
+	public boolean isSilk() {
+		return this.silk;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
@@ -37,5 +46,16 @@
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				"Right click to create farmland",
+				ItemTooltip.DESCRIPTION_COL,
+				"and gather seeds.",
+				ItemTooltip.DESCRIPTION_COL,
+				Integer.toString(this.maxDamage) + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ModelStaggo.java
@@ -1,0 +1,61 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.MathHelper;
+import net.minecraft.src.ModelBiped;
+import net.minecraft.src.ModelRenderer;
+
+public class ModelStaggo extends ModelBiped {
+	public ModelRenderer bipedTail;
+	public ModelRenderer bipedSnout;
+	public ModelRenderer bipedEars;
+
+	public ModelStaggo(float var1) {
+		super(var1, true);
+		this.bipedTail = new ModelRenderer(0, 32);
+		this.bipedTail.bigTex = true;
+		this.bipedTail.addBox(-2.0F, -12.0F, 0.0F, 4, 10, 4, var1);
+		this.bipedTail.setRotationPoint(0.0F, 8.0F, 0.0F);
+		this.bipedTail.rotateAngleX = -2.0F;
+		this.bipedSnout = new ModelRenderer(16, 36);
+		this.bipedSnout.bigTex = true;
+		this.bipedSnout.addBox(-2.0F, -2.0F + var1, -6.0F - var1, 4, 2, 2, var1 / 4.0F);
+		this.bipedSnout.setRotationPoint(0.0F, 0.0F, 0.0F);
+		this.bipedEars = new ModelRenderer(16, 32);
+		this.bipedEars.bigTex = true;
+		this.bipedEars.addBox(-4.0F, -10.0F - var1, -1.0F - var1, 8, 2, 1, var1 / 4.0F);
+		this.bipedEars.setRotationPoint(0.0F, 0.0F, 0.0F);
+	}
+
+	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
+		super.render(var1, var2, var3, var4, var5, var6);
+		this.bipedTail.render(var6);
+		this.bipedSnout.render(var6);
+		this.bipedEars.render(var6);
+	}
+
+	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
+
+		this.bipedTail.rotateAngleX = this.bipedBody.rotateAngleX;
+		this.bipedTail.rotateAngleY = this.bipedBody.rotateAngleY;
+		this.bipedTail.rotateAngleX -= 2.0F;
+		this.bipedTail.rotateAngleY += MathHelper.cos(var1 * 0.6662F) * 0.1F * var2;
+		this.bipedTail.rotateAngleZ = MathHelper.sin(var3 * 0.2F) * 0.05F;
+
+		this.bipedEars.rotateAngleX = this.bipedSnout.rotateAngleX = this.bipedHead.rotateAngleX;
+		this.bipedEars.rotateAngleY = this.bipedSnout.rotateAngleY = this.bipedHead.rotateAngleY;
+		this.bipedEars.rotateAngleZ = this.bipedSnout.rotateAngleZ = this.bipedHead.rotateAngleZ;
+		this.bipedEars.rotationPointY = this.bipedSnout.rotationPointY = this.bipedHead.rotationPointY;
+	}
+
+	public void showHead(boolean var1) {
+		super.showHead(var1);
+		this.bipedSnout.showModel = var1;
+		this.bipedEars.showModel = var1;
+	}
+
+	public void showBody(boolean var1) {
+		super.showBody(var1);
+		this.bipedTail.showModel = var1;
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/EntityPhantom.java
@@ -1,0 +1,40 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class EntityPhantom extends EntityMob {
+	public EntityPhantom(World var1) {
+		super(var1);
+		this.texture = "/mob/phantom.png";
+		this.moveSpeed = 2.0F;
+		this.attackStrength = 5;
+	}
+
+	public void onLivingUpdate() {
+		if (this.worldObj.getBrightness((int) (this.posX), (int) (this.posY), (int) (this.posZ)) >= 0.2F) {
+			this.attackEntityFrom(null, 5);
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected String getLivingSound() {
+		return "diverge.mob.phantom";
+	}
+
+	protected String getHurtSound() {
+		return "diverge.mob.phantom";
+	}
+
+	protected String getDeathSound() {
+		return "diverge.mob.phantomdeath";
+	}
+
+	protected float getSoundVolume() {
+		return 0.2F;
+	}
+
+	protected int getDropItemId() {
+		return Item.flint.shiftedIndex;
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/FurnaceRecipeManager.java
@@ -1,0 +1,61 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.Item;
+import net.minecraft.src.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FurnaceRecipeManager {
+	private static final FurnaceRecipeManager instance = new FurnaceRecipeManager();
+	private List<FurnaceRecipe> recipes = new ArrayList<>();
+
+	public static final FurnaceRecipeManager getInstance() {
+		return instance;
+	}
+
+	private FurnaceRecipeManager() {
+		addRecipe(Block.oreCoal.blockID, Item.coal.shiftedIndex, -1, 0);
+		addRecipe(Block.oreIron.blockID, Item.ingotIron.shiftedIndex, -1, 0);
+		addRecipe(Block.oreGold.blockID, Item.ingotGold.shiftedIndex, -1, 0);
+		addRecipe(Block.oreDiamond.blockID, Item.diamond.shiftedIndex, -1, 0);
+		addRecipe(Block.oreRuby.blockID, Item.ruby.shiftedIndex, -1, 0);
+		addRecipe(Block.oreSapphire.blockID, Item.sapphire.shiftedIndex, -1, 0);
+		addRecipe(Block.sand.blockID, Block.glass.blockID, 0, 0);
+		addRecipe(Item.porkRaw.shiftedIndex, Item.porkCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.beefRaw.shiftedIndex, Item.beefCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.chickenRaw.shiftedIndex, Item.chickenCooked.shiftedIndex, 0, 0);
+		addRecipe(Item.muttonRaw.shiftedIndex, Item.muttonCooked.shiftedIndex, 0, 0);
+		addRecipe(Block.cobblestone.blockID, Block.stone.blockID, -1, -1);
+		addRecipe(Item.clay.shiftedIndex, Item.brick.shiftedIndex, 0, 0);
+		addRecipe(Item.starChunk.shiftedIndex, Item.starDust.shiftedIndex, 0, 0);
+	}
+
+	private void addRecipe(int input, int output, int inputMeta, int outputMeta) {
+		recipes.add(new FurnaceRecipe(new ItemStack(input, 1).withMetadata(inputMeta),
+									  new ItemStack(output, 1).withMetadata(outputMeta)));
+	}
+
+	public ItemStack findMatchingRecipe(ItemStack input) {
+		for (FurnaceRecipe recipe : recipes) {
+			if (recipe.canSmelt(input)) {
+				return recipe.getOutput(input);
+			}
+		}
+		return null;
+	}
+
+	public int count() {
+		return this.recipes.size();
+	}
+
+	public ItemStack[] getRecipeAsItems(int i) {
+		ItemStack in = this.recipes.get(i).getInput().copy();
+		ItemStack out = this.recipes.get(i).getOutput(in).copy();
+
+		return new ItemStack[] { in, new ItemStack(Block.stoneOvenIdle),
+								 null, null, null, null, null, null, null,
+								 out };
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -3,8 +3,29 @@
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
+	private int trunkHeight = 4;
+	private int trunkVariation = 3;
+	private int leavesHeight = 3;
+
+	private int altMetadata = 0;
+	private double altChance = 0.0D;
+
+	public void setScale(double var1, double var3, double var5) {
+		trunkHeight = (int)var1 + 4;
+		trunkVariation = (int)var3 + 3;
+		leavesHeight = (int)var5 + 3;
+	}
+
+	public WorldGenTrees withAltForm(int altMetadata, double altChance) {
+		this.altMetadata = altMetadata;
+		this.altChance = altChance;
+		return this;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
+		int meta = var2.nextDouble() < altChance ? altMetadata : 0;
+
+		int var6 = var2.nextInt(trunkVariation) + trunkHeight;
 		boolean var7 = true;
 		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
 			int var8;
@@ -43,9 +64,10 @@
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
-					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+					for(var16 = var4 - leavesHeight + var6; var16 <= var4 + var6; ++var16) {
 						var10 = var16 - (var4 + var6);
 						var11 = 1 - var10 / 2;
+						if (var11 > 2) var11 = 2;
 
 						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
 							int var13 = var12 - var3;
@@ -53,7 +75,7 @@
 							for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
 								int var15 = var14 - var5;
 								if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-									var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+									var1.setBlockAndMetadata(var12, var16, var14, Block.leaves.blockID, meta);
 								}
 							}
 						}
@@ -62,7 +84,7 @@
 					for(var16 = 0; var16 < var6; ++var16) {
 						var10 = var1.getBlockId(var3, var4 + var16, var5);
 						if(var10 == 0 || var10 == Block.leaves.blockID) {
-							var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+							var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, meta);
 						}
 					}
 
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -12,7 +12,8 @@
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
 		int var6 = var1.getBlockMetadata(var2, var3, var4);
 		if(var6 > 0) {
-			this.ejectRecord(var1, var2, var3, var4, var6);
+			if (var1.canDoClientAction())
+				this.ejectRecord(var1, var2, var3, var4, var6);
 			return true;
 		} else {
 			return false;
@@ -20,7 +21,7 @@
 	}
 
 	public void ejectRecord(World var1, int var2, int var3, int var4, int var5) {
-		var1.playRecord((String)null, var2, var3, var4);
+		var1.playRecord(null, var2, var3, var4, null);
 		var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
 		int var6 = Item.record13.shiftedIndex + var5 - 1;
 		float var7 = 0.7F;
@@ -33,12 +34,12 @@
 	}
 
 	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
+		if(var1.canDoClientAction()) {
 			if(var5 > 0) {
 				this.ejectRecord(var1, var2, var3, var4, var5);
 			}
 
-			super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+			super.dropBlockAsItemWithChance(var1, var2, var3, var4, 0, var6);
 		}
 	}
 }
--- net/minecraft/src/Packet21PickupSpawn.java
+++ net/minecraft/src/Packet21PickupSpawn.java
@@ -13,6 +13,7 @@
 	public byte pitch;
 	public byte roll;
 	public int itemID;
+	public int itemMetadata;
 	public int count;
 
 	public Packet21PickupSpawn() {
@@ -21,6 +22,7 @@
 	public Packet21PickupSpawn(EntityItem var1) {
 		this.entityId = var1.entityID;
 		this.itemID = var1.item.itemID;
+		this.itemMetadata = var1.item.itemMetadata;
 		this.count = var1.item.stackSize;
 		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
 		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
@@ -33,6 +35,7 @@
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.entityId = var1.readInt();
 		this.itemID = var1.readShort();
+		this.itemMetadata = var1.readByte();
 		this.count = var1.readByte();
 		this.xPosition = var1.readInt();
 		this.yPosition = var1.readInt();
@@ -45,6 +48,7 @@
 	public void writePacket(DataOutputStream var1) throws IOException {
 		var1.writeInt(this.entityId);
 		var1.writeShort(this.itemID);
+		var1.writeByte(this.itemMetadata);
 		var1.writeByte(this.count);
 		var1.writeInt(this.xPosition);
 		var1.writeInt(this.yPosition);
@@ -59,6 +63,6 @@
 	}
 
 	public int getPacketSize() {
-		return 22;
+		return 23;
 	}
 }
--- net/minecraft/src/NetworkManager.java
+++ net/minecraft/src/NetworkManager.java
@@ -46,7 +46,7 @@
 	public void addToSendQueue(Packet var1) {
 		if(!this.isServerTerminating) {
 			Object var2 = this.sendQueueLock;
-			synchronized(var2) {
+			synchronized(this.sendQueueLock) {
 				this.sendQueueByteLength += var1.getPacketSize() + 1;
 				if(var1.isChunkDataPacket) {
 					this.chunkDataPackets.add(var1);
--- net/minecraft/src/RenderMinecart.java
+++ net/minecraft/src/RenderMinecart.java
@@ -60,13 +60,13 @@
 			GL11.glTranslatef(0.0F, 5.0F / 16.0F, 0.0F);
 			GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
 			if(var1.minecartType == 1) {
-				(new RenderBlocks()).renderBlockOnInventory(Block.chest);
+				(new RenderBlocks()).renderBlockOnInventory(Block.chest, 0);
 			} else if(var1.minecartType == 2) {
-				(new RenderBlocks()).renderBlockOnInventory(Block.stoneOvenIdle);
+				(new RenderBlocks()).renderBlockOnInventory(Block.stoneOvenIdle, 0);
 			}
 
 			GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, -(5.0F / 16.0F), 0.0F);
+			GL11.glTranslatef(0.0F, -(5.0F - 16.0F), 0.0F);
 			GL11.glScalef(1.0F / var25, 1.0F / var25, 1.0F / var25);
 		}
 
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -2,7 +2,9 @@
 
 public class EntityFallingSand extends Entity {
 	public int blockID;
+	public int blockMetadata;
 	public int fallTime = 0;
+	public boolean breakOnFall = false;
 
 	public EntityFallingSand(World var1) {
 		super(var1);
@@ -53,11 +55,11 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if(!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
-					this.dropItem(this.blockID, 1);
+				if(this.breakOnFall || !this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
+					Block.blocksList[this.blockID].dropBlockAsItem(this.worldObj, var1, var2, var3, this.blockMetadata);
 				}
 			} else if(this.fallTime > 100) {
-				this.dropItem(this.blockID, 1);
+				Block.blocksList[this.blockID].dropBlockAsItem(this.worldObj, var1, var2, var3, this.blockMetadata);
 				this.setEntityDead();
 			}
 
@@ -66,10 +68,13 @@
 
 	protected void writeEntityToNBT(NBTTagCompound var1) {
 		var1.setByte("Tile", (byte)this.blockID);
+		var1.setBoolean("BreakOnFall", this.breakOnFall);
 	}
 
 	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.blockID = var1.getByte("Tile") & 255;
+		this.blockID = var1.getByte("Tile");
+		this.blockMetadata = var1.getByte("Metadata");
+		this.breakOnFall = var1.getBoolean("BreakOnFall");
 	}
 
 	public float getShadowSize() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemRepairKit.java
@@ -1,0 +1,31 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemRepairKit extends ItemCharm {
+	public ItemRepairKit(int id) {
+		super(id, 1024);
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		if (player.isSneaking()) {
+			ItemStack heldItem = player.inventory.getCurrentItem();
+			if (rand.nextInt(2) != 0
+				|| heldItem == null
+				|| heldItem.itemDmg == 0
+				|| !Item.itemsList[heldItem.itemID].allowRepair()) {
+				return;
+			}
+			--heldItem.itemDmg;
+			player.playSound("random.wood click", 1.0F, 1.0F);
+			stack.damageItem(1);
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
+	}
+}
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -1,10 +1,27 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.FurnaceRecipeManager;
+
 public class TileEntityFurnace extends TileEntity implements IInventory {
 	private ItemStack[] furnaceItemStacks = new ItemStack[3];
 	private int furnaceBurnTime = 0;
 	private int currentItemBurnTime = 0;
 	private int furnaceCookTime = 0;
+	private int furnaceMaxTime;
+	private int furnaceBurnTick;
+
+	public TileEntityFurnace() {
+		this(200, 1);
+	}
+
+	public TileEntityFurnace(int speed) {
+		this(speed, 1);
+	}
+
+	public TileEntityFurnace(int speed, int burnTick) {
+		this.furnaceMaxTime = speed;
+		this.furnaceBurnTick = burnTick;
+	}
 
 	public int getSizeInventory() {
 		return this.furnaceItemStacks.length;
@@ -20,15 +37,13 @@
 			if(this.furnaceItemStacks[var1].stackSize <= var2) {
 				var3 = this.furnaceItemStacks[var1];
 				this.furnaceItemStacks[var1] = null;
-				return var3;
 			} else {
 				var3 = this.furnaceItemStacks[var1].splitStack(var2);
 				if(this.furnaceItemStacks[var1].stackSize == 0) {
 					this.furnaceItemStacks[var1] = null;
 				}
-
-				return var3;
 			}
+			return var3;
 		} else {
 			return null;
 		}
@@ -39,11 +54,10 @@
 		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
 			var2.stackSize = this.getInventoryStackLimit();
 		}
-
 	}
 
 	public String getInvName() {
-		return "Chest";
+		return "Furnace";
 	}
 
 	public void readFromNBT(NBTTagCompound var1) {
@@ -60,14 +74,18 @@
 		}
 
 		this.furnaceBurnTime = var1.getShort("BurnTime");
+		this.furnaceBurnTick = var1.getShort("BurnTick");
 		this.furnaceCookTime = var1.getShort("CookTime");
+		this.furnaceMaxTime = var1.getShort("MaxTime");
 		this.currentItemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 	}
 
 	public void writeToNBT(NBTTagCompound var1) {
 		super.writeToNBT(var1);
 		var1.setShort("BurnTime", (short)this.furnaceBurnTime);
+		var1.setShort("BurnTick", (short)this.furnaceBurnTick);
 		var1.setShort("CookTime", (short)this.furnaceCookTime);
+		var1.setShort("MaxTime", (short)this.furnaceMaxTime);
 		NBTTagList var2 = new NBTTagList();
 
 		for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
@@ -87,12 +105,12 @@
 	}
 
 	public int getCookProgressScaled(int var1) {
-		return this.furnaceCookTime * var1 / 200;
+		return this.furnaceCookTime * var1 / this.furnaceMaxTime;
 	}
 
 	public int getBurnTimeRemainingScaled(int var1) {
-		if(this.currentItemBurnTime == 0) {
-			this.currentItemBurnTime = 200;
+		if (this.currentItemBurnTime == 0) {
+			this.currentItemBurnTime = this.furnaceMaxTime;
 		}
 
 		return this.furnaceBurnTime * var1 / this.currentItemBurnTime;
@@ -106,10 +124,10 @@
 		boolean var1 = this.furnaceBurnTime > 0;
 		boolean var2 = false;
 		if(this.furnaceBurnTime > 0) {
-			--this.furnaceBurnTime;
+			this.furnaceBurnTime -= this.furnaceBurnTick;
 		}
 
-		if(!this.worldObj.multiplayerWorld) {
+		if(this.worldObj.canDoClientAction()) {
 			if(this.furnaceBurnTime == 0 && this.canSmelt()) {
 				this.currentItemBurnTime = this.furnaceBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 				if(this.furnaceBurnTime > 0) {
@@ -125,7 +143,7 @@
 
 			if(this.isBurning() && this.canSmelt()) {
 				++this.furnaceCookTime;
-				if(this.furnaceCookTime == 200) {
+				if(this.furnaceCookTime == this.furnaceMaxTime) {
 					this.furnaceCookTime = 0;
 					this.smeltItem();
 					var2 = true;
@@ -136,7 +154,7 @@
 
 			if(var1 != this.furnaceBurnTime > 0) {
 				var2 = true;
-				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
+				((BlockFurnace)this.getBlockType()).updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
@@ -149,18 +167,25 @@
 	private boolean canSmelt() {
 		if(this.furnaceItemStacks[0] == null) {
 			return false;
-		} else {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
-			return var1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != var1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[var1].getItemStackLimit())));
 		}
+		ItemStack var1 = this.getCookedItem(this.furnaceItemStacks[0]);
+		ItemStack outSlot = this.furnaceItemStacks[2];
+		return var1 != null
+			   && (outSlot == null
+				   || (outSlot.itemID == var1.itemID
+					   && outSlot.itemMetadata == var1.itemMetadata
+					   && outSlot.stackSize < this.getInventoryStackLimit()
+					   && outSlot.stackSize < outSlot.getMaxStackSize()
+					   && outSlot.stackSize < var1.getMaxStackSize() ) );
 	}
 
 	public void smeltItem() {
 		if(this.canSmelt()) {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			ItemStack var1 = this.getCookedItem(this.furnaceItemStacks[0]);
 			if(this.furnaceItemStacks[2] == null) {
-				this.furnaceItemStacks[2] = new ItemStack(var1, 1);
-			} else if(this.furnaceItemStacks[2].itemID == var1) {
+				this.furnaceItemStacks[2] = new ItemStack(var1.itemID, 1).withMetadata(var1.itemMetadata);
+			} else if(this.furnaceItemStacks[2].itemID == var1.itemID
+					  && this.furnaceItemStacks[2].itemMetadata == var1.itemMetadata) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
@@ -168,12 +193,11 @@
 			if(this.furnaceItemStacks[0].stackSize <= 0) {
 				this.furnaceItemStacks[0] = null;
 			}
-
 		}
 	}
 
-	private int getCookedItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
+	private ItemStack getCookedItem(ItemStack var1) {
+		return FurnaceRecipeManager.getInstance().findMatchingRecipe(var1);
 	}
 
 	private int getItemBurnTime(ItemStack var1) {
@@ -181,7 +205,13 @@
 			return 0;
 		} else {
 			int var2 = var1.getItem().shiftedIndex;
-			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : 0)));
+			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300
+			: var2 == Item.stick.shiftedIndex ? 100
+			: var2 == Item.coal.shiftedIndex ? 1600
+			: var2 == Item.bucketLava.shiftedIndex ? 20000
+			: var2 == Item.starDust.shiftedIndex ? 6400
+			: var2 == Block.blockCoal.blockID ? 14400
+			: 0;
 		}
 	}
 }
--- net/minecraft/src/WorldGenCactus.java
+++ net/minecraft/src/WorldGenCactus.java
@@ -3,13 +3,21 @@
 import java.util.Random;
 
 public class WorldGenCactus extends WorldGenerator {
+	private int height = 3;
+	private int minHeight = 1;
+
+	public void setScale(double var1, double var3, double var5) {
+		height = (int)var1;
+		minHeight = (int)var3;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		for(int var6 = 0; var6 < 10; ++var6) {
 			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
 			if(var1.getBlockId(var7, var8, var9) == 0) {
-				int var10 = 1 + var2.nextInt(var2.nextInt(3) + 1);
+				int var10 = 1 + var2.nextInt(var2.nextInt(height) + minHeight);
 
 				for(int var11 = 0; var11 < var10; ++var11) {
 					if(Block.cactus.canBlockStay(var1, var7, var8 + var11, var9)) {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet9Respawn.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet9Respawn extends Packet {
+	public void processPacket(NetHandler var1) {
+		var1.handleRespawnPacket(this);
+	}
+
+	public void readPacketData(DataInputStream var1) throws IOException {
+	}
+
+	public void writePacket(DataOutputStream var1) throws IOException {
+	}
+
+	public int getPacketSize() {
+		return 0;
+	}
+}
--- net/minecraft/src/WorldGenerator.java
+++ net/minecraft/src/WorldGenerator.java
@@ -7,4 +7,9 @@
 
 	public void setScale(double var1, double var3, double var5) {
 	}
+
+	public final WorldGenerator withScale(double var1, double var3, double var5) {
+		setScale(var1, var3, var5);
+		return this;
+	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockSpeleothem.java
@@ -1,0 +1,130 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class BlockSpeleothem extends Block {
+	public BlockSpeleothem(int var1, int var2) {
+		super(var1, var2, Material.rock);
+		this.minX = 0.25D;
+		this.minZ = 0.25D;
+		this.maxX = 0.75D;
+		this.maxZ = 0.75D;
+	}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		return var1.isBlockNormalCube(var2, var3 - 1, var4)
+				|| (var1.isBlockNormalCube(var2, var3 - 2, var4) && var1.getBlockId(var2, var3 - 1, var4) == this.blockID)
+				|| var1.isBlockNormalCube(var2, var3 + 1, var4)
+				|| (var1.isBlockNormalCube(var2, var3 + 2, var4) && var1.getBlockId(var2, var3 + 1, var4) == this.blockID);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + (var2 & 3) * 16 + (var2 & ~3) / 4;
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		if (!canPlaceBlockAt(var1, var2, var3, var4)) {
+			this.dropBlockAsItem(var1, var2, var3, var4, var5);
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+		} else {
+			updateMetadata(var1, var2, var3, var4);
+		}
+	}
+
+	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+		updateMetadata(var1, var2, var3, var4);
+	}
+
+	private static int getStoneMetadata(World var1, int var2, int var3, int var4) {
+		int block = var1.getBlockId(var2, var3, var4);
+		return Block.blocksList[block] != null
+				&& (Block.blocksList[block] instanceof BlockStone
+						|| Block.blocksList[block] instanceof BlockOre
+						|| Block.blocksList[block] instanceof BlockRedstoneOre)
+				? var1.getBlockMetadata(var2, var3, var4)
+				: 0;
+	}
+
+	private void updateMetadata(World var1, int var2, int var3, int var4) {
+		int metadata;
+		if (var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+			if (var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
+				metadata = 1;
+			} else {
+				metadata = 0;
+			}
+			metadata += getStoneMetadata(var1, var2, var3 - 1, var4) * 4;
+		} else if (var1.isBlockNormalCube(var2, var3 + 1, var4)) {
+			if (var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
+				metadata = 2;
+			} else {
+				metadata = 3;
+			}
+			metadata += getStoneMetadata(var1, var2, var3 + 1, var4) * 4;
+		} else if (var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
+			metadata = 3;
+			metadata += getStoneMetadata(var1, var2, var3 + 2, var4) * 4;
+		} else {
+			metadata = 0;
+			metadata += getStoneMetadata(var1, var2, var3 - 2, var4) * 4;
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, metadata);
+	}
+
+	private static int getStoneMetadataInChunk(Chunk chunk, int var2, int var3, int var4) {
+		int block = chunk.getBlockID(var2, var3, var4);
+		return block == Block.stone.blockID
+				|| Block.blocksList[block] instanceof BlockOre
+				? chunk.getBlockMetadata(var2, var3, var4)
+				: 0;
+	}
+
+	private static boolean isChunkBlockNormalCube(Chunk chunk, int var2, int var3, int var4) {
+		Block var5 = Block.blocksList[chunk.getBlockID(var2, var3, var4)];
+		return var5 != null && var5.isOpaqueCube();
+	}
+
+	private void updateMetadataInChunk(Chunk chunk, int var2, int var3, int var4) {
+		int metadata;
+		if (isChunkBlockNormalCube(chunk, var2, var3 - 1, var4)) {
+			if (chunk.getBlockID(var2, var3 + 1, var4) == this.blockID) {
+				metadata = 1;
+			} else {
+				metadata = 0;
+			}
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 - 1, var4) * 4;
+		} else if (isChunkBlockNormalCube(chunk, var2, var3 + 1, var4)) {
+			if (chunk.getBlockID(var2, var3 - 1, var4) == this.blockID) {
+				metadata = 2;
+			} else {
+				metadata = 3;
+			}
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 + 1, var4) * 4;
+		} else if (chunk.getBlockID(var2, var3 + 1, var4) == this.blockID) {
+			metadata = 3;
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 + 2, var4) * 4;
+		} else {
+			metadata = 0;
+			metadata += getStoneMetadataInChunk(chunk, var2, var3 - 2, var4) * 4;
+		}
+
+		chunk.setBlockMetadata(var2, var3, var4, metadata);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		updateMetadataInChunk(chunk, x, y, z);
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RecipesBlocks.java
@@ -1,0 +1,73 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class RecipesBlocks {
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 0), "###", '#', new Pair<>(Block.cobblestone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 1), "###", '#', new Pair<>(Block.cobblestone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 2), "###", '#', new Pair<>(Block.cobblestone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 3), "###", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 4), "###", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 5), "###", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 6), "###", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 7), "###", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 8), "###", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 9), "###", '#', new Pair<>(Block.stone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 10), "###", '#', new Pair<>(Block.cobblestone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 11), "###", '#', new Pair<>(Block.polishedStone, 3));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 12), "###", '#', new Pair<>(Block.stoneBricks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 13), "###", '#', new Pair<>(Block.stoneBricks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 14), "###", '#', new Pair<>(Block.stoneBricks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairSingle, 6, 15), "###", '#', new Pair<>(Block.stoneBricks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 0), "###", '#', new Pair<>(Block.planks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 1), "###", '#', new Pair<>(Block.planks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 2), "###", '#', new Pair<>(Block.planks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.woodStairSingle, 6, 3), "###", '#', new Pair<>(Block.planks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.brickStairSingle, 6, 0), "###", '#', Block.brick);
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactWood, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.planks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.cobblestone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.stone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactPolishedStone, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.polishedStone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 0), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 4), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 8), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stairCompactStoneBricks, 8, 12), "#  ", "## ", "###", '#', new Pair<>(Block.stoneBricks, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 0), "#", '#', new Pair<>(Block.wood, 0));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 1), "#", '#', new Pair<>(Block.wood, 1));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 2), "#", '#', new Pair<>(Block.wood, 2));
+		craftingManager.addRecipe(new ItemStack(Block.planks, 4, 3), "#", '#', new Pair<>(Block.wood, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 0), "##", "##", '#', new Pair<>(Block.stone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 1), "##", "##", '#', new Pair<>(Block.stone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 2), "##", "##", '#', new Pair<>(Block.stone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.polishedStone, 4, 3), "##", "##", '#', new Pair<>(Block.stone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 0), "##", "##", '#', new Pair<>(Block.polishedStone, 0));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 1), "##", "##", '#', new Pair<>(Block.polishedStone, 1));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 2), "##", "##", '#', new Pair<>(Block.polishedStone, 2));
+		craftingManager.addRecipe(new ItemStack(Block.stoneBricks, 4, 3), "##", "##", '#', new Pair<>(Block.polishedStone, 3));
+
+		craftingManager.addRecipe(new ItemStack(Block.starLantern, 8), "xxx", "x#x", "xxx", 'x', Block.glass, '#', Item.starDust);
+	}
+}
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -1,5 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Pair;
+import io.github.bluestaggo.mcdiverge.RecipesBlocks;
+import io.github.bluestaggo.mcdiverge.RecipesDyes;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -20,49 +24,59 @@
 		(new RecipesFood()).addRecipes(this);
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
-		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
-		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
-		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.minecartBox, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.minecartEngine, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.striker, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
-		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactWood, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactStone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
-		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
-		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		(new RecipesDyes()).addRecipes(this);
+		(new RecipesBlocks()).addRecipes(this);
+		this.addRecipe(new ItemStack(Block.glass, 1), "##", "##", '#', Item.shardGlass);
+		this.addRecipe(new ItemStack(Block.ice, 1), "##", "##", '#', Item.shardIce);
+		this.addRecipe(new ItemStack(Block.gravel, 2), "#x", "x#", '#', Block.cobblestone, 'x', Item.flint);
+		this.addRecipe(new ItemStack(Block.snow, 2), "##", '#', Item.snowball);
+		this.addRecipe(new ItemStack(Item.paper, 3), "###", '#', Item.reed);
+		this.addRecipe(new ItemStack(Item.book, 1), "#", "#", "#", '#', Item.paper);
+		this.addRecipe(new ItemStack(Block.fence, 2), "###", "###", '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.jukebox, 1), "###", "#X#", "###", '#', Block.planks, 'X', Item.diamond);
+		this.addRecipe(new ItemStack(Block.bookshelf, 1), "###", "XXX", "###", '#', Block.planks, 'X', Item.book);
+		this.addRecipe(new ItemStack(Block.blockSnow, 1), "##", "##", '#', Item.snowball);
+		this.addRecipe(new ItemStack(Block.blockClay, 1), "##", "##", '#', Item.clay);
+		this.addRecipe(new ItemStack(Block.brick, 1), "##", "##", '#', Item.brick);
+		this.addRecipe(new ItemStack(Block.cloth, 1), "###", "###", "###", '#', Item.silk);
+		this.addRecipe(new ItemStack(Block.tnt, 1), "X#X", "#X#", "X#X", 'X', Item.gunpowder, '#', Block.sand);
+		this.addRecipe(new ItemStack(Block.ladder, 1), "# #", "###", "# #", '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.doorWood, 1), "##", "##", "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.doorSteel, 1), "##", "##", "##", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.sign, 1), "###", "###", " X ", '#', Block.planks, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Item.stick, 4), "#", "#", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.torch, 4), "X", "#", 'X', Item.coal, '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), "# #", " # ", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.minecartTrack, 16), "X X", "X#X", "X X", 'X', Item.ingotIron, '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.boosterTrack, 4), "X-X", "X#X", "X-X", 'X', Item.ingotIron, '-', Item.stick, '#', Item.ruby);
+		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), "# #", "###", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.minecartBox, 1), "A", "B", 'A', Block.chest, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.minecartEngine, 1), "A", "B", 'A', Block.stoneOvenIdle, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.boat, 1), "# #", "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), "# #", " # ", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.striker, 1), "A ", " B", 'A', Item.ingotIron, 'B', Item.flint);
+		this.addRecipe(new ItemStack(Item.bread, 1), "###", '#', Item.wheat);
+		this.addRecipe(new ItemStack(Item.fishingRod, 1), "  #", " #X", "# X", '#', Item.stick, 'X', Item.silk);
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8), "#  ", "## ", "###", '#', Block.cobblestone);
+		this.addRecipe(new ItemStack(Item.painting, 1), "###", "#X#", "###", '#', Item.stick, 'X', Block.cloth);
+		this.addRecipe(new ItemStack(Item.appleGold, 1), "###", "#X#", "###", '#', Block.blockGold, 'X', Item.appleRed);
+		this.addRecipe(new ItemStack(Block.lever, 1), "X", "#", '#', Block.cobblestone, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), "X", "#", '#', Item.stick, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.compass, 1), " # ", "#X#", " # ", '#', Item.ingotIron, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Block.button, 1), "#", "#", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), "##", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.quiver, 1), "##/", "##/", "## ", '#', Item.leather, '/', Item.stick);
+		this.addRecipe(new ItemStack(Item.wardingRing, 1), " o ", "X X", " X ", 'o', Item.ruby, 'X', Item.sapphire);
+		this.addRecipe(new ItemStack(Item.repairKit, 1), "=o=", "###", '=', Block.stone, 'o', Item.sapphire, '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.slimeShoes, 1), "# #", "# #", '#', Item.slimeBall);
+		this.addRecipe(new ItemStack(Item.nimbleBoots, 1), "f f", "x x", "# #", 'f', Item.feather, 'x', Item.sapphire, '#', Block.cloth);
+		this.addRecipe(new ItemStack(Item.wings, 1), "#o#", "#-#", "# #", '#', Item.feather, 'o', Item.sapphire, '-', Item.silk);
+		this.addRecipe(new ItemStack(Item.sugar, 1), "#", '#', Item.reed);
 		Collections.sort(this.recipes, new RecipeSorter(this));
-		System.out.println(this.recipes.size() + " recipes");
 	}
 
-	void addRecipe(ItemStack var1, Object... var2) {
+	public void addRecipe(ItemStack var1, Object... var2) {
 		String var3 = "";
 		int var4 = 0;
 		int var5 = 0;
@@ -85,42 +99,69 @@
 			}
 		}
 
-		HashMap var12;
-		int var15;
-		for(var12 = new HashMap(); var4 < var2.length; var4 += 2) {
-			Character var13 = (Character)var2[var4];
-			var15 = 0;
-			if(var2[var4 + 1] instanceof Item) {
-				var15 = ((Item)var2[var4 + 1]).shiftedIndex;
-			} else if(var2[var4 + 1] instanceof Block) {
-				var15 = ((Block)var2[var4 + 1]).blockID;
+		HashMap hashMap12;
+		Pair<Integer, Integer> var15;
+		for(hashMap12 = new HashMap(); var4 < var2.length; var4 += 2) {
+			Object value = var2[var4 + 1];
+			Character character13 = (Character)var2[var4];
+
+			var15 = new Pair<>( -1, -1 );
+			if(value instanceof Pair && ((Pair<?, ?>) value).var1 instanceof Integer) {
+				if(((Pair<?, ?>) value).var0 instanceof Integer) {
+					var15 = (Pair<Integer, Integer>)value;
+				} else if(((Pair<?, ?>) value).var0 instanceof Item) {
+					Pair<Item, Integer> item = (Pair<Item, Integer>) value;
+					var15 = new Pair<>( item.var0.shiftedIndex, item.var1 );
+				} else if(((Pair<?, ?>) value).var0 instanceof Block) {
+					Pair<Block, Integer> item = (Pair<Block, Integer>) value;
+					var15 = new Pair<>( item.var0.blockID, item.var1 );
+				}
+			} else if(value instanceof Item) {
+				var15 = new Pair<>( ((Item)var2[var4 + 1]).shiftedIndex, -1 );
+			} else if(value instanceof Block) {
+				var15 = new Pair<>( ((Block)var2[var4 + 1]).blockID, -1 );
 			}
 
-			var12.put(var13, Integer.valueOf(var15));
+			hashMap12.put(character13, var15);
 		}
 
 		int[] var14 = new int[var5 * var6];
+		int[] metadata = new int[var5 * var6];
 
-		for(var15 = 0; var15 < var5 * var6; ++var15) {
-			char var10 = var3.charAt(var15);
-			if(var12.containsKey(Character.valueOf(var10))) {
-				var14[var15] = ((Integer)var12.get(Character.valueOf(var10))).intValue();
+		for(int var16 = 0; var16 < var5 * var6; ++var16) {
+			char c10 = var3.charAt(var16);
+			if(hashMap12.containsKey(c10)) {
+				var14[var16] = ((Pair<Integer, Integer>) hashMap12.get(c10)).var0;
+				metadata[var16] = ((Pair<Integer, Integer>) hashMap12.get(c10)).var1;
 			} else {
-				var14[var15] = -1;
+				var14[var16] = -1;
+				metadata[var16] = -1;
 			}
 		}
 
-		this.recipes.add(new CraftingRecipe(var5, var6, var14, var1));
+		this.recipes.add(new CraftingRecipe(var5, var6, var14, metadata, var1));
 	}
 
-	public ItemStack findMatchingRecipe(int[] var1) {
+	public ItemStack findMatchingRecipe(int[] var1, int[] metadata) {
 		for(int var2 = 0; var2 < this.recipes.size(); ++var2) {
-			CraftingRecipe var3 = (CraftingRecipe)this.recipes.get(var2);
-			if(var3.matches(var1)) {
-				return var3.getCraftingResult(var1);
+			CraftingRecipe craftingRecipe3 = (CraftingRecipe)this.recipes.get(var2);
+			if(craftingRecipe3.matches(var1, metadata)) {
+				return craftingRecipe3.getCraftingResult();
 			}
 		}
 
 		return null;
+	}
+
+	public ItemStack[] getRecipeAsItems(int i) {
+		CraftingRecipe recipe = (CraftingRecipe)recipes.get(i);
+		if (recipe == null) {
+			return null;
+		}
+		return recipe.asItemStacks();
+	}
+
+	public int count() {
+		return this.recipes.size();
 	}
 }
--- net/minecraft/src/EntityFlameFX.java
+++ net/minecraft/src/EntityFlameFX.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.server.MinecraftServer;
+
 public class EntityFlameFX extends EntityFX {
 	private float flameScale;
 
@@ -35,6 +37,9 @@
 		}
 
 		float var3 = super.getBrightness(var1);
+		if (MinecraftServer.getInstance() == null) {
+			var3 *= (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
+		}
 		return var3 * var2 + (1.0F - var2);
 	}
 
--- net/minecraft/src/BlockIce.java
+++ net/minecraft/src/BlockIce.java
@@ -5,7 +5,7 @@
 public class BlockIce extends BlockBreakable {
 	public BlockIce(int var1, int var2) {
 		super(var1, var2, Material.ice, false);
-		this.slipperiness = 0.98F;
+		this.slipperiness = 0.9F;
 		this.setTickOnLoad(true);
 	}
 
@@ -26,7 +26,19 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return var1.nextInt(3) + 1;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Item.shardIce.shiftedIndex;
+	}
+
+	public int quantityDroppedSilk(Random var1) {
+		return 1;
+	}
+
+	public int idDroppedSilk(int var1, Random var2) {
+		return this.blockID;
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemSlimeShoes.java
@@ -1,0 +1,14 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+
+public class ItemSlimeShoes extends ItemCharm {
+	public ItemSlimeShoes(int id) {
+		super(id, 64, "slimeshoes");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.bounce = 0.5F;
+	}
+}
--- net/minecraft/src/PropertyManager.java
+++ net/minecraft/src/PropertyManager.java
@@ -1,9 +1,14 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.util.Arrays;
 import java.util.Properties;
+import java.util.Random;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -68,5 +73,16 @@
 			this.serverProperties.setProperty(var1, "" + var2);
 			return var2;
 		}
+	}
+
+	public CreateWorldInfo getCreateWorldInfo() {
+		return new CreateWorldInfo()
+			.withName(this.getStringProperty("level-display-name", "World"))
+			.withSeed(this.getIntProperty("seed", new Random().nextInt()))
+			.withWorldType(Arrays.stream(WorldType.values())
+					.filter(worldType -> worldType.name().equalsIgnoreCase(this.getStringProperty("world-type", "normal")))
+					.findAny()
+					.orElse(WorldType.NORMAL))
+			.withCreative(this.getBooleanProperty("creative", false));
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TileEntityRefabricator.java
@@ -1,0 +1,133 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class TileEntityRefabricator extends TileEntity implements IInventory {
+	private ItemStack[] items = new ItemStack[2];
+	private int fabricationTime;
+	private EntityItem displayItem;
+
+	public void onSpawn() {
+		displayItem = new EntityItem(this.worldObj, this.xCoord + 0.5D, this.yCoord + 1.5D, this.zCoord + 0.5D, null);
+	}
+
+	public EntityItem getDisplayItem() {
+		return this.displayItem;
+	}
+
+	public int getSizeInventory() {
+		return this.items.length;
+	}
+
+	public ItemStack getStackInSlot(int var1) {
+		return this.items[var1];
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.items[slot] != null) {
+			ItemStack var3;
+			if(this.items[slot].stackSize <= stackSize) {
+				var3 = this.items[slot];
+				this.items[slot] = null;
+			} else {
+				var3 = this.items[slot].splitStack(stackSize);
+				if(this.items[slot].stackSize == 0) {
+					this.items[slot] = null;
+				}
+			}
+			return var3;
+		} else {
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.items[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
+		}
+	}
+
+	public String getInvName() {
+		return "Refabricator";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public boolean canRefabricate() {
+		return this.items[0] != null
+				&& this.items[1] != null
+				&& this.items[1].itemID == Item.starDust.shiftedIndex
+				&& this.items[1].stackSize >= 1
+				&& (this.items[0].stackSize < this.items[0].getMaxStackSize()
+					|| this.items[0].itemDmg > 0
+						&& Item.itemsList[this.items[0].itemID].allowRepair());
+	}
+
+	public void readFromNBT(NBTTagCompound var1) {
+		super.readFromNBT(var1);
+		NBTTagList nBTTagList2 = var1.getTagList("Items");
+		this.items = new ItemStack[this.getSizeInventory()];
+
+		for(int var3 = 0; var3 < nBTTagList2.tagCount(); ++var3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(var3);
+			byte var5 = nBTTagCompound4.getByte("Slot");
+			if(var5 >= 0 && var5 < this.items.length) {
+				this.items[var5] = new ItemStack(nBTTagCompound4);
+			}
+		}
+
+		this.fabricationTime = var1.getInteger("FabricationTime");
+	}
+
+	public void writeToNBT(NBTTagCompound var1) {
+		super.writeToNBT(var1);
+
+		NBTTagList nBTTagList2 = new NBTTagList();
+		for(int var3 = 0; var3 < this.items.length; ++var3) {
+			if(this.items[var3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)var3);
+				this.items[var3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
+			}
+		}
+		var1.setTag("Items", nBTTagList2);
+		var1.setInteger("FabricationTime", this.fabricationTime);
+	}
+
+	public int getProgressScaled(int scale) {
+		return this.fabricationTime * scale / 600;
+	}
+
+	public void updateEntity() {
+		this.displayItem.item = this.items[0];
+		this.displayItem.age++;
+		if (this.displayItem.age >= 6000) {
+			this.displayItem.age = 0;
+		}
+
+		if (!canRefabricate()) {
+			this.fabricationTime -= 10;
+			if (this.fabricationTime < 0) {
+				this.fabricationTime = 0;
+			}
+			return;
+		}
+
+		this.fabricationTime++;
+		if (this.fabricationTime >= 600) {
+			ItemStack input = this.items[0];
+			if (input.itemDmg > 0 && Item.itemsList[input.itemID].allowRepair()) {
+				input.itemDmg = 0;
+			} else if (input.stackSize < input.getMaxStackSize()) {
+				input.stackSize++;
+			}
+			this.decrStackSize(1, 1);
+			this.fabricationTime = 0;
+			this.displayItem.item = this.items[0];
+		}
+	}
+}
--- net/minecraft/src/MovementInput.java
+++ net/minecraft/src/MovementInput.java
@@ -6,6 +6,7 @@
 	public boolean unused = false;
 	public boolean jump = false;
 	public boolean sneak = false;
+	public boolean run = false;
 
 	public void updatePlayerMoveState(EntityPlayer var1) {
 	}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -51,14 +51,8 @@
 		this.damageTaken += var2 * 10;
 		if(this.damageTaken > 40) {
 			int var3;
-			for(var3 = 0; var3 < 3; ++var3) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
-			}
-
-			for(var3 = 0; var3 < 2; ++var3) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
-			}
-
+
+			this.entityDropItem(Item.boat.shiftedIndex, 1, 0.0F);
 			this.setEntityDead();
 		}
 
@@ -97,11 +91,11 @@
 		double var23 = var2 * 2.0D - 1.0D;
 		this.motionY += (double)0.04F * var23;
 		if(this.riddenByEntity != null) {
-			this.motionX += this.riddenByEntity.motionX * 0.2D;
-			this.motionZ += this.riddenByEntity.motionZ * 0.2D;
+			this.motionX += this.riddenByEntity.motionX * 0.5D;
+			this.motionZ += this.riddenByEntity.motionZ * 0.5D;
 		}
 
-		double var6 = 0.4D;
+		double var6 = 1.5D;
 		if(this.motionX < -var6) {
 			this.motionX = -var6;
 		}
@@ -150,16 +144,8 @@
 		}
 
 		if(this.isCollidedHorizontally && var8 > 0.15D) {
-			this.setEntityDead();
-
-			int var24;
-			for(var24 = 0; var24 < 3; ++var24) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
-			}
-
-			for(var24 = 0; var24 < 2; ++var24) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
-			}
+			this.motionX = 0.0D;
+			this.motionZ = 0.0D;
 		} else {
 			this.motionX *= (double)0.99F;
 			this.motionY *= (double)0.95F;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,9 +1,12 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
 	private Random rand;
+	private long seed;
 	private NoiseGeneratorOctaves noiseGen1;
 	private NoiseGeneratorOctaves noiseGen2;
 	private NoiseGeneratorOctaves noiseGen3;
@@ -28,6 +31,7 @@
 	public ChunkProviderGenerate(World var1, long var2) {
 		this.worldObj = var1;
 		this.rand = new Random(var2);
+		this.seed = var2;
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
@@ -38,7 +42,7 @@
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3) {
+	public void generateTerrain(int var1, int var2, byte[] var3, byte[] biomes) {
 		byte var4 = 4;
 		byte var5 = 64;
 		int var6 = var4 + 1;
@@ -68,17 +72,19 @@
 
 						for(int var41 = 0; var41 < 4; ++var41) {
 							int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-							short var43 = 128;
+							short s43 = 128;
 							double var44 = 0.25D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
 
 							for(int var50 = 0; var50 < 4; ++var50) {
+								byte biome = biomes[(var10 * 4 + var50) << 4 | (var9 * 4) + var41];
+
 								int var51 = 0;
 								if(var11 * 8 + var30 < var5) {
-									if(this.worldObj.snowCovered && var11 * 8 + var30 >= var5 - 1) {
+									if (biome == Biome.TUNDRA.id) {
 										var51 = Block.ice.blockID;
-									} else {
+									} else if (this.worldObj.worldType != WorldType.ARID) {
 										var51 = Block.waterStill.blockID;
 									}
 								}
@@ -88,7 +94,7 @@
 								}
 
 								var3[var42] = (byte)var51;
-								var42 += var43;
+								var42 += s43;
 								var46 += var48;
 							}
 
@@ -107,38 +113,45 @@
 
 	}
 
-	public void replaceSurfaceBlocks(int var1, int var2, byte[] var3) {
+	public void replaceSurfaceBlocks(int var1, int var2, byte[] var3, NibbleArray metadata, byte[] biomes) {
 		byte var4 = 64;
-		double var5 = 1.0D / 32.0D;
-		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
-		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var5, 1.0D, var5);
-		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5 * 2.0D, var5 * 2.0D, var5 * 2.0D);
 
 		for(int var7 = 0; var7 < 16; ++var7) {
 			for(int var8 = 0; var8 < 16; ++var8) {
-				boolean var9 = this.sandNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
-				boolean var10 = this.gravelNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
-				int var11 = (int)(this.stoneNoise[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
+				Biome biome = Biome.fromId(biomes[var8 << 4 | var7]);
+
+				boolean var9 = SimplexOctaves.noise2(seed, (var7 + var1 * 16) / 2048.0D, (var8 + var2 * 16) / 2048.0D, 4)
+						/ 4 + this.rand.nextFloat() * 0.2F > 0.0F;
+				boolean var10 = SimplexOctaves.noise3_ImproveXY(seed,
+						(var7 + var1 * 16) / 2048.0D, (var8 + var2 * 16) / 2048.0D, 109.0134D, 4)
+						/ 4 + this.rand.nextFloat() * 0.2F > 3.0F;
+				int var11 = (int)(SimplexOctaves.noise2(seed, (var7 + var1 * 16) / 512.0, (var8 + var2 * 16) / 512.0D, 4)
+						/ 4.0F + 4.0F + this.rand.nextFloat() * 0.25F);
+
 				int var12 = -1;
-				byte var13 = (byte)Block.grass.blockID;
-				byte var14 = (byte)Block.dirt.blockID;
+				byte var13 = (byte)biome.getSurface().blockID;
+				byte var14 = (byte)biome.getSoil().blockID;
 
 				for(int var15 = 127; var15 >= 0; --var15) {
 					int var16 = (var7 * 16 + var8) * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(6) - 1) {
+					if(var15 <= this.rand.nextInt(4)) {
 						var3[var16] = (byte)Block.bedrock.blockID;
 					} else {
 						byte var17 = var3[var16];
 						if(var17 == 0) {
 							var12 = -1;
 						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
+							int stoneMetadata = biome.getStoneMetadata();
+							if(var15 <= 32 - this.rand.nextInt(8)) {
+								metadata.set(var7, var15, var8, 2);
+							} else if(var12 == -1) {
 								if(var11 <= 0) {
 									var13 = 0;
 									var14 = (byte)Block.stone.blockID;
 								} else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-									var13 = (byte)Block.grass.blockID;
-									var14 = (byte)Block.dirt.blockID;
+									var13 = (byte)biome.getSurface().blockID;
+									var14 = (byte)biome.getSoil().blockID;
+
 									if(var10) {
 										var13 = 0;
 									}
@@ -163,27 +176,32 @@
 								var12 = var11;
 								if(var15 >= var4 - 1) {
 									var3[var16] = var13;
+									if (var13 == biome.getSurface().blockID) {
+										metadata.set(var7, var15, var8, biome.getSurfaceMetadata());
+									}
 								} else {
 									var3[var16] = var14;
 								}
 							} else if(var12 > 0) {
 								--var12;
 								var3[var16] = var14;
+							} else if(stoneMetadata != 0) {
+								metadata.set(var7, var15, var8, stoneMetadata);
 							}
 						}
 					}
 				}
 			}
 		}
-
 	}
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
+		byte[] var3 = new byte[32768];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-		this.generateTerrain(var1, var2, var3);
-		this.replaceSurfaceBlocks(var1, var2, var3);
+		var4.generateBiomes(this.worldObj);
+		this.generateTerrain(var1, var2, var3, var4.biomes);
+		this.replaceSurfaceBlocks(var1, var2, var3, var4.data, var4.biomes);
 		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
 		var4.generateSkylightMap();
 		return var4;
@@ -299,160 +317,63 @@
 		long var6 = this.rand.nextLong() / 2L * 2L + 1L;
 		long var8 = this.rand.nextLong() / 2L * 2L + 1L;
 		this.rand.setSeed((long)var2 * var6 + (long)var3 * var8 ^ this.worldObj.randomSeed);
-		double var10 = 0.25D;
-
-		int var12;
-		int var13;
-		int var14;
-		int var15;
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenClay(32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(64);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 2; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(32);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 1; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		var10 = 0.5D;
-		var12 = (int)((this.mobSpawnerNoise.generateNoiseOctaves((double)var4 * var10, (double)var5 * var10) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
-		if(var12 < 0) {
-			var12 = 0;
-		}
-
-		if(this.rand.nextInt(10) == 0) {
-			++var12;
-		}
-
-		Object var18 = new WorldGenTrees();
-		if(this.rand.nextInt(10) == 0) {
-			var18 = new WorldGenBigTree();
-		}
-
-		int var16;
-		for(var14 = 0; var14 < var12; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			((WorldGenerator)var18).setScale(1.0D, 1.0D, 1.0D);
-			((WorldGenerator)var18).generate(this.worldObj, this.rand, var15, this.worldObj.getHeightValue(var15, var16), var16);
-		}
-
-		int var17;
-		for(var14 = 0; var14 < 2; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		if(this.rand.nextInt(2) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(4) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(8) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var14 = 0; var14 < 10; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenReed()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 1; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenCactus()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 50; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 20; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = var4 + 8 + 0; var14 < var4 + 8 + 16; ++var14) {
-			for(var15 = var5 + 8 + 0; var15 < var5 + 8 + 16; ++var15) {
-				var16 = this.worldObj.getTopSolidOrLiquidBlock(var14, var15);
-				if(this.worldObj.snowCovered && var16 > 0 && var16 < 128 && this.worldObj.getBlockId(var14, var16, var15) == 0 && this.worldObj.getBlockMaterial(var14, var16 - 1, var15).getIsSolid() && this.worldObj.getBlockMaterial(var14, var16 - 1, var15) != Material.ice) {
-					this.worldObj.setBlockWithNotify(var14, var16, var15, Block.snow.blockID);
+
+		PopulatorHost host = new PopulatorHost(this, var4, var5, worldObj, rand, mobSpawnerNoise);
+
+		int maxDungeons = this.rand.nextInt(2) + 1;
+		host.generate(new WorldGenDungeons(), maxDungeons, 16, 64, 8);
+		host.generate(new WorldGenClay(32), 10, 0, 128);
+
+		host.generateMinable(Block.dirt, 32, 20, 0, 128);
+		host.generateMinable(Block.gravel, 32, 10, 0, 128);
+		host.generateMinable(Block.stone, 32, 10, 32, 128, 1);
+		host.generateMinableInStone(Block.oreCoal, 16, 20, 0, 128);
+		host.generateMinableInStone(Block.oreIron, 8, 20, 0, 64);
+		host.generateMinableInStone(Block.oreGold, 8, 2, 0, 32);
+		host.generateMinableInStone(Block.oreRedstone, 7, 8, 0, 16);
+		host.generateMinableInStone(Block.oreDiamond, 7, 1, 0, 16);
+		host.generateMinableInStone(Block.oreRuby, 4, 1, 0, 24);
+		host.generateMinableInStone(Block.oreSapphire, 4, 1, 0, 24);
+
+		this.worldObj.getBiome(var2 * 16, var3 * 16).populate(host);
+
+		host.generate(new WorldGenReed(), 10, 0, 128, 8);
+		host.generate(new WorldGenCactus(), 1, 0, 128, 8);
+		host.generate(new WorldGenSpeleothems(), 64, 0, 64, 8);
+
+		for(int i = 0; i < 50; ++i) {
+			int x = var4 + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(this.rand.nextInt(120) + 8);
+			int z = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		for(int i = 0; i < 20; ++i) {
+			int x = var4 + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
+			int z = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		/*if (this.worldObj.snowCovered) {
+			for(int x = var4 + 8; x < var4 + 24; ++x) {
+				for(int z = var5 + 8; z < var5 + 24; ++z) {
+					int y = this.worldObj.getTopSolidOrLiquidBlock(x, z);
+					if(y > 0 && y < 128 && this.worldObj.getBlockId(x, y, z) == 0 && this.worldObj.getBlockMaterial(x, y - 1, z).getIsSolid() && this.worldObj.getBlockMaterial(x, y - 1, z) != Material.ice) {
+						this.worldObj.setBlockWithNotify(x, y, z, Block.snow.blockID);
+					}
+				}
+			}
+		}*/
+
+		for(int x = var4 + 8; x < var4 + 24; ++x) {
+			for(int z = var5 + 8; z < var5 + 24; ++z) {
+				int y = this.worldObj.getTopSolidOrLiquidBlock(x, z);
+				if(this.worldObj.getBiome(x - 8, z - 8) == Biome.TUNDRA
+						&& y > 0 && y < 128 && this.worldObj.getBlockId(x, y, z) == 0
+						&& this.worldObj.getBlockMaterial(x, y - 1, z).getIsSolid()
+						&& this.worldObj.getBlockMaterial(x, y - 1, z) != Material.ice) {
+					this.worldObj.setBlockWithNotify(x, y, z, Block.snow.blockID);
 				}
 			}
 		}
--- net/minecraft/src/EntitySnowball.java
+++ net/minecraft/src/EntitySnowball.java
@@ -12,6 +12,10 @@
 	private EntityLiving thrower;
 	private int ticksInGround;
 	private int ticksInAir = 0;
+	public int iconIndex;
+	public int damage;
+	public int burn;
+	public float pierce;
 
 	public EntitySnowball(World var1) {
 		super(var1);
@@ -24,11 +28,17 @@
 		return var1 < var3 * var3;
 	}
 
-	public EntitySnowball(World var1, EntityLiving var2) {
+	public EntitySnowball(World var1, EntityLiving var2, int iconIndex, int damage) {
+		this(var1, var2, iconIndex, damage, 0, 1.0F);
+	}
+
+	public EntitySnowball(World var1, EntityLiving var2, int iconIndex, int damage, int burn,
+						  float pierce) {
 		super(var1);
 		this.thrower = var2;
 		this.setSize(0.25F, 0.25F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw,
+				var2.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.posY -= (double)0.1F;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -39,6 +49,10 @@
 		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
 		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
 		this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+		this.iconIndex = iconIndex;
+		this.damage = damage;
+		this.burn = burn;
+		this.pierce = pierce;
 	}
 
 	public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
@@ -123,15 +137,48 @@
 			var3 = new MovingObjectPosition(var4);
 		}
 
+		float cf16;
 		if(var3 != null) {
-			if(var3.entityHit != null && var3.entityHit.attackEntityFrom(this.thrower, 0)) {
-			}
-
-			for(var8 = 0; var8 < 8; ++var8) {
-				this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
-			}
-
-			this.setEntityDead();
+			if(var3.entityHit != null) {
+				if(var3.entityHit.attackEntityFrom(this.thrower, this.damage)) {
+					// this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+					// (this.rand.nextFloat() * 0.2F + 0.9F));
+					if (this.burn > 0) {
+						var3.entityHit.fire = this.burn;
+					}
+					if (EntityLiving.class.isInstance(var3.entityHit)) {
+						((EntityLiving) var3.entityHit).hurtTime /= this.pierce;
+						((EntityLiving) var3.entityHit).maxHurtTime /= this.pierce;
+						((EntityLiving) var3.entityHit).heartsLife /= this.pierce;
+					}
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.ticksInAir = 0;
+				}
+			} else {
+				this.xTile = var3.blockX;
+				this.yTile = var3.blockY;
+				this.zTile = var3.blockZ;
+				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+				this.motionX = (double)((float)(var3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(var3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(var3.hitVec.zCoord - this.posZ));
+				cf16 = MathHelper.sqrt_double(
+						this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)cf16 * (double)0.05F;
+				this.posY -= this.motionY / (double)cf16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)cf16 * (double)0.05F;
+				// this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+				// (this.rand.nextFloat() * 0.2F + 0.9F));
+				this.inGround = true;
+				this.throwableShake = 7;
+				this.setEntityDead();
+			}
 		}
 
 		this.posX += this.motionX;
@@ -176,12 +223,14 @@
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.throwableShake);
-		var1.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+		var1.setShort("xTile", (short) this.xTile);
+		var1.setShort("yTile", (short) this.yTile);
+		var1.setShort("zTile", (short) this.zTile);
+		var1.setByte("inTile", (byte) this.inTile);
+		var1.setByte("shake", (byte) this.throwableShake);
+		var1.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+		var1.setByte("itemIndex", (byte) this.iconIndex);
+		var1.setByte("damage", (byte) this.damage);
 	}
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
@@ -191,15 +240,15 @@
 		this.inTile = var1.getByte("inTile") & 255;
 		this.throwableShake = var1.getByte("shake") & 255;
 		this.inGround = var1.getByte("inGround") == 1;
+		this.iconIndex = var1.getByte("itemIndex");
+		this.damage = var1.getByte("damage");
 	}
 
 	public void onCollideWithPlayer(EntityPlayer var1) {
 		if(this.inGround && this.thrower == var1 && this.throwableShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
-
 	}
 
 	public float getShadowSize() {
--- /dev/null
+++ net/minecraft/src/IListenToMyCommands.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public interface IListenToMyCommands {
+	void addHelpCommandMessage(String var1);
+
+	String getUsername();
+}
--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -54,6 +56,7 @@
 		}
 
 		if(var1 != null) {
+			var1.onSpawn();
 			var1.readFromNBT(var0);
 		} else {
 			System.out.println("Skipping TileEntity with id " + var0.getString("id"));
@@ -81,10 +84,14 @@
 		return Block.blocksList[this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord)];
 	}
 
+	public void onSpawn() {
+	}
+
 	static {
 		addMapping(TileEntityFurnace.class, "Furnace");
 		addMapping(TileEntityChest.class, "Chest");
 		addMapping(TileEntitySign.class, "Sign");
 		addMapping(TileEntityMobSpawner.class, "MobSpawner");
+		addMapping(TileEntityRefabricator.class, "Refabricator");
 	}
 }
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -3,9 +3,9 @@
 public class ItemReed extends Item {
 	private int spawnID;
 
-	public ItemReed(int var1, Block var2) {
+	public ItemReed(int var1, int var2) {
 		super(var1);
-		this.spawnID = var2.blockID;
+		this.spawnID = var2;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- net/minecraft/src/OSMap.java
+++ /dev/null
@@ -1,28 +1,0 @@
-package net.minecraft.src;
-
-public class OSMap {
-	public static final int[] osValues = new int[EnumOS.values().length];
-
-	static {
-		try {
-			osValues[EnumOS.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
-		}
-
-		try {
-			osValues[EnumOS.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
-		}
-
-		try {
-			osValues[EnumOS.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
-		}
-
-		try {
-			osValues[EnumOS.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
-		}
-
-	}
-}
--- net/minecraft/src/MinecartTrackLogic.java
+++ net/minecraft/src/MinecartTrackLogic.java
@@ -12,6 +12,15 @@
 	private List connectedTracks;
 	final BlockMinecartTrack minecartTrack;
 
+	public static boolean isBlockMinecartTrack(World var1, int var2, int var3, int var4) {
+		int blockId = var1.getBlockId(var2, var3, var4);
+		return blockId == Block.minecartTrack.blockID || blockId == Block.boosterTrack.blockID;
+	}
+
+	private boolean isBlockMinecartTrack(int var1, int var2, int var3) {
+		return isBlockMinecartTrack(this.worldObj, var1, var2, var3);
+	}
+
 	public MinecartTrackLogic(BlockMinecartTrack var1, World var2, int var3, int var4, int var5) {
 		this.minecartTrack = var1;
 		this.connectedTracks = new ArrayList();
@@ -72,11 +81,11 @@
 	}
 
 	private boolean isMinecartTrack(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2, var3) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(var1, var2 + 1, var3) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(var1, var2 - 1, var3) == this.minecartTrack.blockID);
+		return isBlockMinecartTrack(var1, var2, var3) ? true : (isBlockMinecartTrack(var1, var2 + 1, var3) ? true : isBlockMinecartTrack(var1, var2 - 1, var3));
 	}
 
 	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition var1) {
-		return this.worldObj.getBlockId(var1.x, var1.y, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y + 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y + 1, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y - 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y - 1, var1.z) : null));
+		return isBlockMinecartTrack(var1.x, var1.y, var1.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y, var1.z) : (isBlockMinecartTrack(var1.x, var1.y + 1, var1.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y + 1, var1.z) : (isBlockMinecartTrack(var1.x, var1.y - 1, var1.z) ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y - 1, var1.z) : null));
 	}
 
 	private boolean isConnectedTo(MinecartTrackLogic var1) {
@@ -167,21 +176,21 @@
 		}
 
 		if(var6 == 0) {
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ - 1)) {
 				var6 = 4;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ + 1)) {
 				var6 = 5;
 			}
 		}
 
 		if(var6 == 1) {
-			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX + 1, this.trackY + 1, this.trackZ)) {
 				var6 = 2;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX - 1, this.trackY + 1, this.trackZ)) {
 				var6 = 3;
 			}
 		}
@@ -278,21 +287,21 @@
 		}
 
 		if(var6 == 0) {
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ - 1)) {
 				var6 = 4;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX, this.trackY + 1, this.trackZ + 1)) {
 				var6 = 5;
 			}
 		}
 
 		if(var6 == 1) {
-			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX + 1, this.trackY + 1, this.trackZ)) {
 				var6 = 2;
 			}
 
-			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
+			if(isBlockMinecartTrack(this.trackX - 1, this.trackY + 1, this.trackZ)) {
 				var6 = 3;
 			}
 		}
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -1,5 +1,8 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -12,17 +15,17 @@
 	private static void addMapping(Class var0, String var1, int var2) {
 		stringToClassMapping.put(var1, var0);
 		classToStringMapping.put(var0, var1);
-		IDtoClassMapping.put(Integer.valueOf(var2), var0);
-		classToIDMapping.put(var0, Integer.valueOf(var2));
+		IDtoClassMapping.put(var2, var0);
+		classToIDMapping.put(var0, var2);
 	}
 
 	public static Entity createEntityByName(String var0, World var1) {
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)stringToClassMapping.get(var0);
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)stringToClassMapping.get(var0);
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
 			}
 		} catch (Exception var4) {
 			var4.printStackTrace();
@@ -35,9 +38,9 @@
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)stringToClassMapping.get(var0.getString("id"));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)stringToClassMapping.get(var0.getString("id"));
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
 			}
 		} catch (Exception var4) {
 			var4.printStackTrace();
@@ -56,9 +59,9 @@
 		Entity var2 = null;
 
 		try {
-			Class var3 = (Class)IDtoClassMapping.get(Integer.valueOf(var0));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)IDtoClassMapping.get(var0);
+			if(class3 != null) {
+				var2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
 			}
 		} catch (Exception var4) {
 			var4.printStackTrace();
@@ -92,10 +95,12 @@
 		addMapping(EntityGiantZombie.class, "Giant", 53);
 		addMapping(EntityZombie.class, "Zombie", 54);
 		addMapping(EntitySlime.class, "Slime", 55);
+		addMapping(EntityPhantom.class, "Phantom", 56);
 		addMapping(EntityPig.class, "Pig", 90);
 		addMapping(EntitySheep.class, "Sheep", 91);
-		addMapping(EntityCow.class, "Cow", 91);
-		addMapping(EntityChicken.class, "Chicken", 91);
+		addMapping(EntityCow.class, "Cow", 92);
+		addMapping(EntityChicken.class, "Chicken", 93);
+		addMapping(EntityFox.class, "Fox", 94);
 		addMapping(EntityTNTPrimed.class, "PrimedTnt", 20);
 		addMapping(EntityFallingSand.class, "FallingSand", 21);
 		addMapping(EntityMinecart.class, "Minecart", 40);
--- net/minecraft/src/PanelCrashReport.java
+++ net/minecraft/src/PanelCrashReport.java
@@ -9,6 +9,8 @@
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+
+import net.minecraft.client.Minecraft;
 import org.lwjgl.Sys;
 import org.lwjgl.opengl.GL11;
 
@@ -25,7 +27,7 @@
 		try {
 			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
 			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft Alpha v1.1.2_01\n";
+			var5 = var5 + "Minecraft: " + Minecraft.version + "\n";
 			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
 			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
 			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -2,20 +2,27 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Optional;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public abstract class GuiContainer extends GuiScreen {
 	private static RenderItem itemRenderer = new RenderItem();
 	protected int xSize = 176;
 	protected int ySize = 166;
 	protected List inventorySlots = new ArrayList();
+	private int mouseX;
+	private int mouseY;
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
 		int var4 = (this.width - this.xSize) / 2;
 		int var5 = (this.height - this.ySize) / 2;
 		this.drawGuiContainerBackgroundLayer(var3);
+		super.drawScreen(var1, var2, var3);
 		GL11.glPushMatrix();
 		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
@@ -51,9 +58,18 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
+		for (int var6 = 0; var6 < this.inventorySlots.size(); ++var6) {
+			SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(var6);
+			if (slotInventory4.getIsMouseOverSlot(var1, var2)) {
+				this.drawSlotTooltip(slotInventory4, var1, var2);
+			}
+		}
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glPopMatrix();
+
+		this.mouseX = var1;
+		this.mouseY = var2;
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
@@ -82,11 +98,40 @@
 		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var6, var4, var5);
 	}
 
+	private void drawSlotTooltip(SlotInventory var1, int x, int y) {
+		x -= (this.width - this.xSize) / 2;
+		y -= (this.height - this.ySize) / 2;
+		if (var1 == null || var1.getStack() == null) {
+			return;
+		}
+
+		ItemTooltip tooltip = var1.getTooltip();
+		if (tooltip != null) {
+			int tooltipWidth = 0;
+			for (String line : tooltip.lines) {
+				int newWidth = this.fontRenderer.getStringWidth(line);
+				if (newWidth > tooltipWidth) {
+					tooltipWidth = newWidth;
+				}
+			}
+			if ((x + tooltipWidth + 48) > this.width) {
+				x -= tooltipWidth + 24;
+			}
+
+			int tooltipHeight = tooltip.size() * 9;
+			this.drawGradientRect(x + 8, y, x + tooltipWidth + 16, y + tooltipHeight + 8, tooltip.gradient.var0,
+					tooltip.gradient.var1);
+			for (int i = 0; i < tooltip.size(); i++) {
+				this.drawString(this.fontRenderer, tooltip.lines.get(i), x + 12, y + 4 + i * 9, tooltip.colors.get(i));
+			}
+		}
+	}
+
 	private Slot getSlotAtPosition(int var1, int var2) {
 		for(int var3 = 0; var3 < this.inventorySlots.size(); ++var3) {
-			SlotInventory var4 = (SlotInventory)this.inventorySlots.get(var3);
-			if(var4.getIsMouseOverSlot(var1, var2)) {
-				return var4;
+			SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(var3);
+			if(slotInventory4.getIsMouseOverSlot(var1, var2)) {
+				return slotInventory4;
 			}
 		}
 
@@ -121,12 +166,12 @@
 						}
 					} else if(var6 != null && var5.draggedItemStack != null) {
 						if(var4.isItemValid(var5.draggedItemStack)) {
-							if(var6.itemID != var5.draggedItemStack.itemID) {
+							if(var6.itemID != var5.draggedItemStack.itemID || var6.itemMetadata != var5.draggedItemStack.itemMetadata) {
 								if(var5.draggedItemStack.stackSize <= var4.inventory.getInventoryStackLimit()) {
 									var4.putStack(var5.draggedItemStack);
 									var5.draggedItemStack = var6;
 								}
-							} else if(var6.itemID == var5.draggedItemStack.itemID) {
+							} else if(var6.itemID == var5.draggedItemStack.itemID && var6.itemMetadata == var5.draggedItemStack.itemMetadata) {
 								if(var3 == 0) {
 									var7 = var5.draggedItemStack.stackSize;
 									if(var7 > var4.inventory.getInventoryStackLimit() - var6.stackSize) {
@@ -161,7 +206,7 @@
 									var6.stackSize += var7;
 								}
 							}
-						} else if(var6.itemID == var5.draggedItemStack.itemID && var5.draggedItemStack.getMaxStackSize() > 1) {
+						} else if(var6.itemID == var5.draggedItemStack.itemID && var6.itemMetadata == var5.draggedItemStack.itemMetadata && var5.draggedItemStack.getMaxStackSize() > 1) {
 							var7 = var6.stackSize;
 							if(var7 > 0 && var7 + var5.draggedItemStack.stackSize <= var5.draggedItemStack.getMaxStackSize()) {
 								var5.draggedItemStack.stackSize += var7;
@@ -196,20 +241,18 @@
 				}
 			}
 		}
-
-	}
-
-	protected void mouseMovedOrUp(int var1, int var2, int var3) {
-		if(var3 == 0) {
-		}
-
+		super.mouseClicked(var1, var2, var3);
 	}
 
 	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1 || var2 == this.mc.options.keyBindInventory.keyCode) {
+		if (var2 == 1 || var2 == this.mc.options.keyBindInventory.keyCode) {
 			this.mc.displayGuiScreen((GuiScreen)null);
+		} else if (var2 == this.mc.options.keyBindRecipeGuide.keyCode) {
+			Optional<SlotInventory> hoverSlot = ((ArrayList<SlotInventory>)this.inventorySlots).stream()
+					.filter(slot -> (slot).getIsMouseOverSlot(mouseX, mouseY))
+					.findFirst();
+			hoverSlot.ifPresent(slotInventory -> mc.thePlayer.displayGUIRecipeGuide(slotInventory.getStack()));
 		}
-
 	}
 
 	public void onGuiClosed() {
@@ -218,7 +261,6 @@
 			this.mc.thePlayer.dropPlayerItem(var1.draggedItemStack);
 			var1.draggedItemStack = null;
 		}
-
 	}
 
 	public boolean doesGuiPauseGame() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiRefabricator.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+import org.lwjgl.opengl.GL11;
+
+public class GuiRefabricator extends GuiContainer {
+	private TileEntityRefabricator refabricator;
+
+	public GuiRefabricator(InventoryPlayer inventoryPlayer1, TileEntityRefabricator tileEntityRefabricator) {
+		this.refabricator = tileEntityRefabricator;
+		this.inventorySlots.add(new SlotInventory(this, tileEntityRefabricator, 0, 80, 35));
+		this.inventorySlots.add(new SlotInventory(this, tileEntityRefabricator, 1, 107, 58));
+
+		int var3;
+		for(var3 = 0; var3 < 3; ++var3) {
+			for(int var4 = 0; var4 < 9; ++var4) {
+				this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+			}
+		}
+
+		for(var3 = 0; var3 < 9; ++var3) {
+			this.inventorySlots.add(new SlotInventory(this, inventoryPlayer1, var3, 8 + var3 * 18, 142));
+		}
+
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString("Refabricator", 60, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int bg = this.mc.renderEngine.getTexture("/gui/refabricator.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+
+		int var5 = this.refabricator.getProgressScaled(48);
+		this.drawTexturedModalRect(posX + 55, posY + 26 + (48 - var5), 176, 48 - var5, 16, var5);
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/SimplexOctaves.java
@@ -1,0 +1,32 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class SimplexOctaves {
+	public static float noise2(long seed, double x, double y, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = 1 << i;
+			value += SimplexNoise.noise2(seed, x * res, y * res) * res;
+		}
+		return value;
+	}
+
+	public static float noise3_ImproveXY(long seed, double x, double y, double z, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = (1 << i);
+			value += SimplexNoise.noise3_ImproveXY(seed, x * res, y * res, z * res) * res;
+		}
+		return value;
+	}
+
+	public static float noise3_ImproveXZ(long seed, double x, double y, double z, int octaves) {
+		float value = 0;
+		for (int i = 0; i < octaves; i++) {
+			double res = (1 << i);
+			value += SimplexNoise.noise3_ImproveXZ(seed, x * res, y * res, z * res) * res;
+		}
+		return value;
+	}
+
+	private SimplexOctaves() {}
+}
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -33,7 +33,7 @@
 						var27 = var5;
 						var29 = var7;
 
-						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * (12.0F / 16.0F)) {
+						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * 0.75F) {
 							int var32 = MathHelper.floor_double(var25);
 							int var33 = MathHelper.floor_double(var27);
 							int var34 = MathHelper.floor_double(var29);
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -127,7 +127,7 @@
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+		TileEntityChest var5 = (TileEntityChest) var1.getBlockTileEntity(var2, var3, var4);
 
 		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
 			ItemStack var7 = var5.getStackInSlot(var6);
@@ -143,7 +143,7 @@
 					}
 
 					var7.stackSize -= var11;
-					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
+					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg).withMetadata(var7.itemMetadata));
 					float var13 = 0.05F;
 					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
 					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
@@ -157,7 +157,7 @@
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+		Object var6 = (TileEntityChest) var1.getBlockTileEntity(var2, var3, var4);
 		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
 			return true;
 		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
@@ -170,19 +170,19 @@
 			return true;
 		} else {
 			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest) var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
 			}
 
 			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest) var1.getBlockTileEntity(var2 + 1, var3, var4));
 			}
 
 			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest) var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
 			}
 
 			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest) var1.getBlockTileEntity(var2, var3, var4 + 1));
 			}
 
 			var5.displayGUIChest((IInventory)var6);
--- net/minecraft/src/PlayerManager.java
+++ net/minecraft/src/PlayerManager.java
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerManager {
@@ -11,8 +12,8 @@
 	private List playerInstancesToUpdate = new ArrayList();
 	private MinecraftServer mcServer;
 
-	public PlayerManager(MinecraftServer var1) {
-		this.mcServer = var1;
+	public PlayerManager(MinecraftServer mcServer) {
+		this.mcServer = mcServer;
 	}
 
 	public void updatePlayerInstances() throws IOException {
--- net/minecraft/src/WorldServer.java
+++ net/minecraft/src/WorldServer.java
@@ -1,5 +1,11 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
+import io.github.bluestaggo.mcdiverge.Packet38EntityStatus;
+import net.minecraft.server.MinecraftServer;
+
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -9,12 +15,37 @@
 	public boolean disableSpawnProtection = false;
 	public boolean levelSaving;
 	private boolean monsters;
-	private SpawnerAnimals monsterSpawner = new SpawnerServer(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
-	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
-
-	public WorldServer(File var1, String var2, boolean var3) {
-		super(var1, var2);
+	private SpawnerAnimals monsterSpawner = new SpawnerServer(this, 200, IMobs.class, new Class[] {
+			EntityZombie.class,
+			EntitySkeleton.class,
+			EntityCreeper.class,
+			EntitySpider.class,
+			EntitySlime.class,
+			EntityPhantom.class
+	});
+	private SpawnerAnimals animalSpawner = new SpawnerAnimals(20, EntityAnimal.class, new Class[] {
+			EntitySheep.class,
+			EntityPig.class,
+			EntityCow.class,
+			EntityChicken.class,
+			EntityFox.class
+	});
+	private MCHashTable entityHashTable;
+	private MinecraftServer mcServer;
+
+	public WorldServer(MinecraftServer mcServer, File var1, String var2, boolean var3) {
+		this(mcServer, var1, var2, var3, null);
+	}
+
+	public WorldServer(MinecraftServer mcServer, File var1, String var2, boolean var3, CreateWorldInfo info) {
+		super(var1, var2, 0, info);
 		this.monsters = var3;
+		this.entityHashTable = new MCHashTable();
+		this.mcServer = mcServer;
+	}
+
+	public boolean canDoClientAction() {
+		return MinecraftServer.getInstance() != null;
 	}
 
 	public void tick() {
@@ -26,6 +57,20 @@
 		this.animalSpawner.onUpdate(this);
 	}
 
+	protected void obtainEntitySkin(Entity var1) {
+		super.obtainEntitySkin(var1);
+		this.entityHashTable.addKey(var1.entityID, var1);
+	}
+
+	protected void releaseEntitySkin(Entity var1) {
+		super.releaseEntitySkin(var1);
+		this.entityHashTable.removeObject(var1.entityID);
+	}
+
+	public Entity getEntityFromId(int id) {
+		return (Entity) this.entityHashTable.lookup(id);
+	}
+
 	protected IChunkProvider getChunkProvider(File var1) {
 		this.chunkProviderServer = new ChunkProviderServer(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
 		return this.chunkProviderServer;
@@ -42,5 +87,10 @@
 		}
 
 		return var7;
+	}
+
+	public void sendTrackedEntityStatusUpdatePacket(Entity var1, byte var2) {
+		Packet38EntityStatus packet38EntityStatus3 = new Packet38EntityStatus(var1.entityID, var2);
+		this.mcServer.entityTracker.sendPacketToTrackedPlayersAndTrackedEntity(var1, packet38EntityStatus3);
 	}
 }
--- net/minecraft/src/PlayerListBox.java
+++ net/minecraft/src/PlayerListBox.java
@@ -2,6 +2,7 @@
 
 import java.util.Vector;
 import javax.swing.JList;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerListBox extends JList implements IUpdatePlayerListBox {
--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -58,7 +58,7 @@
 			GL11.glEnable(GL11.GL_ALPHA_TEST);
 			this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-			for(int var17 = 0; var17 < 4; ++var17) {
+			for(int var17 = 0; var17 < maxRenderPasses(); ++var17) {
 				if(this.shouldRenderPass(var1, var17)) {
 					this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
 					GL11.glDisable(GL11.GL_BLEND);
@@ -79,7 +79,7 @@
 					GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
 					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-					for(int var19 = 0; var19 < 4; ++var19) {
+					for(int var19 = 0; var19 < maxRenderPasses(); ++var19) {
 						if(this.shouldRenderPass(var1, var19)) {
 							GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
 							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
@@ -95,7 +95,7 @@
 					GL11.glColor4f(var26, var20, var21, var22);
 					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
 
-					for(int var23 = 0; var23 < 4; ++var23) {
+					for(int var23 = 0; var23 < maxRenderPasses(); ++var23) {
 						if(this.shouldRenderPass(var1, var23)) {
 							GL11.glColor4f(var26, var20, var21, var22);
 							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
@@ -146,5 +146,9 @@
 
 	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
 		this.doRenderLiving((EntityLiving)var1, var2, var4, var6, var8, var9);
+	}
+
+	protected float maxRenderPasses() {
+		return 4;
 	}
 }
--- net/minecraft/src/EntityOtherPlayerMP.java
+++ net/minecraft/src/EntityOtherPlayerMP.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.regex.Pattern;
+
 public class EntityOtherPlayerMP extends EntityPlayer {
 	private int otherPlayerMPPosRotationIncrements;
 	private double otherPlayerMPX;
@@ -8,19 +10,25 @@
 	private double otherPlayerMPYaw;
 	private double otherPlayerMPPitch;
 	float unusedFloat = 0.0F;
+	public boolean sneaking;
 
 	public EntityOtherPlayerMP(World var1, String var2) {
 		super(var1);
 		this.username = var2;
 		this.yOffset = 0.0F;
 		this.stepHeight = 0.0F;
-		if(var2 != null && var2.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var2 + ".png";
-			System.out.println("Loading texture " + this.skinUrl);
+		if (var2 != null && var2.length() > 0) {
+			this.blueStaggo = this.username.equals("BlueStag256");
+			if (this.blueStaggo) {
+				this.texture = "/staggo.png";
+			} else {
+				this.skinUrl = "http://www.minecraft.net/skin/" + var2 + ".png";
+			}
 		}
 
 		this.noClip = true;
 		this.renderDistanceWeight = 10.0D;
+
 	}
 
 	public boolean attackEntityFrom(Entity var1, int var2) {
@@ -94,5 +102,9 @@
 
 		this.cameraYaw += (var9 - this.cameraYaw) * 0.4F;
 		this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
+	}
+
+	public boolean isSneaking() {
+		return sneaking;
 	}
 }
--- net/minecraft/src/EntityDiggingFX.java
+++ net/minecraft/src/EntityDiggingFX.java
@@ -1,9 +1,9 @@
 package net.minecraft.src;
 
 public class EntityDiggingFX extends EntityFX {
-	public EntityDiggingFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12, Block var14) {
+	public EntityDiggingFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12, Block var14, int metadata) {
 		super(var1, var2, var4, var6, var8, var10, var12);
-		this.particleTextureIndex = var14.blockIndexInTexture;
+		this.particleTextureIndex = var14.getBlockTextureFromSideAndMetadata(0, metadata);
 		this.particleGravity = var14.blockParticleGravity;
 		this.particleRed = this.particleGreen = this.particleBlue = 0.6F;
 		this.particleScale /= 2.0F;
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.EntityPhantom;
 import net.minecraft.client.Minecraft;
 
 public class PlayerControllerSP extends PlayerController {
@@ -10,8 +12,21 @@
 	private float prevBlockDamage = 0.0F;
 	private float blockDestroySoundCounter = 0.0F;
 	private int blockHitWait = 0;
-	private SpawnerAnimals monsterSpawner = new SpawnerClient(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
-	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
+	private SpawnerAnimals monsterSpawner = new SpawnerClient(this, 200, IMobs.class, new Class[] {
+			EntityZombie.class,
+			EntitySkeleton.class,
+			EntityCreeper.class,
+			EntitySpider.class,
+			EntitySlime.class,
+			EntityPhantom.class
+	});
+	private SpawnerAnimals animalSpawner = new SpawnerAnimals(20, EntityAnimal.class, new Class[] {
+			EntitySheep.class,
+			EntityPig.class,
+			EntityCow.class,
+			EntityChicken.class,
+			EntityFox.class
+	});
 
 	public PlayerControllerSP(Minecraft var1) {
 		super(var1);
@@ -25,9 +40,11 @@
 		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
 		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
 		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
+		boolean silk = false;
 		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
 		boolean var9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5]);
 		if(var8 != null) {
+			silk = var8.isSilk();
 			var8.onDestroyBlock(var5, var1, var2, var3);
 			if(var8.stackSize == 0) {
 				var8.onItemDestroyedByUse(this.mc.thePlayer);
@@ -36,7 +53,11 @@
 		}
 
 		if(var7 && var9) {
-			Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+			if (silk) {
+				Block.blocksList[var5].harvestBlockSilk(this.mc.theWorld, var1, var2, var3, var6);
+			} else {
+				Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+			}
 		}
 
 		return var7;
@@ -81,7 +102,7 @@
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.blockDestroySoundCounter = 0.0F;
-					this.blockHitWait = 5;
+					this.blockHitWait = this.mc.thePlayer.creative ? 60 : 0;
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
@@ -119,6 +140,25 @@
 		this.prevBlockDamage = this.curBlockDamage;
 		this.monsterSpawner.onUpdate(this.mc.theWorld);
 		this.animalSpawner.onUpdate(this.mc.theWorld);
-		this.mc.sndManager.playRandomMusicIfReady();
+
+		EntityPlayer plr = this.mc.thePlayer;
+		int ix = (int) plr.posX;
+		int iy = (int) plr.posY;
+		int iz = (int) plr.posZ;
+
+		this.mc.sndManager.tickMusic();
+		if (iy < 64
+				&& this.mc.theWorld.getSavedLightValue(EnumSkyBlock.Sky, ix, iy, iz) <= 0
+				&& this.mc.theWorld.hasSolidCeiling(ix, iy, iz)) {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.CAVE) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomCaveMusicIfReady();
+		} else {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.NORMAL) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomMusicIfReady();
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiRecipeGuide.java
@@ -1,0 +1,147 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.src.*;
+
+public class GuiRecipeGuide extends GuiContainer {
+	private final List<ItemStack[]> recipes = new ArrayList<>();
+	private int currentRecipe = 0;
+	private final ItemStack filterItem;
+	private final String filterItemName;
+
+	public GuiRecipeGuide() {
+		this(null);
+	}
+
+	public GuiRecipeGuide(ItemStack filterItem) {
+		this.xSize = 176;
+		this.ySize = 216;
+		this.filterItem = filterItem;
+
+		String name = "Crafting";
+		if (filterItem != null) {
+			ItemTooltip tooltip = this.filterItem.getTooltip();
+			if (tooltip != null) {
+				name = tooltip.lines.get(0);
+			}
+		}
+		filterItemName = name;
+
+		this.setupRecipes();
+		this.setupCurrentRecipe();
+	}
+
+	private int getMaxRecipePage() {
+		return this.recipes.size() % 3 == 0 ? this.recipes.size() / 3 - 1 : this.recipes.size() / 3;
+	}
+
+	private void setupRecipes() {
+		this.recipes.clear();
+		int r;
+		for (r = 0; r < CraftingManager.getInstance().count(); r++) {
+			ItemStack[] recipe = CraftingManager.getInstance().getRecipeAsItems(r);
+			if (showRecipe(recipe)) {
+				recipes.add(recipe);
+			}
+		}
+		for (r = 0; r < FurnaceRecipeManager.getInstance().count(); r++) {
+			ItemStack[] recipe = FurnaceRecipeManager.getInstance().getRecipeAsItems(r);
+			if (showRecipe(recipe)) {
+				recipes.add(recipe);
+			}
+		}
+	}
+
+	private boolean showRecipe(ItemStack[] recipe) {
+		Stream<ItemStack> filterStream = Arrays.stream(recipe).filter(Objects::nonNull);
+		return filterItem == null
+				|| filterItem.itemID == 0
+				|| filterStream.anyMatch(i ->
+					i.itemID == filterItem.itemID
+					&& (i.itemMetadata == -1
+						|| i.itemMetadata == filterItem.itemMetadata));
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float var1) {
+		int bg = this.mc.renderEngine.getTexture("/gui/guide.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+	}
+
+	public void initGui() {
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, 5 + posX, 193 + posY, 18, 18, "<"));
+		this.controlList.add(new GuiButton(1, 153 + posX, 193 + posY, 18, 18, ">"));
+	}
+
+	private void setupCurrentRecipe() {
+		this.inventorySlots.clear();
+		if (this.recipes.size() == 0) {
+			return;
+		}
+		for (int j = 0; j < 3; j++) {
+			if (this.currentRecipe + j >= recipes.size())
+				break;
+
+			ItemStack[] items = recipes.get(this.currentRecipe + j);
+			for (ItemStack item : items) {
+				if (item != null && item.itemID == this.filterItem.itemID && item.itemMetadata == -1) {
+					item.itemMetadata = this.filterItem.itemMetadata;
+				}
+			}
+
+			InventoryReadonly inventory = new InventoryReadonly(items);
+			for (int i = 0; i < 9; i++) {
+				this.inventorySlots.add(new SlotInventory(this, inventory, i, 30 + (i % 3) * 18, 17 + (i / 3) * 18 + 63 * j));
+			}
+			this.inventorySlots.add(new SlotInventory(this, inventory, 9, 124, 35 + 63 * j));
+		}
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		if (this.recipes.size() > 0) {
+			String title =
+					(this.currentRecipe / 3 + 1)
+					+ " / "
+					+ (this.getMaxRecipePage() + 1)
+					+ " "
+					+ this.filterItemName
+					+ " recipes";
+
+			this.drawString(this.fontRenderer, title, 5, 5, 0xFFFFFF);
+		} else {
+			this.drawString(this.fontRenderer, "No recipes", 5, 5, 0xFFFFFF);
+		}
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		switch (var1.id) {
+			case 0:
+				this.currentRecipe -= 3;
+				if (this.currentRecipe < 0) {
+					this.currentRecipe = getMaxRecipePage() * 3;
+				}
+				break;
+
+			case 1:
+				this.currentRecipe += 3;
+				if (this.currentRecipe >= this.recipes.size()) {
+					this.currentRecipe = 0;
+				}
+				break;
+		}
+		this.setupCurrentRecipe();
+	}
+}
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -2,16 +2,17 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStairs extends Block {
-	private Block modelBlock;
+	private int[] modelBlocks;
 
-	protected BlockStairs(int var1, Block var2) {
-		super(var1, var2.blockIndexInTexture, var2.material);
-		this.modelBlock = var2;
-		this.setHardness(var2.hardness);
-		this.setResistance(var2.resistance / 3.0F);
-		this.setStepSound(var2.stepSound);
+	protected BlockStairs(int var1, Material var2, int[] var3) {
+		super(var1, 1, var2);
+		if (var3.length > 4) {
+			throw new IllegalArgumentException("Too many stair types! 4 maximum!");
+		}
+		this.modelBlocks = var3;
 	}
 
 	public boolean isOpaqueCube() {
@@ -31,7 +32,7 @@
 	}
 
 	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
+		int var7 = var1.getBlockMetadata(var2, var3, var4) % 4;
 		if(var7 == 0) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
 			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
@@ -58,9 +59,9 @@
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.multiplayerWorld) {
+		if(var1.canDoClientAction()) {
 			if(var1.getBlockMaterial(var2, var3 + 1, var4).isSolid()) {
-				var1.setBlockWithNotify(var2, var3, var4, this.modelBlock.blockID);
+//				worldObj.setBlockWithNotify(x, y, z, this.modelBlock.blockID);
 			} else {
 				this.updateState(var1, var2, var3, var4);
 				this.updateState(var1, var2 + 1, var3 - 1, var4);
@@ -72,13 +73,12 @@
 				this.updateState(var1, var2, var3 + 1, var4 - 1);
 				this.updateState(var1, var2, var3 + 1, var4 + 1);
 			}
-
-			this.modelBlock.onNeighborBlockChange(var1, var2, var3, var4, var5);
 		}
 	}
 
 	private void updateState(World var1, int var2, int var3, int var4) {
 		if(this.isBlockStair(var1, var2, var3, var4)) {
+			byte type = (byte) (var1.getBlockMetadata(var2, var3, var4) / 4);
 			byte var5 = -1;
 			if(this.isBlockStair(var1, var2 + 1, var3 + 1, var4)) {
 				var5 = 0;
@@ -133,7 +133,7 @@
 			}
 
 			if(var5 >= 0) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
+				var1.setBlockMetadataWithNotify(var2, var3, var4, var5 + type * 4);
 			}
 
 		}
@@ -145,107 +145,26 @@
 
 	private boolean isBlockStair(World var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 ? false : Block.blocksList[var5].getRenderType() == 10;
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.randomDisplayTick(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
-	}
-
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.modelBlock.getBlockBrightness(var1, var2, var3, var4);
-	}
-
-	public float getExplosionResistance(Entity var1) {
-		return this.modelBlock.getExplosionResistance(var1);
-	}
-
-	public int getRenderBlockPass() {
-		return this.modelBlock.getRenderBlockPass();
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
+		return var5 != 0 && Block.blocksList[var5].getRenderType() == 10;
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1 / 4 * 4;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, modelBlocks.length).map(i -> i * 4).toArray();
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSide(var1);
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
-	}
-
-	public int tickRate() {
-		return this.modelBlock.tickRate();
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		this.modelBlock.velocityToAddToEntity(var1, var2, var3, var4, var5, var6);
-	}
-
-	public boolean isCollidable() {
-		return this.modelBlock.isCollidable();
-	}
-
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return this.modelBlock.canCollideCheck(var1, var2);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.canPlaceBlockAt(var1, var2, var3, var4);
+		return this.modelBlocks[var2 / 4];
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
 		this.onNeighborBlockChange(var1, var2, var3, var4, 0);
-		this.modelBlock.onBlockAdded(var1, var2, var3, var4);
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.updateTick(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		return this.modelBlock.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockDestroyedByExplosion(var1, var2, var3, var4);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		return AxisAlignedBB.getBoundingBoxFromPool(var2 + 0.0F, var3 + 0.0F, var4 + 0.0F, var2 + 1.0F, var3 + 1.0F, var4 + 1.0F);
 	}
 }
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -7,8 +9,13 @@
 import java.util.Random;
 
 public class Chunk {
+	public static final int CHUNK_VERSION_CURRENT = 1,
+			CHUNK_VERSION_0_1 = 0,
+			CHUNK_VERSION_0_2 = 1;
+
 	public static boolean isLit;
 	public byte[] blocks;
+	public byte[] biomes;
 	public boolean isChunkLoaded;
 	public World worldObj;
 	public NibbleArray data;
@@ -43,7 +50,7 @@
 		for(int var4 = 0; var4 < this.entities.length; ++var4) {
 			this.entities[var4] = new ArrayList();
 		}
-
+		
 	}
 
 	public Chunk(World var1, byte[] var2, int var3, int var4) {
@@ -52,6 +59,7 @@
 		this.data = new NibbleArray(var2.length);
 		this.skylightMap = new NibbleArray(var2.length);
 		this.blocklightMap = new NibbleArray(var2.length);
+		this.biomes = new byte[256];
 	}
 
 	public boolean isAtLocation(int var1, int var2) {
@@ -112,6 +120,18 @@
 		this.isModified = true;
 	}
 
+	public void generateBiomes(World worldObj) {
+		for (int x = 0; x < 16; x++) {
+			for (int z = 0; z < 16; z++) {
+				this.biomes[z << 4 | x] = worldObj.generateBiome((this.xPosition << 4) + x, (this.zPosition << 4) + z).id;
+			}
+		}
+	}
+
+	public Biome getBiome(int x, int z) {
+		return this.biomes == null ? Biome.PLAINS : Biome.fromId(this.biomes[z << 4 | x]);
+	}
+
 	private void updateSkylight_do(int var1, int var2) {
 		int var3 = this.getHeightValue(var1, var2);
 		int var4 = this.xPosition * 16 + var1;
@@ -221,7 +241,7 @@
 			int var9 = this.xPosition * 16 + var1;
 			int var10 = this.zPosition * 16 + var3;
 			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
+			if(var8 != 0 && this.worldObj.canDoClientAction()) {
 				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
 			}
 
@@ -272,7 +292,7 @@
 			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
 			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
 			this.updateSkylight_do(var1, var3);
-			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
+			if(var4 != 0 && this.worldObj.canDoClientAction()) {
 				Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
 			}
 
@@ -412,6 +432,7 @@
 		} else {
 			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
+		var4.onSpawn();
 	}
 
 	public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -4,13 +4,13 @@
 	private String[][] recipePatterns = new String[][]{{"XXX", "X X"}, {"X X", "XXX", "XXX"}, {"XXX", "X X", "X X"}, {"X X", "X X"}};
 	private Object[][] recipeItems = new Object[][]{{Item.leather, Block.fire, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], 'X', var3});
 			}
 		}
 
--- net/minecraft/src/ItemRecord.java
+++ net/minecraft/src/ItemRecord.java
@@ -1,22 +1,30 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemRecord extends Item {
-	private String recordName;
+	private final String recordName;
+	private final String recordTitle;
 
-	protected ItemRecord(int var1, String var2) {
+	protected ItemRecord(int var1, String var2, String title) {
 		super(var1);
 		this.recordName = var2;
+		this.recordTitle = title;
 		this.maxStackSize = 1;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
 		if(var3.getBlockId(var4, var5, var6) == Block.jukebox.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
 			var3.setBlockMetadataWithNotify(var4, var5, var6, this.shiftedIndex - Item.record13.shiftedIndex + 1);
-			var3.playRecord(this.recordName, var4, var5, var6);
+			var3.playRecord(this.recordName, var4, var5, var6, this.recordTitle);
 			--var1.stackSize;
 			return true;
 		} else {
 			return false;
 		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] { this.recordTitle, ItemTooltip.DESCRIPTION_COL };
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/SimplexNoise.java
@@ -1,0 +1,757 @@
+package io.github.bluestaggo.mcdiverge;
+
+/**
+ * K.jpg's OpenSimplex 2, faster variant
+ */
+
+public class SimplexNoise {
+
+	private static final long PRIME_X = 0x5205402B9270C86FL;
+	private static final long PRIME_Y = 0x598CD327003817B5L;
+	private static final long PRIME_Z = 0x5BCC226E9FA0BACBL;
+	private static final long PRIME_W = 0x56CC5227E58F554BL;
+	private static final long HASH_MULTIPLIER = 0x53A3F72DEEC546F5L;
+	private static final long SEED_FLIP_3D = -0x52D547B2E96ED629L;
+	private static final long SEED_OFFSET_4D = 0xE83DC3E0DA7164DL;
+
+	private static final double ROOT2OVER2 = 0.7071067811865476;
+	private static final double SKEW_2D = 0.366025403784439;
+	private static final double UNSKEW_2D = -0.21132486540518713;
+
+	private static final double ROOT3OVER3 = 0.577350269189626;
+	private static final double FALLBACK_ROTATE_3D = 2.0 / 3.0;
+	private static final double ROTATE_3D_ORTHOGONALIZER = UNSKEW_2D;
+
+	private static final float SKEW_4D = -0.138196601125011f;
+	private static final float UNSKEW_4D = 0.309016994374947f;
+	private static final float LATTICE_STEP_4D = 0.2f;
+
+	private static final int N_GRADS_2D_EXPONENT = 7;
+	private static final int N_GRADS_3D_EXPONENT = 8;
+	private static final int N_GRADS_4D_EXPONENT = 9;
+	private static final int N_GRADS_2D = 1 << N_GRADS_2D_EXPONENT;
+	private static final int N_GRADS_3D = 1 << N_GRADS_3D_EXPONENT;
+	private static final int N_GRADS_4D = 1 << N_GRADS_4D_EXPONENT;
+
+	private static final double NORMALIZER_2D = 0.01001634121365712;
+	private static final double NORMALIZER_3D = 0.07969837668935331;
+	private static final double NORMALIZER_4D = 0.0220065933241897;
+
+	private static final float RSQUARED_2D = 0.5f;
+	private static final float RSQUARED_3D = 0.6f;
+	private static final float RSQUARED_4D = 0.6f;
+
+
+	/*
+	 * Noise Evaluators
+	 */
+
+	/**
+	 * 2D Simplex noise, standard lattice orientation.
+	 */
+	public static float noise2(long seed, double x, double y) {
+
+		// Get points for A2* lattice
+		double s = SKEW_2D * (x + y);
+		double xs = x + s, ys = y + s;
+
+		return noise2_UnskewedBase(seed, xs, ys);
+	}
+
+	/**
+	 * 2D Simplex noise, with Y pointing down the main diagonal.
+	 * Might be better for a 2D sandbox style game, where Y is vertical.
+	 * Probably slightly less optimal for heightmaps or continent maps,
+	 * unless your map is centered around an equator. It's a subtle
+	 * difference, but the option is here to make it an easy choice.
+	 */
+	public static float noise2_ImproveX(long seed, double x, double y) {
+
+		// Skew transform and rotation baked into one.
+		double xx = x * ROOT2OVER2;
+		double yy = y * (ROOT2OVER2 * (1 + 2 * SKEW_2D));
+
+		return noise2_UnskewedBase(seed, yy + xx, yy - xx);
+	}
+
+	/**
+	 * 2D Simplex noise base.
+	 */
+	private static float noise2_UnskewedBase(long seed, double xs, double ys) {
+
+		// Get base points and offsets.
+		int xsb = fastFloor(xs), ysb = fastFloor(ys);
+		float xi = (float)(xs - xsb), yi = (float)(ys - ysb);
+
+		// Prime pre-multiplication for hash.
+		long xsbp = xsb * PRIME_X, ysbp = ysb * PRIME_Y;
+
+		// Unskew.
+		float t = (xi + yi) * (float)UNSKEW_2D;
+		float dx0 = xi + t, dy0 = yi + t;
+
+		// First vertex.
+		float value = 0;
+		float a0 = RSQUARED_2D - dx0 * dx0 - dy0 * dy0;
+		if (a0 > 0) {
+			value = (a0 * a0) * (a0 * a0) * grad(seed, xsbp, ysbp, dx0, dy0);
+		}
+
+		// Second vertex.
+		float a1 = (float)(2 * (1 + 2 * UNSKEW_2D) * (1 / UNSKEW_2D + 2)) * t + ((float)(-2 * (1 + 2 * UNSKEW_2D) * (1 + 2 * UNSKEW_2D)) + a0);
+		if (a1 > 0) {
+			float dx1 = dx0 - (float)(1 + 2 * UNSKEW_2D);
+			float dy1 = dy0 - (float)(1 + 2 * UNSKEW_2D);
+			value += (a1 * a1) * (a1 * a1) * grad(seed, xsbp + PRIME_X, ysbp + PRIME_Y, dx1, dy1);
+		}
+
+		// Third vertex.
+		if (dy0 > dx0) {
+			float dx2 = dx0 - (float)UNSKEW_2D;
+			float dy2 = dy0 - (float)(UNSKEW_2D + 1);
+			float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
+			if (a2 > 0) {
+				value += (a2 * a2) * (a2 * a2) * grad(seed, xsbp, ysbp + PRIME_Y, dx2, dy2);
+			}
+		}
+		else
+		{
+			float dx2 = dx0 - (float)(UNSKEW_2D + 1);
+			float dy2 = dy0 - (float)UNSKEW_2D;
+			float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
+			if (a2 > 0) {
+				value += (a2 * a2) * (a2 * a2) * grad(seed, xsbp + PRIME_X, ysbp, dx2, dy2);
+			}
+		}
+
+		return value;
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, with better visual isotropy in (X, Y).
+	 * Recommended for 3D terrain and time-varied animations.
+	 * The Z coordinate should always be the "different" coordinate in whatever your use case is.
+	 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, z, Y) or use noise3_XZBeforeY.
+	 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, y, Z).
+	 * For a time varied animation, call noise3_ImproveXY(x, y, T).
+	 */
+	public static float noise3_ImproveXY(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices without skewing, so Z points up the main lattice diagonal,
+		// and the planes formed by XY are moved far out of alignment with the cube faces.
+		// Orthonormal rotation. Not a skew transform.
+		double xy = x + y;
+		double s2 = xy * ROTATE_3D_ORTHOGONALIZER;
+		double zz = z * ROOT3OVER3;
+		double xr = x + s2 + zz;
+		double yr = y + s2 + zz;
+		double zr = xy * -ROOT3OVER3 + zz;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, with better visual isotropy in (X, Z).
+	 * Recommended for 3D terrain and time-varied animations.
+	 * The Y coordinate should always be the "different" coordinate in whatever your use case is.
+	 * If Y is vertical in world coordinates, call noise3_ImproveXZ(x, Y, z).
+	 * If Z is vertical in world coordinates, call noise3_ImproveXZ(x, Z, y) or use noise3_ImproveXY.
+	 * For a time varied animation, call noise3_ImproveXZ(x, T, y) or use noise3_ImproveXY.
+	 */
+	public static float noise3_ImproveXZ(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices without skewing, so Y points up the main lattice diagonal,
+		// and the planes formed by XZ are moved far out of alignment with the cube faces.
+		// Orthonormal rotation. Not a skew transform.
+		double xz = x + z;
+		double s2 = xz * ROTATE_3D_ORTHOGONALIZER;
+		double yy = y * ROOT3OVER3;
+		double xr = x + s2 + yy;
+		double zr = z + s2 + yy;
+		double yr = xz * -ROOT3OVER3 + yy;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * 3D OpenSimplex2 noise, fallback rotation option
+	 * Use noise3_ImproveXY or noise3_ImproveXZ instead, wherever appropriate.
+	 * They have less diagonal bias. This function's best use is as a fallback.
+	 */
+	public static float noise3_Fallback(long seed, double x, double y, double z) {
+
+		// Re-orient the cubic lattices via rotation, to produce a familiar look.
+		// Orthonormal rotation. Not a skew transform.
+		double r = FALLBACK_ROTATE_3D * (x + y + z);
+		double xr = r - x, yr = r - y, zr = r - z;
+
+		// Evaluate both lattices to form a BCC lattice.
+		return noise3_UnrotatedBase(seed, xr, yr, zr);
+	}
+
+	/**
+	 * Generate overlapping cubic lattices for 3D OpenSimplex2 noise.
+	 */
+	private static float noise3_UnrotatedBase(long seed, double xr, double yr, double zr) {
+
+		// Get base points and offsets.
+		int xrb = fastRound(xr), yrb = fastRound(yr), zrb = fastRound(zr);
+		float xri = (float)(xr - xrb), yri = (float)(yr - yrb), zri = (float)(zr - zrb);
+
+		// -1 if positive, 1 if negative.
+		int xNSign = (int)(-1.0f - xri) | 1, yNSign = (int)(-1.0f - yri) | 1, zNSign = (int)(-1.0f - zri) | 1;
+
+		// Compute absolute values, using the above as a shortcut. This was faster in my tests for some reason.
+		float ax0 = xNSign * -xri, ay0 = yNSign * -yri, az0 = zNSign * -zri;
+
+		// Prime pre-multiplication for hash.
+		long xrbp = xrb * PRIME_X, yrbp = yrb * PRIME_Y, zrbp = zrb * PRIME_Z;
+
+		// Loop: Pick an edge on each lattice copy.
+		float value = 0;
+		float a = (RSQUARED_3D - xri * xri) - (yri * yri + zri * zri);
+		for (int l = 0; ; l++) {
+
+			// Closest point on cube.
+			if (a > 0) {
+				value += (a * a) * (a * a) * grad(seed, xrbp, yrbp, zrbp, xri, yri, zri);
+			}
+
+			// Second-closest point.
+			if (ax0 >= ay0 && ax0 >= az0) {
+				float b = a + ax0 + ax0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp - xNSign * PRIME_X, yrbp, zrbp, xri + xNSign, yri, zri);
+				}
+			}
+			else if (ay0 > ax0 && ay0 >= az0) {
+				float b = a + ay0 + ay0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp, yrbp - yNSign * PRIME_Y, zrbp, xri, yri + yNSign, zri);
+				}
+			}
+			else
+			{
+				float b = a + az0 + az0;
+				if (b > 1) {
+					b -= 1;
+					value += (b * b) * (b * b) * grad(seed, xrbp, yrbp, zrbp - zNSign * PRIME_Z, xri, yri, zri + zNSign);
+				}
+			}
+
+			// Break from loop if we're done, skipping updates below.
+			if (l == 1) break;
+
+			// Update absolute value.
+			ax0 = 0.5f - ax0;
+			ay0 = 0.5f - ay0;
+			az0 = 0.5f - az0;
+
+			// Update relative coordinate.
+			xri = xNSign * ax0;
+			yri = yNSign * ay0;
+			zri = zNSign * az0;
+
+			// Update falloff.
+			a += (0.75f - ax0) - (ay0 + az0);
+
+			// Update prime for hash.
+			xrbp += (xNSign >> 1) & PRIME_X;
+			yrbp += (yNSign >> 1) & PRIME_Y;
+			zrbp += (zNSign >> 1) & PRIME_Z;
+
+			// Update the reverse sign indicators.
+			xNSign = -xNSign;
+			yNSign = -yNSign;
+			zNSign = -zNSign;
+
+			// And finally update the seed for the other lattice copy.
+			seed ^= SEED_FLIP_3D;
+		}
+
+		return value;
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_ImproveXY
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * in a space where Z is vertical
+	 */
+	public static float noise4_ImproveXYZ_ImproveXY(long seed, double x, double y, double z, double w) {
+
+		double xy = x + y;
+		double s2 = xy * -0.21132486540518699998;
+		double zz = z * 0.28867513459481294226;
+		double ww = w * 0.2236067977499788;
+		double xr = x + (zz + ww + s2), yr = y + (zz + ww + s2);
+		double zr = xy * -0.57735026918962599998 + (zz + ww);
+		double wr = z * -0.866025403784439 + ww;
+
+		return noise4_UnskewedBase(seed, xr, yr, zr, wr);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_ImproveXZ
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * in a space where Y is vertical
+	 */
+	public static float noise4_ImproveXYZ_ImproveXZ(long seed, double x, double y, double z, double w) {
+
+		double xz = x + z;
+		double s2 = xz * -0.21132486540518699998;
+		double yy = y * 0.28867513459481294226;
+		double ww = w * 0.2236067977499788;
+		double xr = x + (yy + ww + s2), zr = z + (yy + ww + s2);
+		double yr = xz * -0.57735026918962599998 + (yy + ww);
+		double wr = y * -0.866025403784439 + ww;
+
+		return noise4_UnskewedBase(seed, xr, yr, zr, wr);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XYZ oriented like noise3_Fallback
+	 * and W for an extra degree of freedom. W repeats eventually.
+	 * Recommended for time-varied animations which texture a 3D object (W=time)
+	 * where there isn't a clear distinction between horizontal and vertical
+	 */
+	public static float noise4_ImproveXYZ(long seed, double x, double y, double z, double w) {
+
+		double xyz = x + y + z;
+		double ww = w * 0.2236067977499788;
+		double s2 = xyz * -0.16666666666666666 + ww;
+		double xs = x + s2, ys = y + s2, zs = z + s2, ws = -0.5 * xyz + ww;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, with XY and ZW forming orthogonal triangular-based planes.
+	 * Recommended for 3D terrain, where X and Y (or Z and W) are horizontal.
+	 * Recommended for noise(x, y, sin(time), cos(time)) trick.
+	 */
+	public static float noise4_ImproveXY_ImproveZW(long seed, double x, double y, double z, double w) {
+
+		double s2 = (x + y) * -0.178275657951399372 + (z + w) * 0.215623393288842828;
+		double t2 = (z + w) * -0.403949762580207112 + (x + y) * -0.375199083010075342;
+		double xs = x + s2, ys = y + s2, zs = z + t2, ws = w + t2;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise, fallback lattice orientation.
+	 */
+	public static float noise4_Fallback(long seed, double x, double y, double z, double w) {
+
+		// Get points for A4 lattice
+		double s = SKEW_4D * (x + y + z + w);
+		double xs = x + s, ys = y + s, zs = z + s, ws = w + s;
+
+		return noise4_UnskewedBase(seed, xs, ys, zs, ws);
+	}
+
+	/**
+	 * 4D OpenSimplex2 noise base.
+	 */
+	private static float noise4_UnskewedBase(long seed, double xs, double ys, double zs, double ws) {
+
+		// Get base points and offsets
+		int xsb = fastFloor(xs), ysb = fastFloor(ys), zsb = fastFloor(zs), wsb = fastFloor(ws);
+		float xsi = (float)(xs - xsb), ysi = (float)(ys - ysb), zsi = (float)(zs - zsb), wsi = (float)(ws - wsb);
+
+		// Determine which lattice we can be confident has a contributing point its corresponding cell's base simplex.
+		// We only look at the spaces between the diagonal planes. This proved effective in all of my tests.
+		float siSum = (xsi + ysi) + (zsi + wsi);
+		int startingLattice = (int)(siSum * 1.25);
+
+		// Offset for seed based on first lattice copy.
+		seed += startingLattice * SEED_OFFSET_4D;
+
+		// Offset for lattice point relative positions (skewed)
+		float startingLatticeOffset = startingLattice * -LATTICE_STEP_4D;
+		xsi += startingLatticeOffset; ysi += startingLatticeOffset; zsi += startingLatticeOffset; wsi += startingLatticeOffset;
+
+		// Prep for vertex contributions.
+		float ssi = (siSum + startingLatticeOffset * 4) * UNSKEW_4D;
+
+		// Prime pre-multiplication for hash.
+		long xsvp = xsb * PRIME_X, ysvp = ysb * PRIME_Y, zsvp = zsb * PRIME_Z, wsvp = wsb * PRIME_W;
+
+		// Five points to add, total, from five copies of the A4 lattice.
+		float value = 0;
+		for (int i = 0; ; i++) {
+
+			// Next point is the closest vertex on the 4-simplex whose base vertex is the aforementioned vertex.
+			double score0 = 1.0 + ssi * (-1.0 / UNSKEW_4D); // Seems slightly faster than 1.0-xsi-ysi-zsi-wsi
+			if (xsi >= ysi && xsi >= zsi && xsi >= wsi && xsi >= score0) {
+				xsvp += PRIME_X;
+				xsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (ysi > xsi && ysi >= zsi && ysi >= wsi && ysi >= score0) {
+				ysvp += PRIME_Y;
+				ysi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (zsi > xsi && zsi > ysi && zsi >= wsi && zsi >= score0) {
+				zsvp += PRIME_Z;
+				zsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+			else if (wsi > xsi && wsi > ysi && wsi > zsi && wsi >= score0) {
+				wsvp += PRIME_W;
+				wsi -= 1;
+				ssi -= UNSKEW_4D;
+			}
+
+			// gradient contribution with falloff.
+			float dx = xsi + ssi, dy = ysi + ssi, dz = zsi + ssi, dw = wsi + ssi;
+			float a = (dx * dx + dy * dy) + (dz * dz + dw * dw);
+			if (a < RSQUARED_4D) {
+				a -= RSQUARED_4D;
+				a *= a;
+				value += a * a * grad(seed, xsvp, ysvp, zsvp, wsvp, dx, dy, dz, dw);
+			}
+
+			// Break from loop if we're done, skipping updates below.
+			if (i == 4) break;
+
+			// Update for next lattice copy shifted down by <-0.2, -0.2, -0.2, -0.2>.
+			xsi += LATTICE_STEP_4D; ysi += LATTICE_STEP_4D; zsi += LATTICE_STEP_4D; wsi += LATTICE_STEP_4D;
+			ssi += LATTICE_STEP_4D * 4 * UNSKEW_4D;
+			seed -= SEED_OFFSET_4D;
+
+			// Because we don't always start on the same lattice copy, there's a special reset case.
+			if (i == startingLattice) {
+				xsvp -= PRIME_X;
+				ysvp -= PRIME_Y;
+				zsvp -= PRIME_Z;
+				wsvp -= PRIME_W;
+				seed += SEED_OFFSET_4D * 5;
+			}
+		}
+
+		return value;
+	}
+
+	/*
+	 * Utility
+	 */
+
+	private static float grad(long seed, long xsvp, long ysvp, float dx, float dy) {
+		long hash = seed ^ xsvp ^ ysvp;
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_2D_EXPONENT + 1);
+		int gi = (int)hash & ((N_GRADS_2D - 1) << 1);
+		return GRADIENTS_2D[gi | 0] * dx + GRADIENTS_2D[gi | 1] * dy;
+	}
+
+	private static float grad(long seed, long xrvp, long yrvp, long zrvp, float dx, float dy, float dz) {
+		long hash = (seed ^ xrvp) ^ (yrvp ^ zrvp);
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_3D_EXPONENT + 2);
+		int gi = (int)hash & ((N_GRADS_3D - 1) << 2);
+		return GRADIENTS_3D[gi | 0] * dx + GRADIENTS_3D[gi | 1] * dy + GRADIENTS_3D[gi | 2] * dz;
+	}
+
+	private static float grad(long seed, long xsvp, long ysvp, long zsvp, long wsvp, float dx, float dy, float dz, float dw) {
+		long hash = seed ^ (xsvp ^ ysvp) ^ (zsvp ^ wsvp);
+		hash *= HASH_MULTIPLIER;
+		hash ^= hash >> (64 - N_GRADS_4D_EXPONENT + 2);
+		int gi = (int)hash & ((N_GRADS_4D - 1) << 2);
+		return (GRADIENTS_4D[gi | 0] * dx + GRADIENTS_4D[gi | 1] * dy) + (GRADIENTS_4D[gi | 2] * dz + GRADIENTS_4D[gi | 3] * dw);
+	}
+
+	private static int fastFloor(double x) {
+		int xi = (int)x;
+		return x < xi ? xi - 1 : xi;
+	}
+
+	private static int fastRound(double x) {
+		return x < 0 ? (int)(x - 0.5) : (int)(x + 0.5);
+	}
+
+	/*
+	 * gradients
+	 */
+
+	private static float[] GRADIENTS_2D;
+	private static float[] GRADIENTS_3D;
+	private static float[] GRADIENTS_4D;
+	static {
+
+		GRADIENTS_2D = new float[N_GRADS_2D * 2];
+		float[] grad2 = {
+			 0.38268343236509f,   0.923879532511287f,
+			 0.923879532511287f,  0.38268343236509f,
+			 0.923879532511287f, -0.38268343236509f,
+			 0.38268343236509f,  -0.923879532511287f,
+			-0.38268343236509f,  -0.923879532511287f,
+			-0.923879532511287f, -0.38268343236509f,
+			-0.923879532511287f,  0.38268343236509f,
+			-0.38268343236509f,   0.923879532511287f,
+			//-------------------------------------//
+			 0.130526192220052f,  0.99144486137381f,
+			 0.608761429008721f,  0.793353340291235f,
+			 0.793353340291235f,  0.608761429008721f,
+			 0.99144486137381f,   0.130526192220051f,
+			 0.99144486137381f,  -0.130526192220051f,
+			 0.793353340291235f, -0.60876142900872f,
+			 0.608761429008721f, -0.793353340291235f,
+			 0.130526192220052f, -0.99144486137381f,
+			-0.130526192220052f, -0.99144486137381f,
+			-0.608761429008721f, -0.793353340291235f,
+			-0.793353340291235f, -0.608761429008721f,
+			-0.99144486137381f,  -0.130526192220052f,
+			-0.99144486137381f,   0.130526192220051f,
+			-0.793353340291235f,  0.608761429008721f,
+			-0.608761429008721f,  0.793353340291235f,
+			-0.130526192220052f,  0.99144486137381f,
+		};
+		for (int i = 0; i < grad2.length; i++) {
+			grad2[i] = (float)(grad2[i] / NORMALIZER_2D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_2D.length; i++, j++) {
+			if (j == grad2.length) j = 0;
+			GRADIENTS_2D[i] = grad2[j];
+		}
+
+		GRADIENTS_3D = new float[N_GRADS_3D * 4];
+		float[] grad3 = {
+			 2.22474487139f,	   2.22474487139f,	  -1.0f,				 0.0f,
+			 2.22474487139f,	   2.22474487139f,	   1.0f,				 0.0f,
+			 3.0862664687972017f,  1.1721513422464978f,  0.0f,				 0.0f,
+			 1.1721513422464978f,  3.0862664687972017f,  0.0f,				 0.0f,
+			-2.22474487139f,	   2.22474487139f,	  -1.0f,				 0.0f,
+			-2.22474487139f,	   2.22474487139f,	   1.0f,				 0.0f,
+			-1.1721513422464978f,  3.0862664687972017f,  0.0f,				 0.0f,
+			-3.0862664687972017f,  1.1721513422464978f,  0.0f,				 0.0f,
+			-1.0f,				-2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 1.0f,				-2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 0.0f,				-3.0862664687972017f, -1.1721513422464978f,  0.0f,
+			 0.0f,				-1.1721513422464978f, -3.0862664687972017f,  0.0f,
+			-1.0f,				-2.22474487139f,	   2.22474487139f,	   0.0f,
+			 1.0f,				-2.22474487139f,	   2.22474487139f,	   0.0f,
+			 0.0f,				-1.1721513422464978f,  3.0862664687972017f,  0.0f,
+			 0.0f,				-3.0862664687972017f,  1.1721513422464978f,  0.0f,
+			//--------------------------------------------------------------------//
+			-2.22474487139f,	  -2.22474487139f,	  -1.0f,				 0.0f,
+			-2.22474487139f,	  -2.22474487139f,	   1.0f,				 0.0f,
+			-3.0862664687972017f, -1.1721513422464978f,  0.0f,				 0.0f,
+			-1.1721513422464978f, -3.0862664687972017f,  0.0f,				 0.0f,
+			-2.22474487139f,	  -1.0f,				-2.22474487139f,	   0.0f,
+			-2.22474487139f,	   1.0f,				-2.22474487139f,	   0.0f,
+			-1.1721513422464978f,  0.0f,				-3.0862664687972017f,  0.0f,
+			-3.0862664687972017f,  0.0f,				-1.1721513422464978f,  0.0f,
+			-2.22474487139f,	  -1.0f,				 2.22474487139f,	   0.0f,
+			-2.22474487139f,	   1.0f,				 2.22474487139f,	   0.0f,
+			-3.0862664687972017f,  0.0f,				 1.1721513422464978f,  0.0f,
+			-1.1721513422464978f,  0.0f,				 3.0862664687972017f,  0.0f,
+			-1.0f,				 2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 1.0f,				 2.22474487139f,	  -2.22474487139f,	   0.0f,
+			 0.0f,				 1.1721513422464978f, -3.0862664687972017f,  0.0f,
+			 0.0f,				 3.0862664687972017f, -1.1721513422464978f,  0.0f,
+			-1.0f,				 2.22474487139f,	   2.22474487139f,	   0.0f,
+			 1.0f,				 2.22474487139f,	   2.22474487139f,	   0.0f,
+			 0.0f,				 3.0862664687972017f,  1.1721513422464978f,  0.0f,
+			 0.0f,				 1.1721513422464978f,  3.0862664687972017f,  0.0f,
+			 2.22474487139f,	  -2.22474487139f,	  -1.0f,				 0.0f,
+			 2.22474487139f,	  -2.22474487139f,	   1.0f,				 0.0f,
+			 1.1721513422464978f, -3.0862664687972017f,  0.0f,				 0.0f,
+			 3.0862664687972017f, -1.1721513422464978f,  0.0f,				 0.0f,
+			 2.22474487139f,	  -1.0f,				-2.22474487139f,	   0.0f,
+			 2.22474487139f,	   1.0f,				-2.22474487139f,	   0.0f,
+			 3.0862664687972017f,  0.0f,				-1.1721513422464978f,  0.0f,
+			 1.1721513422464978f,  0.0f,				-3.0862664687972017f,  0.0f,
+			 2.22474487139f,	  -1.0f,				 2.22474487139f,	   0.0f,
+			 2.22474487139f,	   1.0f,				 2.22474487139f,	   0.0f,
+			 1.1721513422464978f,  0.0f,				 3.0862664687972017f,  0.0f,
+			 3.0862664687972017f,  0.0f,				 1.1721513422464978f,  0.0f,
+		};
+		for (int i = 0; i < grad3.length; i++) {
+			grad3[i] = (float)(grad3[i] / NORMALIZER_3D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_3D.length; i++, j++) {
+			if (j == grad3.length) j = 0;
+			GRADIENTS_3D[i] = grad3[j];
+		}
+
+		GRADIENTS_4D = new float[N_GRADS_4D * 4];
+		float[] grad4 = {
+			-0.6740059517812944f,   -0.3239847771997537f,   -0.3239847771997537f,	0.5794684678643381f,
+			-0.7504883828755602f,   -0.4004672082940195f,	0.15296486218853164f,   0.5029860367700724f,
+			-0.7504883828755602f,	0.15296486218853164f,  -0.4004672082940195f,	0.5029860367700724f,
+			-0.8828161875373585f,	0.08164729285680945f,   0.08164729285680945f,   0.4553054119602712f,
+			-0.4553054119602712f,   -0.08164729285680945f,  -0.08164729285680945f,   0.8828161875373585f,
+			-0.5029860367700724f,   -0.15296486218853164f,   0.4004672082940195f,	0.7504883828755602f,
+			-0.5029860367700724f,	0.4004672082940195f,   -0.15296486218853164f,   0.7504883828755602f,
+			-0.5794684678643381f,	0.3239847771997537f,	0.3239847771997537f,	0.6740059517812944f,
+			-0.6740059517812944f,   -0.3239847771997537f,	0.5794684678643381f,   -0.3239847771997537f,
+			-0.7504883828755602f,   -0.4004672082940195f,	0.5029860367700724f,	0.15296486218853164f,
+			-0.7504883828755602f,	0.15296486218853164f,   0.5029860367700724f,   -0.4004672082940195f,
+			-0.8828161875373585f,	0.08164729285680945f,   0.4553054119602712f,	0.08164729285680945f,
+			-0.4553054119602712f,   -0.08164729285680945f,   0.8828161875373585f,   -0.08164729285680945f,
+			-0.5029860367700724f,   -0.15296486218853164f,   0.7504883828755602f,	0.4004672082940195f,
+			-0.5029860367700724f,	0.4004672082940195f,	0.7504883828755602f,   -0.15296486218853164f,
+			-0.5794684678643381f,	0.3239847771997537f,	0.6740059517812944f,	0.3239847771997537f,
+			-0.6740059517812944f,	0.5794684678643381f,   -0.3239847771997537f,   -0.3239847771997537f,
+			-0.7504883828755602f,	0.5029860367700724f,   -0.4004672082940195f,	0.15296486218853164f,
+			-0.7504883828755602f,	0.5029860367700724f,	0.15296486218853164f,  -0.4004672082940195f,
+			-0.8828161875373585f,	0.4553054119602712f,	0.08164729285680945f,   0.08164729285680945f,
+			-0.4553054119602712f,	0.8828161875373585f,   -0.08164729285680945f,  -0.08164729285680945f,
+			-0.5029860367700724f,	0.7504883828755602f,   -0.15296486218853164f,   0.4004672082940195f,
+			-0.5029860367700724f,	0.7504883828755602f,	0.4004672082940195f,   -0.15296486218853164f,
+			-0.5794684678643381f,	0.6740059517812944f,	0.3239847771997537f,	0.3239847771997537f,
+			 0.5794684678643381f,   -0.6740059517812944f,   -0.3239847771997537f,   -0.3239847771997537f,
+			 0.5029860367700724f,   -0.7504883828755602f,   -0.4004672082940195f,	0.15296486218853164f,
+			 0.5029860367700724f,   -0.7504883828755602f,	0.15296486218853164f,  -0.4004672082940195f,
+			 0.4553054119602712f,   -0.8828161875373585f,	0.08164729285680945f,   0.08164729285680945f,
+			 0.8828161875373585f,   -0.4553054119602712f,   -0.08164729285680945f,  -0.08164729285680945f,
+			 0.7504883828755602f,   -0.5029860367700724f,   -0.15296486218853164f,   0.4004672082940195f,
+			 0.7504883828755602f,   -0.5029860367700724f,	0.4004672082940195f,   -0.15296486218853164f,
+			 0.6740059517812944f,   -0.5794684678643381f,	0.3239847771997537f,	0.3239847771997537f,
+			//------------------------------------------------------------------------------------------//
+			-0.753341017856078f,	-0.37968289875261624f,  -0.37968289875261624f,  -0.37968289875261624f,
+			-0.7821684431180708f,   -0.4321472685365301f,   -0.4321472685365301f,	0.12128480194602098f,
+			-0.7821684431180708f,   -0.4321472685365301f,	0.12128480194602098f,  -0.4321472685365301f,
+			-0.7821684431180708f,	0.12128480194602098f,  -0.4321472685365301f,   -0.4321472685365301f,
+			-0.8586508742123365f,   -0.508629699630796f,	 0.044802370851755174f,  0.044802370851755174f,
+			-0.8586508742123365f,	0.044802370851755174f, -0.508629699630796f,	 0.044802370851755174f,
+			-0.8586508742123365f,	0.044802370851755174f,  0.044802370851755174f, -0.508629699630796f,
+			-0.9982828964265062f,   -0.03381941603233842f,  -0.03381941603233842f,  -0.03381941603233842f,
+			-0.37968289875261624f,  -0.753341017856078f,	-0.37968289875261624f,  -0.37968289875261624f,
+			-0.4321472685365301f,   -0.7821684431180708f,   -0.4321472685365301f,	0.12128480194602098f,
+			-0.4321472685365301f,   -0.7821684431180708f,	0.12128480194602098f,  -0.4321472685365301f,
+			 0.12128480194602098f,  -0.7821684431180708f,   -0.4321472685365301f,   -0.4321472685365301f,
+			-0.508629699630796f,	-0.8586508742123365f,	0.044802370851755174f,  0.044802370851755174f,
+			 0.044802370851755174f, -0.8586508742123365f,   -0.508629699630796f,	 0.044802370851755174f,
+			 0.044802370851755174f, -0.8586508742123365f,	0.044802370851755174f, -0.508629699630796f,
+			-0.03381941603233842f,  -0.9982828964265062f,   -0.03381941603233842f,  -0.03381941603233842f,
+			-0.37968289875261624f,  -0.37968289875261624f,  -0.753341017856078f,	-0.37968289875261624f,
+			-0.4321472685365301f,   -0.4321472685365301f,   -0.7821684431180708f,	0.12128480194602098f,
+			-0.4321472685365301f,	0.12128480194602098f,  -0.7821684431180708f,   -0.4321472685365301f,
+			 0.12128480194602098f,  -0.4321472685365301f,   -0.7821684431180708f,   -0.4321472685365301f,
+			-0.508629699630796f,	 0.044802370851755174f, -0.8586508742123365f,	0.044802370851755174f,
+			 0.044802370851755174f, -0.508629699630796f,	-0.8586508742123365f,	0.044802370851755174f,
+			 0.044802370851755174f,  0.044802370851755174f, -0.8586508742123365f,   -0.508629699630796f,
+			-0.03381941603233842f,  -0.03381941603233842f,  -0.9982828964265062f,   -0.03381941603233842f,
+			-0.37968289875261624f,  -0.37968289875261624f,  -0.37968289875261624f,  -0.753341017856078f,
+			-0.4321472685365301f,   -0.4321472685365301f,	0.12128480194602098f,  -0.7821684431180708f,
+			-0.4321472685365301f,	0.12128480194602098f,  -0.4321472685365301f,   -0.7821684431180708f,
+			 0.12128480194602098f,  -0.4321472685365301f,   -0.4321472685365301f,   -0.7821684431180708f,
+			-0.508629699630796f,	 0.044802370851755174f,  0.044802370851755174f, -0.8586508742123365f,
+			 0.044802370851755174f, -0.508629699630796f,	 0.044802370851755174f, -0.8586508742123365f,
+			 0.044802370851755174f,  0.044802370851755174f, -0.508629699630796f,	-0.8586508742123365f,
+			-0.03381941603233842f,  -0.03381941603233842f,  -0.03381941603233842f,  -0.9982828964265062f,
+			-0.3239847771997537f,   -0.6740059517812944f,   -0.3239847771997537f,	0.5794684678643381f,
+			-0.4004672082940195f,   -0.7504883828755602f,	0.15296486218853164f,   0.5029860367700724f,
+			 0.15296486218853164f,  -0.7504883828755602f,   -0.4004672082940195f,	0.5029860367700724f,
+			 0.08164729285680945f,  -0.8828161875373585f,	0.08164729285680945f,   0.4553054119602712f,
+			-0.08164729285680945f,  -0.4553054119602712f,   -0.08164729285680945f,   0.8828161875373585f,
+			-0.15296486218853164f,  -0.5029860367700724f,	0.4004672082940195f,	0.7504883828755602f,
+			 0.4004672082940195f,   -0.5029860367700724f,   -0.15296486218853164f,   0.7504883828755602f,
+			 0.3239847771997537f,   -0.5794684678643381f,	0.3239847771997537f,	0.6740059517812944f,
+			-0.3239847771997537f,   -0.3239847771997537f,   -0.6740059517812944f,	0.5794684678643381f,
+			-0.4004672082940195f,	0.15296486218853164f,  -0.7504883828755602f,	0.5029860367700724f,
+			 0.15296486218853164f,  -0.4004672082940195f,   -0.7504883828755602f,	0.5029860367700724f,
+			 0.08164729285680945f,   0.08164729285680945f,  -0.8828161875373585f,	0.4553054119602712f,
+			-0.08164729285680945f,  -0.08164729285680945f,  -0.4553054119602712f,	0.8828161875373585f,
+			-0.15296486218853164f,   0.4004672082940195f,   -0.5029860367700724f,	0.7504883828755602f,
+			 0.4004672082940195f,   -0.15296486218853164f,  -0.5029860367700724f,	0.7504883828755602f,
+			 0.3239847771997537f,	0.3239847771997537f,   -0.5794684678643381f,	0.6740059517812944f,
+			-0.3239847771997537f,   -0.6740059517812944f,	0.5794684678643381f,   -0.3239847771997537f,
+			-0.4004672082940195f,   -0.7504883828755602f,	0.5029860367700724f,	0.15296486218853164f,
+			 0.15296486218853164f,  -0.7504883828755602f,	0.5029860367700724f,   -0.4004672082940195f,
+			 0.08164729285680945f,  -0.8828161875373585f,	0.4553054119602712f,	0.08164729285680945f,
+			-0.08164729285680945f,  -0.4553054119602712f,	0.8828161875373585f,   -0.08164729285680945f,
+			-0.15296486218853164f,  -0.5029860367700724f,	0.7504883828755602f,	0.4004672082940195f,
+			 0.4004672082940195f,   -0.5029860367700724f,	0.7504883828755602f,   -0.15296486218853164f,
+			 0.3239847771997537f,   -0.5794684678643381f,	0.6740059517812944f,	0.3239847771997537f,
+			-0.3239847771997537f,   -0.3239847771997537f,	0.5794684678643381f,   -0.6740059517812944f,
+			-0.4004672082940195f,	0.15296486218853164f,   0.5029860367700724f,   -0.7504883828755602f,
+			 0.15296486218853164f,  -0.4004672082940195f,	0.5029860367700724f,   -0.7504883828755602f,
+			 0.08164729285680945f,   0.08164729285680945f,   0.4553054119602712f,   -0.8828161875373585f,
+			-0.08164729285680945f,  -0.08164729285680945f,   0.8828161875373585f,   -0.4553054119602712f,
+			-0.15296486218853164f,   0.4004672082940195f,	0.7504883828755602f,   -0.5029860367700724f,
+			 0.4004672082940195f,   -0.15296486218853164f,   0.7504883828755602f,   -0.5029860367700724f,
+			 0.3239847771997537f,	0.3239847771997537f,	0.6740059517812944f,   -0.5794684678643381f,
+			-0.3239847771997537f,	0.5794684678643381f,   -0.6740059517812944f,   -0.3239847771997537f,
+			-0.4004672082940195f,	0.5029860367700724f,   -0.7504883828755602f,	0.15296486218853164f,
+			 0.15296486218853164f,   0.5029860367700724f,   -0.7504883828755602f,   -0.4004672082940195f,
+			 0.08164729285680945f,   0.4553054119602712f,   -0.8828161875373585f,	0.08164729285680945f,
+			-0.08164729285680945f,   0.8828161875373585f,   -0.4553054119602712f,   -0.08164729285680945f,
+			-0.15296486218853164f,   0.7504883828755602f,   -0.5029860367700724f,	0.4004672082940195f,
+			 0.4004672082940195f,	0.7504883828755602f,   -0.5029860367700724f,   -0.15296486218853164f,
+			 0.3239847771997537f,	0.6740059517812944f,   -0.5794684678643381f,	0.3239847771997537f,
+			-0.3239847771997537f,	0.5794684678643381f,   -0.3239847771997537f,   -0.6740059517812944f,
+			-0.4004672082940195f,	0.5029860367700724f,	0.15296486218853164f,  -0.7504883828755602f,
+			 0.15296486218853164f,   0.5029860367700724f,   -0.4004672082940195f,   -0.7504883828755602f,
+			 0.08164729285680945f,   0.4553054119602712f,	0.08164729285680945f,  -0.8828161875373585f,
+			-0.08164729285680945f,   0.8828161875373585f,   -0.08164729285680945f,  -0.4553054119602712f,
+			-0.15296486218853164f,   0.7504883828755602f,	0.4004672082940195f,   -0.5029860367700724f,
+			 0.4004672082940195f,	0.7504883828755602f,   -0.15296486218853164f,  -0.5029860367700724f,
+			 0.3239847771997537f,	0.6740059517812944f,	0.3239847771997537f,   -0.5794684678643381f,
+			 0.5794684678643381f,   -0.3239847771997537f,   -0.6740059517812944f,   -0.3239847771997537f,
+			 0.5029860367700724f,   -0.4004672082940195f,   -0.7504883828755602f,	0.15296486218853164f,
+			 0.5029860367700724f,	0.15296486218853164f,  -0.7504883828755602f,   -0.4004672082940195f,
+			 0.4553054119602712f,	0.08164729285680945f,  -0.8828161875373585f,	0.08164729285680945f,
+			 0.8828161875373585f,   -0.08164729285680945f,  -0.4553054119602712f,   -0.08164729285680945f,
+			 0.7504883828755602f,   -0.15296486218853164f,  -0.5029860367700724f,	0.4004672082940195f,
+			 0.7504883828755602f,	0.4004672082940195f,   -0.5029860367700724f,   -0.15296486218853164f,
+			 0.6740059517812944f,	0.3239847771997537f,   -0.5794684678643381f,	0.3239847771997537f,
+			 0.5794684678643381f,   -0.3239847771997537f,   -0.3239847771997537f,   -0.6740059517812944f,
+			 0.5029860367700724f,   -0.4004672082940195f,	0.15296486218853164f,  -0.7504883828755602f,
+			 0.5029860367700724f,	0.15296486218853164f,  -0.4004672082940195f,   -0.7504883828755602f,
+			 0.4553054119602712f,	0.08164729285680945f,   0.08164729285680945f,  -0.8828161875373585f,
+			 0.8828161875373585f,   -0.08164729285680945f,  -0.08164729285680945f,  -0.4553054119602712f,
+			 0.7504883828755602f,   -0.15296486218853164f,   0.4004672082940195f,   -0.5029860367700724f,
+			 0.7504883828755602f,	0.4004672082940195f,   -0.15296486218853164f,  -0.5029860367700724f,
+			 0.6740059517812944f,	0.3239847771997537f,	0.3239847771997537f,   -0.5794684678643381f,
+			 0.03381941603233842f,   0.03381941603233842f,   0.03381941603233842f,   0.9982828964265062f,
+			-0.044802370851755174f, -0.044802370851755174f,  0.508629699630796f,	 0.8586508742123365f,
+			-0.044802370851755174f,  0.508629699630796f,	-0.044802370851755174f,  0.8586508742123365f,
+			-0.12128480194602098f,   0.4321472685365301f,	0.4321472685365301f,	0.7821684431180708f,
+			 0.508629699630796f,	-0.044802370851755174f, -0.044802370851755174f,  0.8586508742123365f,
+			 0.4321472685365301f,   -0.12128480194602098f,   0.4321472685365301f,	0.7821684431180708f,
+			 0.4321472685365301f,	0.4321472685365301f,   -0.12128480194602098f,   0.7821684431180708f,
+			 0.37968289875261624f,   0.37968289875261624f,   0.37968289875261624f,   0.753341017856078f,
+			 0.03381941603233842f,   0.03381941603233842f,   0.9982828964265062f,	0.03381941603233842f,
+			-0.044802370851755174f,  0.044802370851755174f,  0.8586508742123365f,	0.508629699630796f,
+			-0.044802370851755174f,  0.508629699630796f,	 0.8586508742123365f,   -0.044802370851755174f,
+			-0.12128480194602098f,   0.4321472685365301f,	0.7821684431180708f,	0.4321472685365301f,
+			 0.508629699630796f,	-0.044802370851755174f,  0.8586508742123365f,   -0.044802370851755174f,
+			 0.4321472685365301f,   -0.12128480194602098f,   0.7821684431180708f,	0.4321472685365301f,
+			 0.4321472685365301f,	0.4321472685365301f,	0.7821684431180708f,   -0.12128480194602098f,
+			 0.37968289875261624f,   0.37968289875261624f,   0.753341017856078f,	 0.37968289875261624f,
+			 0.03381941603233842f,   0.9982828964265062f,	0.03381941603233842f,   0.03381941603233842f,
+			-0.044802370851755174f,  0.8586508742123365f,   -0.044802370851755174f,  0.508629699630796f,
+			-0.044802370851755174f,  0.8586508742123365f,	0.508629699630796f,	-0.044802370851755174f,
+			-0.12128480194602098f,   0.7821684431180708f,	0.4321472685365301f,	0.4321472685365301f,
+			 0.508629699630796f,	 0.8586508742123365f,   -0.044802370851755174f, -0.044802370851755174f,
+			 0.4321472685365301f,	0.7821684431180708f,   -0.12128480194602098f,   0.4321472685365301f,
+			 0.4321472685365301f,	0.7821684431180708f,	0.4321472685365301f,   -0.12128480194602098f,
+			 0.37968289875261624f,   0.753341017856078f,	 0.37968289875261624f,   0.37968289875261624f,
+			 0.9982828964265062f,	0.03381941603233842f,   0.03381941603233842f,   0.03381941603233842f,
+			 0.8586508742123365f,   -0.044802370851755174f, -0.044802370851755174f,  0.508629699630796f,
+			 0.8586508742123365f,   -0.044802370851755174f,  0.508629699630796f,	-0.044802370851755174f,
+			 0.7821684431180708f,   -0.12128480194602098f,   0.4321472685365301f,	0.4321472685365301f,
+			 0.8586508742123365f,	0.508629699630796f,	-0.044802370851755174f, -0.044802370851755174f,
+			 0.7821684431180708f,	0.4321472685365301f,   -0.12128480194602098f,   0.4321472685365301f,
+			 0.7821684431180708f,	0.4321472685365301f,	0.4321472685365301f,   -0.12128480194602098f,
+			 0.753341017856078f,	 0.37968289875261624f,   0.37968289875261624f,   0.37968289875261624f,
+		};
+		for (int i = 0; i < grad4.length; i++) {
+			grad4[i] = (float)(grad4[i] / NORMALIZER_4D);
+		}
+		for (int i = 0, j = 0; i < GRADIENTS_4D.length; i++, j++) {
+			if (j == grad4.length) j = 0;
+			GRADIENTS_4D[i] = grad4[j];
+		}
+	}
+}
--- net/minecraft/src/GuiButton.java
+++ net/minecraft/src/GuiButton.java
@@ -17,16 +17,14 @@
 		this(var1, var2, var3, 200, 20, var4);
 	}
 
-	protected GuiButton(int var1, int var2, int var3, int var4, int var5, String var6) {
-		this.width = 200;
-		this.height = 20;
+	public GuiButton(int var1, int var2, int var3, int var4, int var5, String var6) {
+		this.width = var4;
+		this.height = var5;
 		this.enabled = true;
 		this.visible = true;
 		this.id = var1;
 		this.xPosition = var2;
 		this.yPosition = var3;
-		this.width = var4;
-		this.height = var5;
 		this.displayString = var6;
 	}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenShrubs.java
@@ -1,0 +1,45 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class WorldGenShrubs extends WorldGenerator {
+	private int metadata = 0;
+
+	public WorldGenShrubs withMetadata(int metadata) {
+		this.metadata = metadata;
+		return this;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.dirt.blockID)
+			return false;
+
+		for (int i = 0; i < 3; i++) {
+			int block = var1.getBlockId(var3, var4 + i, var5);
+			if (block != 0 && block != Block.leaves.blockID)
+				return false;
+		}
+
+		var1.setBlockAndMetadata(var3, var4, var5, Block.wood.blockID, metadata);
+
+		int baseThickness = var2.nextInt(3);
+		final int height = 2;
+		for (int y = 0; y < height; y++) {
+			int thickness = height - y + baseThickness;
+
+			for (int x = -thickness; x <= thickness; x++)
+				for (int z = -thickness; z <= thickness; z++) {
+					if (var1.getBlockId(var3 + x, var4 - 1, var5 + z) == 0) continue;
+					if (Math.sqrt(x * x + z * z) > var2.nextDouble() * thickness * 2) continue;
+
+					if (var1.getBlockId(var3 + x, var4 + y, var5 + z) == 0)
+						var1.setBlockAndMetadata(var3 + x, var4 + y, var5 + z, Block.leaves.blockID, metadata);
+				}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Biome.java
@@ -1,0 +1,318 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.font.FontRenderContext;
+import java.awt.font.GlyphVector;
+import java.awt.image.BufferedImage;
+import java.awt.image.WritableRaster;
+import java.io.File;
+import java.io.IOException;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Random;
+
+public enum Biome {
+	DESERT(5, 0.75F, 0.00F, 1.00F, 0.25F) {
+		public void populate(PopulatorHost host) {
+			int cactiCount = host.rand.nextInt(5) - 2;
+			if (cactiCount > 0)
+				host.generateSurface(new WorldGenCactus().withScale(4, 1, 0), cactiCount, 8);
+		}
+
+		public Block getSurface() {
+			return Block.sand;
+		}
+
+		public Block getSoil() {
+			return Block.sand;
+		}
+
+		public int getStoneMetadata() {
+			return 3;
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 255, 128, 0 };
+		}
+	},
+	TUNDRA(4, 0.00F, 0.00F, 0.30F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			TUNDRA_TREES.populate(host);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 128, 255 };
+		}
+	},
+	RAINFOREST(3, 0.75F, 0.60F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			host.generateSurface(new WorldGenShrubs().withMetadata(3), 4, 8);
+			RAINFOREST_TREES.populate(host);
+			host.generateFlowers(1);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 128, 255, 0 };
+		}
+	},
+	SAVANNA(2, 0.50F, 0.00F, 1.00F, 0.40F) {
+		public void populate(PopulatorHost host) {
+			SAVANNA_TREES.populate(host);
+		}
+
+		public Block getSurface() {
+			return Block.dirt;
+		}
+
+		public int getSurfaceMetadata() {
+			return 1;
+		}
+
+		public int getStoneMetadata() {
+			return 3;
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 255, 255, 0 };
+		}
+	},
+	SEASONAL_FOREST(1, 0.60F, 0.40F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			SEASONAL_FOREST_TREES.populate(host);
+			host.generateFlowers(4);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 200, 100 };
+		}
+	},
+	PLAINS(0, 0.00F, 0.00F, 1.00F, 1.00F) {
+		public void populate(PopulatorHost host) {
+			PLAINS_TREES.populate(host);
+			host.generateFlowers(2);
+		}
+
+		public int[] getMapColor() {
+			return new int[] { 0, 255, 0 };
+		}
+	};
+
+	//#region Biome Properties
+	private static Biome[] biomesById = new Biome[256];
+
+	private static final TreePopulator PLAINS_TREES = new TreePopulator()
+			.withTree(new WorldGenTrees())
+			.withBigTree(new WorldGenBigTree(), 20, 2)
+			.withHighTree(new WorldGenSpruceTrees(), 80, 100)
+			.withShrub(new WorldGenShrubs(), 1)
+			.withDensity(4.0D, 8.0D, 2.0D);
+
+	private static final TreePopulator TUNDRA_TREES = new TreePopulator()
+			.withTree(new WorldGenSpruceTrees())
+			.withBigTree(new WorldGenSpruceTrees().makeBig().withScale(6, 6, 5), 15, 1)
+			.withDensity(1.0D, 4.0D, 1.0D);
+
+	private static final TreePopulator SEASONAL_FOREST_TREES = new TreePopulator()
+			.withTree(new WorldGenTrees().withAltForm(2, 0.5D))
+			.withBigTree(new WorldGenBigTree().withAltForm(2, 0.75D), 20, 2)
+			.withShrub(new WorldGenShrubs(), -2)
+			.withDensity(8.0D, 12.0D, 2.0D);
+
+	private static final TreePopulator SAVANNA_TREES = new TreePopulator()
+			.withTree(new WorldGenMahoganyTrees())
+			.withShrub(new WorldGenShrubs().withMetadata(3), -5)
+			.withDensity(2.0D, 3.0D, 2.0D);
+
+	private static final TreePopulator RAINFOREST_TREES = new TreePopulator()
+			.withTree(new WorldGenMahoganyTrees())
+			.withDensity(16.0D, 24.0D, 1.0D);
+	//#endregion
+
+	//#region Properties
+	private final float minTemperature, minHumidity, maxTemperature, maxHumidity;
+	public final byte id;
+
+	public float getMinTemperature() {
+		return minTemperature;
+	}
+
+	public float getMinHumidity() {
+		return minHumidity;
+	}
+
+	public float getMaxTemperature() {
+		return maxTemperature;
+	}
+
+	public float getMaxHumidity() {
+		return maxHumidity;
+	}
+
+	public Block getSurface() {
+		return Block.grass;
+	}
+
+	public Block getSoil() {
+		return Block.dirt;
+	}
+
+	public int getSurfaceMetadata() {
+		return 0;
+	}
+
+	public int getStoneMetadata() {
+		return 0;
+	}
+
+	public int[] getMapColor() {
+		return new int[] {
+				(int) MathHelper.clamp((minTemperature + maxTemperature) / 2.0F * 255.0F, 0.0F, 255.0F),
+				(int) MathHelper.clamp((minHumidity + maxHumidity) / 2.0F * 255.0F, 0.0F, 255.0F),
+				128
+		};
+	}
+
+	Biome(int id, float minTemperature, float minHumidity, float maxTemperature, float maxHumidity) {
+		if (id < 0 || id > Byte.MAX_VALUE) {
+			throw new IllegalArgumentException("Biome ID is invalid!");
+		}
+		this.id = (byte)id;
+		this.minTemperature = minTemperature;
+		this.minHumidity = minHumidity;
+		this.maxTemperature = maxTemperature;
+		this.maxHumidity = maxHumidity;
+	}
+
+	public void populate(PopulatorHost host) { }
+	//#endregion Properties
+
+	public static Biome getBiome(float temp, float hum) {
+		for (Biome biome : Biome.values()) {
+			if (temp >= biome.getMinTemperature()
+					&& temp <= biome.getMaxTemperature()
+					&& hum >= biome.getMinHumidity()
+					&& hum <= biome.getMaxHumidity()) {
+				return biome;
+			}
+		}
+		return Biome.PLAINS;
+	}
+
+	public static Biome fromId(int id) {
+		Biome biome = Biome.biomesById[id];
+		return biome == null ? Biome.PLAINS : biome;
+	}
+
+	//#region Biome Maps
+	public static void generateBiomeMap() throws IOException {
+		Instant generationBegin = Instant.now();
+
+		BufferedImage img = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_RGB);
+		WritableRaster raster = img.getRaster();
+		Graphics2D gfx = img.createGraphics();
+
+		for (int x = 0; x < 1000; x++)
+			for (int y = 0; y < 1000; y++) {
+				Biome biome = Biome.getBiome(x / 1000.0F, y / 1000.0F);
+				int[] color = biome.getMapColor();
+				raster.setPixel(x, y, color);
+			}
+
+		Font font = new Font(Font.DIALOG, Font.PLAIN, 16);
+		Stroke stroke = new BasicStroke(2.0F, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL);
+		Stroke originalStroke = gfx.getStroke();
+
+		gfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+		gfx.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
+
+		for (Biome biome : Biome.values()) {
+			String biomeName = biome.name().toLowerCase();
+			biomeName = Character.toUpperCase(biomeName.charAt(0)) + biomeName.substring(1);
+			biomeName = biomeName.replace('_', ' ');
+
+			int labelX = (int)MathHelper.clamp(biome.getMinTemperature() * 1000.0F, 0.0F, 1000.0F);
+			int labelY = (int)MathHelper.clamp(biome.getMinHumidity() * 1000.0F, 0.0F, 1000.0F);
+
+			FontRenderContext fctx = gfx.getFontRenderContext();
+			GlyphVector glyphVector = font.createGlyphVector(fctx, biomeName);
+
+			Rectangle bounds = glyphVector.getPixelBounds(fctx, labelX, labelY + 16);
+			if (bounds.getMaxX() > 1000.0F) labelX -= bounds.width;
+			if (bounds.getMaxY() > 1000.0F) labelY -= bounds.height;
+			Shape textShape = glyphVector.getOutline(labelX, labelY + 16);
+
+			gfx.setColor(Color.black);
+			gfx.setStroke(stroke);
+			gfx.draw(textShape);
+
+			gfx.setColor(Color.white);
+			gfx.setStroke(originalStroke);
+			gfx.fill(textShape);
+		}
+
+		gfx.dispose();
+
+		File imgFile = new File("C:/tmp/mcdiverge-biomemap.png");
+		ImageIO.write(img, "png", imgFile);
+
+		Instant generationEnd = Instant.now();
+		System.out.println("Saved biome map to C:/tmp/mcdiverge-biomemap.png in "
+				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
+	}
+
+	public static void generateWorldBiomeMap() throws IOException {
+		Instant generationBegin = Instant.now();
+
+		final int size = 2048;
+		final int scale = 16;
+		final double biomeSize = 250000.0D / scale;
+		final float biomeBlend = 0.0F;
+		Random rand = new Random();
+
+		BufferedImage img = new BufferedImage(size * 2, size * 2, BufferedImage.TYPE_INT_RGB);
+		WritableRaster raster = img.getRaster();
+
+		long seed = rand.nextLong();
+
+		for (int x = 0; x < size; x++)
+			for (int y = 0; y < size; y++) {
+				float temperature = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
+								x / biomeSize, y / biomeSize, 1000, 8) / 256 * 1.2F + 0.6F
+								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+						0.0F, 1.0F);
+				float humidity = MathHelper.clamp(SimplexOctaves.noise3_ImproveXY(seed,
+								x / biomeSize, y / biomeSize, -1000, 8) / 256 * 1.2F + 0.6F
+								+ (rand.nextFloat() * biomeBlend * 2.0F - biomeBlend),
+						0.0F, 1.0F);
+
+				Biome biome = Biome.getBiome(temperature, humidity);
+				raster.setPixel(x, y, biome.getMapColor());
+
+				int tempCol = (int)(temperature * 255.0F);
+				int humCol = (int)(humidity * 255.0F);
+				raster.setPixel(x + size, y, new int[] { tempCol, tempCol, tempCol });
+				raster.setPixel(x + size, y + size, new int[] { humCol, humCol, humCol });
+				raster.setPixel(x, y + size, new int[] { tempCol, humCol, 0 });
+			}
+
+		Graphics2D gfx = img.createGraphics();
+		gfx.drawString("Scale: 1:" + scale, 4, 20);
+
+		File imgFile = new File("C:/tmp/mcdiverge-worldbiomemap.png");
+		ImageIO.write(img, "png", imgFile);
+
+		Instant generationEnd = Instant.now();
+		System.out.println("Saved world biome map to C:/tmp/mcdiverge-worldbiomemap.png in "
+				+ Duration.between(generationBegin, generationEnd).toMillis() + "ms");
+	}
+	//#endregion Biome Maps
+
+	static {
+		for (Biome biome : Biome.values()) {
+			Biome.biomesById[biome.id] = biome;
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenMahoganyTrees.java
@@ -1,0 +1,124 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.World;
+import net.minecraft.src.WorldGenerator;
+
+import java.util.Random;
+
+public class WorldGenMahoganyTrees extends WorldGenerator {
+	private int trunkHeightVariation = 4;
+	private int trunkHeightMin = 4;
+	private int leavesHeightVariation = 3;
+
+	public void setScale(double var1, double var3, double var5) {
+		this.trunkHeightVariation = (int)var1 + 4;
+		this.trunkHeightMin = (int)var3 + 4;
+		this.leavesHeightVariation = (int)var5 + 3;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		final int maxLeaves = 4;
+		int trunkHeight = rand.nextInt(trunkHeightVariation) + trunkHeightMin;
+		int leavesWidth = rand.nextInt(2) + 1;
+		int leavesHeight = rand.nextInt(leavesHeightVariation) + 2;
+
+		while (y + trunkHeight >= 128) {
+			trunkHeight /= 2;
+			if (trunkHeight == 0) {
+				return false;
+			}
+		}
+
+		int ground = world.getBlockId(x, y - 1, z);
+		if (ground != Block.dirt.blockID && ground != Block.grass.blockID) {
+			return false;
+		}
+
+		for (int sy = y; sy < y + trunkHeight; sy++) {
+			if (sy < 0 || sy >= 128)
+				continue;
+
+			for (int sx = x - leavesWidth; sx <= x + leavesWidth; sx++)
+				for (int sz = z - leavesWidth; sz <= z + leavesWidth; sz++) {
+					int block = world.getBlockId(sx, sy, sz);
+					if (block != 0 && block != Block.leaves.blockID) {
+						return false;
+					}
+				}
+		}
+
+		int ogx = x;
+		int ogz = z;
+
+		world.setBlock(x, y - 1, z, Block.dirt.blockID);
+		for (int ty = y; ty < y + trunkHeight; ty++) {
+			world.setBlockAndMetadata(x, ty, z, Block.wood.blockID, 3);
+			if (rand.nextInt(5) == 0) {
+				int add = rand.nextInt(3) - 1;
+				if (rand.nextInt(2) == 0) {
+					x += add;
+					x = Math.min(Math.max(x, ogx - 1), ogx + 1);
+				} else {
+					z += add;
+					z = Math.min(Math.max(z, ogz - 1), ogz + 1);
+				}
+			}
+		}
+
+		for (int ly = 0; ly < leavesHeight; ly++) {
+			int lyWorld = y + trunkHeight - ly;
+			int lq = Math.min(ly + 2, maxLeaves);
+
+			for (int i = 0; i < lq; i++) {
+				int lx = x + (rand.nextInt(leavesWidth * 2 + 1) - leavesWidth);
+				int lz = z + (rand.nextInt(leavesWidth * 2 + 1) - leavesWidth);
+				placeLeaves(world, lx, lyWorld, lz, rand.nextInt(3) == 0 ? 2 : 1);
+			}
+		}
+
+		int branchCount = trunkHeight / 10;
+		if (branchCount > 0) {
+			for (int i = 0; i < branchCount; i++) {
+				int by = rand.nextInt(trunkHeight / 2) + trunkHeight / 4 + y;
+				int bdx = rand.nextInt(3) - 1;
+				int bdz = rand.nextInt(3) - 1;
+				int blen = rand.nextInt(3) + 3;
+
+				int bx = x;
+				int bz = z;
+				world.setBlockAndMetadata(bx, by, bz, Block.wood.blockID, 3);
+				for (int j = 0; j < blen; j++) {
+					if (rand.nextInt(3) == 0)
+						by++;
+
+					bx += bdx;
+					bz += bdz;
+					world.setBlockAndMetadata(bx, by, bz, Block.wood.blockID, 3);
+				}
+
+				for (int ly = 0; ly < 3; ly++) {
+					int lyWorld = ly + by - 1;
+					int lc = ly < 2 ? 2 : 1;
+
+					for (int j = 0; j < lc; j++) {
+						int lx = bx + (rand.nextInt(3) - 1);
+						int lz = bz + (rand.nextInt(3) - 1);
+						placeLeaves(world, lx, lyWorld, lz, 1);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private static void placeLeaves(World world, int x, int y, int z, int leafSize) {
+		for (int lx = x - leafSize; lx <= x + leafSize; lx++)
+			for (int lz = z - leafSize; lz <= z + leafSize; lz++) {
+				if (world.getBlockId(lx, y, lz) == 0) {
+				   world.setBlockAndMetadata(lx, y, lz, Block.leaves.blockID, 3);
+				}
+			}
+	}
+}
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -27,9 +27,19 @@
 
 	public RenderEngine(GameSettings var1) {
 		this.options = var1;
+		RenderGlobal.globalBrightness = this.options.brightness * 0.2F;
 	}
 
 	public int getTexture(String var1) {
+		if (this.options.darkMode
+				&& var1.startsWith("/gui/")
+				&& !var1.contains("/items.png")
+				&& !var1.contains("/icons.png")
+				&& !var1.contains("/bg")) {
+			int dotPos = var1.indexOf(".");
+			var1 = var1.substring(0, dotPos) + "_dark.png";
+		}
+
 		Integer var2 = (Integer)this.textureMap.get(var1);
 		if(var2 != null) {
 			return var2.intValue();
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -8,61 +8,15 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumOS;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.OSMap;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerCreative;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldRenderer;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import net.minecraft.src.*;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -73,6 +27,9 @@
 import org.lwjgl.util.glu.GLU;
 
 public abstract class Minecraft implements Runnable {
+	public static final String version = "Minecraft Diverge v0.2.2";
+	public static final boolean developmentVersion = false;
+
 	public PlayerController playerController;
 	private boolean fullscreen = false;
 	public int displayWidth;
@@ -124,20 +81,22 @@
 	public boolean isRaining = false;
 	long systemTime = System.currentTimeMillis();
 	private int joinPlayerCounter = 0;
+	public boolean creativeDebugEnabled = false;
+	public boolean showHud = true;
 
-	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
-		this.tempDisplayWidth = var4;
-		this.tempDisplayHeight = var5;
-		this.fullscreen = var6;
-		this.mcApplet = var3;
+	public Minecraft(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		this.tempDisplayWidth = width;
+		this.tempDisplayHeight = height;
+		this.fullscreen = fullscreen;
+		this.mcApplet = mcApplet;
 		new ThreadSleepForever(this, "Timer hack thread");
-		this.mcCanvas = var2;
-		this.displayWidth = var4;
-		this.displayHeight = var5;
-		this.fullscreen = var6;
+		this.mcCanvas = canvas;
+		this.displayWidth = width;
+		this.displayHeight = height;
+		this.fullscreen = fullscreen;
 	}
 
-	public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
+	public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable1);
 
 	public void setServer(String var1, int var2) {
 		this.serverName = var1;
@@ -169,16 +128,16 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Alpha v1.1.2_01");
+		Display.setTitle("Minecraft " + Minecraft.version);
 
 		try {
 			Display.create();
-		} catch (LWJGLException var6) {
-			var6.printStackTrace();
+		} catch (LWJGLException lWJGLException6) {
+			lWJGLException6.printStackTrace();
 
 			try {
 				Thread.sleep(1000L);
-			} catch (InterruptedException var5) {
+			} catch (InterruptedException interruptedException5) {
 			}
 
 			Display.create();
@@ -194,10 +153,12 @@
 		Mouse.create();
 		this.mouseHelper = new MouseHelper(this.mcCanvas);
 
+		Display.setVSyncEnabled(this.options.limitFramerate);
+
 		try {
 			Controllers.create();
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		this.checkGLError("Pre startup");
@@ -229,8 +190,10 @@
 		try {
 			this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
 			this.downloadResourcesThread.start();
-		} catch (Exception var3) {
+		} catch (Exception exception3) {
 		}
+
+		GuiScreen.setBgType(new Random().nextInt(4));
 
 		this.checkGLError("Post startup");
 		this.ingameGUI = new GuiIngame(this);
@@ -239,14 +202,13 @@
 		} else {
 			this.displayGuiScreen(new GuiMainMenu());
 		}
-
 	}
 
 	private void loadScreen() throws LWJGLException {
-		ScaledResolution var1 = new ScaledResolution(this.displayWidth, this.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
-		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.displayWidth, this.displayHeight, this.options.guiScale);
+		int var2 = scaledResolution1.getScaledWidth();
+		int var3 = scaledResolution1.getScaledHeight();
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
 		GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
@@ -255,23 +217,23 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang.png"));
-		var4.startDrawingQuads();
-		var4.setColorOpaque_I(16777215);
-		var4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.draw();
-		short var5 = 256;
-		short var6 = 256;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang" + (new Random().nextInt(100) == 0 ? "-alt.png" : ".png")));
+		tessellator4.startDrawingQuads();
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		tessellator4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 2.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 2.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.draw();
+		short s5 = 256;
+		short s6 = 256;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
-		this.scaledTessellator((this.displayWidth / 2 - var5) / 2, (this.displayHeight / 2 - var6) / 2, 0, 0, var5, var6);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		this.scaledTessellator((this.displayWidth / 2 - s5) / 2, (this.displayHeight / 2 - s6) / 2, 0, 0, s5, s6);
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
@@ -280,15 +242,15 @@
 	}
 
 	public void scaledTessellator(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 1.0F / 256.0F;
-		float var8 = 1.0F / 256.0F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+		float var7 = 0.00390625F;
+		float var8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.startDrawingQuads();
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
+		tessellator9.draw();
 	}
 
 	public static File getMinecraftDir() {
@@ -301,31 +263,31 @@
 
 	public static File getAppDir(String var0) {
 		String var1 = System.getProperty("user.home", ".");
-		File var2;
-		switch(OSMap.osValues[getOs().ordinal()]) {
+		File file2;
+		switch(Minecraft.SyntheticClass_1.$SwitchMap$net$minecraft$src$EnumOS[getOs().ordinal()]) {
 		case 1:
 		case 2:
-			var2 = new File(var1, '.' + var0 + '/');
+			file2 = new File(var1, '.' + var0 + '/');
 			break;
 		case 3:
 			String var3 = System.getenv("APPDATA");
 			if(var3 != null) {
-				var2 = new File(var3, "." + var0 + '/');
+				file2 = new File(var3, "." + var0 + '/');
 			} else {
-				var2 = new File(var1, '.' + var0 + '/');
+				file2 = new File(var1, '.' + var0 + '/');
 			}
 			break;
 		case 4:
-			var2 = new File(var1, "Library/Application Support/" + var0);
+			file2 = new File(var1, "Library/Application Support/" + var0);
 			break;
 		default:
-			var2 = new File(var1, var0 + '/');
+			file2 = new File(var1, var0 + '/');
 		}
 
-		if(!var2.exists() && !var2.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var2);
+		if(!file2.exists() && !file2.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file2);
 		} else {
-			return var2;
+			return file2;
 		}
 	}
 
@@ -334,25 +296,25 @@
 		return var0.contains("win") ? EnumOS.windows : (var0.contains("mac") ? EnumOS.macos : (var0.contains("solaris") ? EnumOS.solaris : (var0.contains("sunos") ? EnumOS.solaris : (var0.contains("linux") ? EnumOS.linux : (var0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
 	}
 
-	public void displayGuiScreen(GuiScreen var1) {
+	public void displayGuiScreen(GuiScreen guiScreen1) {
 		if(!(this.currentScreen instanceof GuiErrorScreen)) {
 			if(this.currentScreen != null) {
 				this.currentScreen.onGuiClosed();
 			}
 
-			if(var1 == null && this.theWorld == null) {
-				var1 = new GuiMainMenu();
-			} else if(var1 == null && this.thePlayer.health <= 0) {
-				var1 = new GuiGameOver();
+			if(guiScreen1 == null && this.theWorld == null) {
+				guiScreen1 = new GuiMainMenu();
+			} else if(guiScreen1 == null && this.thePlayer.health <= 0) {
+				guiScreen1 = new GuiGameOver();
 			}
 
-			this.currentScreen = (GuiScreen)var1;
-			if(var1 != null) {
+			this.currentScreen = (GuiScreen)guiScreen1;
+			if(guiScreen1 != null) {
 				this.setIngameNotInFocus();
-				ScaledResolution var2 = new ScaledResolution(this.displayWidth, this.displayHeight);
-				int var3 = var2.getScaledWidth();
-				int var4 = var2.getScaledHeight();
-				((GuiScreen)var1).setWorldAndResolution(this, var3, var4);
+				ScaledResolution scaledResolution2 = new ScaledResolution(this.displayWidth, this.displayHeight, this.options.guiScale);
+				int var3 = scaledResolution2.getScaledWidth();
+				int var4 = scaledResolution2.getScaledHeight();
+				((GuiScreen)guiScreen1).setWorldAndResolution(this, var3, var4);
 				this.skipRenderWorld = false;
 			} else {
 				this.setIngameFocus();
@@ -382,7 +344,7 @@
 			if(this.downloadResourcesThread != null) {
 				this.downloadResourcesThread.closeMinecraft();
 			}
-		} catch (Exception var8) {
+		} catch (Exception exception8) {
 		}
 
 		try {
@@ -391,7 +353,7 @@
 
 			try {
 				GLAllocation.deleteTexturesAndDisplayLists();
-			} catch (Exception var6) {
+			} catch (Exception exception6) {
 			}
 
 			this.sndManager.closeMinecraft();
@@ -409,9 +371,9 @@
 
 		try {
 			this.startGame();
-		} catch (Exception var13) {
-			var13.printStackTrace();
-			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", var13));
+		} catch (Exception exception13) {
+			exception13.printStackTrace();
+			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", exception13));
 			return;
 		}
 
@@ -440,7 +402,7 @@
 
 						try {
 							this.runTick();
-						} catch (MinecraftException var12) {
+						} catch (MinecraftException minecraftException12) {
 							this.theWorld = null;
 							this.changeWorld1((World)null);
 							this.displayGuiScreen(new GuiConflictWarning());
@@ -493,9 +455,9 @@
 						this.resize(this.displayWidth, this.displayHeight);
 					}
 
-					if(this.options.limitFramerate) {
-						Thread.sleep(5L);
-					}
+					// if(this.options.limitFramerate) {
+					//	 Thread.sleep(5L);
+					// }
 
 					this.checkGLError("Post render");
 					++var3;
@@ -506,7 +468,7 @@
 						var1 += 1000L;
 					}
 				}
-			} catch (MinecraftError var14) {
+			} catch (MinecraftError minecraftError14) {
 			} catch (Throwable var15) {
 				this.theWorld = null;
 				var15.printStackTrace();
@@ -534,14 +496,14 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glLineWidth(1.0F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var3 = Tessellator.instance;
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(538968064);
-		var3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
-		var3.draw();
+		Tessellator tessellator3 = Tessellator.instance;
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20200000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.draw();
 		long var4 = 0L;
 
 		int var6;
@@ -550,14 +512,14 @@
 		}
 
 		var6 = (int)(var4 / 200000L / (long)frameTimes.length);
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(541065216);
-		var3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
-		var3.draw();
-		var3.startDrawing(1);
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20400000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
+		tessellator3.draw();
+		tessellator3.startDrawing(1);
 
 		for(int var7 = 0; var7 < frameTimes.length; ++var7) {
 			int var8 = (var7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
@@ -565,13 +527,13 @@
 			var9 = var9 * var9 / 255;
 			int var10 = var9 * var9 / 255;
 			var10 = var10 * var10 / 255;
-			var3.setColorOpaque_I(-16777216 + var10 + var9 * 256 + var8 * 65536);
+			tessellator3.setColorOpaque_I(0xFF000000 + var10 + var9 * 256 + var8 * 65536);
 			long var11 = frameTimes[var7] / 200000L;
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
 		}
 
-		var3.draw();
+		tessellator3.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
@@ -607,10 +569,10 @@
 		}
 	}
 
-	private void sendClickBlockToController(int var1, boolean var2) {
+	private void sendClickBlockToController(int button, boolean clicked) {
 		if(!this.playerController.isInTestMode) {
-			if(var1 != 0 || this.leftClickCounter <= 0) {
-				if(var2 && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && var1 == 0) {
+			if(button != 0 || this.leftClickCounter <= 0) {
+				if(clicked && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && button == 0) {
 					int var3 = this.objectMouseOver.blockX;
 					int var4 = this.objectMouseOver.blockY;
 					int var5 = this.objectMouseOver.blockZ;
@@ -624,23 +586,23 @@
 		}
 	}
 
-	private void clickMouse(int var1) {
-		if(var1 != 0 || this.leftClickCounter <= 0) {
-			if(var1 == 0) {
+	private void clickMouse(int button) {
+		if(button != 0 || this.leftClickCounter <= 0) {
+			if(button == 0) {
 				this.thePlayer.swingItem();
 			}
 
 			int var3;
 			if(this.objectMouseOver == null) {
-				if(var1 == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
+				if(button == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
 					this.leftClickCounter = 10;
 				}
 			} else if(this.objectMouseOver.typeOfHit == 1) {
-				if(var1 == 0) {
-					this.thePlayer.attackEntity(this.objectMouseOver.entityHit);
+				if(button == 0) {
+					this.playerController.attackEntity(this.thePlayer, this.objectMouseOver.entityHit);
 				}
 
-				if(var1 == 1) {
+				if(button == 1) {
 					this.thePlayer.interactWithEntity(this.objectMouseOver.entityHit);
 				}
 			} else if(this.objectMouseOver.typeOfHit == 0) {
@@ -649,7 +611,7 @@
 				int var4 = this.objectMouseOver.blockZ;
 				int var5 = this.objectMouseOver.sideHit;
 				Block var6 = Block.blocksList[this.theWorld.getBlockId(var2, var3, var4)];
-				if(var1 == 0) {
+				if(button == 0) {
 					this.theWorld.extinguishFire(var2, var3, var4, this.objectMouseOver.sideHit);
 					if(var6 != Block.bedrock || this.thePlayer.unusedMiningCooldown >= 100) {
 						this.playerController.clickBlock(var2, var3, var4, this.objectMouseOver.sideHit);
@@ -673,18 +635,10 @@
 				}
 			}
 
-			if(var1 == 1) {
+			if(button == 1) {
 				ItemStack var9 = this.thePlayer.inventory.getCurrentItem();
-				if(var9 != null) {
-					var3 = var9.stackSize;
-					ItemStack var10 = var9.useItemRightClick(this.theWorld, this.thePlayer);
-					if(var10 != var9 || var10 != null && var10.stackSize != var3) {
-						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var10;
-						this.entityRenderer.itemRenderer.resetEquippedProgress2();
-						if(var10.stackSize == 0) {
-							this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-						}
-					}
+				if(var9 != null && this.playerController.sendUseItem(this.thePlayer, this.theWorld, var9)) {
+					this.entityRenderer.itemRenderer.resetEquippedProgress2();
 				}
 			}
 
@@ -740,27 +694,27 @@
 			}
 
 			System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
 
-	private void resize(int var1, int var2) {
-		if(var1 <= 0) {
-			var1 = 1;
-		}
-
-		if(var2 <= 0) {
-			var2 = 1;
-		}
-
-		this.displayWidth = var1;
-		this.displayHeight = var2;
+	private void resize(int width, int height) {
+		if(width <= 0) {
+			width = 1;
+		}
+
+		if(height <= 0) {
+			height = 1;
+		}
+
+		this.displayWidth = width;
+		this.displayHeight = height;
 		if(this.currentScreen != null) {
-			ScaledResolution var3 = new ScaledResolution(var1, var2);
-			int var4 = var3.getScaledWidth();
-			int var5 = var3.getScaledHeight();
+			ScaledResolution scaledResolution3 = new ScaledResolution(width, height, this.options.guiScale);
+			int var4 = scaledResolution3.getScaledWidth();
+			int var5 = scaledResolution3.getScaledHeight();
 			this.currentScreen.setWorldAndResolution(this, var4, var5);
 		}
 
@@ -787,6 +741,8 @@
 	}
 
 	public void runTick() {
+		GuiScreen.backgroundElapsedTicks++;
+
 		this.ingameGUI.updateTick();
 		this.entityRenderer.getMouseOver(1.0F);
 		if(this.thePlayer != null) {
@@ -867,7 +823,11 @@
 												}
 
 												if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
-													this.options.thirdPersonView = !this.options.thirdPersonView;
+													this.options.thirdPersonView = (this.options.thirdPersonView + 1) % 3;
+												}
+
+												if(Keyboard.getEventKey() == Keyboard.KEY_F3) {
+													this.options.debugMenu = !this.options.debugMenu;
 												}
 
 												if(Keyboard.getEventKey() == this.options.keyBindInventory.keyCode) {
@@ -878,9 +838,17 @@
 													this.thePlayer.dropPlayerItemWithRandomChoice(this.thePlayer.inventory.decrStackSize(this.thePlayer.inventory.currentItem, 1), false);
 												}
 
+												if(Keyboard.getEventKey() == this.options.keyBindHideHud.keyCode) {
+													this.showHud = !this.showHud;
+												}
+
 												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.options.keyBindChat.keyCode) {
 													this.displayGuiScreen(new GuiChat());
 												}
+
+												if(Keyboard.getEventKey() == this.options.keyBindCreative.keyCode) {
+													this.thePlayer.displayGUICreative();
+												}
 											}
 
 											for(int var4 = 0; var4 < 9; ++var4) {
@@ -954,6 +922,9 @@
 			}
 
 			if(!this.isGamePaused || this.isMultiplayerWorld()) {
+				if (!this.options.caveSounds) {
+					this.theWorld.soundCounter = 0xDEAD;
+				}
 				this.theWorld.tick();
 			}
 
@@ -980,10 +951,15 @@
 		return this.theWorld != null && this.theWorld.multiplayerWorld;
 	}
 
-	public void startWorld(String var1) {
+	public void startWorld(String worldName) {
+		startWorld(worldName, null);
+	}
+
+	public void startWorld(String worldName, CreateWorldInfo info) {
+		this.sndManager.fadeOutTitleMusic();
 		this.changeWorld1((World)null);
 		System.gc();
-		World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
+		World var2 = new World(new File(getMinecraftDir(), "saves"), worldName, info == null ? 0 : info.seed, info);
 		if(var2.isNewWorld) {
 			this.changeWorld(var2, "Generating level");
 		} else {
@@ -992,54 +968,56 @@
 
 	}
 
-	public void changeWorld1(World var1) {
-		this.changeWorld(var1, "");
+	public void changeWorld1(World world) {
+		this.changeWorld(world, "");
 	}
 
-	public void changeWorld(World var1, String var2) {
-		this.sndManager.playStreaming((String)null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+	public void changeWorld(World world, String title) {
+		this.sndManager.fadeOutTitleMusic();
+		this.sndManager.playStreaming(null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
 		if(this.theWorld != null) {
 			this.theWorld.saveWorldIndirectly(this.loadingScreen);
 		}
 
-		this.theWorld = var1;
-		if(var1 != null) {
-			this.playerController.onWorldChange(var1);
-			var1.fontRenderer = this.fontRenderer;
+		this.theWorld = world;
+		if(world != null) {
+			this.playerController.onWorldChange(world);
+			world.fontRenderer = this.fontRenderer;
 			if(!this.isMultiplayerWorld()) {
-				this.thePlayer = (EntityPlayerSP)var1.createDebugPlayer(EntityPlayerSP.class);
+				this.thePlayer = (EntityPlayerSP)world.createDebugPlayer(EntityPlayerSP.class);
 			} else if(this.thePlayer != null) {
 				this.thePlayer.preparePlayerToSpawn();
-				if(var1 != null) {
-					var1.spawnEntityInWorld(this.thePlayer);
+				if(world != null) {
+					world.spawnEntityInWorld(this.thePlayer);
 				}
 			}
 
-			if(!var1.multiplayerWorld) {
-				this.preloadWorld(var2);
+			if(!world.multiplayerWorld) {
+				this.preloadWorld(title);
 			}
 
 			if(this.thePlayer == null) {
-				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1);
+				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(world);
 				this.thePlayer.preparePlayerToSpawn();
 				this.playerController.flipPlayer(this.thePlayer);
 			}
 
 			this.thePlayer.movementInput = new MovementInputFromOptions(this.options);
 			if(this.renderGlobal != null) {
-				this.renderGlobal.changeWorld(var1);
+				this.renderGlobal.changeWorld(world);
 			}
 
 			if(this.effectRenderer != null) {
-				this.effectRenderer.clearEffects(var1);
+				this.effectRenderer.clearEffects(world);
 			}
 
 			this.playerController.onRespawn(this.thePlayer);
-			var1.spawnPlayerWithLoadedChunks(this.thePlayer);
-			if(var1.isNewWorld) {
-				var1.saveWorldIndirectly(this.loadingScreen);
+			world.spawnPlayerWithLoadedChunks(this.thePlayer);
+			if(world.isNewWorld) {
+				world.saveWorldIndirectly(this.loadingScreen);
 			}
 		} else {
+			this.sndManager.fadeOutBackgroundMusic();
 			this.thePlayer = null;
 		}
 
@@ -1047,15 +1025,15 @@
 		this.systemTime = 0L;
 	}
 
-	private void preloadWorld(String var1) {
-		this.loadingScreen.resetProgressAndMessage(var1);
+	private void preloadWorld(String title) {
+		this.loadingScreen.resetProgressAndMessage(title);
 		this.loadingScreen.displayLoadingString("Building terrain");
-		short var2 = 128;
+		short s2 = 128;
 		int var3 = 0;
-		int var4 = var2 * 2 / 16 + 1;
+		int var4 = s2 * 2 / 16 + 1;
 		var4 *= var4;
 
-		for(int var5 = -var2; var5 <= var2; var5 += 16) {
+		for(int var5 = -s2; var5 <= s2; var5 += 16) {
 			int var6 = this.theWorld.spawnX;
 			int var7 = this.theWorld.spawnZ;
 			if(this.thePlayer != null) {
@@ -1063,7 +1041,7 @@
 				var7 = (int)this.thePlayer.posZ;
 			}
 
-			for(int var8 = -var2; var8 <= var2; var8 += 16) {
+			for(int var8 = -s2; var8 <= s2; var8 += 16) {
 				this.loadingScreen.setLoadingProgress(var3++ * 100 / var4);
 				this.theWorld.getBlockId(var6 + var5, 64, var7 + var8);
 
@@ -1077,20 +1055,26 @@
 		this.theWorld.dropOldChunks();
 	}
 
-	public void installResource(String var1, File var2) {
-		int var3 = var1.indexOf("/");
-		String var4 = var1.substring(0, var3);
-		var1 = var1.substring(var3 + 1);
+	public void installResource(String name, File file) {
+		int var3 = name.indexOf("/");
+		String var4 = name.substring(0, var3);
+		name = name.substring(var3 + 1);
 		if(var4.equalsIgnoreCase("sound")) {
-			this.sndManager.addSound(var1, var2);
+			this.sndManager.addSound(name, file);
 		} else if(var4.equalsIgnoreCase("newsound")) {
-			this.sndManager.addSound(var1, var2);
+			this.sndManager.addSound(name, file);
 		} else if(var4.equalsIgnoreCase("streaming")) {
-			this.sndManager.addStreaming(var1, var2);
-		} else if(var4.equalsIgnoreCase("music")) {
-			this.sndManager.addMusic(var1, var2);
+			this.sndManager.addStreaming(name, file);
 		} else if(var4.equalsIgnoreCase("newmusic")) {
-			this.sndManager.addMusic(var1, var2);
+			if (name.contains("cave")) {
+				this.sndManager.addCaveMusic(name, file);
+			} else if (name.contains("title")) {
+				this.sndManager.addTitleMusic(name, file);
+			} else {
+				this.sndManager.addMusic(name, file);
+			}
+		} else if(var4.equalsIgnoreCase("music")) {
+			this.sndManager.addMusic(name, file);
 		}
 
 	}
@@ -1099,6 +1083,12 @@
 		return this.glCapabilities;
 	}
 
+	public String debugInfoLocation() {
+		return "X: " + Math.floor(this.thePlayer.posX * 100.0F) / 100.0F
+			   + ", Y: " + Math.floor(this.thePlayer.posY * 100.0F) / 100.0F
+			   + ", Z: " + Math.floor(this.thePlayer.posZ * 100.0F) / 100.0F;
+	}
+
 	public String debugInfoRenders() {
 		return this.renderGlobal.getDebugInfoRenders();
 	}
@@ -1111,6 +1101,15 @@
 		return "P: " + this.effectRenderer.getStatistics() + ". T: " + this.theWorld.getDebugLoadedEntities();
 	}
 
+	public String debugInfoSeed() {
+		return "Seed: " + this.theWorld.randomSeed;
+	}
+
+	public String debugInfoWorld() {
+		return "T: " + this.theWorld.worldType.name()
+				   + ". GM: " + (this.theWorld.creative ? 1 : 0);
+	}
+
 	public void respawn() {
 		this.theWorld.setSpawnLocation();
 		if(this.thePlayer != null) {
@@ -1126,51 +1125,78 @@
 		this.preloadWorld("Respawning");
 	}
 
-	public static void startMainThread(String var0, String var1) {
-		startMainThread(var0, var1, (String)null);
+	public static void startMainThread(String username, String sessionId) {
+		startMainThread(username, sessionId, null);
 	}
 
-	public static void startMainThread(String var0, String var1, String var2) {
+	public static void startMainThread(String username, String sessionId, String server) {
 		boolean var3 = false;
-		Frame var5 = new Frame("Minecraft");
-		Canvas var6 = new Canvas();
-		var5.setLayout(new BorderLayout());
-		var5.add(var6, "Center");
-		var6.setPreferredSize(new Dimension(854, 480));
-		var5.pack();
-		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
-		Thread var8 = new Thread(var7, "Minecraft main thread");
-		var8.setPriority(10);
-		var7.appletMode = false;
-		var7.minecraftUri = "www.minecraft.net";
-		if(var0 != null && var1 != null) {
-			var7.session = new Session(var0, var1);
+		Frame frame5 = new Frame("Minecraft");
+		Canvas canvas6 = new Canvas();
+		frame5.setLayout(new BorderLayout());
+		frame5.add(canvas6, "Center");
+		canvas6.setPreferredSize(new Dimension(854, 480));
+		frame5.pack();
+		frame5.setLocationRelativeTo(null);
+		MinecraftImpl minecraftImpl7 = new MinecraftImpl(frame5, canvas6, null, 854, 480, var3, frame5);
+		Thread thread8 = new Thread(minecraftImpl7, "Minecraft main thread");
+		thread8.setPriority(10);
+		minecraftImpl7.appletMode = false;
+		minecraftImpl7.minecraftUri = "www.minecraft.net";
+		if(username != null && sessionId != null) {
+			minecraftImpl7.session = new Session(username, sessionId);
 		} else {
-			var7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
-		}
-
-		if(var2 != null) {
-			String[] var9 = var2.split(":");
-			var7.setServer(var9[0], Integer.parseInt(var9[1]));
-		}
-
-		var5.setVisible(true);
-		var5.addWindowListener(new GameWindowListener(var7, var8));
-		var8.start();
+			minecraftImpl7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
+		}
+
+		if(server != null) {
+			String[] var9 = server.split(":");
+			minecraftImpl7.setServer(var9[0], Integer.parseInt(var9[1]));
+		}
+
+		frame5.setVisible(true);
+		frame5.addWindowListener(new GameWindowListener(minecraftImpl7, thread8));
+		thread8.start();
 	}
 
-	public static void main(String[] var0) {
+	public static void main(String[] args) {
 		String var1 = "Player" + System.currentTimeMillis() % 1000L;
-		if(var0.length > 0) {
-			var1 = var0[0];
+		if(args.length > 0) {
+			var1 = args[0];
 		}
 
 		String var2 = "-";
-		if(var0.length > 1) {
-			var2 = var0[1];
+		if(args.length > 1) {
+			var2 = args[1];
 		}
 
 		startMainThread(var1, var2);
+	}
+
+	static final class SyntheticClass_1 {
+		public static final int[] $SwitchMap$net$minecraft$src$EnumOS = new int[EnumOS.values().length];
+
+		static {
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.linux.ordinal()] = 1;
+			} catch (NoSuchFieldError noSuchFieldError4) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.solaris.ordinal()] = 2;
+			} catch (NoSuchFieldError noSuchFieldError3) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.windows.ordinal()] = 3;
+			} catch (NoSuchFieldError noSuchFieldError2) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.macos.ordinal()] = 4;
+			} catch (NoSuchFieldError noSuchFieldError1) {
+			}
+
+		}
 	}
 }
--- net/minecraft/src/CraftingInventoryWorkbenchCB.java
+++ net/minecraft/src/CraftingInventoryWorkbenchCB.java
@@ -6,6 +6,7 @@
 
 	public void onCraftMatrixChanged(IInventory var1) {
 		int[] var2 = new int[9];
+		int[] metaMap = new int[9];
 
 		for(int var3 = 0; var3 < 3; ++var3) {
 			for(int var4 = 0; var4 < 3; ++var4) {
@@ -13,13 +14,15 @@
 				ItemStack var6 = this.craftMatrix.getStackInSlot(var5);
 				if(var6 == null) {
 					var2[var5] = -1;
+					metaMap[var5] = -1;
 				} else {
 					var2[var5] = var6.itemID;
+					metaMap[var5] = var6.itemMetadata;
 				}
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2, metaMap));
 	}
 
 	public void onCraftGuiClosed(EntityPlayer var1) {
--- net/minecraft/src/EntityPickupFX.java
+++ net/minecraft/src/EntityPickupFX.java
@@ -32,7 +32,7 @@
 		int var27 = MathHelper.floor_double(var21);
 		int var28 = MathHelper.floor_double(var23 + (double)(this.yOffset / 2.0F));
 		int var29 = MathHelper.floor_double(var25);
-		float var30 = this.worldObj.getBrightness(var27, var28, var29);
+		float var30 = this.worldObj.getBrightness(var27, var28, var29) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		var21 -= interpPosX;
 		var23 -= interpPosY;
 		var25 -= interpPosZ;
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -1,27 +1,40 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
 public class GuiOptions extends GuiScreen {
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Options";
 	private GameSettings options;
+	private final int maxPages;
+	private int currentPage;
 
 	public GuiOptions(GuiScreen var1, GameSettings var2) {
 		this.parentScreen = var1;
 		this.options = var2;
+		this.maxPages = Math.floorDiv(this.options.numberOfOptions, 10) + 1;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.numberOfOptions; ++var1) {
-			int var2 = this.options.isSlider(var1);
-			if(var2 == 0) {
-				this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var1)));
+		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 132, "Controls..."));
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
+		this.controlList.add(new GuiButton(300, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(301, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		initPage();
+	}
+
+	private void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 100).collect(Collectors.toList());
+		for(int var1 = 0; var1 < Math.min(this.options.numberOfOptions - currentPage * 10, 10); ++var1) {
+			int var11 = var1 + currentPage * 10;
+			if(this.options.isSlider(var11) == 0) {
+				this.controlList.add(new GuiSmallButton(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var11)));
 			} else {
-				this.controlList.add(new GuiSlider(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var1, this.options.getOptionDisplayString(var1), this.options.getOptionFloatValue(var1)));
+				this.controlList.add(new GuiSlider(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var11, this.options.getOptionDisplayString(var11), this.options.getOptionFloatValue(var11)));
 			}
 		}
-
-		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -39,6 +52,21 @@
 				this.mc.displayGuiScreen(this.parentScreen);
 			}
 
+			if(var1.id == 300) {
+				this.currentPage--;
+				if (this.currentPage < 0) {
+					this.currentPage = maxPages - 1;
+				}
+				this.initPage();
+			}
+
+			if(var1.id == 301) {
+				this.currentPage++;
+				if (this.currentPage >= maxPages) {
+					this.currentPage = 0;
+				}
+				this.initPage();
+			}
 		}
 	}
 
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -2,7 +2,7 @@
 
 public class InventoryPlayer implements IInventory {
 	public ItemStack[] mainInventory = new ItemStack[37];
-	public ItemStack[] armorInventory = new ItemStack[4];
+	public ItemStack[] armorInventory = new ItemStack[5];
 	public ItemStack[] craftingInventory = new ItemStack[4];
 	public int currentItem = 0;
 	private EntityPlayer player;
@@ -27,9 +27,13 @@
 		return -1;
 	}
 
-	private int storeItemStack(int var1) {
+	private int storeItemStack(int var1, int metadata) {
 		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1 && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
+			if(this.mainInventory[var2] != null
+				&& this.mainInventory[var2].itemID == var1
+				&& this.mainInventory[var2].itemMetadata == metadata
+				&& this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize()
+				&& this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
 				return var2;
 			}
 		}
@@ -72,8 +76,8 @@
 
 	}
 
-	private int storePartialItemStack(int var1, int var2) {
-		int var3 = this.storeItemStack(var1);
+	private int storePartialItemStack(int var1, int var2, int metadata) {
+		int var3 = this.storeItemStack(var1, metadata);
 		if(var3 < 0) {
 			var3 = this.getFirstEmptyStack();
 		}
@@ -82,7 +86,7 @@
 			return var2;
 		} else {
 			if(this.mainInventory[var3] == null) {
-				this.mainInventory[var3] = new ItemStack(var1, 0);
+				this.mainInventory[var3] = new ItemStack(var1, 0).withMetadata(metadata);
 			}
 
 			int var4 = var2;
@@ -129,7 +133,7 @@
 
 	public boolean addItemStackToInventory(ItemStack var1) {
 		if(var1.itemDmg == 0) {
-			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize);
+			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize, var1.itemMetadata);
 			if(var1.stackSize == 0) {
 				return true;
 			}
@@ -191,7 +195,6 @@
 		if(this.mainInventory[this.currentItem] != null) {
 			var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
 		}
-
 		return var2;
 	}
 
@@ -230,13 +233,13 @@
 
 	public void readFromNBT(NBTTagList var1) {
 		this.mainInventory = new ItemStack[36];
-		this.armorInventory = new ItemStack[4];
+		this.armorInventory = new ItemStack[5];
 		this.craftingInventory = new ItemStack[4];
 
 		for(int var2 = 0; var2 < var1.tagCount(); ++var2) {
 			NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
 			int var4 = var3.getByte("Slot") & 255;
-			if(var4 >= 0 && var4 < this.mainInventory.length) {
+			if(var4 < this.mainInventory.length) {
 				this.mainInventory[var4] = new ItemStack(var3);
 			}
 
@@ -252,7 +255,7 @@
 	}
 
 	public int getSizeInventory() {
-		return this.mainInventory.length + 4;
+		return this.mainInventory.length + 5;
 	}
 
 	public ItemStack getStackInSlot(int var1) {
@@ -298,26 +301,12 @@
 
 	public int getTotalArmorValue() {
 		int var1 = 0;
-		int var2 = 0;
-		int var3 = 0;
-
-		for(int var4 = 0; var4 < this.armorInventory.length; ++var4) {
-			if(this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
-				int var5 = this.armorInventory[var4].getMaxDamage();
-				int var6 = this.armorInventory[var4].itemDmg;
-				int var7 = var5 - var6;
-				var2 += var7;
-				var3 += var5;
-				int var8 = ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
-				var1 += var8;
+		for (int var4 = 0; var4 < this.armorInventory.length; ++var4) {
+			if (this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
+				var1 += ((ItemArmor) this.armorInventory[var4].getItem()).defense;
 			}
 		}
-
-		if(var3 == 0) {
-			return 0;
-		} else {
-			return (var1 - 1) * var2 / var3 + 1;
-		}
+		return var1;
 	}
 
 	public void damageArmor(int var1) {
--- net/minecraft/src/Session.java
+++ net/minecraft/src/Session.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Random;
 
 public class Session {
 	public static List registeredBlocksList = new ArrayList();
@@ -12,37 +13,9 @@
 	public Session(String var1, String var2) {
 		this.username = var1;
 		this.sessionId = var2;
-	}
 
-	static {
-		registeredBlocksList.add(Block.stone);
-		registeredBlocksList.add(Block.cobblestone);
-		registeredBlocksList.add(Block.brick);
-		registeredBlocksList.add(Block.dirt);
-		registeredBlocksList.add(Block.planks);
-		registeredBlocksList.add(Block.wood);
-		registeredBlocksList.add(Block.leaves);
-		registeredBlocksList.add(Block.torch);
-		registeredBlocksList.add(Block.stairSingle);
-		registeredBlocksList.add(Block.glass);
-		registeredBlocksList.add(Block.cobblestoneMossy);
-		registeredBlocksList.add(Block.sapling);
-		registeredBlocksList.add(Block.plantYellow);
-		registeredBlocksList.add(Block.plantRed);
-		registeredBlocksList.add(Block.mushroomBrown);
-		registeredBlocksList.add(Block.mushroomRed);
-		registeredBlocksList.add(Block.sand);
-		registeredBlocksList.add(Block.gravel);
-		registeredBlocksList.add(Block.sponge);
-		registeredBlocksList.add(Block.cloth);
-		registeredBlocksList.add(Block.oreCoal);
-		registeredBlocksList.add(Block.oreIron);
-		registeredBlocksList.add(Block.oreGold);
-		registeredBlocksList.add(Block.blockSteel);
-		registeredBlocksList.add(Block.blockGold);
-		registeredBlocksList.add(Block.bookshelf);
-		registeredBlocksList.add(Block.tnt);
-		registeredBlocksList.add(Block.obsidian);
-		System.out.println(registeredBlocksList.size());
+		if (this.username.equals("Player")) {
+			this.username = "Player" + new Random().nextInt(1000);
+		}
 	}
 }
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -1,27 +1,37 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.GuiCreative;
+import io.github.bluestaggo.mcdiverge.GuiRecipeGuide;
+import io.github.bluestaggo.mcdiverge.GuiRefabricator;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
 import net.minecraft.client.Minecraft;
 
 public class EntityPlayerSP extends EntityPlayer {
 	public MovementInput movementInput;
 	private Minecraft mc;
+	private boolean wasJumping;
 
 	public EntityPlayerSP(Minecraft var1, World var2, Session var3) {
 		super(var2);
 		this.mc = var1;
-		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var3.username + ".png";
-			System.out.println("Loading texture " + this.skinUrl);
+		if (var3 != null && var3.username != null && var3.username.length() > 0) {
+			this.username = var3.username;
+			this.blueStaggo = this.username.equals("BlueStag256");
+			if (this.blueStaggo) {
+				this.texture = "/staggo.png";
+			} else {
+				this.skinUrl = "http://www.minecraft.net/skin/" + var2 + ".png";
+			}
 		}
-
-		this.username = var3.username;
 	}
 
 	public void updateEntityActionState() {
 		super.updateEntityActionState();
 		this.moveStrafing = this.movementInput.moveStrafe;
 		this.moveForward = this.movementInput.moveForward;
+		this.wasJumping = this.isJumping;
 		this.isJumping = this.movementInput.jump;
+		this.justJumped = this.movementInput.jump && !this.wasJumping;
 	}
 
 	public void onLivingUpdate() {
@@ -67,13 +77,28 @@
 		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, var1));
 	}
 
+	public void displayGUIRefabricator(TileEntityRefabricator var1) {
+		this.mc.displayGuiScreen(new GuiRefabricator(this.inventory, var1));
+	}
+
+	public void displayGUIRecipeGuide(ItemStack var1) {
+		if (var1 != null)
+			this.mc.displayGuiScreen(new GuiRecipeGuide(var1));
+	}
+
+	public void displayGUICreative() {
+		if (this.creative || this.mc.options.creativeDebug) {
+			this.mc.displayGuiScreen(new GuiCreative(this.inventory, this.mc));
+		}
+	}
+
 	public void attackEntity(Entity var1) {
 		int var2 = this.inventory.getDamageVsEntity(var1);
 		if(var2 > 0) {
 			var1.attackEntityFrom(this, var2);
 			ItemStack var3 = this.getCurrentEquippedItem();
 			if(var3 != null && var1 instanceof EntityLiving) {
-				var3.hitEntity((EntityLiving)var1);
+				var3.hitEntity((EntityLiving) var1);
 				if(var3.stackSize <= 0) {
 					var3.onItemDestroyedByUse(this);
 					this.destroyCurrentEquippedItem();
@@ -113,5 +138,30 @@
 
 	public boolean isSneaking() {
 		return this.movementInput.sneak;
+	}
+
+	public boolean isRunning() {
+		return this.movementInput.run && !this.energyRegen;
+	}
+
+	public void setHealth(int var1) {
+		int var2 = this.health - var1;
+		if(var2 <= 0) {
+			this.health = var1;
+			if(var2 < 0) {
+				this.heartsLife = this.heartsHalvesLife / 2;
+			}
+		} else {
+			this.prevDamage = var2;
+			this.prevHealth = this.health;
+			this.heartsLife = this.heartsHalvesLife;
+			this.damageEntity(var2);
+			this.hurtTime = this.maxHurtTime = 10;
+			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+		}
+	}
+
+	public void respawnPlayer() {
+		this.mc.respawn();
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TreePopulator.java
@@ -1,0 +1,97 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.WorldGenTrees;
+import net.minecraft.src.WorldGenerator;
+
+public class TreePopulator {
+	private WorldGenerator tree = new WorldGenTrees();
+
+	private WorldGenerator bigTree = null;
+	private int bigTreeDamp;
+	private int bigTreeMax;
+
+	private WorldGenerator highTree = null;
+	private int highTreeMinY;
+	private int highTreeMaxY;
+
+	private WorldGenerator shrub = null;
+	private int shrubRarity;
+
+	private double densityMin = 4.0F;
+	private double densityMax = 8.0F;
+	private double densityDamp = 2.0F;
+
+	public void populate(PopulatorHost host) {
+		double treeDensity = (host.noise.generateNoiseOctaves((double)host.x * 0.5D, (double)host.z * 0.5D) / 8.0D
+				+ host.rand.nextDouble() * (densityMax - densityMin) + densityMin) / densityDamp;
+		if (Double.isInfinite(treeDensity)) {
+			treeDensity = 10.0D;
+		}
+		int densityInt = (int)treeDensity;
+		if(densityInt < 0) {
+			densityInt = 0;
+		}
+
+		if(host.rand.nextInt(10) == 0) {
+			++densityInt;
+		}
+
+		WorldGenerator placedTree = tree;
+		if(bigTree != null && (densityInt >= bigTreeMax
+				|| host.rand.nextInt(Math.max((bigTreeMax - densityInt) / bigTreeDamp, 1)) == 0)) {
+			placedTree = bigTree;
+		} else if (densityInt > 0) {
+			int s = host.rand.nextInt(densityInt);
+			placedTree.setScale(s / 3.0 - 1, s / 2.0, s / 3.0);
+		}
+
+		for(int count = 0; count < Math.min(densityInt, 8); ++count) {
+			int x = host.x + host.rand.nextInt(16) + 8;
+			int z = host.z + host.rand.nextInt(16) + 8;
+			int y = host.worldObj.getHeightValue(x, z);
+
+			if (highTree != null && y > host.rand.nextInt(highTreeMaxY - highTreeMinY) + highTreeMinY)
+				placedTree = highTree;
+
+			placedTree.generate(host.worldObj, host.rand, x, y, z);
+		}
+
+		if (shrub != null && host.rand.nextInt(Math.max(densityInt + shrubRarity, 1)) == 0) {
+			int x = host.x + host.rand.nextInt(16) + 8;
+			int z = host.z + host.rand.nextInt(16) + 8;
+			shrub.generate(host.worldObj, host.rand, x, host.worldObj.getHeightValue(x, z), z);
+		}
+	}
+
+	public TreePopulator withTree(WorldGenerator tree) {
+		this.tree = tree;
+		return this;
+	}
+
+	public TreePopulator withBigTree(WorldGenerator bigTree, int bigTreeMax, int bigTreeDamp) {
+		this.bigTree = bigTree;
+		this.bigTreeMax = bigTreeMax;
+		this.bigTreeDamp = bigTreeDamp;
+		return this;
+	}
+
+	public TreePopulator withDensity(double densityMin, double densityMax, double densityDamp) {
+		this.densityMin = densityMin;
+		this.densityMax = densityMax;
+		this.densityDamp = densityDamp;
+		return this;
+	}
+
+	public TreePopulator withShrub(WorldGenerator shrub, int shrubRarity) {
+		this.shrub = shrub;
+		this.shrubRarity = shrubRarity;
+		return this;
+	}
+
+	public TreePopulator withHighTree(WorldGenerator highTree, int highTreeMinY, int highTreeMaxY) {
+		this.highTree = highTree;
+		this.highTreeMinY = highTreeMinY;
+		this.highTreeMaxY = highTreeMaxY;
+		return this;
+	}
+}
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -1,5 +1,8 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemCharm;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+
 import java.util.List;
 
 public class EntityPlayer extends EntityLiving {
@@ -12,6 +15,18 @@
 	public int swingProgressInt = 0;
 	public String username;
 	private int damageRemainder = 0;
+	public float energy = 20.0F;
+	public float energyBoost = 0.0F;
+	public boolean energyRegen;
+	public float mana = 20.0F;
+	public boolean showMana = false;
+	public boolean creative;
+	private int slowHealTick = 0;
+	public boolean slowHealing = false;
+	public float bounce = 0.0F;
+	private float bounceHeight = 0.0F;
+	protected boolean justJumped = false;
+	public boolean blueStaggo = false;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -22,6 +37,19 @@
 		this.unusedRotation = 180.0F;
 		this.fireResistance = 20;
 		this.texture = "/char.png";
+		this.creative = var1.creative;
+	}
+
+	public boolean justJumped() {
+		return this.justJumped;
+	}
+
+	public void midairJump() {
+		this.motionY = this.isSneaking() ? 0.32D : 0.64D;
+		this.motionX *= 2.0D;
+		this.motionZ *= 2.0D;
+		this.fallDistance = -1.0F;
+		this.playSound("diverge.wings", 1.0F, 1.0F);
 	}
 
 	public void updateRidden() {
@@ -53,13 +81,88 @@
 	}
 
 	public void onLivingUpdate() {
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 4 == 0) {
+		this.preUpdateCharms();
+
+		ItemStack[] armorInventory = this.inventory.armorInventory;
+		for (int i = 0; i < armorInventory.length; i++) {
+			ItemStack armor = armorInventory[i];
+			if (armor == null) continue;
+			Item item = Item.itemsList[armor.itemID];
+			if (item instanceof ItemCharm) {
+				((ItemCharm) item).updateCharm(this, armor);
+				if (armor.itemID == Item.slimeShoes.shiftedIndex && this.bounceHeight > 0.0F) {
+					this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+					this.motionX *= 2.0;
+					this.motionZ *= 2.0;
+					this.motionY = Math.sqrt(2 * 0.08 * this.bounceHeight); // Thanks https://qr.ae/prhm4v
+					this.bounceHeight = 0.0F;
+
+					armor.damageItem(1);
+				}
+
+				if (armor.stackSize == 0) {
+					armor.onItemDestroyedByUse(this);
+					this.inventory.armorInventory[i] = null;
+				}
+			}
+		}
+
+		if((this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 4 == 0)
+			|| this.ticksExisted % 5 == 0 && this.healthRegen > 0) {
 			this.heal(1);
-		}
+			this.healthRegen--;
+		}
+
+		if (this.slowHealing && this.health < 20) {
+			if (--this.slowHealTick <= 0) {
+				this.heal(1);
+				this.slowHealTick = 1200;
+			}
+		} else {
+			this.slowHealTick = 1200;
+		}
+
+		ItemStack currentItem = this.inventory.getCurrentItem();
+		this.showMana = (currentItem != null && Item.itemsList[currentItem.itemID].isMagic()) || this.mana < 20;
+
+		if (currentItem != null && this.creative) {
+			currentItem.itemDmg = 0;
+		}
+		for (int i = 0; i < 5; i++) {
+			currentItem = this.inventory.armorItemInSlot(i);
+			if (currentItem != null && this.creative) {
+				currentItem.itemDmg = 0;
+			}
+		}
+
+		this.mana += (this.mana / 50.0F) + 0.1F;
+		this.mana = MathHelper.clamp(this.mana, 0.0F, 20.0F);
 
 		this.inventory.decrementAnimations();
 		this.prevCameraYaw = this.cameraYaw;
 		super.onLivingUpdate();
+
+		if (this.creative) {
+			this.health = 20;
+			this.energy = 20.0F;
+			this.mana = 20.0F;
+			this.hurtTime = 0;
+		}
+
+		if (this.noClip) {
+			if (this.moveForward != 0 || this.moveStrafing != 0) {
+				this.motionX *= 1.8F;
+				this.motionZ *= 1.8F;
+			} else {
+				this.motionX = 0;
+				this.motionZ = 0;
+			}
+
+			this.motionY = this.isSneaking() ? -1 : this.isJumping ? 1 : 0;
+			this.health = 20;
+			this.energy = 20;
+		}
+
 		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
 		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
 		if(var1 > 0.1F) {
@@ -85,6 +188,44 @@
 			}
 		}
 
+		if (this.isRunning()) {
+			this.energy -= 0.2F;
+		} else {
+			this.energy += 0.1F;
+		}
+		this.energy += this.energyBoost;
+		this.energy = MathHelper.clamp(this.energy, 0.0F, 20.0F);
+		this.energyRegen = this.energyRegen ? this.energy < 20 : this.energy == 0;
+
+		if (this.rand.nextInt(5) == 0) {
+			this.energyBoost -= 0.001F;
+		}
+		if (this.energyBoost < 0.0F) {
+			this.energyBoost = 0.0F;
+		}
+	}
+
+	public void preUpdateCharms() {
+		this.slowHealing = false;
+		this.bounce = 0.0F;
+		this.runSpeed = (this.creative ? 3.5F : 1.4F) * (1.0F + energyBoost);
+	}
+
+	protected void jump() {
+		super.jump();
+		if (this.creative && this.isRunning()) {
+			this.motionY *= 2.5F;
+		}
+		this.justJumped = false;
+	}
+
+	protected void fall(float var1) {
+		if (this.bounce > 0.0F && var1 > 1.5F) {
+			this.bounceHeight = var1 * this.bounce;
+			super.fall(var1 * (1.0F - this.bounce));
+		} else {
+			super.fall(var1);
+		}
 	}
 
 	private void collideWithPlayer(Entity var1) {
@@ -102,6 +243,9 @@
 		if(this.username.equals("Notch")) {
 			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
 		}
+		if(this.username.equals("BlueStag256")) {
+			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.cookie, 1), true);
+		}
 
 		this.inventory.dropAllItems();
 		if(var1 != null) {
@@ -165,22 +309,42 @@
 			var2 /= 5.0F;
 		}
 
+		if(var1.blockID == Block.wood.blockID && this.isSneaking()) {
+			var2 /= 4.0F;
+		}
+
 		return var2;
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return this.inventory.canHarvestBlock(var1);
+		return this.inventory.canHarvestBlock(var1) && !this.creative;
 	}
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		super.readEntityFromNBT(var1);
 		NBTTagList var2 = var1.getTagList("Inventory");
 		this.inventory.readFromNBT(var2);
+		this.energy = var1.hasKey("Energy") ? var1.getFloat("Energy") : 20.0F;
+		this.energyBoost = var1.getFloat("EnergyBoost");
+		this.energyRegen = var1.getBoolean("RegeneratingEnergy");
+		this.noClip = var1.getBoolean("NoClip");
+		this.mana = var1.hasKey("Mana") ? var1.getFloat("Mana") : 20.0F;
+
+		int chunkVersion = var1.getInteger("ChunkVersion");
+		if (chunkVersion < Chunk.CHUNK_VERSION_CURRENT) {
+			this.inventory.onChunkUpdate(chunkVersion);
+		}
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
 		var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
+		var1.setFloat("Energy", this.energy);
+		var1.setFloat("EnergyBoost", this.energyBoost);
+		var1.setBoolean("RegeneratingEnergy", this.energyRegen);
+		var1.setBoolean("NoClip", this.noClip);
+		var1.setFloat("Mana", this.mana);
+		var1.setInteger("ChunkVersion", Chunk.CHUNK_VERSION_CURRENT);
 	}
 
 	public void displayGUIChest(IInventory var1) {
@@ -198,9 +362,7 @@
 
 	public boolean attackEntityFrom(Entity var1, int var2) {
 		this.entityAge = 0;
-		if(this.health <= 0) {
-			return false;
-		} else if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
+		if(this.creative || this.health <= 0 || (float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
 			return false;
 		} else {
 			if(var1 instanceof EntityMob || var1 instanceof EntityArrow) {
@@ -217,12 +379,7 @@
 				}
 			}
 
-			int var3 = 25 - this.inventory.getTotalArmorValue();
-			int var4 = var2 * var3 + this.damageRemainder;
-			this.inventory.damageArmor(var2);
-			var2 = var4 / 25;
-			this.damageRemainder = var4 % 25;
-			return var2 == 0 ? false : super.attackEntityFrom(var1, var2);
+			return var2 != 0 && super.attackEntityFrom(var1, var2);
 		}
 	}
 
@@ -232,6 +389,15 @@
 	public void displayGUIEditSign(TileEntitySign var1) {
 	}
 
+	public void displayGUIRefabricator(TileEntityRefabricator var1) {
+	}
+
+	public void displayGUIRecipeGuide(ItemStack var1) {
+	}
+
+	public void displayGUICreative() {
+	}
+
 	public void interactWithEntity(Entity var1) {
 	}
 
@@ -250,5 +416,40 @@
 	public void swingItem() {
 		this.swingProgressInt = -1;
 		this.isSwinging = true;
+	}
+
+	public boolean useMana(float var1) {
+		if (this.mana >= var1) {
+			this.mana -= var1;
+			return true;
+		}
+		return false;
+	}
+
+	public void attackEntity(Entity var1) {
+		int var2 = this.inventory.getDamageVsEntity(var1);
+		if(var2 > 0) {
+			var1.attackEntityFrom(this, var2);
+			ItemStack var3 = this.getCurrentEquippedItem();
+			if(var3 != null && var1 instanceof EntityLiving) {
+				var3.hitEntity((EntityLiving)var1);
+				if(var3.stackSize <= 0) {
+					var3.onItemDestroyedByUse(this);
+					this.destroyCurrentEquippedItem();
+				}
+			}
+		}
+	}
+
+	protected void damageEntity(int var1) {
+		int var2 = 25 - this.inventory.getTotalArmorValue();
+		int var3 = var1 * var2 + this.damageRemainder;
+		this.inventory.damageArmor(var1);
+		var1 = var3 / 25;
+		this.damageRemainder = var3 % 25;
+		super.damageEntity(var1);
+	}
+
+	public void respawnPlayer() {
 	}
 }
--- net/minecraft/src/Packet.java
+++ net/minecraft/src/Packet.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -24,7 +26,7 @@
 
 	public static Packet getNewPacket(int var0) {
 		try {
-			Class var1 = (Class)packetIdToClassMap.get(Integer.valueOf(var0));
+			Class var1 = (Class)packetIdToClassMap.get(var0);
 			return var1 == null ? null : (Packet)var1.newInstance();
 		} catch (Exception var2) {
 			var2.printStackTrace();
@@ -73,6 +75,9 @@
 		addIdClassMapping(4, Packet4UpdateTime.class);
 		addIdClassMapping(5, Packet5PlayerInventory.class);
 		addIdClassMapping(6, Packet6SpawnPosition.class);
+		addIdClassMapping(7, Packet7UseEntity.class);
+		addIdClassMapping(8, Packet8UpdateHealth.class);
+		addIdClassMapping(9, Packet9Respawn.class);
 		addIdClassMapping(10, Packet10Flying.class);
 		addIdClassMapping(11, Packet11PlayerPosition.class);
 		addIdClassMapping(12, Packet12PlayerLook.class);
@@ -82,6 +87,7 @@
 		addIdClassMapping(16, Packet16BlockItemSwitch.class);
 		addIdClassMapping(17, Packet17AddToInventory.class);
 		addIdClassMapping(18, Packet18ArmAnimation.class);
+		addIdClassMapping(19, Packet19WorldType.class);
 		addIdClassMapping(20, Packet20NamedEntitySpawn.class);
 		addIdClassMapping(21, Packet21PickupSpawn.class);
 		addIdClassMapping(22, Packet22Collect.class);
@@ -93,6 +99,8 @@
 		addIdClassMapping(32, Packet32EntityLook.class);
 		addIdClassMapping(33, Packet33RelEntityMoveLook.class);
 		addIdClassMapping(34, Packet34EntityTeleport.class);
+		addIdClassMapping(38, Packet38EntityStatus.class);
+		addIdClassMapping(39, Packet39PlayerSneak.class);
 		addIdClassMapping(50, Packet50PreChunk.class);
 		addIdClassMapping(51, Packet51MapChunk.class);
 		addIdClassMapping(52, Packet52MultiBlockChange.class);
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet39PlayerSneak.java
@@ -1,0 +1,42 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Entity;
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet39PlayerSneak extends Packet {
+	public int entityId;
+	public boolean isSneaking;
+
+	public Packet39PlayerSneak() {
+		this.entityId = 0;
+		this.isSneaking = false;
+	}
+
+	public Packet39PlayerSneak(Entity entity, boolean isSneaking) {
+		this.entityId = entity.entityID;
+		this.isSneaking = isSneaking;
+	}
+
+	public void readPacketData(DataInputStream var1) throws IOException {
+		this.entityId = var1.readInt();
+		this.isSneaking = var1.readByte() == 1;
+	}
+
+	public void writePacket(DataOutputStream var1) throws IOException {
+		var1.writeInt(this.entityId);
+		var1.writeByte(this.isSneaking ? 1 : 0);
+	}
+
+	public void processPacket(NetHandler var1) {
+		var1.handleSneak(this);
+	}
+
+	public int getPacketSize() {
+		return 5;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiTextField.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+public class GuiTextField extends Gui {
+	private final FontRenderer fontRenderer;
+	private final int xPos;
+	private final int yPos;
+	private final int width;
+	private final int height;
+	private String text;
+	private int maxStringLength;
+	private int cursorCounter;
+	public boolean isFocused = false;
+	public boolean isEnabled = true;
+	private GuiScreen parentGuiScreen;
+
+	public GuiTextField(GuiScreen guiScreen1, FontRenderer var2, int var3, int var4, int var5, int var6, String var7) {
+		this.parentGuiScreen = guiScreen1;
+		this.fontRenderer = var2;
+		this.xPos = var3;
+		this.yPos = var4;
+		this.width = var5;
+		this.height = var6;
+		this.setText(var7);
+	}
+
+	public void setText(String var1) {
+		this.text = var1;
+	}
+
+	public String getText() {
+		return this.text;
+	}
+
+	public void updateCursorCounter() {
+		++this.cursorCounter;
+	}
+
+	public void textboxKeyTyped(char c1, int var2) {
+		if(this.isEnabled && this.isFocused) {
+//			if(c1 == 9) {
+//				this.parentGuiScreen.selectNextField();
+//			}
+
+			if(c1 == 22) {
+				String var3 = GuiScreen.getClipboardString();
+				if(var3 == null) {
+					var3 = "";
+				}
+
+				int var4 = 32 - this.text.length();
+				if(var4 > var3.length()) {
+					var4 = var3.length();
+				}
+
+				if(var4 > 0) {
+					this.text = this.text + var3.substring(0, var4);
+				}
+			}
+
+			if(var2 == 14 && this.text.length() > 0) {
+				this.text = this.text.substring(0, this.text.length() - 1);
+			}
+
+			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb"
+					.indexOf(c1) >= 0 && (this.text.length() < this.maxStringLength || this.maxStringLength == 0)) {
+				this.text = this.text + c1;
+			}
+
+		}
+	}
+
+	public void mouseClicked(int var1, int var2, int var3) {
+		boolean var4 = this.isEnabled && var1 >= this.xPos && var1 < this.xPos + this.width && var2 >= this.yPos && var2 < this.yPos + this.height;
+		this.setFocused(var4);
+	}
+
+	public void setFocused(boolean var1) {
+		if(var1 && !this.isFocused) {
+			this.cursorCounter = 0;
+		}
+
+		this.isFocused = var1;
+	}
+
+	public void drawTextBox() {
+		this.drawRect(this.xPos - 1, this.yPos - 1, this.xPos + this.width + 1, this.yPos + this.height + 1, -6250336);
+		this.drawRect(this.xPos, this.yPos, this.xPos + this.width, this.yPos + this.height, -16777216);
+		if(this.isEnabled) {
+			boolean var1 = this.isFocused && this.cursorCounter / 6 % 2 == 0;
+			this.drawString(this.fontRenderer, this.text + (var1 ? "_" : ""), this.xPos + 4, this.yPos + (this.height - 8) / 2, 14737632);
+		} else {
+			this.drawString(this.fontRenderer, this.text, this.xPos + 4, this.yPos + (this.height - 8) / 2, 7368816);
+		}
+
+	}
+
+	public void setMaxStringLength(int var1) {
+		this.maxStringLength = var1;
+	}
+}
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -6,6 +6,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
+import io.github.bluestaggo.mcdiverge.WorldType;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
@@ -57,6 +58,7 @@
 	double prevSortZ = -9999.0D;
 	public float damagePartialTime;
 	int frustumCheckOffset = 0;
+	public static float globalBrightness = 0.0F;
 
 	public RenderGlobal(Minecraft var1, RenderEngine var2) {
 		this.mc = var1;
@@ -271,7 +273,7 @@
 			int var6;
 			for(var6 = 0; var6 < var5.size(); ++var6) {
 				Entity var7 = (Entity)var5.get(var6);
-				if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
+				if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView > 0)) {
 					++this.countEntitiesRendered;
 					RenderManager.instance.renderEntity(var7, var3);
 				}
@@ -594,6 +596,15 @@
 		GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
 		GL11.glRotatef(this.theWorld.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
 		float var10 = 30.0F;
+		if (this.theWorld.worldType == WorldType.ARID) {
+			var10 = 50.0F;
+		}
+		if (this.theWorld.worldType == WorldType.TROPICAL) {
+			var10 = 40.0F;
+		}
+		if (this.theWorld.worldType == WorldType.WINTER) {
+			var10 = 20.0F;
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
 		var12.startDrawingQuads();
 		var12.addVertexWithUV((double)(-var10), 100.0D, (double)(-var10), 0.0D, 0.0D);
@@ -602,6 +613,9 @@
 		var12.addVertexWithUV((double)(-var10), 100.0D, (double)var10, 0.0D, 1.0D);
 		var12.draw();
 		var10 = 20.0F;
+		if (this.theWorld.worldType == WorldType.WINTER) {
+			var10 = 30.0F;
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
 		var12.startDrawingQuads();
 		var12.addVertexWithUV((double)(-var10), -100.0D, (double)var10, 1.0D, 1.0D);
@@ -1031,15 +1045,22 @@
 		++this.frustumCheckOffset;
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		if(var1 != null) {
-			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + var1);
+	public void playRecord(String var1, int var2, int var3, int var4, String title) {
+		if(title != null) {
+			this.mc.ingameGUI.setRecordPlayingMessage(title);
 		}
 
 		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
 	}
 
 	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
+		if (var1.equals("ambient.cave.cave") && !this.mc.options.caveSounds) {
+			return;
+		}
+		if (var1.equals("diverge.mob.bluefoxdeath")) {
+			var1 = "ambient.cave.cave";
+		}
+
 		float var10 = 16.0F;
 		if(var8 > 1.0F) {
 			var10 *= var8;
@@ -1109,5 +1130,17 @@
 	}
 
 	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
+	}
+
+	private boolean fullBright = false;
+
+	public void toggleFullbright() {
+		fullBright = !fullBright;
+		if (fullBright) {
+			RenderGlobal.globalBrightness = 1.0F;
+		} else {
+			RenderGlobal.globalBrightness = this.mc.options.brightness * 0.2F;
+		}
+		this.loadRenderers();
 	}
 }
--- net/minecraft/src/ChunkProviderClient.java
+++ net/minecraft/src/ChunkProviderClient.java
@@ -13,7 +13,7 @@
 	private World worldObj;
 
 	public ChunkProviderClient(World var1) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+		this.blankChunk = new Chunk(var1, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
 		this.worldObj = var1;
@@ -36,7 +36,7 @@
 
 	public Chunk loadChunk(int var1, int var2) {
 		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		byte[] var4 = new byte[-Short.MIN_VALUE];
+		byte[] var4 = new byte[32768];
 		Chunk var5 = new Chunk(this.worldObj, var4, var1, var2);
 		Arrays.fill(var5.skylightMap.data, (byte)-1);
 		this.chunkMapping.put(var3, var5);
--- net/minecraft/src/IMobs.java
+++ net/minecraft/src/IMobs.java
@@ -1,4 +1,4 @@
 package net.minecraft.src;
 
-public interface IMobs extends IAnimals {
+public interface IMobs extends IAnimal {
 }
--- net/minecraft/src/ThreadDownloadResources.java
+++ net/minecraft/src/ThreadDownloadResources.java
@@ -1,11 +1,8 @@
 package net.minecraft.src;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.*;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import net.minecraft.client.Minecraft;
@@ -20,10 +17,15 @@
 	private boolean closing = false;
 
 	public ThreadDownloadResources(File var1, Minecraft var2) {
+		if (var2.options.betacraftProxy) {
+			System.setProperty("http.proxyHost", "betacraft.uk");
+			System.setProperty("http.proxyPort", "11702");
+		}
+
 		this.mc = var2;
 		this.setName("Resource download thread");
 		this.setDaemon(true);
-		this.resourcesFolder = new File(var1, "resources/");
+		this.resourcesFolder = new File(var1, "resources-dvge/");
 		if(!this.resourcesFolder.exists() && !this.resourcesFolder.mkdirs()) {
 			throw new RuntimeException("The working directory could not be created: " + this.resourcesFolder);
 		}
@@ -53,11 +55,33 @@
 					}
 				}
 			}
+
+			InputStream customResStream = this.getClass().getResourceAsStream("/customres.txt");
+			assert customResStream != null;
+			BufferedReader customResReader = new BufferedReader(new InputStreamReader(customResStream));
+			String customResLine;
+
+			while ((customResLine = customResReader.readLine()) != null) {
+				this.unpackCustomResource(customResLine);
+			}
+
+			this.loadResource(this.resourcesFolder, "");
 		} catch (Exception var13) {
 			this.loadResource(this.resourcesFolder, "");
 			var13.printStackTrace();
 		}
+	}
 
+	private void unpackCustomResource(String path) throws IOException {
+		if (!path.equals("")) {
+			InputStream resStream = this.getClass().getResourceAsStream(path);
+			if (resStream == null) {
+				throw new IOException("Resource " + path + " is invalid.");
+			}
+			File res = new File(this.resourcesFolder, path.replaceFirst("/resources/", "/"));
+			res.mkdirs();
+			Files.copy(resStream, res.toPath(), StandardCopyOption.REPLACE_EXISTING);
+		}
 	}
 
 	public void reloadResources() {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet7UseEntity.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet7UseEntity extends Packet {
+	public int playerEntityId;
+	public int targetEntity;
+	public int isLeftClick;
+
+	public Packet7UseEntity() {
+	}
+
+	public Packet7UseEntity(int var1, int var2, int var3) {
+		this.playerEntityId = var1;
+		this.targetEntity = var2;
+		this.isLeftClick = var3;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.playerEntityId = dataInputStream1.readInt();
+		this.targetEntity = dataInputStream1.readInt();
+		this.isLeftClick = dataInputStream1.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeInt(this.playerEntityId);
+		dataOutputStream1.writeInt(this.targetEntity);
+		dataOutputStream1.writeByte(this.isLeftClick);
+	}
+
+	public void processPacket(NetHandler var1) {
+		var1.handleUseEntity(this);
+	}
+
+	public int getPacketSize() {
+		return 9;
+	}
+}
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -111,7 +111,9 @@
 		var3.setByteArray("SkyLight", var1.skylightMap.data);
 		var3.setByteArray("BlockLight", var1.blocklightMap.data);
 		var3.setByteArray("HeightMap", var1.heightMap);
+		var3.setByteArray("Biomes", var1.biomes);
 		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
+		var3.setInteger("ChunkVersion", Chunk.CHUNK_VERSION_CURRENT);
 		var1.hasEntities = false;
 		NBTTagList var4 = new NBTTagList();
 
@@ -153,6 +155,7 @@
 		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
 		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
 		var4.heightMap = var1.getByteArray("HeightMap");
+		var4.biomes = var1.getByteArray("Biomes");
 		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
 		if(!var4.data.isValid()) {
 			var4.data = new NibbleArray(var4.blocks.length);
@@ -169,6 +172,11 @@
 			var4.doNothing();
 		}
 
+		if (var4.biomes == null || var4.biomes.length != 256) {
+			var4.biomes = new byte[256];
+			var4.generateBiomes(var0);
+		}
+
 		NBTTagList var5 = var1.getTagList("Entities");
 		if(var5 != null) {
 			for(int var6 = 0; var6 < var5.tagCount(); ++var6) {
@@ -190,6 +198,25 @@
 					var4.addTileEntity(var9);
 				}
 			}
+		}
+
+		int chunkVersion = var1.getInteger("ChunkVersion");
+		if (chunkVersion < Chunk.CHUNK_VERSION_CURRENT) {
+			for (int x = 0; x < 16; x++)
+				for (int z = 0; z < 16; z++)
+					for (int y = 0; y < 128; y++) {
+						int blockId = var4.getBlockID(x, y, z);
+						int meta = var4.getBlockMetadata(x, y, z);
+						Block block = Block.blocksList[blockId];
+						if (block != null) {
+							block.onChunkUpdate(var4, chunkVersion, x, y, z, meta);
+						}
+
+						TileEntity tileEntity = var4.getChunkBlockTileEntity(x, y, z);
+						if (tileEntity instanceof IInventory) {
+							((IInventory) tileEntity).onChunkUpdate(chunkVersion);
+						}
+					}
 		}
 
 		return var4;
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -1,21 +1,34 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.BlockStepType;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStep extends Block {
-	private boolean blockType;
-
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
-		this.blockType = var2;
-		if(!var2) {
+	public final boolean blockType;
+	protected final BlockStepType[] slabTypes;
+
+	public BlockStep(int var1, Material var2, boolean var3, BlockStepType[] var4) {
+		super(var1, 6, var2);
+		if (var4.length > 16) {
+			throw new IllegalArgumentException("Too many slab types! 16 maximum!");
+		}
+
+		this.slabTypes = var4;
+		this.blockType = var3;
+		this.blockIndexInTexture = var4[0].topTexture;
+		if(!var3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
 
 		this.setLightOpacity(255);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		if (var2 < slabTypes.length) {
+			return slabTypes[var2].getTextureFromSide(var1);
+		}
 		return var1 <= 1 ? 6 : 5;
 	}
 
@@ -23,26 +36,32 @@
 		return this.blockType;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this == Block.stairSingle) {
-		}
-	}
-
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(this != Block.stairSingle) {
+		if(this.blockType) {
 			super.onBlockAdded(var1, var2, var3, var4);
+			return;
 		}
 
+		int metadata = var1.getBlockMetadata(var2, var3, var4);
 		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		if(var5 == stairSingle.blockID) {
+		int var5Metadata = var1.getBlockMetadata(var2, var3 - 1, var4);
+
+		if(var5 == blockID && var5Metadata == metadata) {
 			var1.setBlockWithNotify(var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, blockID - 1, metadata);
 		}
-
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return Block.stairSingle.blockID;
+		return blockType ? this.blockID + 1 : this.blockID;
+	}
+
+	public int quantityDropped(Random var1) {
+		return blockType ? 2 : 1;
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
 	}
 
 	public boolean renderAsNormalBlock() {
@@ -50,10 +69,27 @@
 	}
 
 	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(this != Block.stairSingle) {
+		if(this.blockType) {
 			super.shouldSideBeRendered(var1, var2, var3, var4, var5);
 		}
 
-		return var5 == 1 ? true : (!super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? false : (var5 == 0 ? true : var1.getBlockId(var2, var3, var4) != this.blockID));
+		return var5 == 1 || (super.shouldSideBeRendered(var1, var2, var3, var4, var5) && (var5 == 0 || var1.getBlockId(var2, var3, var4) != this.blockID));
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, this.slabTypes.length).toArray();
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) {
+		if (version < Chunk.CHUNK_VERSION_0_2) {
+			if (this.blockID == Block.stairDouble.blockID && metadata == 9) {
+				chunk.blocks[x << 11 | z << 7 | y] = (byte)Block.brickStairDouble.blockID;
+				chunk.setBlockMetadata(x, y, z, 0);
+			}
+			if (this.blockID == Block.stairSingle.blockID && metadata == 9) {
+				chunk.blocks[x << 11 | z << 7 | y] = (byte)Block.brickStairSingle.blockID;
+				chunk.setBlockMetadata(x, y, z, 0);
+			}
+		}
 	}
 }
--- net/minecraft/src/RecipesTools.java
+++ net/minecraft/src/RecipesTools.java
@@ -2,15 +2,20 @@
 
 public class RecipesTools {
 	private String[][] recipePatterns = new String[][]{{"XXX", " # ", " # "}, {"X", "#", "#"}, {"XX", "X#", " #"}, {"XX", " #", " #"}};
-	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold}, {Item.shovelWood, Item.shovelStone, Item.shovel, Item.shovelDiamond, Item.shovelGold}, {Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold}, {Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
+	private Object[][] recipeItems = new Object[][]{
+	{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold},
+	{Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold},
+	{Item.shovelWood, Item.shovelStone, Item.shovel, Item.shovelDiamond, Item.shovelGold},
+	{Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold},
+	{Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
 
-	public void addRecipes(CraftingManager var1) {
+	public void addRecipes(CraftingManager craftingManager) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				craftingManager.addRecipe(new ItemStack(var5), this.recipePatterns[var4], '#', Item.stick, 'X', var3);
 			}
 		}
 
--- net/minecraft/src/IChunkProvider.java
+++ net/minecraft/src/IChunkProvider.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+
 public interface IChunkProvider {
 	boolean chunkExists(int var1, int var2);
 
--- net/minecraft/client/MinecraftApplet.java
+++ net/minecraft/client/MinecraftApplet.java
@@ -3,6 +3,7 @@
 import java.applet.Applet;
 import java.awt.BorderLayout;
 import java.awt.Canvas;
+
 import net.minecraft.src.CanvasMinecraftApplet;
 import net.minecraft.src.MinecraftAppletImpl;
 import net.minecraft.src.Session;
@@ -80,11 +81,11 @@
 
 			try {
 				this.mcThread.join(10000L);
-			} catch (InterruptedException var4) {
+			} catch (InterruptedException interruptedException4) {
 				try {
 					this.mc.shutdownMinecraftApplet();
-				} catch (Exception var3) {
-					var3.printStackTrace();
+				} catch (Exception exception3) {
+					exception3.printStackTrace();
 				}
 			}
 
@@ -100,7 +101,7 @@
 		try {
 			this.removeAll();
 			this.validate();
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 		}
 
 	}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -3,22 +3,34 @@
 import java.util.Random;
 
 public class WorldGenMinable extends WorldGenerator {
-	private int minableBlockId;
-	private int numberOfBlocks;
+	private final int minableBlockId;
+	private final int numberOfBlocks;
+	private final int metadata;
+	private boolean mergeWithStone;
 
 	public WorldGenMinable(int var1, int var2) {
+		this(var1, var2, 0);
+	}
+
+	public WorldGenMinable(int var1, int var2, int var3) {
 		this.minableBlockId = var1;
 		this.numberOfBlocks = var2;
+		this.metadata = var3;
+	}
+
+	public WorldGenMinable mergeWithStone() {
+		this.mergeWithStone = true;
+		return this;
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var15 = (double)(var4 + var2.nextInt(3) + 2);
-		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+		double var7 = ((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = ((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = ((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = ((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (var4 + var2.nextInt(3) + 2);
+		double var17 = (var4 + var2.nextInt(3) + 2);
 
 		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
 			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
@@ -35,7 +47,9 @@
 						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
 						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
 						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.stone.blockID) {
+							int metadata = this.mergeWithStone ? var1.getBlockMetadata(var32, var33, var34) : this.metadata;
 							var1.setBlock(var32, var33, var34, this.minableBlockId);
+							var1.setBlockMetadata(var32, var33, var34, metadata);
 						}
 					}
 				}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiCredits.java
@@ -1,0 +1,48 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class GuiCredits extends GuiScreen {
+	private final GuiScreen parent;
+	private List<String> lines = new ArrayList<>();
+
+	public GuiCredits(GuiScreen parent) {
+		this.parent = parent;
+
+		try {
+			BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(GuiCredits.class.getResourceAsStream("/credits.txt")));
+			String var3;
+
+			while((var3 = bufferedReader2.readLine()) != null) {
+				var3 = var3.trim();
+				if(var3.length() > 0) {
+					this.lines.add(var3);
+				}
+			}
+		} catch (IOException e) {
+			this.lines.add("Failed to get credits");
+		}
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(1, this.width / 2 - 50, this.height - 30, 100, 20, "Exit"));
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		this.mc.displayGuiScreen(this.parent);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		for (int i = 0; i < lines.size(); i++) {
+			this.drawString(this.fontRenderer, lines.get(i), 10, 10 + i * 10, 0xFFFFFF);
+		}
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemQuiver.java
@@ -1,0 +1,39 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemQuiver extends ItemCharm {
+	public ItemQuiver(int var1) {
+		super(var1, 256, "quiver");
+		this.startingDamage = this.maxDamage;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		InventoryPlayer inventory = var3.inventory;
+
+		for (int i = 0; i < inventory.getSizeInventory(); ++i) {
+			ItemStack stack = inventory.getStackInSlot(i);
+			if (stack != null && stack.itemID == Item.arrow.shiftedIndex) {
+				while (var1.itemDmg > 0 && var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
+					var1.itemDmg--;
+				}
+				var3.swingItem();
+				return var1;
+			}
+		}
+
+		if (var1.itemDmg < this.maxDamage) {
+			for (int i = this.maxDamage - var1.itemDmg; i > 0; i -= 16) {
+				var3.dropPlayerItem(new ItemStack(Item.arrow, Math.min(i, 16)));
+			}
+			var1.itemDmg = this.maxDamage;
+			var3.swingItem();
+		}
+
+		return var1;
+	}
+
+	public boolean allowRepair() {
+		return false;
+	}
+}
--- net/minecraft/src/EffectRenderer.java
+++ net/minecraft/src/EffectRenderer.java
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 
 public class EffectRenderer {
@@ -116,7 +117,7 @@
 						double var10 = (double)var1 + ((double)var7 + 0.5D) / (double)var6;
 						double var12 = (double)var2 + ((double)var8 + 0.5D) / (double)var6;
 						double var14 = (double)var3 + ((double)var9 + 0.5D) / (double)var6;
-						this.addEffect(new EntityDiggingFX(this.worldObj, var10, var12, var14, var10 - (double)var1 - 0.5D, var12 - (double)var2 - 0.5D, var14 - (double)var3 - 0.5D, var5));
+						this.addEffect(new EntityDiggingFX(this.worldObj, var10, var12, var14, var10 - (double)var1 - 0.5D, var12 - (double)var2 - 0.5D, var14 - (double)var3 - 0.5D, var5, this.worldObj.getBlockMetadata(var1, var2, var3)));
 					}
 				}
 			}
@@ -156,7 +157,8 @@
 				var8 = (double)var1 + var6.maxX + (double)var7;
 			}
 
-			this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6)).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
+			this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6, this.worldObj.getBlockMetadata(var1, var2, var3)))
+					.multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
 		}
 	}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemCharm.java
@@ -1,0 +1,31 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemEquipable;
+import net.minecraft.src.ItemStack;
+
+public class ItemCharm extends ItemEquipable {
+	public final String textureName;
+
+	public ItemCharm(int id) {
+		super(id, 4);
+		this.textureName = null;
+	}
+
+	public ItemCharm(int id, String renderName) {
+		super(id, 4);
+		this.textureName = renderName;
+	}
+
+	public ItemCharm(int id, int durability) {
+		super(id, 4, durability);
+		this.textureName = null;
+	}
+
+	public ItemCharm(int id, int durability, String renderName) {
+		super(id, 4, durability);
+		this.textureName = renderName;
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemWings.java
@@ -1,0 +1,22 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+import net.minecraft.src.Material;
+
+public class ItemWings extends ItemCharm {
+	public ItemWings(int id) {
+		super(id, 256, "wings");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		if (player.justJumped()
+				&& !player.onGround
+				&& !player.isInsideOfMaterial(Material.water)
+				&& !player.isInsideOfMaterial(Material.lava)
+				&& player.useMana(10.0F)) {
+			player.midairJump();
+			stack.damageItem(1);
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockPlanks.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+import java.util.stream.IntStream;
+
+public class BlockPlanks extends Block {
+	public BlockPlanks(int id, int tex, Material material) {
+		super(id, tex, material);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata == 0 ? this.blockIndexInTexture : textureXY(8, 8 + metadata);
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+}
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -1,21 +1,29 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public final class ItemStack {
 	public int stackSize;
 	public int animationsToGo;
 	public int itemID;
 	public int itemDmg;
+	public int itemMetadata;
 
 	public ItemStack(Block var1) {
-		this((Block)var1, 1);
+		this(var1, 1);
 	}
 
 	public ItemStack(Block var1, int var2) {
+		this(var1, var2, 0);
+	}
+
+	public ItemStack(Block var1, int var2, int metadata) {
 		this(var1.blockID, var2);
+		this.itemMetadata = metadata;
 	}
 
 	public ItemStack(Item var1) {
-		this((Item)var1, 1);
+		this(var1, 1);
 	}
 
 	public ItemStack(Item var1, int var2) {
@@ -27,26 +35,30 @@
 	}
 
 	public ItemStack(int var1, int var2) {
-		this.stackSize = 0;
 		this.itemID = var1;
 		this.stackSize = var2;
+		if (Item.itemsList[var1] != null)
+			this.itemDmg = Item.itemsList[var1].startingDamage;
 	}
 
 	public ItemStack(int var1, int var2, int var3) {
-		this.stackSize = 0;
 		this.itemID = var1;
 		this.stackSize = var2;
 		this.itemDmg = var3;
 	}
 
 	public ItemStack(NBTTagCompound var1) {
-		this.stackSize = 0;
 		this.readFromNBT(var1);
 	}
 
+	public ItemStack withMetadata(int metadata) {
+		this.itemMetadata = metadata;
+		return this;
+	}
+
 	public ItemStack splitStack(int var1) {
 		this.stackSize -= var1;
-		return new ItemStack(this.itemID, var1, this.itemDmg);
+		return new ItemStack(this.itemID, var1, this.itemDmg).withMetadata(this.itemMetadata);
 	}
 
 	public Item getItem() {
@@ -73,6 +85,7 @@
 		var1.setShort("id", (short)this.itemID);
 		var1.setByte("Count", (byte)this.stackSize);
 		var1.setShort("Damage", (short)this.itemDmg);
+		var1.setShort("Metadata", (byte)this.itemMetadata);
 		return var1;
 	}
 
@@ -80,6 +93,7 @@
 		this.itemID = var1.getShort("id");
 		this.stackSize = var1.getByte("Count");
 		this.itemDmg = var1.getShort("Damage");
+		this.itemMetadata = var1.getShort("Metadata");
 	}
 
 	public int getMaxStackSize() {
@@ -127,6 +141,43 @@
 	}
 
 	public ItemStack copy() {
-		return new ItemStack(this.itemID, this.stackSize, this.itemDmg);
+		return new ItemStack(this.itemID, this.stackSize, this.itemDmg).withMetadata(this.itemMetadata);
+	}
+
+	public ItemTooltip getTooltip() {
+		if (Item.itemsList[this.itemID] == null) {
+			return ItemTooltip.items[0];
+		}
+		if (ItemTooltip.fromMetadata[this.itemID] != null && ItemTooltip.fromMetadata[this.itemID][Math.max(this.itemMetadata, 0)] != null) {
+			return ItemTooltip.fromMetadata[this.itemID][Math.max(this.itemMetadata, 0)];
+		}
+		return Item.itemsList[this.itemID].getTooltip();
+	}
+
+	public void onChunkUpdate(int version) {
+		if (version < Chunk.CHUNK_VERSION_0_2) {
+			if (this.itemID < 256) {
+				if (this.itemID == Block.stairDouble.blockID && this.itemMetadata == 9) {
+					this.itemID = Block.brickStairDouble.blockID;
+					this.itemMetadata = 0;
+				}
+
+				if (this.itemID == Block.stairSingle.blockID && this.itemMetadata == 9) {
+					this.itemID = Block.brickStairSingle.blockID;
+					this.itemMetadata = 0;
+				}
+
+				Block block = Block.blocksList[this.itemID];
+				if (block != null) {
+					if (block instanceof BlockOre && this.itemMetadata == 1) {
+						this.itemMetadata = 2;
+					}
+				}
+			}
+		}
+	}
+
+	public boolean isSilk() {
+		return Item.itemsList[this.itemID] != null && Item.itemsList[this.itemID].isSilk();
 	}
 }
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.server.MinecraftServer;
+
 import java.util.List;
 import java.util.Random;
 
@@ -354,14 +356,7 @@
 			this.isCollidedVertically = var13 != var3;
 			this.onGround = var13 != var3 && var13 < 0.0D;
 			this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
-			if(this.onGround) {
-				if(this.fallDistance > 0.0F) {
-					this.fall(this.fallDistance);
-					this.fallDistance = 0.0F;
-				}
-			} else if(var3 < 0.0D) {
-				this.fallDistance = (float)((double)this.fallDistance - var3);
-			}
+			this.updateFallState(var3, this.onGround);
 
 			if(var11 != var1) {
 				this.motionX = 0.0D;
@@ -378,22 +373,24 @@
 			var37 = this.posX - var7;
 			var23 = this.posZ - var9;
 			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(var37 * var37 + var23 * var23) * 0.6D);
-			int var26;
-			int var38;
-			int var40;
+			int var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
+			int var38 = MathHelper.floor_double(this.posX);
+			int var40 = MathHelper.floor_double(this.posZ);
+			var28 = this.worldObj.getBlockId(var38, var26, var40);
+
+			if (var28 == 0) {
+				this.nextStepDistance = (int)this.distanceWalkedModified;
+			}
+
 			if(this.canTriggerWalking && !var18) {
-				var38 = MathHelper.floor_double(this.posX);
-				var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
-				var40 = MathHelper.floor_double(this.posZ);
-				var28 = this.worldObj.getBlockId(var38, var26, var40);
 				if(this.distanceWalkedModified > (float)this.nextStepDistance && var28 > 0) {
 					++this.nextStepDistance;
-					StepSound var29 = Block.blocksList[var28].stepSound;
+					StepSound stepSound29 = Block.blocksList[var28].stepSound;
 					if(this.worldObj.getBlockId(var38, var26 + 1, var40) == Block.snow.blockID) {
-						var29 = Block.snow.stepSound;
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+						stepSound29 = Block.snow.stepSound;
+						this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15F, stepSound29.getPitch());
 					} else if(!Block.blocksList[var28].material.getIsLiquid()) {
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+						this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15F, stepSound29.getPitch());
 					}
 
 					Block.blocksList[var28].onEntityWalking(this.worldObj, var38, var26, var40, this);
@@ -440,10 +437,25 @@
 		}
 	}
 
+	protected void updateFallState(double moveY, boolean onGround) {
+		if(onGround) {
+			if(this.fallDistance > 0.0F) {
+				this.fall(this.fallDistance);
+				this.fallDistance = 0.0F;
+			}
+		} else if(moveY < 0.0D) {
+			this.fallDistance = (float)((double)this.fallDistance - moveY);
+		}
+	}
+
 	public boolean isSneaking() {
 		return false;
 	}
 
+	public boolean isRunning() {
+		return false;
+	}
+
 	public AxisAlignedBB getBoundingBox() {
 		return null;
 	}
@@ -504,7 +516,11 @@
 		double var3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
 		int var5 = MathHelper.floor_double(this.posY - (double)this.yOffset + var3);
 		int var6 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBrightness(var2, var5, var6);
+		float var7 = this.worldObj.getBrightness(var2, var5, var6);
+		if (MinecraftServer.getInstance() == null) {
+			var7 = var7 * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
+		}
+		return var7;
 	}
 
 	public void setWorld(World var1) {
@@ -736,7 +752,7 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.isBlockNormalCube(var1, var2, var3);
+		return this.worldObj.isBlockNormalCube(var1, var2, var3) && !this.noClip;
 	}
 
 	public boolean interact(EntityPlayer var1) {
@@ -835,5 +851,12 @@
 	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
 		this.setPosition(var1, var3, var5);
 		this.setRotation(var7, var8);
+	}
+
+	public void playSound(String sound, float volume, float pitch) {
+		this.worldObj.playSoundAtEntity(this, sound, volume, pitch);
+	}
+
+	public void handleHealthUpdate(byte entityStatus) {
 	}
 }
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -40,7 +40,7 @@
 		}
 
 		this.wingRotation += this.moveWings * 2.0F;
-		if(!this.worldObj.multiplayerWorld && --this.timeUntilNextEgg <= 0) {
+		if(this.worldObj.canDoClientAction() && --this.timeUntilNextEgg <= 0) {
 			this.worldObj.playSoundAtEntity(this, "mob.chickenplop", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			this.dropItem(Item.egg.shiftedIndex, 1);
 			this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
@@ -71,7 +71,7 @@
 		return "mob.chickenhurt";
 	}
 
-	protected int getDropItemId() {
-		return Item.feather.shiftedIndex;
+	protected int[] getDropItems() {
+		return new int[] { Item.feather.shiftedIndex, Item.chickenRaw.shiftedIndex };
 	}
 }
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -14,4 +14,13 @@
 	int getInventoryStackLimit();
 
 	void onInventoryChanged();
+
+	default void onChunkUpdate(int version) {
+		for (int i = 0; i < getSizeInventory(); i++) {
+			ItemStack item = getStackInSlot(i);
+			if (item != null) {
+				item.onChunkUpdate(version);
+			}
+		}
+	}
 }
--- net/minecraft/src/BlockSponge.java
+++ net/minecraft/src/BlockSponge.java
@@ -13,6 +13,7 @@
 			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
 				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
 					if(var1.getBlockMaterial(var6, var7, var8) == Material.water) {
+						var1.setBlock(var6, var7, var8, 0);
 					}
 				}
 			}
--- net/minecraft/src/NetClientHandler.java
+++ net/minecraft/src/NetClientHandler.java
@@ -7,6 +7,8 @@
 import java.net.Socket;
 import java.net.URL;
 import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.*;
 import net.minecraft.client.Minecraft;
 
 public class NetClientHandler extends NetHandler {
@@ -42,7 +44,7 @@
 		double var2 = (double)var1.xPosition / 32.0D;
 		double var4 = (double)var1.yPosition / 32.0D;
 		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.worldClient, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
+		EntityItem var8 = new EntityItem(this.worldClient, var2, var4, var6, new ItemStack(var1.itemID, var1.count).withMetadata(var1.itemMetadata));
 		var8.motionX = (double)var1.rotation / 128.0D;
 		var8.motionY = (double)var1.pitch / 128.0D;
 		var8.motionZ = (double)var1.roll / 128.0D;
@@ -270,13 +272,20 @@
 		}
 	}
 
+	public void handleSneak(Packet39PlayerSneak var1) {
+		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
+		if(var2 instanceof EntityOtherPlayerMP) {
+			((EntityOtherPlayerMP) var2).sneaking = var1.isSneaking;
+		}
+	}
+
 	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(var1.itemID, var1.count, var1.itemDamage));
+		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(var1.itemID, var1.count, var1.itemDamage).withMetadata(var1.itemMetadata));
 	}
 
 	public void handleHandshake(Packet2Handshake var1) {
 		if(var1.username.equals("-")) {
-			this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+			this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 85000005));
 		} else {
 			try {
 				URL var2 = new URL("http://www.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + var1.username);
@@ -284,7 +293,7 @@
 				String var4 = var3.readLine();
 				var3.close();
 				if(var4.equalsIgnoreCase("ok")) {
-					this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+					this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 85000005));
 				} else {
 					this.netManager.networkShutdown("Failed to login: " + var4);
 				}
@@ -311,6 +320,7 @@
 		var10.serverPosX = var1.xPosition;
 		var10.serverPosY = var1.yPosition;
 		var10.serverPosZ = var1.zPosition;
+		var10.entityID = var1.entityId;
 		var10.setPositionAndRotation(var2, var4, var6, var8, var9);
 		var10.isAIEnabled = true;
 		this.worldClient.addEntityToWorld(var1.entityId, var10);
@@ -349,5 +359,30 @@
 		this.worldClient.spawnX = var1.xPosition;
 		this.worldClient.spawnY = var1.yPosition;
 		this.worldClient.spawnZ = var1.zPosition;
+	}
+
+	public void handleWorldType(Packet19WorldType var1) {
+		this.worldClient.setWorldType(WorldType.values()[var1.worldType]);
+		this.worldClient.creative = var1.creative;
+		this.mc.thePlayer.creative = var1.creative;
+	}
+
+	public void handleEntityStatus(Packet38EntityStatus var1) {
+		Entity entity = this.getEntityByID(var1.entityId);
+		if (entity != null) {
+			entity.handleHealthUpdate(var1.entityStatus);
+		}
+	}
+
+	public void handleHealth(Packet8UpdateHealth var1) {
+		this.mc.thePlayer.setHealth(var1.healthMP);
+	}
+
+	public Entity getEntityByID(int var1) {
+		return (Entity)(var1 == this.mc.thePlayer.entityID ? this.mc.thePlayer : this.worldClient.getEntityByID(var1));
+	}
+
+	public void handleRespawnPacket(Packet9Respawn var1) {
+		this.mc.respawn();
 	}
 }
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -1,5 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Biome;
+import io.github.bluestaggo.mcdiverge.EntityFox;
+import io.github.bluestaggo.mcdiverge.WorldType;
+
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
@@ -81,17 +85,15 @@
 
 			for(int var12 = 0; var12 < 3; ++var12) {
 				int var13 = var9;
-				int var14 = var10;
 				int var15 = var11;
 				byte var16 = 6;
 
 				for(int var17 = 0; var17 < 2; ++var17) {
 					var13 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					var14 += var1.rand.nextInt(1) - var1.rand.nextInt(1);
 					var15 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					if(var1.isBlockNormalCube(var13, var14 - 1, var15) && !var1.isBlockNormalCube(var13, var14, var15) && !var1.getBlockMaterial(var13, var14, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var14 + 1, var15)) {
+					if(var1.isBlockNormalCube(var13, var10 - 1, var15) && !var1.isBlockNormalCube(var13, var10, var15) && !var1.getBlockMaterial(var13, var10, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var10 + 1, var15)) {
 						float var18 = (float)var13 + 0.5F;
-						float var19 = (float)var14;
+						float var19 = (float)var10;
 						float var20 = (float)var15 + 0.5F;
 						if(var1.getClosestPlayer((double)var18, (double)var19, (double)var20, 24.0D) == null) {
 							float var21 = var18 - (float)var1.spawnX;
@@ -116,6 +118,14 @@
 										var30.setLocationAndAngles((double)var18, (double)var19, (double)var20, var29.rotationYaw, 0.0F);
 										var1.spawnEntityInWorld(var30);
 										var30.mountEntity(var29);
+									}
+									if(var29 instanceof EntityFox
+											&& (var1.worldType == WorldType.WINTER
+											|| var1.getBlockId((int) (var18 + 0.5F),
+																(int) (var19 + 0.5F),
+																(int) (var20 + 0.5F)) == Block.snow.blockID
+											|| var1.getBiome((int) var18, (int) var20) == Biome.TUNDRA)) {
+										((EntityFox) var29).setArctic(true);
 									}
 								}
 							}
--- net/minecraft/src/TileEntityRenderer.java
+++ net/minecraft/src/TileEntityRenderer.java
@@ -3,6 +3,9 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricator;
+import io.github.bluestaggo.mcdiverge.TileEntityRefabricatorRender;
 import org.lwjgl.opengl.GL11;
 
 public class TileEntityRenderer {
@@ -24,6 +27,7 @@
 	private TileEntityRenderer() {
 		this.specialRendererMap.put(TileEntitySign.class, new TileEntitySignRenderer());
 		this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
+		this.specialRendererMap.put(TileEntityRefabricator.class, new TileEntityRefabricatorRender());
 		Iterator var1 = this.specialRendererMap.values().iterator();
 
 		while(var1.hasNext()) {
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -6,8 +6,22 @@
 		this.maxStackSize = 1;
 	}
 
+	private boolean canShootArrow(EntityPlayer var1) {
+		ItemStack bodyArmor = var1.inventory.armorItemInSlot(0);
+		if (bodyArmor != null && bodyArmor.itemID == Item.quiver.shiftedIndex
+			&& bodyArmor.itemDmg < bodyArmor.getMaxDamage()) {
+			bodyArmor.itemDmg += 1;
+			return true;
+		}
+
+		if (var1.inventory.consumeInventoryItem(Item.arrow.shiftedIndex))
+			return true;
+
+		return false;
+	}
+
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
+		if (canShootArrow(var3)) {
 			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
 			var2.spawnEntityInWorld(new EntityArrow(var2, var3));
 		}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/RecipesDyes.java
@@ -1,0 +1,38 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class RecipesDyes {
+	public void addRecipes(CraftingManager craftingManager) {
+		for (int i = 0; i < 15; i++) {
+			craftingManager.addRecipe(new ItemStack(Block.cloth, 1, i), "X#", 'X', new Pair<>(Item.dye, i), '#', Block.cloth);
+		}
+
+		createDyeSource(craftingManager, ItemDye.CAPRI, Block.plantBlue);
+		createDyeSource(craftingManager, ItemDye.YELLOW, Block.plantYellow);
+		createDyeSource(craftingManager, ItemDye.RED, Block.plantRed);
+		createDyeSource(craftingManager, ItemDye.WHITE, Item.sugar);
+		createDyeSource(craftingManager, ItemDye.BLACK, Item.coal);
+
+		createDyeMix(craftingManager, ItemDye.RED, ItemDye.YELLOW, ItemDye.ORANGE);
+		createDyeMix(craftingManager, ItemDye.YELLOW, ItemDye.CAPRI, ItemDye.GREEN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.RED, ItemDye.VIOLET);
+		createDyeMix(craftingManager, ItemDye.YELLOW, ItemDye.GREEN, ItemDye.CHARTREUSE);
+		createDyeMix(craftingManager, ItemDye.GREEN, ItemDye.CAPRI, ItemDye.SPRING_GREEN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.WHITE, ItemDye.CYAN);
+		createDyeMix(craftingManager, ItemDye.CAPRI, ItemDye.VIOLET, ItemDye.ULTRAMARINE);
+		createDyeMix(craftingManager, ItemDye.VIOLET, ItemDye.WHITE, ItemDye.PURPLE);
+		createDyeMix(craftingManager, ItemDye.RED, ItemDye.VIOLET, ItemDye.ROSE);
+		createDyeMix(craftingManager, ItemDye.ROSE, ItemDye.WHITE, ItemDye.MAGENTA);
+		createDyeMix(craftingManager, ItemDye.BLACK, ItemDye.WHITE, ItemDye.GRAY);
+	}
+
+	private void createDyeSource(CraftingManager craftingManager, int type, Object source) {
+		craftingManager.addRecipe(new ItemStack(Item.dye, 4).withMetadata(type), "X", 'X', source);
+	}
+
+	private void createDyeMix(CraftingManager craftingManager, int a, int b, int out) {
+		craftingManager.addRecipe(new ItemStack(Item.dye, 2).withMetadata(out), "AB", 'A', new Pair<>(Item.dye, a), 'B', new Pair<>(Item.dye, b));
+		craftingManager.addRecipe(new ItemStack(Item.dye, 2).withMetadata(out), "BA", 'A', new Pair<>(Item.dye, a), 'B', new Pair<>(Item.dye, b));
+	}
+}
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Packet7UseEntity;
 import net.minecraft.client.Minecraft;
 
 public class PlayerControllerMP extends PlayerController {
@@ -28,8 +29,10 @@
 		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
 		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
 		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
+		boolean silk = false;
 		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
 		if(var8 != null) {
+			silk = var8.isSilk();
 			var8.onDestroyBlock(var5, var1, var2, var3);
 			if(var8.stackSize == 0) {
 				var8.onItemDestroyedByUse(this.mc.thePlayer);
@@ -38,7 +41,11 @@
 		}
 
 		if(var7 && this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5])) {
-			Block.blocksList[var5].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var6);
+			if (silk) {
+				Block.blocksList[var5].dropBlockAsItemWithChanceAndSilk(this.mc.theWorld, var1, var2, var3, var6, 1.0F, true);
+			} else {
+				Block.blocksList[var5].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var6);
+			}
 		}
 
 		return var7;
@@ -129,6 +136,26 @@
 	public void onUpdate() {
 		this.syncCurrentPlayItem();
 		this.prevBlockDamageMP = this.curBlockDamageMP;
+
+		EntityPlayer plr = this.mc.thePlayer;
+		int ix = (int)plr.posX;
+		int iy = (int)plr.posY;
+		int iz = (int)plr.posZ;
+
+		this.mc.sndManager.tickMusic();
+		if (iy < 64
+				&& this.mc.theWorld.getSavedLightValue(EnumSkyBlock.Sky, ix, iy, iz) <= 0
+				&& this.mc.theWorld.hasSolidCeiling(ix, iy, iz)) {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.CAVE) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomCaveMusicIfReady();
+		} else {
+			if (this.mc.sndManager.getMusicType() != SoundManager.MusicType.NORMAL) {
+				this.mc.sndManager.fadeOutBackgroundMusic();
+			}
+			this.mc.sndManager.playRandomMusicIfReady();
+		}
 	}
 
 	private void syncCurrentPlayItem() {
@@ -147,11 +174,24 @@
 
 	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
 		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet15Place(var3 != null ? var3.itemID : -1, var4, var5, var6, var7));
+		this.netClientHandler.addToSendQueue(new Packet15Place(var4, var5, var6, var7, var1.inventory.getCurrentItem()));
 		return super.onPlayerRightClick(var1, var2, var3, var4, var5, var6, var7);
 	}
 
+	public void attackEntity(EntityPlayer var1, Entity var2) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet7UseEntity(var1.entityID, var2.entityID, 1));
+		var1.attackEntity(var2);
+	}
+
 	public EntityPlayer createPlayer(World var1) {
 		return new EntityClientPlayerMP(this.mc, var1, this.mc.session, this.netClientHandler);
+	}
+
+	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet15Place(-1, -1, -1, 255, var1.inventory.getCurrentItem()));
+		boolean var4 = super.sendUseItem(var1, var2, var3);
+		return var4;
 	}
 }
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -1,15 +1,22 @@
 package net.minecraft.src;
 
 public class RecipesIngots {
-	private Object[][] recipeItems = new Object[][]{{Block.blockGold, Item.ingotGold}, {Block.blockSteel, Item.ingotIron}, {Block.blockDiamond, Item.diamond}};
+	private Object[][] recipeItems = new Object[][]{
+	{Block.blockGold, Item.ingotGold},
+	{Block.blockSteel, Item.ingotIron},
+	{Block.blockDiamond, Item.diamond},
+	{Block.blockRuby, Item.ruby},
+	{Block.blockSapphire, Item.sapphire},
+	{Block.blockRedstone, Item.redstone},
+	{Block.blockCoal, Item.coal}
+	};
 
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
-			Block var3 = (Block)this.recipeItems[var2][0];
-			Item var4 = (Item)this.recipeItems[var2][1];
-			var1.addRecipe(new ItemStack(var3), new Object[]{"###", "###", "###", Character.valueOf('#'), var4});
-			var1.addRecipe(new ItemStack(var4, 9), new Object[]{"#", Character.valueOf('#'), var3});
+	public void addRecipes(CraftingManager craftingManager) {
+		for (Object[] recipeItem : this.recipeItems) {
+			Block var3 = (Block) recipeItem[0];
+			Item var4 = (Item) recipeItem[1];
+			craftingManager.addRecipe(new ItemStack(var3), "###", "###", "###", '#', var4);
+			craftingManager.addRecipe(new ItemStack(var4, 9), "#", '#', var3);
 		}
-
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenSpeleothems.java
@@ -1,0 +1,45 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.Block;
+import net.minecraft.src.World;
+import net.minecraft.src.WorldGenerator;
+
+import java.util.Random;
+
+public class WorldGenSpeleothems extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		boolean stalactite = var2.nextInt(2) == 0;
+		if (stalactite) {
+			var4 = findStalactiteAnchor(var1, var3, var4, var5);
+		} else {
+			var4 = findStalagmiteAnchor(var1, var3, var4, var5);
+		}
+		if (var4 == -1 || var4 > 64) {
+			return false;
+		}
+		int height = var2.nextInt(2) + 1;
+		for (int i = 0; i < height; i++) {
+			var4 += stalactite ? -1 : 1;
+			var1.setBlockWithNotify(var3, var4, var5, Block.speleothem.blockID);
+		}
+		return true;
+	}
+
+	private int findStalactiteAnchor(World var1, int x, int y, int z) {
+		for (++y; y < 128; y++) {
+			if (var1.isBlockNormalCube(x, y, z) && var1.getBlockId(x, y - 1, z) == 0) {
+				return y;
+			}
+		}
+		return -1;
+	}
+
+	private int findStalagmiteAnchor(World var1, int x, int y, int z) {
+		for (--y; y > 0; y--) {
+			if (var1.isBlockNormalCube(x, y, z) && var1.getBlockId(x, y + 1, z) == 0) {
+				return y;
+			}
+		}
+		return -1;
+	}
+}
--- net/minecraft/src/ServerGUI.java
+++ net/minecraft/src/ServerGUI.java
@@ -13,9 +13,10 @@
 import javax.swing.UIManager;
 import javax.swing.border.EtchedBorder;
 import javax.swing.border.TitledBorder;
+
 import net.minecraft.server.MinecraftServer;
 
-public class ServerGUI extends JComponent implements ICommandListener {
+public class ServerGUI extends JComponent implements IListenToMyCommands {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	private MinecraftServer mcServer;
 
--- net/minecraft/src/SlotArmor.java
+++ net/minecraft/src/SlotArmor.java
@@ -11,7 +11,7 @@
 	}
 
 	public boolean isItemValid(ItemStack var1) {
-		return var1.getItem() instanceof ItemArmor ? ((ItemArmor)var1.getItem()).armorType == this.armorType : false;
+		return var1.getItem() instanceof ItemEquipable && ((ItemEquipable) var1.getItem()).armorType == this.armorType;
 	}
 
 	public int getBackgroundIconIndex() {
--- net/minecraft/src/ServerCommand.java
+++ net/minecraft/src/ServerCommand.java
@@ -2,9 +2,9 @@
 
 public class ServerCommand {
 	public final String command;
-	public final ICommandListener commandListener;
+	public final IListenToMyCommands commandListener;
 
-	public ServerCommand(String var1, ICommandListener var2) {
+	public ServerCommand(String var1, IListenToMyCommands var2) {
 		this.command = var1;
 		this.commandListener = var2;
 	}
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -1,10 +1,14 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.Packet39PlayerSneak;
+import io.github.bluestaggo.mcdiverge.Packet8UpdateHealth;
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.client.Minecraft;
 
 public class EntityClientPlayerMP extends EntityPlayerSP {
 	private NetClientHandler sendQueue;
 	private int motionUpdateCounter = 0;
+	private boolean healthReady = false;
 	private double oldPosX;
 	private double oldBasePos;
 	private double oldPosY;
@@ -12,6 +16,7 @@
 	private float oldRotationYaw;
 	private float oldRotationPitch;
 	private InventoryPlayer serverSideInventory = new InventoryPlayer((EntityPlayer)null);
+	private boolean wasSneaking = false;
 
 	public EntityClientPlayerMP(Minecraft var1, World var2, Session var3, NetClientHandler var4) {
 		super(var1, var2, var3);
@@ -57,6 +62,11 @@
 			this.sendQueue.addToSendQueue(new Packet10Flying(this.onGround));
 		}
 
+		if (this.isSneaking() != this.wasSneaking) {
+			this.sendQueue.addToSendQueue(new Packet39PlayerSneak(this, this.isSneaking()));
+			this.wasSneaking = this.isSneaking();
+		}
+
 		if(var13) {
 			this.oldPosX = this.posX;
 			this.oldBasePos = this.boundingBox.minY;
@@ -72,7 +82,6 @@
 	}
 
 	protected void joinEntityItemWithWorld(EntityItem var1) {
-		System.out.println("Dropping?");
 		Packet21PickupSpawn var2 = new Packet21PickupSpawn(var1);
 		this.sendQueue.addToSendQueue(var2);
 		var1.posX = (double)var2.xPosition / 32.0D;
@@ -90,5 +99,25 @@
 	public void swingItem() {
 		super.swingItem();
 		this.sendQueue.addToSendQueue(new Packet18ArmAnimation(this, 1));
+	}
+
+	public boolean attackEntityFrom(Entity var1, int var2) {
+		return false;
+	}
+
+	public void setHealth(int var1) {
+		if (this.healthReady) {
+			super.setHealth(var1);
+		} else {
+			this.health = var1;
+			this.healthReady = true;
+		}
+	}
+
+	public void heal(int var1) {
+	}
+
+	public void respawnPlayer() {
+		this.sendQueue.addToSendQueue(new Packet9Respawn());
 	}
 }
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -1,20 +1,31 @@
 package net.minecraft.src;
 
-public class ItemArmor extends Item {
-	private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
-	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
+public class ItemArmor extends ItemEquipable {
+	private static final int[] protectionValues = new int[] { 3, 8, 6, 3 };
+	private static final int[] maxDamageArray = new int[] { 11, 16, 15, 13 };
 	public final int armorLevel;
-	public final int armorType;
-	public final int damageReduceAmount;
+	public final int defense;
 	public final int renderIndex;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
-		super(var1);
+	public ItemArmor(int var1, int var2, int var3, int var4, double var5) {
+		super(var1, var4);
 		this.armorLevel = var2;
-		this.armorType = var4;
 		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
+		this.defense = (int) Math.round(protectionValues[var4] * var5);
 		this.maxDamage = maxDamageArray[var4] * 3 << var2;
-		this.maxStackSize = 1;
+		if (var2 > 1) {
+			this.maxDamage *= 1 << var2 - 1;
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				Integer.toString(this.maxDamage) + " max durability",
+				ItemTooltip.INFO_COL,
+				Integer.toString(this.defense) + " defense",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -19,6 +19,17 @@
 	int leafDistanceLimit = 4;
 	int[][] leafNodes;
 
+	private int altMetadata = 0;
+	private double altChance = 0.0D;
+
+	private int meta;
+
+	public WorldGenBigTree withAltForm(int altMetadata, double altChance) {
+		this.altMetadata = altMetadata;
+		this.altChance = altChance;
+		return this;
+	}
+
 	void generateLeafNodeList() {
 		this.height = (int)((double)this.heightLimit * this.heightAttenuation);
 		if(this.height >= this.heightLimit) {
@@ -116,7 +127,7 @@
 						if(var14 != 0 && var14 != 18) {
 							++var13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+							this.worldObj.setBlockAndMetadata(var11[0], var11[1], var11[2], var6, this.meta);
 							++var13;
 						}
 					}
@@ -191,7 +202,7 @@
 				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+				this.worldObj.setBlockAndMetadata(var14[0], var14[1], var14[2], var3, this.meta);
 			}
 
 		}
@@ -325,6 +336,8 @@
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		this.meta = var2.nextDouble() < this.altChance ? altMetadata : 0;
+
 		this.worldObj = var1;
 		long var6 = var2.nextLong();
 		this.rand.setSeed(var6);
--- net/minecraft/src/NetHandler.java
+++ net/minecraft/src/NetHandler.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 public class NetHandler {
 	public void handleMapChunk(Packet51MapChunk var1) {
 	}
@@ -107,6 +109,30 @@
 	}
 
 	public void handleSpawnPosition(Packet6SpawnPosition var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleWorldType(Packet19WorldType var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleEntityStatus(Packet38EntityStatus var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleUseEntity(Packet7UseEntity var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleHealth(Packet8UpdateHealth var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleRespawnPacket(Packet9Respawn var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleSneak(Packet39PlayerSneak var1) {
 		this.registerPacket(var1);
 	}
 }
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -9,7 +9,7 @@
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
 		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (rand.nextFloat() * 0.4F + 0.8F));
-		var2.spawnEntityInWorld(new EntitySnowball(var2, var3));
+		var2.spawnEntityInWorld(new EntitySnowball(var2, var3, 14, 1));
 		return var1;
 	}
 }
--- net/minecraft/isom/IsomPreviewApplet.java
+++ net/minecraft/isom/IsomPreviewApplet.java
@@ -2,6 +2,7 @@
 
 import java.applet.Applet;
 import java.awt.BorderLayout;
+
 import net.minecraft.src.CanvasIsomPreview;
 
 public class IsomPreviewApplet extends Applet {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/EntityFox.java
@@ -1,0 +1,54 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class EntityFox extends EntityAnimal {
+	private boolean arctic = false;
+
+	public EntityFox(World var1) {
+		super(var1);
+		this.texture = "/mob/fox.png";
+		this.setSize(0.6F, 0.7F);
+		if (var1.birthday) {
+			this.texture = "/mob/fox_blue.png";
+		}
+		this.moveSpeed = 1.0F;
+	}
+
+	public void setArctic(boolean arctic) {
+		this.arctic = arctic;
+		if (this.arctic) {
+			this.texture = "/mob/fox_arctic.png";
+		} else if (this.worldObj.birthday) {
+			this.texture = "/mob/fox_blue.png";
+		} else {
+			this.texture = "/mob/fox.png";
+		}
+	}
+
+	public void readEntityFromNBT(NBTTagCompound var1) {
+		super.readEntityFromNBT(var1);
+		this.setArctic(var1.getBoolean("Arctic"));
+	}
+
+	public void writeEntityToNBT(NBTTagCompound var1) {
+		super.writeEntityToNBT(var1);
+		var1.setBoolean("Arctic", this.arctic);
+	}
+
+	protected String getLivingSound() {
+		return "diverge.mob.fox";
+	}
+
+	protected String getHurtSound() {
+		return "diverge.mob.foxhurt";
+	}
+
+	protected String getDeathSound() {
+		return this.worldObj.birthday ? "diverge.mob.bluefoxdeath" : "diverge.mob.foxdeath";
+	}
+
+	protected int getDropItemId() {
+		return Item.leather.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiCreateWorld.java
@@ -1,0 +1,138 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import io.github.bluestaggo.mcdiverge.WorldType;
+import org.lwjgl.input.Keyboard;
+
+public class GuiCreateWorld extends GuiScreen {
+	private final GuiScreen parent;
+	private GuiTextField textboxWorldName;
+	private GuiTextField textboxSeed;
+	private String displayName;
+	private boolean createClicked;
+	private final int index;
+	private byte worldType;
+	private boolean creative;
+
+	public GuiCreateWorld(GuiScreen guiScreen1, int index) {
+		this.parent = guiScreen1;
+		this.index = index;
+	}
+
+	public void updateScreen() {
+		this.textboxWorldName.updateCursorCounter();
+		this.textboxSeed.updateCursorCounter();
+	}
+
+	public void initGui() {
+		Keyboard.enableRepeatEvents(true);
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, "Create New World"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
+		this.textboxWorldName = new GuiTextField(this, this.fontRenderer, this.width / 4 - 100, 60, 200, 20, "World " + index);
+		this.textboxWorldName.isFocused = true;
+		this.textboxWorldName.setMaxStringLength(32);
+		this.textboxSeed = new GuiTextField(this, this.fontRenderer, this.width / 4 * 3 - 100, 60, 200, 20, "");
+		this.controlList.add(new GuiButton(2, this.width / 2 - 156, 100, 150, 20, "Type: NORMAL"));
+		this.controlList.add(new GuiButton(3, this.width / 2 + 6, 100, 150, 20, "Gamemode: SURVIVAL"));
+		this.func_22129_j();
+	}
+
+	private void func_22129_j() {
+		this.displayName = this.textboxWorldName.getText().trim();
+		if(this.displayName.isEmpty()) {
+			this.displayName = "World" + index;
+		}
+	}
+
+	public void onGuiClosed() {
+		Keyboard.enableRepeatEvents(false);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(!var1.enabled) {
+			return;
+		}
+		switch (var1.id) {
+			case 0:
+				this.mc.displayGuiScreen((GuiScreen)null);
+				if(this.createClicked) {
+					return;
+				}
+
+				this.createClicked = true;
+				long var2 = (new Random()).nextLong();
+				String var4 = this.textboxSeed.getText();
+				if(var4 != null && var4.length() > 0) {
+					try {
+						long var5 = Long.parseLong(var4);
+						if(var5 != 0L) {
+							var2 = var5;
+						}
+					} catch (NumberFormatException numberFormatException7) {
+						var2 = (long)var4.hashCode();
+					}
+				}
+
+				this.mc.playerController = new PlayerControllerSP(this.mc);
+				this.mc.startWorld("World" + index, new CreateWorldInfo()
+					.withName(this.displayName)
+					.withSeed(var2)
+					.withWorldType(WorldType.values()[this.worldType])
+					.withCreative(this.creative));
+				this.mc.displayGuiScreen((GuiScreen)null);
+				break;
+
+			case 1:
+				this.mc.displayGuiScreen(this.parent);
+				break;
+
+			case 2:
+				this.worldType++;
+				if (this.worldType >= WorldType.values().length) {
+					this.worldType = 0;
+				}
+				var1.displayString = "Type: " + WorldType.values()[this.worldType].name();
+				break;
+
+			case 3:
+				this.creative = !this.creative;
+				var1.displayString = "Gamemode: " + (this.creative ? "CREATIVE" : "SURVIVAL");
+				break;
+		}
+	}
+
+	protected void keyTyped(char var1, int var2) {
+		if(this.textboxWorldName.isFocused) {
+			this.textboxWorldName.textboxKeyTyped(var1, var2);
+		} else {
+			this.textboxSeed.textboxKeyTyped(var1, var2);
+		}
+
+		if(var1 == 13) {
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+		}
+
+		((GuiButton)this.controlList.get(0)).enabled = this.textboxWorldName.getText().length() > 0;
+		this.func_22129_j();
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		this.textboxWorldName.mouseClicked(var1, var2, var3);
+		this.textboxSeed.mouseClicked(var1, var2, var3);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, "Create new world", this.width / 2, this.height / 4 - 40, 16777215);
+		this.drawString(this.fontRenderer, "World Name", this.width / 4 - 100, 47, 10526880);
+		this.drawString(this.fontRenderer, "Seed for the World Generator", this.width / 4 * 3 - 100, 47, 10526880);
+		this.drawString(this.fontRenderer, "Leave blank for a random seed", this.width / 4 * 3 - 100, 83, 10526880);
+		this.textboxWorldName.drawTextBox();
+		this.textboxSeed.drawTextBox();
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/NetServerHandler.java
+++ net/minecraft/src/NetServerHandler.java
@@ -2,9 +2,13 @@
 
 import java.io.IOException;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet39PlayerSneak;
+import io.github.bluestaggo.mcdiverge.Packet7UseEntity;
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.server.MinecraftServer;
 
-public class NetServerHandler extends NetHandler implements ICommandListener {
+public class NetServerHandler extends NetHandler implements IListenToMyCommands {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	public NetworkManager netManager;
 	public boolean connectionClosed = false;
@@ -109,6 +113,7 @@
 
 			this.playerEntity.onGround = var1.onGround;
 			this.mcServer.configManager.serverUpdateMountedMovingPlayer(this.playerEntity);
+			this.playerEntity.handleFalling(this.playerEntity.posY - this.lastPosY, var1.onGround);
 		}
 
 	}
@@ -182,6 +187,13 @@
 	}
 
 	public void handlePlace(Packet15Place var1) {
+		if (var1.direction == 255) {
+			if (var1.itemStack != null) {
+				this.playerEntity.theItemInWorldManager.func_6154_a(this.playerEntity, this.mcServer.worldMngr, var1.itemStack);
+			}
+			return;
+		}
+
 		boolean var2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
 		int var3 = var1.xPosition;
 		int var4 = var1.yPosition;
@@ -194,11 +206,35 @@
 		}
 
 		if(var8 > 16 || var2) {
-			ItemStack var9 = var1.id >= 0 ? new ItemStack(var1.id) : null;
+			ItemStack var9 = var1.itemStack;
 			this.playerEntity.theItemInWorldManager.activeBlockOrUseItem(this.playerEntity, this.mcServer.worldMngr, var9, var3, var4, var5, var6);
 		}
 
 		this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(var3, var4, var5, this.mcServer.worldMngr));
+		if(var6 == 0) {
+			--var4;
+		}
+
+		if(var6 == 1) {
+			++var4;
+		}
+
+		if(var6 == 2) {
+			--var5;
+		}
+
+		if(var6 == 3) {
+			++var5;
+		}
+
+		if(var6 == 4) {
+			--var3;
+		}
+
+		if(var6 == 5) {
+			++var3;
+		}
+		this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(var3, var4, var5, this.mcServer.worldMngr));
 		this.mcServer.worldMngr.disableSpawnProtection = false;
 	}
 
@@ -234,7 +270,7 @@
 		double var2 = (double)var1.xPosition / 32.0D;
 		double var4 = (double)var1.yPosition / 32.0D;
 		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.mcServer.worldMngr, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
+		EntityItem var8 = new EntityItem(this.mcServer.worldMngr, var2, var4, var6, new ItemStack(var1.itemID, var1.count).withMetadata(var1.itemMetadata));
 		var8.motionX = (double)var1.rotation / 128.0D;
 		var8.motionY = (double)var1.pitch / 128.0D;
 		var8.motionZ = (double)var1.roll / 128.0D;
@@ -332,7 +368,10 @@
 		if(var1.animate == 1) {
 			this.playerEntity.swingItem();
 		}
+	}
 
+	public void handleSneak(Packet39PlayerSneak var1) {
+		this.playerEntity.sneaking = var1.isSneaking;
 	}
 
 	public void handleKickDisconnect(Packet255KickDisconnect var1) {
@@ -378,6 +417,24 @@
 			var2.readFromNBT(var1.tileEntityNBT);
 			var2.onInventoryChanged();
 		}
-
+	}
+
+	public void handleUseEntity(Packet7UseEntity var1) {
+		WorldServer var2 = this.mcServer.worldMngr;
+		Entity var3 = var2.getEntityFromId(var1.targetEntity);
+		if(var3 != null && this.playerEntity.canEntityBeSeen(var3) && this.playerEntity.getDistanceSqToEntity(var3) < 36.0D) {
+			if(var1.isLeftClick == 0) {
+				this.playerEntity.interactWithEntity(var3);
+			} else if(var1.isLeftClick == 1) {
+				this.playerEntity.attackEntity(var3);
+			}
+		}
+	}
+
+	public void handleRespawnPacket(Packet9Respawn var1) {
+		if(this.playerEntity.health <= 0) {
+			this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0);
+			this.kickPlayer(this.playerEntity.username);
+		}
 	}
 }
--- net/minecraft/src/BlockObsidian.java
+++ net/minecraft/src/BlockObsidian.java
@@ -2,9 +2,9 @@
 
 import java.util.Random;
 
-public class BlockObsidian extends BlockStone {
+public class BlockObsidian extends Block {
 	public BlockObsidian(int var1, int var2) {
-		super(var1, var2);
+		super(var1, var2, Material.rock);
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/src/RenderTNTPrimed.java
+++ net/minecraft/src/RenderTNTPrimed.java
@@ -31,14 +31,14 @@
 
 		var10 = (1.0F - ((float)var1.fuse - var9 + 1.0F) / 100.0F) * 0.8F;
 		this.loadTexture("/terrain.png");
-		this.blockRenderer.renderBlockOnInventory(Block.tnt);
+		this.blockRenderer.renderBlockOnInventory(Block.tnt, 0);
 		if(var1.fuse / 5 % 2 == 0) {
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDisable(GL11.GL_LIGHTING);
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_DST_ALPHA);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, var10);
-			this.blockRenderer.renderBlockOnInventory(Block.tnt);
+			this.blockRenderer.renderBlockOnInventory(Block.tnt, 0);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL11.GL_LIGHTING);
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -7,11 +7,15 @@
 		super(var1, var2, Material.wood);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 4 : this.blockIndexInTexture;
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 4 : this.blockIndexInTexture;
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return 3;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Item.book.shiftedIndex;
 	}
 }
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,9 +1,37 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
+import java.util.stream.Stream;
+
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.wood, Block.chest};
+	private static final Block[] blocksEffectiveAgainst = new Block[] {
+			Block.planks,
+			Block.wood,
+			Block.leaves,
+			Block.chest,
+			Block.bookshelf,
+			Block.stairCompactWood,
+			Block.workbench,
+			Block.doorWood,
+			Block.jukebox,
+			Block.fence,
+			Block.woodStairDouble,
+			Block.woodStairSingle
+	};
 
 	public ItemAxe(int var1, int var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+		super(var1, 3, Math.abs(var2), blocksEffectiveAgainst, var2 < 0);
+		if (var2 < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
+	}
+
+	public Object[] getDynamicTooltip() {
+		return Stream.of(new Object[] {
+			"Break a log while crouching to fell trees.",
+			ItemTooltip.DESCRIPTION_COL
+		}, super.getDynamicTooltip()).flatMap(Stream::of).toArray();
 	}
 }
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,15 +1,98 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
+
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice};
-	private int harvestLevel;
+	private static final Block[] tier3 = new Block[] {
+			Block.obsidian,
+			Block.oreRuby,
+			Block.oreSapphire,
+			Block.refabricator
+	};
+	private static final Block[] tier2 = new Block[] {
+			Block.blockDiamond,
+			Block.oreDiamond,
+			Block.blockGold,
+			Block.oreGold,
+			Block.oreRedstone,
+			Block.oreRedstoneGlowing
+	};
+	private static final Block[] tier1 = new Block[] {
+			Block.blockSteel,
+			Block.oreIron
+	};
+
+	private static final Block[] blocksEffectiveAgainst = new Block[] {
+			Block.cobblestone,
+			Block.stairDouble,
+			Block.stairSingle,
+			Block.stone,
+			Block.polishedStone,
+			Block.cobblestoneMossy,
+			Block.oreIron,
+			Block.blockSteel,
+			Block.oreCoal,
+			Block.blockGold,
+			Block.oreGold,
+			Block.oreDiamond,
+			Block.blockDiamond,
+			Block.oreRedstone,
+			Block.oreRedstoneGlowing,
+			Block.ice,
+			Block.mobSpawner,
+			Block.stoneOvenIdle,
+			Block.stoneOvenActive,
+			Block.stairCompactCobblestone,
+			Block.stairCompactStone,
+			Block.stairCompactPolishedStone,
+			Block.stairCompactStoneBricks,
+			Block.minecartTrack,
+			Block.doorSteel,
+			Block.obsidian,
+			Block.oreRuby,
+			Block.oreSapphire,
+			Block.blasterIdle,
+			Block.blasterActive,
+			Block.refabricator,
+			Block.speleothem,
+			Block.stoneBricks,
+			Block.brickStairDouble,
+			Block.brickStairSingle
+	};
+	private final int harvestLevel;
 
 	public ItemPickaxe(int var1, int var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
+		super(var1, 2, Math.abs(var2), blocksEffectiveAgainst, var2 < 0);
 		this.harvestLevel = var2;
+		if (var2 < 0) {
+			this.efficiencyOnProperMaterial *= 2.5F;
+			this.maxDamage *= 4;
+		}
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
+//		return block == Block.obsidian
+//			? this.harvestLevel == 3
+//			: (block != Block.blockDiamond && block != Block.oreDiamond
+//				? (block != Block.blockGold && block != Block.oreGold
+//					? (block != Block.blockSteel && block != Block.oreIron
+//						? (block != Block.oreRedstone && block != Block.oreRedstoneGlowing
+//							? (block.material == Material.rock
+//								? true
+//								: block.material == Material.iron)
+//							: this.harvestLevel >= 2)
+//						: this.harvestLevel >= 1)
+//					: this.harvestLevel >= 2)
+//				: this.harvestLevel >= 2);
+		if (Arrays.asList(tier3).contains(var1)) {
+			return this.harvestLevel >= 3;
+		}
+		if (Arrays.asList(tier2).contains(var1)) {
+			return this.harvestLevel >= 2;
+		}
+		if (Arrays.asList(tier1).contains(var1)) {
+			return this.harvestLevel >= 1;
+		}
+		return var1.material == Material.rock || var1.material == Material.iron;
 	}
 }
--- net/minecraft/src/ServerConfigurationManager.java
+++ net/minecraft/src/ServerConfigurationManager.java
@@ -12,6 +12,8 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
+
+import io.github.bluestaggo.mcdiverge.Packet9Respawn;
 import net.minecraft.server.MinecraftServer;
 
 public class ServerConfigurationManager {
@@ -329,6 +331,30 @@
 		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
 			this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(var1));
 		}
-
+	}
+
+	public EntityPlayerMP recreatePlayerEntity(EntityPlayerMP var1, int var2) {
+		this.mcServer.entityTracker.removeTrackedPlayerSymmetric(var1);
+		this.mcServer.entityTracker.untrackEntity(var1);
+		this.playerManagerObj.removePlayer(var1);
+		this.playerEntities.remove(var1);
+		this.mcServer.worldMngr.removePlayer(var1);
+		EntityPlayerMP var4 = new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, var1.username, new ItemInWorldManager(this.mcServer.worldMngr));
+		var4.entityID = var1.entityID;
+		var4.playerNetServerHandler = var1.playerNetServerHandler;
+		WorldServer var5 = this.mcServer.worldMngr;
+
+		var5.chunkProviderServer.loadChunk((int)var4.posX >> 4, (int)var4.posZ >> 4);
+
+		while(var5.getCollidingBoundingBoxes(var4, var4.boundingBox).size() != 0) {
+			var4.setPosition(var4.posX, var4.posY + 1.0D, var4.posZ);
+		}
+
+		var4.playerNetServerHandler.sendPacket(new Packet9Respawn());
+		var4.playerNetServerHandler.teleportTo(var4.posX, var4.posY, var4.posZ, var4.rotationYaw, var4.rotationPitch);
+		var4.playerNetServerHandler.sendPacket(new Packet4UpdateTime(var5.worldTime));
+		this.playerManagerObj.addPlayer(var4);
+		this.playerEntities.add(var4);
+		return var4;
 	}
 }
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 import java.util.ArrayList;
+import java.util.Objects;
 import java.util.Random;
 
 public class Block {
@@ -20,11 +23,11 @@
 	public static final int[] lightOpacity = new int[256];
 	public static final boolean[] canBlockGrass = new boolean[256];
 	public static final int[] lightValue = new int[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stone = (new BlockStone(1, 1, BlockStoneType.STONE)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block cobblestone = (new BlockStone(4, 16, BlockStoneType.COBBLESTONE)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block planks = (new BlockPlanks(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
 	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
@@ -33,67 +36,111 @@
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
 	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep);
 	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreGold = (new BlockOre(14, 32, textureXY(6, 12))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreIron = (new BlockOre(15, 33, textureXY(7, 12))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreCoal = (new BlockOre(16, 34, textureXY(8, 12), 263)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
-	public static final Block clothRed = null;
-	public static final Block clothOrange = null;
-	public static final Block clothYellow = null;
-	public static final Block clothChartreuse = null;
-	public static final Block clothGreen = null;
-	public static final Block clothSpringGreen = null;
-	public static final Block clothCyan = null;
-	public static final Block clothCapri = null;
-	public static final Block clothUltramarine = null;
-	public static final Block clothViolet = null;
-	public static final Block clothPurple = null;
-	public static final Block clothMagenta = null;
-	public static final Block clothRose = null;
-	public static final Block clothDarkGray = null;
-	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
-	public static final Block clothWhite = null;
+	public static final Block polishedStone = (new BlockStone(21, 6, BlockStoneType.POLISHED)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block woodStairDouble = (new BlockStep(22, Material.wood, true, new BlockStepType[] {
+			new BlockStepType(textureXY(4, 0)),
+			new BlockStepType(textureXY(8, 9)),
+			new BlockStepType(textureXY(8, 10)),
+			new BlockStepType(textureXY(8, 11))
+	})).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block woodStairSingle = (new BlockStep(23, Material.wood, false, ((BlockStep) woodStairDouble).slabTypes)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block brickStairDouble = (new BlockStep(24, Material.rock, true, new BlockStepType[] {
+			new BlockStepType(textureXY(7, 0))
+	})).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block brickStairSingle = (new BlockStep(25, Material.rock, false, ((BlockStep) brickStairDouble).slabTypes)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stoneBricks = (new BlockStone(26, textureXY(13, 4), BlockStoneType.BRICK)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactStone = new BlockStairs(27, Material.rock, new int[] {
+			textureXY(1, 0),
+			textureXY(8, 6),
+			textureXY(8, 7),
+			textureXY(8, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactPolishedStone = new BlockStairs(28, Material.rock, new int[] {
+			textureXY(6, 0),
+			textureXY(10, 6),
+			textureXY(10, 7),
+			textureXY(10, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairCompactStoneBricks = new BlockStairs(29, Material.rock, new int[] {
+			textureXY(13, 4),
+			textureXY(13, 6),
+			textureXY(13, 7),
+			textureXY(13, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block cloth = (new BlockWool(35, textureXY(4, 7), Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
+	public static final BlockFlower plantBlue = (BlockFlower)(new BlockFlower(36, textureXY(14, 0))).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
+	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F);
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
 	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairDouble = (new BlockStep(43, Material.rock, true, new BlockStepType[] {
+			new BlockStepType(textureXY(0, 1)),
+			new BlockStepType(textureXY(11, 6)),
+			new BlockStepType(textureXY(11, 7)),
+			new BlockStepType(textureXY(1, 0)),
+			new BlockStepType(textureXY(8, 6)),
+			new BlockStepType(textureXY(8, 7)),
+			new BlockStepType(textureXY(6, 0), true),
+			new BlockStepType(textureXY(10, 6), true),
+			new BlockStepType(textureXY(10, 7), true),
+			new BlockStepType(textureXY(8, 8)),
+			new BlockStepType(textureXY(11, 8)),
+			new BlockStepType(textureXY(10, 8), true),
+			new BlockStepType(textureXY(13, 4)),
+			new BlockStepType(textureXY(13, 6)),
+			new BlockStepType(textureXY(13, 7)),
+			new BlockStepType(textureXY(13, 8)),
+	})).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairSingle = (new BlockStep(44, Material.rock, false, ((BlockStep) stairDouble).slabTypes)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block bookshelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block cobblestoneMossy = (new BlockStone(48, 36, BlockStoneType.MOSSY)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
-	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
-	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
+	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep);
+	public static final BlockFire fire = (BlockFire) (new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactWood = new BlockStairs(53, planks);
+	public static final Block stairCompactWood = new BlockStairs(53, Material.wood, new int[] {
+			textureXY(4, 0),
+			textureXY(8, 9),
+			textureXY(8, 10),
+			textureXY(8, 11)
+	}).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreDiamond = (new BlockOre(56, 50, textureXY(9, 12), 264)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
 	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep);
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
 	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(0.875F);
 	public static final Block signStanding = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
 	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
 	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactStone = new BlockStairs(67, cobblestone);
+	public static final Block stairCompactCobblestone = new BlockStairs(67, Material.rock, new int[] {
+			textureXY(0, 1),
+			textureXY(11, 6),
+			textureXY(11, 7),
+			textureXY(11, 8),
+	}).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep);
 	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
 	public static final Block pressurePlateWood = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, textureXY(10, 12), false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, textureXY(10, 12), true)).setLightValue(0.625F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
@@ -105,6 +152,18 @@
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block speleothem = (new BlockSpeleothem(86, textureXY(0, 9))).setHardness(0.5F).setStepSound(soundStoneFootstep);
+	public static final Block oreRuby = (new BlockOre(87, textureXY(14, 6), textureXY(11, 12), 350, 3)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreSapphire = (new BlockOre(88, textureXY(14, 7), textureXY(12, 12), 351, 3)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block blockRuby = (new BlockOreBlock(89, textureXY(6, 7))).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final Block blockSapphire = (new BlockOreBlock(90, textureXY(7, 7))).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final Block blasterIdle = (new BlockBlaster(91, false)).setHardness(7.0F).setStepSound(soundMetalFootstep);
+	public static final Block blasterActive = (new BlockBlaster(92, true)).setHardness(7.0F).setStepSound(soundMetalFootstep).setLightValue(0.875F);
+	public static final Block refabricator = (new BlockRefabricator(93)).setHardness(10.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setLightValue(0.5F);
+	public static final Block boosterTrack = (new BlockMinecartTrack(94, 129)).setHardness(0.7F).setStepSound(soundMetalFootstep);
+	public static final Block starLantern = (new Block(95, textureXY(3, 8), Material.glass)).setHardness(0.5F).setStepSound(soundGlassFootstep).setLightValue(1.0F);
+	public static final Block blockRedstone = (new BlockOreBlock(96, textureXY(12, 10))).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final Block blockCoal = (new Block(97, textureXY(13, 9), Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float hardness;
@@ -120,6 +179,10 @@
 	public final Material material;
 	public float slipperiness;
 
+	protected static int textureXY(int x, int y) {
+		return y * 16 + x;
+	}
+
 	protected Block(int var1, Material var2) {
 		this.stepSound = soundPowderFootstep;
 		this.blockParticleGravity = 1.0F;
@@ -201,8 +264,12 @@
 		return var1.getBrightness(var2, var3, var4);
 	}
 
+	public float getBlockRenderBrightness(IBlockAccess var1, int var2, int var3, int var4) {
+		return this.getBlockBrightness(var1, var2, var3, var4) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
+	}
+
 	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 && this.minY > 0.0D ? true : (var5 == 1 && this.maxY < 1.0D ? true : (var5 == 2 && this.minZ > 0.0D ? true : (var5 == 3 && this.maxZ < 1.0D ? true : (var5 == 4 && this.minX > 0.0D ? true : (var5 == 5 && this.maxX < 1.0D ? true : !var1.isBlockNormalCube(var2, var3, var4))))));
+		return var5 == 0 && this.minY > 0.0D || (var5 == 1 && this.maxY < 1.0D || (var5 == 2 && this.minZ > 0.0D || (var5 == 3 && this.maxZ < 1.0D || (var5 == 4 && this.minX > 0.0D || (var5 == 5 && this.maxX < 1.0D || !var1.isBlockNormalCube(var2, var3, var4))))));
 	}
 
 	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
@@ -275,27 +342,59 @@
 		return this.blockID;
 	}
 
+	public int metadataDropped(int var1, Random var2) {
+		return 0;
+	}
+
+	public int quantityDroppedSilk(Random var1) {
+		return quantityDropped(var1);
+	}
+
+	public int idDroppedSilk(int var1, Random var2) {
+		return idDropped(var1, var2);
+	}
+
+	public int metadataDroppedSilk(int var1, Random var2) {
+		return metadataDropped(var1, var2);
+	}
+
 	public float blockStrength(EntityPlayer var1) {
-		return this.hardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
+		return var1.creative ? Float.POSITIVE_INFINITY
+		: this.hardness < 0.0F ? 0.0F
+		: (!var1.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F
+		: var1.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
 	}
 
 	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F);
+		this.dropBlockAsItemWithChanceAndSilk(var1, var2, var3, var4, var5, 1.0F, false);
 	}
 
 	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			int var7 = this.quantityDropped(var1.rand);
+		this.dropBlockAsItemWithChanceAndSilk(var1, var2, var3, var4, var5, var6, false);
+	}
+
+	public void dropBlockAsItemWithChanceAndSilk(World var1, int var2, int var3, int var4, int var5, float var6, boolean silk) {
+		if(var1.canDoClientAction()) {
+			int var7 = silk
+					? this.quantityDroppedSilk(var1.rand)
+					: this.quantityDropped(var1.rand);
 
 			for(int var8 = 0; var8 < var7; ++var8) {
 				if(var1.rand.nextFloat() <= var6) {
-					int var9 = this.idDropped(var5, var1.rand);
+					int var9 = silk
+							? this.idDroppedSilk(var5, var1.rand)
+							: this.idDropped(var5, var1.rand);
 					if(var9 > 0) {
+						ItemStack itemStack = new ItemStack(var9);
+						itemStack.itemMetadata = silk
+								? this.metadataDroppedSilk(var5, var1.rand)
+								: this.metadataDropped(var5, var1.rand);
+
 						float var10 = 0.7F;
 						double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
 						double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
 						double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, new ItemStack(var9));
+						EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, itemStack);
 						var17.delayBeforeCanPickup = 10;
 						var1.spawnEntityInWorld(var17);
 					}
@@ -469,6 +568,10 @@
 		this.dropBlockAsItem(var1, var2, var3, var4, var5);
 	}
 
+	public void harvestBlockSilk(World var1, int var2, int var3, int var4, int var5) {
+		this.dropBlockAsItemWithChanceAndSilk(var1, var2, var3, var4, var5, 1.0F, true);
+	}
+
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
 		return true;
 	}
@@ -479,6 +582,22 @@
 				Item.itemsList[var0] = new ItemBlock(var0 - 256);
 			}
 		}
-
-	}
+	}
+
+	public int[] availableMetadata() {
+		return new int[] { 0 };
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		Block block = (Block) o;
+		return blockID == block.blockID;
+	}
+
+	public int hashCode() {
+		return Objects.hash(blockID);
+	}
+
+	public void onChunkUpdate(Chunk chunk, int version, int x, int y, int z, int metadata) { }
 }
--- net/minecraft/src/CraftingInventoryPlayerCB.java
+++ net/minecraft/src/CraftingInventoryPlayerCB.java
@@ -11,22 +11,26 @@
 
 	public void onCraftMatrixChanged(IInventory var1) {
 		int[] var2 = new int[9];
+		int[] metaMap = new int[9];
 
 		for(int var3 = 0; var3 < 3; ++var3) {
 			for(int var4 = 0; var4 < 3; ++var4) {
 				int var5 = -1;
+				int metadata = -1;
 				if(var3 < 2 && var4 < 2) {
 					ItemStack var6 = this.craftMatrix.getStackInSlot(var3 + var4 * 2);
 					if(var6 != null) {
 						var5 = var6.itemID;
+						metadata = var6.itemMetadata;
 					}
 				}
 
 				var2[var3 + var4 * 3] = var5;
+				metaMap[var3 + var4 * 3] = metadata;
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2, metaMap));
 	}
 
 	public void onCraftGuiClosed(EntityPlayer var1) {
--- net/minecraft/src/MovementInputFromOptions.java
+++ net/minecraft/src/MovementInputFromOptions.java
@@ -34,6 +34,10 @@
 			var3 = 5;
 		}
 
+		if(var1 == this.gameSettings.keyBindRun.keyCode) {
+			var3 = 6;
+		}
+
 		if(var3 >= 0) {
 			this.movementKeyStates[var3] = var2;
 		}
@@ -68,6 +72,7 @@
 
 		this.jump = this.movementKeyStates[4];
 		this.sneak = this.movementKeyStates[5];
+		this.run = this.movementKeyStates[6];
 		if(this.sneak) {
 			this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
 			this.moveForward = (float)((double)this.moveForward * 0.3D);
--- net/minecraft/src/EntityTracker.java
+++ net/minecraft/src/EntityTracker.java
@@ -4,6 +4,8 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
+
+import io.github.bluestaggo.mcdiverge.Packet38EntityStatus;
 import net.minecraft.server.MinecraftServer;
 
 public class EntityTracker {
@@ -33,7 +35,7 @@
 			this.trackEntity(var1, 64, 20);
 		} else if(var1 instanceof EntityMinecart) {
 			this.trackEntity(var1, 160, 4);
-		} else if(var1 instanceof IAnimals) {
+		} else if(var1 instanceof IAnimal) {
 			this.trackEntity(var1, 160, 2);
 		}
 
@@ -94,6 +96,21 @@
 		if(var3 != null) {
 			var3.sendPacketToTrackedPlayers(var2);
 		}
-
+	}
+
+	public void sendPacketToTrackedPlayersAndTrackedEntity(Entity var1, Packet var2) {
+		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityID);
+		if(var3 != null) {
+			var3.sendPacketToTrackedPlayersAndTrackedEntity(var2);
+		}
+	}
+
+	public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
+		Iterator var2 = this.trackedEntitySet.iterator();
+
+		while(var2.hasNext()) {
+			EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
+			var3.removeTrackedPlayerSymmetric(var1);
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockStoneType.java
@@ -1,0 +1,9 @@
+package io.github.bluestaggo.mcdiverge;
+
+public enum BlockStoneType {
+	STONE,
+	COBBLESTONE,
+	POLISHED,
+	BRICK,
+	MOSSY
+}
--- net/minecraft/src/EntityPlayerMP.java
+++ net/minecraft/src/EntityPlayerMP.java
@@ -4,6 +4,9 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+
+import io.github.bluestaggo.mcdiverge.Packet39PlayerSneak;
+import io.github.bluestaggo.mcdiverge.Packet8UpdateHealth;
 import net.minecraft.server.MinecraftServer;
 
 public class EntityPlayerMP extends EntityPlayer {
@@ -15,6 +18,9 @@
 	public List loadedChunks = new LinkedList();
 	public Set loadChunks = new HashSet();
 	public double managedPosY;
+	private int lastHealth = -99999999;
+	public boolean wasSneaking;
+	public boolean sneaking;
 
 	public EntityPlayerMP(MinecraftServer var1, World var2, String var3, ItemInWorldManager var4) {
 		super(var2);
@@ -30,21 +36,19 @@
 		this.yOffset = 0.0F;
 	}
 
+	public void heal(int var1) {
+		super.heal(var1);
+	}
+
 	public void onUpdate() {
 	}
 
 	public void onDeath(Entity var1) {
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		return false;
-	}
-
-	public void heal(int var1) {
-	}
-
 	public void onUpdateEntity() {
 		super.onUpdate();
+
 		ChunkCoordIntPair var1 = null;
 		double var2 = 0.0D;
 
@@ -79,6 +83,22 @@
 			}
 		}
 
+		if (this.health != this.lastHealth) {
+			this.playerNetServerHandler.sendPacket(new Packet8UpdateHealth(this.health));
+			this.lastHealth = this.health;
+		}
+
+		if (this.sneaking != this.wasSneaking) {
+			this.mcServer.entityTracker.sendPacketToTrackedPlayers(this, new Packet39PlayerSneak(this, this.sneaking));
+			this.wasSneaking = this.sneaking;
+		}
+	}
+
+	protected void updateFallState(double moveY, boolean onGround) {
+	}
+
+	public void handleFalling(double var1, boolean var3) {
+		super.updateFallState(var1, var3);
 	}
 
 	public void onLivingUpdate() {
@@ -89,7 +109,7 @@
 
 	public void onItemPickup(Entity var1, int var2) {
 		if(!var1.isDead && var1 instanceof EntityItem) {
-			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem)var1).item, var2));
+			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem) var1).item, var2));
 			this.mcServer.entityTracker.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityID, this.entityID));
 		}
 
@@ -103,6 +123,10 @@
 			this.mcServer.entityTracker.sendPacketToTrackedPlayers(this, new Packet18ArmAnimation(this, 1));
 		}
 
+	}
+
+	public boolean isSneaking() {
+		return sneaking;
 	}
 
 	protected float getEyeHeight() {
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -11,6 +11,8 @@
 import org.lwjgl.opengl.GL11;
 
 public class GuiScreen extends Gui {
+	private static int bgType = 0;
+
 	protected Minecraft mc;
 	public int width;
 	public int height;
@@ -19,6 +21,10 @@
 	protected FontRenderer fontRenderer;
 	private GuiButton selectedButton = null;
 
+	public static void setBgType(int type) {
+		bgType = type;
+	}
+
 	public void drawScreen(int var1, int var2, float var3) {
 		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
 			GuiButton var5 = (GuiButton)this.controlList.get(var4);
@@ -78,6 +84,7 @@
 		this.fontRenderer = var1.fontRenderer;
 		this.width = var2;
 		this.height = var3;
+		this.controlList.clear();
 		this.initGui();
 	}
 
@@ -141,19 +148,25 @@
 
 	}
 
+	public static long backgroundElapsedTicks = 0;
+
 	public void drawBackground(int var1) {
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		Tessellator var2 = Tessellator.instance;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/dirt.png"));
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/bg" + bgType + ".png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		float var3 = 32.0F;
+		float var3 = 512.0F;
+
+		float var4 = backgroundElapsedTicks / 1000.0F;
+		float var5 = var4 / 2.0F;
+
 		var2.startDrawingQuads();
 		var2.setColorOpaque_I(4210752);
-		var2.addVertexWithUV(0.0D, (double)this.height, 0.0D, 0.0D, (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, (double)this.height, 0.0D, (double)((float)this.width / var3), (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, 0.0D, 0.0D, (double)((float)this.width / var3), (double)(0 + var1));
-		var2.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)(0 + var1));
+		var2.addVertexWithUV(0.0D,			this.height,	0.0D,	var4,								((float)this.height / var3 + (float)var1) + var5);
+		var2.addVertexWithUV(this.width,	this.height,	0.0D,	((float)this.width / var3) + var4,	((float)this.height / var3 + (float)var1) + var5);
+		var2.addVertexWithUV(this.width,	0.0D,			0.0D,	((float)this.width / var3) + var4,	var1 + var5);
+		var2.addVertexWithUV(0.0D,			0.0D,			0.0D,	var4,								var1 + var5);
 		var2.draw();
 	}
 
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemTooltip.java
@@ -1,0 +1,481 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import net.minecraft.src.Item;
+
+public class ItemTooltip {
+	public static ItemTooltip[] items = new ItemTooltip[32000];
+	public static ItemTooltip[][] fromMetadata = new ItemTooltip[32000][16];
+	public List<String> lines = new ArrayList<>();
+	public List<Integer> colors = new ArrayList<>();
+	public Pair<Integer, Integer> gradient;
+
+	public static final Pair<Integer, Integer> DEFAULT_GRAD = new Pair<>(0xC0333366, 0xC0101020);
+	public static final Pair<Integer, Integer> NOVELTY_GRAD = new Pair<>(0xC08f39e6, 0xC0442B8A);
+	public static final Pair<Integer, Integer> INVALID_GRAD = new Pair<>(0xC07E1212, 0xC02D0707);
+	public static final Pair<Integer, Integer> LEGENDARY_GRAD = new Pair<>(0xC0663366, 0xC0201020);
+	public static final int INVALID_COL = 0xFF5555;
+	public static final int DESCRIPTION_COL = 0xAAAAAA;
+	public static final int INFO_COL = 0xAAAA66;
+	public static final int UNCOMMON_COL = 0xFFFF55;
+	public static final int RARE_COL = 0x55FFFF;
+	public static final int LEGENDARY_COL = 0xFF55FF;
+
+	static {
+		items[0] = ItemTooltip.invalid("???");
+		items[1] = new ItemTooltip("Stone");
+		fromMetadata[1][1] = new ItemTooltip("Marble");
+		fromMetadata[1][2] = new ItemTooltip("Slate");
+		fromMetadata[1][3] = new ItemTooltip("Granite");
+		items[2] = new ItemTooltip("Grass");
+		items[3] = new ItemTooltip("Dirt");
+		items[4] = new ItemTooltip("Cobblestone");
+		fromMetadata[4][1] = new ItemTooltip("Cobbled Marble");
+		fromMetadata[4][2] = new ItemTooltip("Cobbled Slate");
+		fromMetadata[4][3] = new ItemTooltip("Cobbled Granite");
+		items[5] = new ItemTooltip("Planks");
+		fromMetadata[5][0] = new ItemTooltip("Oak Planks");
+		fromMetadata[5][1] = new ItemTooltip("Spruce Planks");
+		fromMetadata[5][2] = new ItemTooltip("Maple Planks");
+		fromMetadata[5][3] = new ItemTooltip("Mahogany Planks");
+		items[6] = new ItemTooltip("Sapling", "Grows into a tree", DESCRIPTION_COL);
+		fromMetadata[6][0] = new ItemTooltip("Oak Sapling", "Grows into an oak tree", DESCRIPTION_COL);
+		fromMetadata[6][1] = new ItemTooltip("Spruce Sapling", "Grows into a spruce tree", DESCRIPTION_COL);
+		fromMetadata[6][2] = new ItemTooltip("Maple Sapling", "Grows into a maple tree", DESCRIPTION_COL);
+		fromMetadata[6][3] = new ItemTooltip("Mahogany Sapling", "Grows into a mahogany tree", DESCRIPTION_COL);
+		items[7] = ItemTooltip.invalid("Bedrock");
+		items[8] = ItemTooltip.invalid("Flowing Water");
+		items[9] = ItemTooltip.invalid("Still Water");
+		items[10] = ItemTooltip.invalid("Flowing Lava");
+		items[11] = ItemTooltip.invalid("Still Lava");
+		items[12] = new ItemTooltip("Sand");
+		items[13] = new ItemTooltip("Gravel");
+		items[14] = new ItemTooltip("Gold Ore", UNCOMMON_COL);
+		items[15] = new ItemTooltip("Iron Ore", UNCOMMON_COL);
+		items[16] = new ItemTooltip("Coal Ore");
+		items[17] = new ItemTooltip("Log");
+		fromMetadata[17][0] = new ItemTooltip("Oak Log");
+		fromMetadata[17][1] = new ItemTooltip("Spruce Log");
+		fromMetadata[17][2] = new ItemTooltip("Maple Log");
+		fromMetadata[17][3] = new ItemTooltip("Mahogany Log");
+		items[18] = new ItemTooltip("Leaves");
+		fromMetadata[18][0] = new ItemTooltip("Oak Leaves");
+		fromMetadata[18][1] = new ItemTooltip("Spruce Leaves");
+		fromMetadata[18][2] = new ItemTooltip("Maple Leaves");
+		fromMetadata[18][3] = new ItemTooltip("Mahogany Leaves");
+		items[19] = new ItemTooltip("Sponge");
+		items[20] = new ItemTooltip("Glass");
+		items[21] = new ItemTooltip("Polished Stone");
+		fromMetadata[21][1] = new ItemTooltip("Polished Marble");
+		fromMetadata[21][2] = new ItemTooltip("Polished Slate");
+		fromMetadata[21][3] = new ItemTooltip("Polished Granite");
+		items[22] = ItemTooltip.invalid("Double Plank Slab");
+		fromMetadata[22][0] = ItemTooltip.invalid("Double Oak Plank Slab");
+		fromMetadata[22][1] = ItemTooltip.invalid("Double Spruce Plank Slab");
+		fromMetadata[22][2] = ItemTooltip.invalid("Double Maple Plank Slab");
+		fromMetadata[22][3] = ItemTooltip.invalid("Double Mahogany Plank Slab");
+		items[23] = new ItemTooltip("Plank Slab");
+		fromMetadata[23][0] = new ItemTooltip("Oak Plank Slab");
+		fromMetadata[23][1] = new ItemTooltip("Spruce Plank Slab");
+		fromMetadata[23][2] = new ItemTooltip("Maple Plank Slab");
+		fromMetadata[23][3] = new ItemTooltip("Mahogany Plank Slab");
+		items[24] = ItemTooltip.invalid("Double Brick Slab");
+		items[25] = new ItemTooltip("Brick Slab");
+		items[26] = new ItemTooltip("Stone Bricks");
+		fromMetadata[26][1] = new ItemTooltip("Marble Bricks");
+		fromMetadata[26][2] = new ItemTooltip("Slate Bricks");
+		fromMetadata[26][3] = new ItemTooltip("Granite Bricks");
+		items[27] = ItemTooltip.invalid("Stone Stairs");
+		fromMetadata[27][0] = new ItemTooltip("Stone Stairs");
+		fromMetadata[27][4] = new ItemTooltip("Marble Stairs");
+		fromMetadata[27][8] = new ItemTooltip("Slate Stairs");
+		fromMetadata[27][12] = new ItemTooltip("Granite Stairs");
+		items[28] = ItemTooltip.invalid("Polished Stone Stairs");
+		fromMetadata[28][0] = new ItemTooltip("Polished Stone Stairs");
+		fromMetadata[28][4] = new ItemTooltip("Polished Marble Stairs");
+		fromMetadata[28][8] = new ItemTooltip("Polished Slate Stairs");
+		fromMetadata[28][12] = new ItemTooltip("Polished Granite Stairs");
+		items[29] = ItemTooltip.invalid("Stone Brick Stairs");
+		fromMetadata[29][0] = new ItemTooltip("Stone Brick Stairs");
+		fromMetadata[29][4] = new ItemTooltip("Marble Brick Stairs");
+		fromMetadata[29][8] = new ItemTooltip("Slate Brick Stairs");
+		fromMetadata[29][12] = new ItemTooltip("Granite Brick Stairs");
+		items[35] = new ItemTooltip("Wool");
+		fromMetadata[35][0] = new ItemTooltip("White Wool");
+		fromMetadata[35][1] = new ItemTooltip("Red Wool");
+		fromMetadata[35][2] = new ItemTooltip("Orange Wool");
+		fromMetadata[35][3] = new ItemTooltip("Yellow Wool");
+		fromMetadata[35][4] = new ItemTooltip("Chartreuse Wool");
+		fromMetadata[35][5] = new ItemTooltip("Green Wool");
+		fromMetadata[35][6] = new ItemTooltip("Spring Green Wool");
+		fromMetadata[35][7] = new ItemTooltip("Cyan Wool");
+		fromMetadata[35][8] = new ItemTooltip("Capri Wool");
+		fromMetadata[35][9] = new ItemTooltip("Ultramarine Wool");
+		fromMetadata[35][10] = new ItemTooltip("Violet Wool");
+		fromMetadata[35][11] = new ItemTooltip("Purple Wool");
+		fromMetadata[35][12] = new ItemTooltip("Magenta Wool");
+		fromMetadata[35][13] = new ItemTooltip("Rose Wool");
+		fromMetadata[35][14] = new ItemTooltip("Black Wool");
+		fromMetadata[35][15] = new ItemTooltip("Gray Wool");
+		items[36] = new ItemTooltip("Cornflower");
+		items[37] = new ItemTooltip("Dandelion");
+		items[38] = new ItemTooltip("Rose");
+		items[39] = new ItemTooltip("Brown Mushroom");
+		items[40] = new ItemTooltip("Red Mushroom");
+		items[41] = new ItemTooltip("Block of Gold", UNCOMMON_COL);
+		items[42] = new ItemTooltip("Block of Iron", UNCOMMON_COL);
+		items[43] = ItemTooltip.invalid("Double Stone Slab");
+		fromMetadata[43][0] = ItemTooltip.invalid("Double Cobblestone Slab");
+		fromMetadata[43][1] = ItemTooltip.invalid("Double Cobbled Marble Slab");
+		fromMetadata[43][2] = ItemTooltip.invalid("Double Cobbled Slate Slab");
+		fromMetadata[43][3] = ItemTooltip.invalid("Double Stone Slab");
+		fromMetadata[43][4] = ItemTooltip.invalid("Double Marble Slab");
+		fromMetadata[43][5] = ItemTooltip.invalid("Double Slate Slab");
+		fromMetadata[43][6] = ItemTooltip.invalid("Double Polished Stone Slab");
+		fromMetadata[43][7] = ItemTooltip.invalid("Double Polished Marble Slab");
+		fromMetadata[43][8] = ItemTooltip.invalid("Double Polished Slate Slab");
+		fromMetadata[43][9] = ItemTooltip.invalid("Double Granite Slab");
+		fromMetadata[43][10] = ItemTooltip.invalid("Double Cobbled Granite Slab");
+		fromMetadata[43][11] = ItemTooltip.invalid("Double Polished Granite Slab");
+		fromMetadata[43][12] = ItemTooltip.invalid("Double Stone Brick Slab");
+		fromMetadata[43][13] = ItemTooltip.invalid("Double Marble Brick Slab");
+		fromMetadata[43][14] = ItemTooltip.invalid("Double Slate Brick Slab");
+		fromMetadata[43][15] = ItemTooltip.invalid("Double Granite Brick Slab");
+		items[44] = new ItemTooltip("Stone Slab");
+		fromMetadata[44][0] = new ItemTooltip("Cobblestone Slab");
+		fromMetadata[44][1] = new ItemTooltip("Cobbled Marble Slab");
+		fromMetadata[44][2] = new ItemTooltip("Cobbled Slate Slab");
+		fromMetadata[44][3] = new ItemTooltip("Stone Slab");
+		fromMetadata[44][4] = new ItemTooltip("Marble Slab");
+		fromMetadata[44][5] = new ItemTooltip("Slate Slab");
+		fromMetadata[44][6] = new ItemTooltip("Polished Stone Slab");
+		fromMetadata[44][7] = new ItemTooltip("Polished Marble Slab");
+		fromMetadata[44][8] = new ItemTooltip("Polished Slate Slab");
+		fromMetadata[44][9] = new ItemTooltip("Granite Slab");
+		fromMetadata[44][10] = new ItemTooltip("Cobbled Granite Slab");
+		fromMetadata[44][11] = new ItemTooltip("Polished Granite Slab");
+		fromMetadata[44][12] = new ItemTooltip("Stone Brick Slab");
+		fromMetadata[44][13] = new ItemTooltip("Marble Brick Slab");
+		fromMetadata[44][14] = new ItemTooltip("Slate Brick Slab");
+		fromMetadata[44][15] = new ItemTooltip("Granite Brick Slab");
+		items[45] = new ItemTooltip("Bricks");
+		items[46] = new ItemTooltip("TNT", UNCOMMON_COL, "Punch for an explosion", DESCRIPTION_COL);
+		items[47] = new ItemTooltip("Bookshelf");
+		items[48] = new ItemTooltip("Mossy Cobblestone");
+		fromMetadata[48][1] = new ItemTooltip("Mossy Cobbled Marble");
+		fromMetadata[48][2] = new ItemTooltip("Mossy Cobbled Slate");
+		fromMetadata[48][3] = new ItemTooltip("Mossy Cobbled Granite");
+		items[49] = new ItemTooltip("Obsidian", RARE_COL);
+		items[50] = new ItemTooltip("Torch");
+		items[51] = ItemTooltip.invalid("Fire");
+		items[52] = ItemTooltip.invalid("Mob Spawner");
+		items[53] = ItemTooltip.invalid("Plank Stairs");
+		fromMetadata[53][0] = new ItemTooltip("Oak Plank Stairs");
+		fromMetadata[53][4] = new ItemTooltip("Spruce Plank Stairs");
+		fromMetadata[53][8] = new ItemTooltip("Maple Plank Stairs");
+		fromMetadata[53][12] = new ItemTooltip("Mahogany Plank Stairs");
+		items[54] = new ItemTooltip("Chest");
+		items[55] = ItemTooltip.invalid("Redstone Dust (Block)");
+		items[56] = new ItemTooltip("Diamond Ore", RARE_COL);
+		items[57] = new ItemTooltip("Block of Diamond", RARE_COL);
+		items[58] = new ItemTooltip("Crafting Table", "The basic tool for crafting", DESCRIPTION_COL);
+		items[59] = ItemTooltip.invalid("Crops");
+		items[60] = ItemTooltip.invalid("Farmland");
+		items[61] = new ItemTooltip("Furnace", "Used for cooking items", DESCRIPTION_COL);
+		items[62] = ItemTooltip.invalid("Lit Furnace");
+		items[63] = ItemTooltip.invalid("Sign (Block)");
+		items[64] = ItemTooltip.invalid("Wooden Door (Block)");
+		items[65] = new ItemTooltip("Ladder");
+		items[66] = new ItemTooltip("Minecart Track", UNCOMMON_COL, "Used for travel with minecarts", DESCRIPTION_COL);
+		items[67] = ItemTooltip.invalid("Cobblestone Stairs");
+		fromMetadata[67][0] = new ItemTooltip("Cobblestone Stairs");
+		fromMetadata[67][4] = new ItemTooltip("Cobbled Marble Stairs");
+		fromMetadata[67][8] = new ItemTooltip("Cobbled Slate Stairs");
+		fromMetadata[67][12] = new ItemTooltip("Cobbled Granite Stairs");
+		items[68] = ItemTooltip.invalid("Wall Sign (Block)");
+		items[69] = new ItemTooltip("Lever",
+				"Can be switched to toggle", DESCRIPTION_COL,
+				"a redstone signal", DESCRIPTION_COL);
+		items[70] = new ItemTooltip("Stone Pressure Plate",
+				"Emits a redstone signal when", DESCRIPTION_COL,
+				"a player steps on it", DESCRIPTION_COL);
+		items[71] = ItemTooltip.invalid("Iron Door (Block)");
+		items[72] = new ItemTooltip("Wooden Pressure Plate",
+				"Emits a redstone signal when", DESCRIPTION_COL,
+				"something steps on it", DESCRIPTION_COL);
+		items[73] = new ItemTooltip("Redstone Ore", RARE_COL);
+		items[74] = ItemTooltip.invalid("Glowing Redstone Ore");
+		items[75] = ItemTooltip.invalid("Redstone Torch (Off)");
+		items[76] = new ItemTooltip("Redstone Torch", RARE_COL);
+		items[77] = new ItemTooltip("Stone Button", "Press to emit a redstone signal", DESCRIPTION_COL);
+		items[78] = new ItemTooltip("Snow");
+		items[79] = new ItemTooltip("Ice");
+		items[80] = new ItemTooltip("Snow Block");
+		items[81] = new ItemTooltip("Cactus", "Hurts on contact", DESCRIPTION_COL);
+		items[82] = new ItemTooltip("Clay Block");
+		items[83] = ItemTooltip.invalid("Sugar Cane (Block)");
+		items[84] = new ItemTooltip("Jukebox", RARE_COL, "Can play music discs", DESCRIPTION_COL);
+		items[85] = new ItemTooltip("Fence");
+		items[86] = new ItemTooltip("Speleothem");
+		items[87] = new ItemTooltip(LEGENDARY_GRAD, "Ruby Ore", LEGENDARY_COL);
+		items[88] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire Ore", LEGENDARY_COL);
+		items[89] = new ItemTooltip(LEGENDARY_GRAD, "Block of Ruby", LEGENDARY_COL);
+		items[90] = new ItemTooltip(LEGENDARY_GRAD, "Block of Sapphire", LEGENDARY_COL);
+		items[91] = new ItemTooltip(LEGENDARY_GRAD, "Blaster", LEGENDARY_COL,
+				"Smelt items at quadruple", DESCRIPTION_COL,
+				"the speed of a furnace but", DESCRIPTION_COL,
+				"uses double the fuel", DESCRIPTION_COL);
+		items[92] = ItemTooltip.invalid("Lit Blaster");
+		items[93] = new ItemTooltip(LEGENDARY_GRAD, "Refabricator", LEGENDARY_COL,
+				"Duplicates or repairs items", DESCRIPTION_COL,
+				"from the power of", DESCRIPTION_COL,
+				"star dust", DESCRIPTION_COL);
+		items[94] = new ItemTooltip(LEGENDARY_GRAD, "Booster Track", LEGENDARY_COL,
+				"Makes minecarts move faster", DESCRIPTION_COL);
+		items[95] = new ItemTooltip("Star Lantern", RARE_COL);
+		items[96] = new ItemTooltip("Redstone Block", RARE_COL);
+		items[97] = new ItemTooltip("Coal Block");
+
+		items[256] = new ItemTooltip("Iron Shovel", UNCOMMON_COL, Item.shovel);
+		items[257] = new ItemTooltip("Iron Pickaxe", UNCOMMON_COL, Item.pickaxeSteel);
+		items[258] = new ItemTooltip("Iron Axe", UNCOMMON_COL, Item.axeSteel);
+		items[259] = new ItemTooltip("Flint and Steel", UNCOMMON_COL, "Right click to create fire",
+				DESCRIPTION_COL);
+		items[260] = new ItemTooltip("Apple", UNCOMMON_COL, Item.appleRed);
+		items[261] = new ItemTooltip("Bow", "Right click to shoot arrows", DESCRIPTION_COL);
+		items[262] = new ItemTooltip("Arrow", "Shot with a bow", DESCRIPTION_COL);
+		items[263] = new ItemTooltip("Coal");
+		items[264] = new ItemTooltip("Diamond", RARE_COL);
+		items[265] = new ItemTooltip("Iron Ingot", UNCOMMON_COL);
+		items[266] = new ItemTooltip("Gold Ingot", UNCOMMON_COL);
+		items[267] = new ItemTooltip("Iron Sword", UNCOMMON_COL, Item.swordSteel);
+		items[268] = new ItemTooltip("Wooden Sword", Item.swordWood);
+		items[269] = new ItemTooltip("Wooden Shovel", Item.shovelWood);
+		items[270] = new ItemTooltip("Wooden Pickaxe", Item.pickaxeWood);
+		items[271] = new ItemTooltip("Wooden Axe", Item.axeWood);
+		items[272] = new ItemTooltip("Stone Sword", Item.swordStone);
+		items[273] = new ItemTooltip("Stone Shovel", Item.shovelStone);
+		items[274] = new ItemTooltip("Stone Pickaxe", Item.pickaxeStone);
+		items[275] = new ItemTooltip("Stone Axe", Item.axeStone);
+		items[276] = new ItemTooltip("Diamond Sword", RARE_COL, Item.swordDiamond);
+		items[277] = new ItemTooltip("Diamond Shovel", RARE_COL, Item.shovelDiamond);
+		items[278] = new ItemTooltip("Diamond Pickaxe", RARE_COL, Item.pickaxeDiamond);
+		items[279] = new ItemTooltip("Diamond Axe", RARE_COL, Item.axeDiamond);
+		items[280] = new ItemTooltip("Stick");
+		items[281] = new ItemTooltip("Bowl");
+		items[282] = new ItemTooltip("Mushroom Stew", UNCOMMON_COL, Item.bowlSoup);
+		items[283] = new ItemTooltip("Golden Sword", UNCOMMON_COL, Item.swordGold);
+		items[284] = new ItemTooltip("Golden Shovel", UNCOMMON_COL, Item.shovelGold);
+		items[285] = new ItemTooltip("Golden Pickaxe", UNCOMMON_COL, Item.pickaxeGold);
+		items[286] = new ItemTooltip("Golden Axe", UNCOMMON_COL, Item.axeGold);
+		items[287] = new ItemTooltip("String");
+		items[288] = new ItemTooltip("Feather");
+		items[289] = new ItemTooltip("Gunpowder");
+		items[290] = new ItemTooltip("Wooden Hoe", Item.hoeWood);
+		items[291] = new ItemTooltip("Stone Hoe", Item.hoeStone);
+		items[292] = new ItemTooltip("Iron Hoe", UNCOMMON_COL, Item.hoeSteel);
+		items[293] = new ItemTooltip("Diamond Hoe", RARE_COL, Item.hoeDiamond);
+		items[294] = new ItemTooltip("Golden Hoe", UNCOMMON_COL, Item.hoeGold);
+		items[295] = new ItemTooltip("Seeds", "Can be planted on farmland", DESCRIPTION_COL);
+		items[296] = new ItemTooltip("Wheat", "Can be crafted into bread", DESCRIPTION_COL);
+		items[297] = new ItemTooltip("Bread", Item.bread);
+		items[298] = new ItemTooltip("Leather Cap", Item.helmetLeather);
+		items[299] = new ItemTooltip("Leather Tunic", Item.plateLeather);
+		items[300] = new ItemTooltip("Leather Pants", Item.legsLeather);
+		items[301] = new ItemTooltip("Leather Boots", Item.bootsLeather);
+		items[302] = new ItemTooltip("Chainmail Helmet", UNCOMMON_COL, Item.helmetChain);
+		items[303] = new ItemTooltip("Chainmail Chestplate", UNCOMMON_COL, Item.plateChain);
+		items[304] = new ItemTooltip("Chainmail Leggings", UNCOMMON_COL, Item.legsChain);
+		items[305] = new ItemTooltip("Chainmail Boots", UNCOMMON_COL, Item.bootsChain);
+		items[306] = new ItemTooltip("Iron Helmet", UNCOMMON_COL, Item.helmetSteel);
+		items[307] = new ItemTooltip("Iron Chestplate", UNCOMMON_COL, Item.plateSteel);
+		items[308] = new ItemTooltip("Iron Leggings", UNCOMMON_COL, Item.legsSteel);
+		items[309] = new ItemTooltip("Iron Boots", UNCOMMON_COL, Item.bootsSteel);
+		items[310] = new ItemTooltip("Diamond Helmet", RARE_COL, Item.helmetDiamond);
+		items[311] = new ItemTooltip("Diamond Chestplate", RARE_COL, Item.plateDiamond);
+		items[312] = new ItemTooltip("Diamond Leggings", RARE_COL, Item.legsDiamond);
+		items[313] = new ItemTooltip("Diamond Boots", RARE_COL, Item.bootsDiamond);
+		items[314] = new ItemTooltip("Golden Helmet", UNCOMMON_COL, Item.helmetGold);
+		items[315] = new ItemTooltip("Golden Chestplate", UNCOMMON_COL, Item.plateGold);
+		items[316] = new ItemTooltip("Golden Leggings", UNCOMMON_COL, Item.legsGold);
+		items[317] = new ItemTooltip("Golden Boots", UNCOMMON_COL, Item.bootsGold);
+		items[318] = new ItemTooltip("Flint");
+		items[319] = new ItemTooltip("Raw Porkchop", Item.porkRaw);
+		items[320] = new ItemTooltip("Cooked Porkchop", Item.porkCooked);
+		items[321] = new ItemTooltip("Painting", "Display a random piece of artwork", DESCRIPTION_COL);
+		items[322] = new ItemTooltip("Golden Apple", Item.appleGold);
+		items[323] = new ItemTooltip("Sign");
+		items[324] = new ItemTooltip("Wooden Door");
+		items[325] = new ItemTooltip("Bucket",
+				"Right click to pick up", DESCRIPTION_COL,
+				"a liquid", DESCRIPTION_COL);
+		items[326] = new ItemTooltip("Water Bucket", "Right click to place water", DESCRIPTION_COL);
+		items[327] = new ItemTooltip("Lava Bucket", "Right click to place lava", DESCRIPTION_COL);
+		items[328] = new ItemTooltip("Minecart", UNCOMMON_COL,
+				"Used for travelling on", DESCRIPTION_COL,
+				"minecart tracks", DESCRIPTION_COL);
+		items[329] = new ItemTooltip("Saddle", UNCOMMON_COL, "Used for riding a pig", DESCRIPTION_COL);
+		items[330] = new ItemTooltip("Iron Door", UNCOMMON_COL,
+				"Cannot be opened without", DESCRIPTION_COL,
+				"a restone signal", DESCRIPTION_COL);
+		items[331] = new ItemTooltip("Redstone Dust", RARE_COL, "Electrically charged powder", DESCRIPTION_COL);
+		items[332] = new ItemTooltip("Snowball", "Right click to throw", DESCRIPTION_COL);
+		items[333] = new ItemTooltip("Boat", "Used for travelling on water", DESCRIPTION_COL);
+		items[334] = new ItemTooltip("Leather");
+		items[335] = new ItemTooltip("Milk");
+		items[336] = new ItemTooltip("Brick");
+		items[337] = new ItemTooltip("Clay Ball");
+		items[338] = new ItemTooltip("Sugar Cane");
+		items[339] = new ItemTooltip("Paper");
+		items[340] = new ItemTooltip("Book");
+		items[341] = new ItemTooltip("Slime Ball", UNCOMMON_COL);
+		items[342] = new ItemTooltip("Minecart with Chest", UNCOMMON_COL,
+				"Used for carrying items", DESCRIPTION_COL,
+				"on minecart tracks", DESCRIPTION_COL);
+		items[343] = new ItemTooltip("Minecart with Furnace", UNCOMMON_COL,
+				"Uses fuel to move fast", DESCRIPTION_COL,
+				"on minecart tracks");
+		items[344] = new ItemTooltip("Egg", "Right click to throw", DESCRIPTION_COL);
+		items[345] = new ItemTooltip("Compass", UNCOMMON_COL,
+				"Points in the direction to", DESCRIPTION_COL,
+				"your spawnpoint", DESCRIPTION_COL);
+		items[346] = new ItemTooltip("Fishing Rod", "Right click to cast", DESCRIPTION_COL);
+		items[347] = new ItemTooltip("Quiver",
+				"Stores up to 256 arrows", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[348] = new ItemTooltip(LEGENDARY_GRAD, "Ruby Staff", LEGENDARY_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"flaming ruby crystal", DESCRIPTION_COL,
+				Item.staffRuby);
+		items[349] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire Staff", LEGENDARY_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"barrage of sapphire shards", DESCRIPTION_COL,
+				Item.staffSapphire);
+		items[350] = new ItemTooltip(LEGENDARY_GRAD, "Ruby", LEGENDARY_COL, "A gem capable of magic", DESCRIPTION_COL);
+		items[351] = new ItemTooltip(LEGENDARY_GRAD, "Sapphire", LEGENDARY_COL, "A gem capable of magic",
+				DESCRIPTION_COL);
+		items[352] = new ItemTooltip("Raw Beef", Item.beefRaw);
+		items[353] = new ItemTooltip("Cooked Beef", Item.beefCooked);
+		items[354] = new ItemTooltip("Raw Chicken", Item.chickenRaw);
+		items[355] = new ItemTooltip("Cooked Chicken", Item.chickenCooked);
+		items[356] = new ItemTooltip("Raw Mutton", Item.muttonRaw);
+		items[357] = new ItemTooltip("Cooked Mutton", Item.muttonCooked);
+		items[358] = new ItemTooltip(LEGENDARY_GRAD, "Warding Ring", LEGENDARY_COL,
+				"Heals half a heart every minute", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[359] = new ItemTooltip(LEGENDARY_GRAD, "Repair Kit", LEGENDARY_COL,
+				"Crouch to repair the", DESCRIPTION_COL,
+				"currently held item", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+				Item.repairKit);
+		items[360] = new ItemTooltip("Star Chunk", RARE_COL,
+				"A fallen star from the", DESCRIPTION_COL,
+				"night sky; provides great", DESCRIPTION_COL,
+				"energy when heated", DESCRIPTION_COL,
+				"Disappears at daytime", INFO_COL);
+		items[361] = new ItemTooltip("Star Dust", RARE_COL,
+				"This extraterrestrial dust", DESCRIPTION_COL,
+				"emanates powerful energy", DESCRIPTION_COL);
+		items[362] = new ItemTooltip("Sparkle Staff", RARE_COL,
+				"Right click to shoot a", DESCRIPTION_COL,
+				"star blast", DESCRIPTION_COL,
+				Item.staffSparkle);
+		items[363] = new ItemTooltip("Slime Shoes", UNCOMMON_COL,
+				"Bounces on falling", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+				"64 max durability", INFO_COL);
+		items[364] = new ItemTooltip("Dye");
+		fromMetadata[364][0] = new ItemTooltip("White Dye");
+		fromMetadata[364][1] = new ItemTooltip("Red Dye");
+		fromMetadata[364][2] = new ItemTooltip("Orange Dye");
+		fromMetadata[364][3] = new ItemTooltip("Yellow Dye");
+		fromMetadata[364][4] = new ItemTooltip("Chartreuse Dye");
+		fromMetadata[364][5] = new ItemTooltip("Green Dye");
+		fromMetadata[364][6] = new ItemTooltip("Spring Green Dye");
+		fromMetadata[364][7] = new ItemTooltip("Cyan Dye");
+		fromMetadata[364][8] = new ItemTooltip("Capri Dye");
+		fromMetadata[364][9] = new ItemTooltip("Ultramarine Dye");
+		fromMetadata[364][10] = new ItemTooltip("Violet Dye");
+		fromMetadata[364][11] = new ItemTooltip("Purple Dye");
+		fromMetadata[364][12] = new ItemTooltip("Magenta Dye");
+		fromMetadata[364][13] = new ItemTooltip("Rose Dye");
+		fromMetadata[364][14] = new ItemTooltip("Black Dye");
+		fromMetadata[364][15] = new ItemTooltip("Gray Dye");
+		items[365] = new ItemTooltip(LEGENDARY_GRAD, "Nimble Boots", LEGENDARY_COL,
+				"Increases running speed", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL);
+		items[366] = new ItemTooltip(LEGENDARY_GRAD, "Wings", LEGENDARY_COL,
+				"Allows jumping in midair", DESCRIPTION_COL,
+				"using 10 points of mana.", DESCRIPTION_COL,
+				"Can be equipped in", INFO_COL,
+				"the charm slot", INFO_COL,
+                "256 max durability", INFO_COL);
+		items[367] = new ItemTooltip("Sugar");
+		items[368] = new ItemTooltip("Cookie", Item.cookie);
+		items[369] = new ItemTooltip("Glass Shard");
+		items[370] = new ItemTooltip("Ice Shard");
+
+		items[2256] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.record13);
+		items[2257] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordCat);
+		items[2258] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordMagnet);
+		items[2259] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordBlocks);
+		items[2260] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordWait);
+		items[2261] = new ItemTooltip(NOVELTY_GRAD, "Music Disc", RARE_COL, Item.recordChris);
+	}
+
+	public ItemTooltip(Pair<Integer, Integer> gradient, Object... lines) {
+		this.gradient = gradient;
+		for (Object line : lines) {
+			if (Item.class.isAssignableFrom(line.getClass())) {
+				for (Object subLine : ((Item) line).getDynamicTooltip()) {
+					this.parseLine(subLine);
+				}
+			} else {
+				this.parseLine(line);
+			}
+		}
+		if (this.parsedString) {
+			this.lines.add(this.nextText);
+			this.colors.add(0xFFFFFF);
+		}
+	}
+
+	public ItemTooltip(Object... lines) {
+		this(DEFAULT_GRAD, lines);
+	}
+
+	public static ItemTooltip invalid(String name, Object... objects) {
+		return new ItemTooltip(INVALID_GRAD, name, INVALID_COL, objects);
+	}
+
+	public int size() {
+		return lines.size();
+	}
+
+	private boolean parsedString;
+	private String nextText;
+
+	private void parseLine(Object line) {
+		if (line instanceof String) {
+			if (this.parsedString) {
+				this.lines.add(this.nextText);
+				this.colors.add(0xFFFFFF);
+			}
+			this.nextText = (String) line;
+			this.parsedString = true;
+		} else if (line instanceof Integer) {
+			if (this.parsedString) {
+				this.lines.add(this.nextText);
+				this.colors.add((int) line);
+			}
+			this.parsedString = false;
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemNimbleBoots.java
@@ -1,0 +1,14 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
+
+public class ItemNimbleBoots extends ItemCharm {
+	public ItemNimbleBoots(int id) {
+		super(id, "nimbleboots");
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.runSpeed += 0.25F;
+	}
+}
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockLeaves extends BlockLeavesBase {
-	private int leafTexIndex;
-	private int decayCounter = 0;
+	private final int leafTexIndex;
 
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
@@ -12,95 +12,65 @@
 		this.setTickOnLoad(true);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.decayCounter = 0;
-		this.updateCurrentLeaves(var1, var2, var3, var4);
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public void updateConnectedLeaves(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 != 0 && var6 == var5 - 1) {
-				this.updateCurrentLeaves(var1, var2, var3, var4);
-			}
-		}
-	}
-
-	public void updateCurrentLeaves(World var1, int var2, int var3, int var4) {
-		if(this.decayCounter++ < 100) {
-			int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? 16 : 0;
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				var6 = 1;
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			}
-
-			var5 = this.getConnectionStrength(var1, var2, var3 - 1, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 - 1, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 + 1, var5);
-			var5 = this.getConnectionStrength(var1, var2 - 1, var3, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2 + 1, var3, var4, var5);
-			int var7 = var5 - 1;
-			if(var7 < 10) {
-				var7 = 1;
-			}
-
-			if(var7 != var6) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-				this.updateConnectedLeaves(var1, var2, var3 - 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3 + 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 - 1, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 + 1, var6);
-				this.updateConnectedLeaves(var1, var2 - 1, var3, var4, var6);
-				this.updateConnectedLeaves(var1, var2 + 1, var3, var4, var6);
-			}
-
-		}
-	}
-
-	private int getConnectionStrength(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
-			return 16;
-		} else {
-			if(var6 == this.blockID) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 != 0 && var7 > var5) {
-					return var7;
-				}
-			}
-
-			return var5;
-		}
-	}
-
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
-			this.decayCounter = 0;
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			this.removeLeaves(var1, var2, var3, var4);
-		} else if(var5.nextInt(10) == 0) {
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		}
-
-	}
-
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+		if (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+			byte var6 = 5;
+
+			for (int var7 = var2 - var6; var7 <= var2 + var6; ++var7) {
+				for (int var8 = var3 - 1; var8 <= var3 + 1; ++var8) {
+					for (int var9 = var4 - var6; var9 <= var4 + var6; ++var9) {
+						if (var1.getBlockId(var7, var8, var9) == Block.wood.blockID
+								&& var1.getBlockMetadata(var7, var8, var9)
+										== var1.getBlockMetadata(var2, var3, var4)) {
+							return;
+						}
+					}
+				}
+			}
+
+//			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+//			var1.setBlockWithNotify(var2, var3, var4, 0);
+			fall(var1, var2, var3, var4);
+		}
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		updateTick(var1, var2, var3, var4, var1.rand);
+	}
+
+	public void fall(World var1, int var2, int var3, int var4) {
+		if (var1.getBlockId(var2, var3, var4) != this.blockID) {
+			return;
+		}
+
+		EntityFallingSand fallingLeaves = new EntityFallingSand(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F, Block.leaves.blockID);
+		fallingLeaves.blockMetadata = var1.getBlockMetadata(var2, var3, var4);
+		fallingLeaves.breakOnFall = true;
 		var1.setBlockWithNotify(var2, var3, var4, 0);
+		var1.spawnEntityInWorld(fallingLeaves);
+
+		for (int rx = var2 - 1; rx <= var2 + 1; rx++) {
+			for (int ry = var3 - 1; ry <= var3 + 1; ry++) {
+				for (int rz = var4 - 1; rz <= var4 + 1; rz++) {
+//					var1.markBlockNeedsUpdate(rx, ry, rz);
+					var1.notifyBlocksOfNeighborChange(rx, ry, rz, var1.getBlockId(rx, ry, rz));
+				}
+			}
+		}
 	}
 
 	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
+		return var1.nextInt(30) == 0 ? 1 : 0;
 	}
 
 	public int idDropped(int var1, Random var2) {
 		return Block.sapling.blockID;
 	}
 
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
+	}
+
 	public boolean isOpaqueCube() {
 		return !this.graphicsLevel;
 	}
@@ -110,7 +80,12 @@
 		this.blockIndexInTexture = this.leafTexIndex + (var1 ? 0 : 1);
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		super.onEntityWalking(var1, var2, var3, var4, var5);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return (metadata == 0 ? this.leafTexIndex : textureXY(9, 8 + metadata))
+			   + (this.graphicsLevel ? 0 : 1);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
 	}
 }
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -2,108 +2,143 @@
 
 import java.util.Random;
 
+import io.github.bluestaggo.mcdiverge.*;
+
 public class Item {
 	protected static Random rand = new Random();
 	public static Item[] itemsList = new Item[32000];
-	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
-	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
-	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
-	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
-	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
-	public static Item bow = (new ItemBow(5)).setIconIndex(21);
-	public static Item arrow = (new Item(6)).setIconIndex(37);
-	public static Item coal = (new Item(7)).setIconIndex(7);
-	public static Item diamond = (new Item(8)).setIconIndex(55);
-	public static Item ingotIron = (new Item(9)).setIconIndex(23);
-	public static Item ingotGold = (new Item(10)).setIconIndex(39);
-	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
-	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
-	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
-	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
-	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
-	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
-	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
-	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
-	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
-	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
-	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
-	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
-	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D();
-	public static Item bowlEmpty = (new Item(25)).setIconIndex(71);
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
-	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68);
-	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84);
-	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100);
-	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116);
-	public static Item silk = (new Item(31)).setIconIndex(8);
-	public static Item feather = (new Item(32)).setIconIndex(24);
-	public static Item gunpowder = (new Item(33)).setIconIndex(40);
-	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
-	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
-	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
-	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
-	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9);
-	public static Item wheat = (new Item(40)).setIconIndex(25);
-	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41);
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0);
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16);
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32);
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48);
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1);
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17);
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33);
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49);
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2);
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18);
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34);
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50);
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3);
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19);
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35);
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51);
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4);
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20);
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36);
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52);
-	public static Item flint = (new Item(62)).setIconIndex(6);
-	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
-	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
-	public static Item painting = (new ItemPainting(65)).setIconIndex(26);
-	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11);
-	public static Item sign = (new ItemSign(67)).setIconIndex(42);
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
-	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
-	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104);
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
-	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56);
-	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14);
-	public static Item boat = (new ItemBoat(77)).setIconIndex(136);
-	public static Item leather = (new Item(78)).setIconIndex(103);
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
-	public static Item brick = (new Item(80)).setIconIndex(22);
-	public static Item clay = (new Item(81)).setIconIndex(57);
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
-	public static Item paper = (new Item(83)).setIconIndex(58);
-	public static Item book = (new Item(84)).setIconIndex(59);
-	public static Item slimeBall = (new Item(85)).setIconIndex(30);
-	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
-	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
-	public static Item egg = (new Item(88)).setIconIndex(12);
-	public static Item compass = (new Item(89)).setIconIndex(54);
-	public static Item fishingRod = (new Item(90)).setIconIndex(69);
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static final Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
+	public static final Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
+	public static final Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
+	public static final Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
+	public static final Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
+	public static final Item bow = (new ItemBow(5)).setIconIndex(21);
+	public static final Item arrow = (new Item(6)).setIconIndex(37);
+	public static final Item coal = (new Item(7)).setIconIndex(7);
+	public static final Item diamond = (new Item(8)).setIconIndex(55);
+	public static final Item ingotIron = (new Item(9)).setIconIndex(23);
+	public static final Item ingotGold = (new Item(10)).setIconIndex(39);
+	public static final Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
+	public static final Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
+	public static final Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
+	public static final Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
+	public static final Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
+	public static final Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
+	public static final Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
+	public static final Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
+	public static final Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
+	public static final Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
+	public static final Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
+	public static final Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
+	public static final Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
+	public static final Item stick = (new Item(24)).setIconIndex(53).setFull3D();
+	public static final Item bowlEmpty = (new Item(25)).setIconIndex(71);
+	public static final Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
+	public static final Item swordGold = (new ItemSword(27, -1)).setIconIndex(68);
+	public static final Item shovelGold = (new ItemSpade(28, -1)).setIconIndex(84);
+	public static final Item pickaxeGold = (new ItemPickaxe(29, -1)).setIconIndex(100);
+	public static final Item axeGold = (new ItemAxe(30, -1)).setIconIndex(116);
+	public static final Item silk = (new Item(31)).setIconIndex(8);
+	public static final Item feather = (new Item(32)).setIconIndex(24);
+	public static final Item gunpowder = (new Item(33)).setIconIndex(40);
+	public static final Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
+	public static final Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
+	public static final Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
+	public static final Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
+	public static final Item hoeGold = (new ItemHoe(38, -1)).setIconIndex(132);
+	public static final Item seeds = (new ItemSeeds(39, 59)).setIconIndex(9);
+	public static final Item wheat = (new Item(40)).setIconIndex(25);
+	public static final Item bread = (new ItemFood(41, 5)).setIconIndex(41);
+	public static final Item helmetLeather = (new ItemArmor(42, 0, 0, 0, 0.35D)).setIconIndex(0);
+	public static final Item plateLeather = (new ItemArmor(43, 0, 0, 1, 0.35D)).setIconIndex(16);
+	public static final Item legsLeather = (new ItemArmor(44, 0, 0, 2, 0.35D)).setIconIndex(32);
+	public static final Item bootsLeather = (new ItemArmor(45, 0, 0, 3, 0.35D)).setIconIndex(48);
+	public static final Item helmetChain = (new ItemArmor(46, 1, 1, 0, 0.6D)).setIconIndex(1);
+	public static final Item plateChain = (new ItemArmor(47, 1, 1, 1, 0.6D)).setIconIndex(17);
+	public static final Item legsChain = (new ItemArmor(48, 1, 1, 2, 0.6D)).setIconIndex(33);
+	public static final Item bootsChain = (new ItemArmor(49, 1, 1, 3, 0.6D)).setIconIndex(49);
+	public static final Item helmetSteel = (new ItemArmor(50, 2, 2, 0, 0.75D)).setIconIndex(2);
+	public static final Item plateSteel = (new ItemArmor(51, 2, 2, 1, 0.75D)).setIconIndex(18);
+	public static final Item legsSteel = (new ItemArmor(52, 2, 2, 2, 0.75D)).setIconIndex(34);
+	public static final Item bootsSteel = (new ItemArmor(53, 2, 2, 3, 0.75D)).setIconIndex(50);
+	public static final Item helmetDiamond = (new ItemArmor(54, 3, 3, 0, 1.0D)).setIconIndex(3);
+	public static final Item plateDiamond = (new ItemArmor(55, 3, 3, 1, 1.0D)).setIconIndex(19);
+	public static final Item legsDiamond = (new ItemArmor(56, 3, 3, 2, 1.0D)).setIconIndex(35);
+	public static final Item bootsDiamond = (new ItemArmor(57, 3, 3, 3, 1.0D)).setIconIndex(51);
+	public static final Item helmetGold = (new ItemArmor(58, 1, 4, 0, 0.55D)).setIconIndex(4);
+	public static final Item plateGold = (new ItemArmor(59, 1, 4, 1, 0.55D)).setIconIndex(20);
+	public static final Item legsGold = (new ItemArmor(60, 1, 4, 2, 0.55D)).setIconIndex(36);
+	public static final Item bootsGold = (new ItemArmor(61, 1, 4, 3, 0.55D)).setIconIndex(52);
+	public static final Item flint = (new Item(62)).setIconIndex(6);
+	public static final Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
+	public static final Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
+	public static final Item painting = (new ItemPainting(65)).setIconIndex(26);
+	public static final Item appleGold = (new ItemFood(66, 42, 0.2F)).setIconIndex(11);
+	public static final Item sign = (new ItemSign(67)).setIconIndex(42);
+	public static final Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
+	public static final Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
+	public static final Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
+	public static final Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
+	public static final Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
+	public static final Item saddle = (new ItemSaddle(73)).setIconIndex(104);
+	public static final Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
+	public static final Item redstone = (new ItemRedstone(75)).setIconIndex(56);
+	public static final Item snowball = (new ItemSnowball(76)).setIconIndex(14);
+	public static final Item boat = (new ItemBoat(77)).setIconIndex(136);
+	public static final Item leather = (new Item(78)).setIconIndex(103);
+	public static final Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
+	public static final Item brick = (new Item(80)).setIconIndex(22);
+	public static final Item clay = (new Item(81)).setIconIndex(57);
+	public static final Item reed = (new ItemReed(82, 83)).setIconIndex(27);
+	public static final Item paper = (new Item(83)).setIconIndex(58);
+	public static final Item book = (new Item(84)).setIconIndex(59);
+	public static final Item slimeBall = (new Item(85)).setIconIndex(30);
+	public static final Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
+	public static final Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
+	public static final Item egg = (new Item(88)).setIconIndex(12);
+	public static final Item compass = (new Item(89)).setIconIndex(54);
+	public static final Item fishingRod = (new Item(90)).setIconIndex(69);
+	public static final Item quiver = (new ItemQuiver(91)).setIconIndex(textureXY(6, 2));
+	public static final Item staffRuby = (new ItemStaff(92, 10.0F, 10, 1024, 100, 1.0F)).setIconIndex(textureXY(10, 6));
+	public static final Item staffSapphire = (new ItemStaff(93, 6.0F, 6, 1024, 0, 5.0F)).setIconIndex(textureXY(11, 6));
+	public static final Item ruby = (new Item(94)).setIconIndex(textureXY(10, 5));
+	public static final Item sapphire = (new Item(95)).setIconIndex(textureXY(11, 5));
+	public static final Item beefRaw = (new ItemFood(96, 3)).setIconIndex(textureXY(8, 9));
+	public static final Item beefCooked = (new ItemFood(97, 8)).setIconIndex(textureXY(8, 10));
+	public static final Item chickenRaw = (new ItemFood(98, 3)).setIconIndex(textureXY(9, 9));
+	public static final Item chickenCooked = (new ItemFood(99, 8)).setIconIndex(textureXY(9, 10));
+	public static final Item muttonRaw = (new ItemFood(100, 3)).setIconIndex(textureXY(10, 9));
+	public static final Item muttonCooked = (new ItemFood(101, 8)).setIconIndex(textureXY(10, 10));
+	public static final Item wardingRing = (new ItemWardingRing(102)).setIconIndex(textureXY(1, 9));
+	public static final Item repairKit = (new ItemRepairKit(103)).setIconIndex(textureXY(3, 9));
+	public static final Item starChunk = (new Item(104)).setIconIndex(textureXY(12, 5));
+	public static final Item starDust = (new Item(105)).setIconIndex(textureXY(13, 5));
+	public static final Item staffSparkle = (new ItemStaff(106, 15.0F, 6, 256)).setIconIndex(textureXY(12, 6));
+	public static final Item slimeShoes = (new ItemSlimeShoes(107)).setIconIndex(textureXY(2, 9));
+	public static final Item dye = (new ItemDye(108)).setIconIndex(textureXY(12, 12));
+	public static final Item nimbleBoots = (new ItemNimbleBoots(109)).setIconIndex(textureXY(4, 9));
+	public static final Item wings = (new ItemWings(110)).setIconIndex(textureXY(5, 9));
+	public static final Item sugar = (new Item(111)).setIconIndex(textureXY(12, 1));
+	public static final Item cookie = (new ItemFood(112, 3, 0.1F)).setIconIndex(textureXY(12, 3));
+	public static final Item shardGlass = (new Item(113)).setIconIndex(textureXY(6, 4));
+	public static final Item shardIce = (new Item(114)).setIconIndex(textureXY(6, 5));
+	public static final Item record13 = (new ItemRecord(2000, "13", "C418 - 13")).setIconIndex(240);
+	public static final Item recordCat = (new ItemRecord(2001, "cat", "C418 - cat")).setIconIndex(241);
+	public static final Item recordMagnet = (new ItemRecord(2002, "diverge.magnet", "Notch - Magnetic Circuit")).setIconIndex(242);
+	public static final Item recordBlocks = (new ItemRecord(2003, "diverge.blocks", "C418 - blocks")).setIconIndex(243);
+	public static final Item recordWait = (new ItemRecord(2004, "diverge.wait", "C418 - wait")).setIconIndex(244);
+	public static final Item recordChris = (new ItemRecord(2005, "diverge.chris", "C418 - chris")).setIconIndex(245);
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
 	protected int iconIndex;
+	protected int startingDamage = 0;
 	protected boolean bFull3D = false;
 
+	protected static int textureXY(int x, int y) {
+		return y * 16 + x;
+	}
+
 	protected Item(int var1) {
 		this.shiftedIndex = 256 + var1;
 		if(itemsList[256 + var1] != null) {
@@ -167,4 +202,26 @@
 	public boolean isFull3D() {
 		return this.bFull3D;
 	}
+
+	public ItemTooltip getTooltip() {
+		return ItemTooltip.items[this.shiftedIndex];
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[0];
+	}
+
+	public boolean isMagic() {
+		return false;
+	}
+
+	public boolean allowRepair() {
+		return true;
+	}
+
+	public int[] availableMetadata() {
+		return new int[] { 0 };
+	}
+
+	public boolean isSilk() { return false; }
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/PopulatorHost.java
@@ -1,0 +1,91 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class PopulatorHost {
+	public final IChunkProvider chunkProvider;
+	public final int x;
+	public final int z;
+	public final World worldObj;
+	public final Random rand;
+	public final NoiseGeneratorOctaves noise;
+
+	public PopulatorHost(IChunkProvider chunkProvider, int x, int z, World worldObj, Random rand,
+						 NoiseGeneratorOctaves noise) {
+		this.chunkProvider = chunkProvider;
+		this.x = x;
+		this.z = z;
+		this.worldObj = worldObj;
+		this.rand = rand;
+		this.noise = noise;
+	}
+
+	//#region Generate Methods
+	public void generate(WorldGenerator gen, int quantity) {
+		generate(gen, quantity, 0, 128, 0);
+	}
+
+	public void generate(WorldGenerator gen, int quantity, int minY, int maxY) {
+		generate(gen, quantity, minY, maxY, 0);
+	}
+
+	public void generate(WorldGenerator gen, int quantity, int minY, int maxY, int xzOffset) {
+		for (int i = 0; i < quantity; i++) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genY = rand.nextInt(maxY - minY) + minY;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateSurface(WorldGenerator gen, int quantity) {
+		generateSurface(gen, quantity, 0);
+	}
+
+	public void generateSurface(WorldGenerator gen, int quantity, int xzOffset) {
+		for (int i = 0; i < quantity; i++) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			int genY = worldObj.getHeightValue(genX, genZ);
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateChance(WorldGenerator gen, int chance) {
+		generateChance(gen, chance, 0, 128, 0);
+	}
+
+	public void generateChance(WorldGenerator gen, int chance, int minY, int maxY) {
+		generateChance(gen, chance, minY, maxY, 0);
+	}
+
+	public void generateChance(WorldGenerator gen, int chance, int minY, int maxY, int xzOffset) {
+		if (rand.nextInt(chance) == 0) {
+			int genX = x + rand.nextInt(16) + xzOffset;
+			int genY = rand.nextInt(maxY - minY) + minY;
+			int genZ = z + rand.nextInt(16) + xzOffset;
+			gen.generate(worldObj, rand, genX, genY, genZ);
+		}
+	}
+
+	public void generateMinable(Block block, int size, int quantity, int minY, int maxY) {
+		generate(new WorldGenMinable(block.blockID, size), quantity, minY, maxY);
+	}
+
+	public void generateMinable(Block block, int size, int quantity, int minY, int maxY, int metadata) {
+		generate(new WorldGenMinable(block.blockID, size, metadata), quantity, minY, maxY);
+	}
+
+	public void generateMinableInStone(Block block, int size, int quantity, int minY, int maxY) {
+		generate(new WorldGenMinable(block.blockID, size).mergeWithStone(), quantity, minY, maxY);
+	}
+
+	public void generateFlowers(int frequency) {
+		generate(new WorldGenFlowers(Block.plantYellow.blockID), frequency, 48, 128, 8);
+		generate(new WorldGenFlowers(Block.plantBlue.blockID), frequency, 48, 128, 8);
+		generate(new WorldGenFlowers(Block.plantRed.blockID), frequency, 48, 128, 8);
+	}
+	//#endregion Generate Methods
+}
--- net/minecraft/src/ModelBiped.java
+++ net/minecraft/src/ModelBiped.java
@@ -17,36 +17,43 @@
 	}
 
 	public ModelBiped(float var1) {
-		this(var1, 0.0F);
+		this(var1, false);
 	}
 
-	public ModelBiped(float var1, float var2) {
+	public ModelBiped(float var1, boolean var2) {
 		this.heldItemLeft = false;
 		this.heldItemRight = false;
 		this.isSneak = false;
 		this.bipedHead = new ModelRenderer(0, 0);
+		this.bipedHead.bigTex = var2;
 		this.bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1);
-		this.bipedHead.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedHead.setRotationPoint(0.0F, 0.0F, 0.0F);
 		this.bipedHeadwear = new ModelRenderer(32, 0);
+		this.bipedHeadwear.bigTex = var2;
 		this.bipedHeadwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1 + 0.5F);
-		this.bipedHeadwear.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedHeadwear.setRotationPoint(0.0F, 0.0F, 0.0F);
 		this.bipedBody = new ModelRenderer(16, 16);
+		this.bipedBody.bigTex = var2;
 		this.bipedBody.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, var1);
-		this.bipedBody.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedBody.setRotationPoint(0.0F, 0.0F, 0.0F);
 		this.bipedRightArm = new ModelRenderer(40, 16);
+		this.bipedRightArm.bigTex = var2;
 		this.bipedRightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F + var2, 0.0F);
+		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F, 0.0F);
 		this.bipedLeftArm = new ModelRenderer(40, 16);
+		this.bipedLeftArm.bigTex = var2;
 		this.bipedLeftArm.mirror = true;
 		this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F + var2, 0.0F);
+		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F, 0.0F);
 		this.bipedRightLeg = new ModelRenderer(0, 16);
+		this.bipedRightLeg.bigTex = var2;
 		this.bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F + var2, 0.0F);
+		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F, 0.0F);
 		this.bipedLeftLeg = new ModelRenderer(0, 16);
+		this.bipedLeftLeg.bigTex = var2;
 		this.bipedLeftLeg.mirror = true;
 		this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F + var2, 0.0F);
+		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F, 0.0F);
 	}
 
 	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
@@ -124,6 +131,7 @@
 			this.bipedRightLeg.rotationPointY = 9.0F;
 			this.bipedLeftLeg.rotationPointY = 9.0F;
 			this.bipedHead.rotationPointY = 1.0F;
+			this.bipedHeadwear.rotationPointY = 1.0F;
 		} else {
 			this.bipedBody.rotateAngleX = 0.0F;
 			this.bipedRightLeg.rotationPointZ = 0.0F;
@@ -131,11 +139,37 @@
 			this.bipedRightLeg.rotationPointY = 12.0F;
 			this.bipedLeftLeg.rotationPointY = 12.0F;
 			this.bipedHead.rotationPointY = 0.0F;
+			this.bipedHeadwear.rotationPointY = 0.0F;
 		}
 
 		this.bipedRightArm.rotateAngleZ += MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
 		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
 		this.bipedRightArm.rotateAngleX += MathHelper.sin(var3 * 0.067F) * 0.05F;
 		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(var3 * 0.067F) * 0.05F;
+	}
+
+	public void showHead(boolean var1) {
+		this.bipedHead.showModel = var1;
+		this.bipedHeadwear.showModel = var1;
+	}
+
+	public void showBody(boolean var1) {
+		this.bipedBody.showModel = var1;
+	}
+
+	public void showRightArm(boolean var1) {
+		this.bipedRightArm.showModel = var1;
+	}
+
+	public void showLeftArm(boolean var1) {
+		this.bipedLeftArm.showModel = var1;
+	}
+
+	public void showRightLeg(boolean var1) {
+		this.bipedRightLeg.showModel = var1;
+	}
+
+	public void showLeftLeg(boolean var1) {
+		this.bipedLeftLeg.showModel = var1;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiSliderGeneric.java
@@ -1,0 +1,132 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.FontRenderer;
+import net.minecraft.src.GuiButton;
+import org.lwjgl.opengl.GL11;
+
+public class GuiSliderGeneric extends GuiButton {
+	public final String label;
+	public final float multiplier;
+	public float sliderValue;
+	public boolean round;
+	public boolean dragging;
+	public boolean vertical;
+
+	public GuiSliderGeneric(int id, int x, int y, int w, int h, String label, float defaultValue, float multiplier) {
+		super(id, x, y, w, h, label);
+		this.width = w;
+		this.height = h;
+		this.label = label;
+		this.multiplier = multiplier;
+		this.displayString = getDisplayString();
+	}
+
+	protected int getHoverState(boolean var1) {
+		return 0;
+	}
+
+	public float getValue() {
+		float value = this.sliderValue * this.multiplier;
+		if (round) {
+			value = (int) value;
+		}
+		return value;
+	}
+
+	public String getDisplayString() {
+		float value = getValue();
+		if (round) {
+			if (this.multiplier == 1.0D) {
+				return this.label + ": " + (int) value;
+			} else {
+				return this.label + ": " + (int) value + " / " + (int) this.multiplier;
+			}
+		} else {
+			if (this.multiplier == 1.0D) {
+				return this.label + ": " + value;
+			} else {
+				return this.label + ": " + value + " / " + this.multiplier;
+			}
+		}
+	}
+
+	protected void mouseDragged(Minecraft var1, int var2, int var3) {
+		if(this.visible) {
+			if(this.dragging) {
+				this.sliderValue = this.vertical
+						? (float)(var3 - (this.yPosition + 4)) / (float)(this.height - 8)
+						: (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+				if(this.sliderValue < 0.0F) {
+					this.sliderValue = 0.0F;
+				}
+
+				if(this.sliderValue > 1.0F) {
+					this.sliderValue = 1.0F;
+				}
+
+				this.displayString = getDisplayString();
+			}
+
+
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			if (this.vertical) {
+				this.drawTexturedModalRect(this.xPosition, this.yPosition + (int)(this.sliderValue * (float)(this.height - 8)), 18, 112, this.width, 4);
+				this.drawTexturedModalRect(this.xPosition, this.yPosition + (int)(this.sliderValue * (float)(this.height - 8)) + 4, 18, 252, this.width, 4);
+			} else {
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, this.height);
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, this.height);
+			}
+		}
+	}
+
+	public boolean mousePressed(Minecraft var1, int var2, int var3) {
+		if(super.mousePressed(var1, var2, var3)) {
+			this.sliderValue = this.vertical
+					? (float)(var2 - (this.yPosition + 4)) / (float)(this.height - 8)
+					: (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+
+			if(this.sliderValue < 0.0F) {
+				this.sliderValue = 0.0F;
+			}
+
+			if(this.sliderValue > 1.0F) {
+				this.sliderValue = 1.0F;
+			}
+
+			this.dragging = true;
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void mouseReleased(int var1, int var2) {
+		this.dragging = false;
+	}
+
+	public void drawButton(Minecraft var1, int var2, int var3) {
+		if (!this.vertical) {
+			super.drawButton(var1, var2, var3);
+		}
+
+		if (this.visible) {
+			FontRenderer fontRenderer4 = var1.fontRenderer;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.renderEngine.getTexture("/gui/gui.png"));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+//			boolean var5 = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
+			this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 112, this.width, this.height / 2);
+			this.drawTexturedModalRect(this.xPosition, this.yPosition + this.height / 2, 0, 256 - this.height / 2, this.width, this.height / 2);
+			this.mouseDragged(var1, var2, var3);
+			/*
+			if(!this.enabled) {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
+			} else if(var5) {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
+			} else {
+				this.drawCenteredString(fontRenderer4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
+			}
+			*/
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemMagic.java
@@ -1,0 +1,30 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.Item;
+import net.minecraft.src.ItemStack;
+import net.minecraft.src.World;
+
+public class ItemMagic extends Item {
+	public float useMana;
+
+	public ItemMagic(int var1, float var2) {
+		super(var1);
+		this.useMana = var2;
+	}
+
+	public ItemStack onMagicItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		return var1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (var3.useMana(this.useMana)) {
+			return this.onMagicItemRightClick(var1, var2, var3);
+		}
+		return var1;
+	}
+
+	public boolean isMagic() {
+		return true;
+	}
+}
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -131,13 +131,9 @@
 										}
 
 										if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
-											if(var48 < 10) {
-												var3[var46] = (byte)Block.lavaMoving.blockID;
-											} else {
-												var3[var46] = 0;
-												if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
-													var3[var46 - 1] = (byte)Block.grass.blockID;
-												}
+											var3[var46] = 0;
+											if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
+												var3[var46 - 1] = (byte)Block.grass.blockID;
 											}
 										}
 									}
@@ -175,8 +171,8 @@
 
 			for(int var16 = 0; var16 < var15; ++var16) {
 				float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
-				float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
+				float var18 = (this.rand.nextFloat() - 0.5F) / 4.0F;
+				float var19 = this.rand.nextFloat() * 6.0F;
 				this.generateCaveNode(var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
 			}
 		}
--- net/minecraft/src/Packet5PlayerInventory.java
+++ net/minecraft/src/Packet5PlayerInventory.java
@@ -31,7 +31,8 @@
 			if(var4 >= 0) {
 				byte var5 = var1.readByte();
 				short var6 = var1.readShort();
-				this.inventory[var3] = new ItemStack(var4, var5, var6);
+				byte var7 = var1.readByte();
+				this.inventory[var3] = new ItemStack(var4, var5, var6).withMetadata(var7);
 			}
 		}
 
@@ -48,6 +49,7 @@
 				var1.writeShort((short)this.inventory[var2].itemID);
 				var1.writeByte((byte)this.inventory[var2].stackSize);
 				var1.writeShort((short)this.inventory[var2].itemDmg);
+				var1.writeByte((short)this.inventory[var2].itemMetadata);
 			}
 		}
 
--- net/minecraft/src/GuiCrafting.java
+++ net/minecraft/src/GuiCrafting.java
@@ -34,8 +34,8 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 28, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Crafting", 28, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -10,7 +10,7 @@
 	}
 
 	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(!this.sheared && var1 instanceof EntityLiving) {
+		if(!this.sheared && var1 instanceof EntityLiving && this.worldObj.canDoClientAction()) {
 			this.sheared = true;
 			int var3 = 1 + this.rand.nextInt(3);
 
@@ -45,5 +45,9 @@
 
 	protected String getDeathSound() {
 		return "mob.sheep";
+	}
+
+	protected int getDropItemId() {
+		return Item.muttonRaw.shiftedIndex;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldGenSpruceTrees.java
@@ -1,0 +1,137 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+
+public class WorldGenSpruceTrees extends WorldGenerator {
+	private int trunkHeight = 6;
+	private int trunkVariation = 4;
+	private int leavesWidth = 2;
+	private boolean big = false;
+
+	public WorldGenSpruceTrees makeBig() {
+		this.big = true;
+		return this;
+	}
+
+	public void setScale(double var1, double var3, double var5) {
+		trunkHeight = (int)var1 + 6;
+		trunkVariation = (int)var3 + 4;
+		leavesWidth = (int)var5 + 2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(trunkVariation) + trunkHeight;
+		int var7 = 1 + var2.nextInt(leavesWidth);
+		int var8 = var6 - var7;
+		int var9 = 2 + var2.nextInt(leavesWidth);
+		int squareSize = big ? 2 : 1;
+		boolean var10 = true;
+
+		if (var1.getBlockId(var3, var4, var5) == Block.snow.blockID) {
+			var1.setBlock(var3, var4--, var5, 0);
+		}
+
+		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+			int var11;
+			int var13;
+			int var15;
+			int var21;
+			for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
+				if(var11 - var4 < var7) {
+					var21 = 0;
+				} else {
+					var21 = var9;
+				}
+
+				for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
+					for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
+						if (var11 >= 0 && var11 < 128) {
+							var15 = var1.getBlockId(var13, var11, var14);
+							if(var15 != 0 && var15 != Block.leaves.blockID && var15 != Block.snow.blockID) {
+								var10 = false;
+							}
+						} else {
+							var10 = false;
+						}
+					}
+				}
+			}
+
+			if(!var10) {
+				return false;
+			} else {
+				var11 = var1.getBlockId(var3, var4 - 1, var5);
+				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+					placeBlockSquare(var1, var3, var4 - 1, var5, Block.dirt.blockID, 0, squareSize);
+					var21 = var2.nextInt(2);
+					var13 = 1;
+					byte var22 = 0;
+
+					int var16;
+					int var17;
+					for(var15 = 0; var15 <= var8; ++var15) {
+						var16 = var4 + var6 - var15;
+
+						for(var17 = var3 - var21; var17 <= var3 + var21; ++var17) {
+							int var18 = var17 - var3;
+
+							for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
+								int var20 = var19 - var5;
+
+								int leafX = var17;
+								int leafZ = var19;
+								int leafSize = squareSize;
+								if (big) {
+									if ((leafX == var3 || leafZ == var5)) leafSize++;
+									if (leafX > var3) leafX++;
+									if (leafZ > var5) leafZ++;
+									if (var15 < 2) leafSize -= 2 - var15;
+								}
+
+								if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
+									placeBlockSquare(var1, leafX, var16, leafZ, Block.leaves.blockID, 1, leafSize);
+								}
+							}
+						}
+
+						if(var21 >= var13) {
+							var21 = var22;
+							var22 = 1;
+							++var13;
+							if(var13 > var9) {
+								var13 = var9;
+							}
+						} else {
+							++var21;
+						}
+					}
+
+					var15 = var2.nextInt(3);
+
+					for(var16 = 0; var16 < var6 - var15; ++var16) {
+						var17 = var1.getBlockId(var3, var4 + var16, var5);
+						if(var17 == 0 || var17 == Block.leaves.blockID) {
+							placeBlockSquare(var1, var3, var4 + var16, var5, Block.wood.blockID, 1, squareSize);
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private static void placeBlockSquare(World world, int x, int y, int z, int id, int metadata, int size) {
+		for (int sx = 0; sx < size; sx++) {
+			for (int sz = 0; sz < size; sz++) {
+				world.setBlockAndMetadata(x + sx, y, z + sz, id, metadata);
+			}
+		}
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemDye.java
@@ -1,0 +1,36 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.stream.IntStream;
+
+public class ItemDye extends Item {
+	public static final int WHITE = 0;
+	public static final int RED = 1;
+	public static final int ORANGE = 2;
+	public static final int YELLOW = 3;
+	public static final int CHARTREUSE = 4;
+	public static final int GREEN = 5;
+	public static final int SPRING_GREEN = 6;
+	public static final int CYAN = 7;
+	public static final int CAPRI = 8;
+	public static final int ULTRAMARINE = 9;
+	public static final int VIOLET = 10;
+	public static final int PURPLE = 11;
+	public static final int MAGENTA = 12;
+	public static final int ROSE = 13;
+	public static final int BLACK = 14;
+	public static final int GRAY = 15;
+
+	public ItemDye(int id) {
+		super(id);
+	}
+
+	public int getIconIndex(ItemStack var1) {
+		return this.iconIndex + (var1.itemMetadata % 4) + (var1.itemMetadata / 4 * 16);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 16).toArray();
+	}
+}
--- net/minecraft/src/GuiDeleteWorld.java
+++ net/minecraft/src/GuiDeleteWorld.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.io.File;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiDeleteWorld extends GuiSelectWorld {
@@ -10,7 +11,7 @@
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(106, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
 	}
 
 	public void selectWorld(int var1) {
@@ -18,15 +19,21 @@
 		if(var2 != null) {
 			this.mc.displayGuiScreen(new GuiYesNo(this, "Are you sure you want to delete this world?", "\'" + var2 + "\' will be lost forever!", var1));
 		}
-
 	}
 
 	public void deleteWorld(boolean var1, int var2) {
 		if(var1) {
 			File var3 = Minecraft.getMinecraftDir();
-			World.deleteWorld(var3, this.getSaveName(var2));
+			World.deleteWorld(var3, "World" + var2);
 		}
 
 		this.mc.displayGuiScreen(this.parentScreen);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (var1.id == 106)
+			this.mc.displayGuiScreen(this.parentScreen);
+		else
+			super.actionPerformed(var1);
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockWool.java
@@ -1,0 +1,24 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+import java.util.Random;
+import java.util.stream.IntStream;
+
+public class BlockWool extends Block {
+	public BlockWool(int id, int tex, Material material) {
+		super(id, tex, material);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.blockIndexInTexture + (metadata % 2) + (metadata / 2 * 16);
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 16).toArray();
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
+	}
+}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ModelFox.java
@@ -1,0 +1,97 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+// Hippity hoppity ReIndev's code is now my property!
+// Seriously, I don't know how models work ._.
+
+public class ModelFox extends ModelBase {
+	public ModelRenderer foxHeadMain;
+	public ModelRenderer foxBody;
+	public ModelRenderer foxLeg1;
+	public ModelRenderer foxLeg2;
+	public ModelRenderer foxLeg3;
+	public ModelRenderer foxLeg4;
+	ModelRenderer foxRightEar;
+	ModelRenderer foxLeftEar;
+	ModelRenderer foxSnout;
+	ModelRenderer foxFloofyTail;
+
+	public ModelFox() {
+		float translation = 0.0F;
+		float unused = 14.5F + 17;
+		this.foxHeadMain = new ModelRenderer(0, 0);
+		this.foxHeadMain.addBox(-3.0F, -3.0F, -3.0F - 1, 8, 6, 6, translation);
+		this.foxBody = new ModelRenderer(40, 0);
+		this.foxBody.addBox(-4.0F, -7.125F, -3.0F, 6, 11, 6, translation);
+		this.foxLeg1 = new ModelRenderer(0, 18);
+		this.foxLeg1.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg2 = new ModelRenderer(0, 18);
+		this.foxLeg2.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg3 = new ModelRenderer(0, 18);
+		this.foxLeg3.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxLeg4 = new ModelRenderer(0, 18);
+		this.foxLeg4.addBox(-1.0F, 1.0F, -1.0F, 2, 6, 2, translation);
+		this.foxFloofyTail = new ModelRenderer(46, 18);
+		this.foxFloofyTail.addBox(-2.0F, -2.0F, -5.0F, 4, 9, 5, translation);
+		this.foxRightEar = new ModelRenderer(16, 14);
+		this.foxRightEar.addBox(-2.5F, -4.875F, -1.0F - 1, 2, 2, 1, translation);
+		this.foxLeftEar = new ModelRenderer(23, 14);
+		this.foxLeftEar.addBox(2.5F, -4.875F, -1.0F - 1, 2, 2, 1, translation);
+		this.foxSnout = new ModelRenderer(0, 12);
+		this.foxSnout.addBox(-1.0F, 1.0F, -5.25F - 1, 4, 2, 3, translation);
+		this.foxSnout.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxHeadMain.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxRightEar.setRotationPoint(-2.0F, unused, -6.5F);
+		this.foxLeftEar.setRotationPoint(-2.0F, unused, -6.5F);
+	}
+
+	public void render(float var1, float var2, float var3, float var4, float var5, float translation) {
+		super.render(var1, var2, var3, var4, var5, translation);
+		this.setRotationAngles(var1, var2, var3, var4, var5, translation);
+		this.foxHeadMain.render(translation);
+		this.foxRightEar.render(translation);
+		this.foxLeftEar.render(translation);
+		this.foxSnout.render(translation);
+		this.foxBody.render(translation);
+		this.foxLeg1.render(translation);
+		this.foxLeg2.render(translation);
+		this.foxLeg3.render(translation);
+		this.foxLeg4.render(translation);
+		this.foxFloofyTail.render(translation);
+	}
+
+	public void setRotationAngles(float var1, float var2, float xAngle, float yAngle, float zAngle, float var6) {
+		super.setRotationAngles(var1, var2, xAngle, yAngle, zAngle, var6);
+
+		this.foxHeadMain.rotateAngleX = zAngle / (180.0F / (float)Math.PI);
+		this.foxRightEar.rotateAngleY = this.foxHeadMain.rotateAngleY = yAngle / (180.0F / (float)Math.PI);
+		this.foxRightEar.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxLeftEar.rotateAngleY = this.foxHeadMain.rotateAngleY;
+		this.foxLeftEar.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxSnout.rotateAngleY = this.foxHeadMain.rotateAngleY;
+		this.foxSnout.rotateAngleX = this.foxHeadMain.rotateAngleX;
+		this.foxFloofyTail.rotateAngleX = 1.5F;
+
+		this.foxSnout.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxHeadMain.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxRightEar.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxLeftEar.setRotationPoint(-2.0F, 17.0F, -6.5F);
+		this.foxBody.setRotationPoint(0.0F, 16.0F, 2.0F);
+		this.foxBody.rotateAngleX = 1.5707964F;
+		this.foxBody.rotateAngleY = 0.0F;
+		this.foxFloofyTail.setRotationPoint(-1.0F, 14.0F, 8.0F);
+		this.foxLeg1.setRotationPoint(-2.5F, 17.0F, 5.0F);
+		this.foxLeg2.setRotationPoint(0.5F, 17.0F, 5.0F);
+		this.foxLeg3.setRotationPoint(-2.5F, 17.0F, -4.0F);
+		this.foxLeg4.setRotationPoint(0.5F, 17.0F, -4.0F);
+		this.foxLeg1.rotateAngleY = 0.0F;
+		this.foxLeg2.rotateAngleY = 0.0F;
+		this.foxLeg3.rotateAngleY = 0.0F;
+		this.foxLeg4.rotateAngleY = 0.0F;
+		this.foxLeg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+		this.foxLeg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
+		this.foxLeg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
+		this.foxLeg4.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+	}
+}
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -1,55 +1,90 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.util.List;
+import java.util.stream.Collectors;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiSelectWorld extends GuiScreen {
 	protected GuiScreen parentScreen;
 	protected String screenTitle = "Select world";
 	private boolean selected = false;
+	private int currentPage;
+	private static final int maxPages = 100 / 5;
+	private File mcDir = Minecraft.getMinecraftDir();
 
 	public GuiSelectWorld(GuiScreen var1) {
 		this.parentScreen = var1;
+		if (var1 instanceof GuiSelectWorld) {
+			this.currentPage = ((GuiSelectWorld) var1).currentPage;
+		}
 	}
 
 	public void initGui() {
-		File var1 = Minecraft.getMinecraftDir();
+		this.controlList.clear();
+		this.initPage();
+		this.initButtons();
+	}
 
+	public void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 100).collect(Collectors.toList());
 		for(int var2 = 0; var2 < 5; ++var2) {
-			NBTTagCompound var3 = World.getLevelData(var1, "World" + (var2 + 1));
+			int var22 = var2 + this.currentPage * 5;
+			NBTTagCompound var3 = World.getLevelData(mcDir, "World" + (var22 + 1));
 			if(var3 == null) {
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
+				this.controlList.add(new GuiButton(var22, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
 			} else {
-				String var4 = "World " + (var2 + 1);
+				String var4 = var3.getString("DisplayName");
+				if(var4.isEmpty()) {
+					var4 = "World " + (var22 + 1);
+				}
 				long var5 = var3.getLong("SizeOnDisk");
 				var4 = var4 + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
+				this.controlList.add(new GuiButton(var22, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
 			}
 		}
-
-		this.initButtons();
 	}
 
 	protected String getSaveName(int var1) {
 		File var2 = Minecraft.getMinecraftDir();
-		return World.getLevelData(var2, "World" + var1) != null ? "World" + var1 : null;
+		NBTTagCompound data = World.getLevelData(var2, "World" + var1);
+		if (data == null) {
+			return null;
+		}
+
+		String displayName = data.getString("DisplayName");
+		if (displayName.isEmpty()) {
+			return "World" + var1;
+		}
+		return displayName;
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 132, 100, 20, "Delete world..."));
+		this.controlList.add(new GuiButton(101, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(102, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(103, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		this.controlList.add(new GuiButton(104, this.width / 2, this.height / 6 + 132, 100, 20, "Create temporary"));
 	}
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
-			if(var1.id < 5) {
+			if(var1.id < 100) {
 				this.selectWorld(var1.id + 1);
-			} else if(var1.id == 5) {
+			} else if(var1.id == 100) {
 				this.mc.displayGuiScreen(new GuiDeleteWorld(this));
-			} else if(var1.id == 6) {
+			} else if(var1.id == 101) {
 				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(var1.id == 102 && this.currentPage > 0) {
+				this.currentPage--;
+				this.initPage();
+			} else if(var1.id == 103 && this.currentPage < maxPages - 1) {
+				this.currentPage++;
+				this.initPage();
+			} else if(var1.id == 104) {
+				this.selectWorld(-1);
 			}
-
 		}
 	}
 
@@ -57,6 +92,13 @@
 		this.mc.displayGuiScreen((GuiScreen)null);
 		if(!this.selected) {
 			this.selected = true;
+
+			NBTTagCompound var3 = World.getLevelData(Minecraft.getMinecraftDir(), "World" + var1);
+			if(var3 == null) {
+				this.mc.displayGuiScreen(new GuiCreateWorld(this, var1));
+				return;
+			}
+
 			this.mc.playerController = new PlayerControllerSP(this.mc);
 			this.mc.startWorld("World" + var1);
 			this.mc.displayGuiScreen((GuiScreen)null);
@@ -66,6 +108,7 @@
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, (this.currentPage + 1) + " / " + maxPages, this.width / 2, this.height - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- /dev/null
+++ net/minecraft/src/IAnimal.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public interface IAnimal {
+}
--- net/minecraft/src/GuiChest.java
+++ net/minecraft/src/GuiChest.java
@@ -38,8 +38,8 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, 4210752);
-		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
--- net/minecraft/src/Packet15Place.java
+++ net/minecraft/src/Packet15Place.java
@@ -5,37 +5,54 @@
 import java.io.IOException;
 
 public class Packet15Place extends Packet {
-	public int id;
 	public int xPosition;
 	public int yPosition;
 	public int zPosition;
 	public int direction;
+	public ItemStack itemStack;
 
 	public Packet15Place() {
 	}
 
-	public Packet15Place(int var1, int var2, int var3, int var4, int var5) {
-		this.id = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.direction = var5;
+	public Packet15Place(int var1, int var2, int var3, int var4, ItemStack var5) {
+		this.xPosition = var1;
+		this.yPosition = var2;
+		this.zPosition = var3;
+		this.direction = var4;
+		this.itemStack = var5;
 	}
 
 	public void readPacketData(DataInputStream var1) throws IOException {
-		this.id = var1.readShort();
 		this.xPosition = var1.readInt();
 		this.yPosition = var1.read();
 		this.zPosition = var1.readInt();
 		this.direction = var1.read();
+		short var2 = var1.readShort();
+		if(var2 >= 0) {
+			byte var3 = var1.readByte();
+			short var4 = var1.readShort();
+			byte var5 = var1.readByte();
+			this.itemStack = new ItemStack(var2, var3, var4).withMetadata(var5);
+		} else {
+			this.itemStack = null;
+		}
+
 	}
 
 	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.id);
 		var1.writeInt(this.xPosition);
 		var1.write(this.yPosition);
 		var1.writeInt(this.zPosition);
 		var1.write(this.direction);
+		if(this.itemStack == null) {
+			var1.writeShort(-1);
+		} else {
+			var1.writeShort(this.itemStack.itemID);
+			var1.writeByte(this.itemStack.stackSize);
+			var1.writeShort(this.itemStack.itemDmg);
+			var1.writeByte(this.itemStack.itemMetadata);
+		}
+
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -43,6 +60,6 @@
 	}
 
 	public int getPacketSize() {
-		return 12;
+		return 15;
 	}
 }
--- net/minecraft/src/ICommandListener.java
+++ /dev/null
@@ -1,7 +1,0 @@
-package net.minecraft.src;
-
-public interface ICommandListener {
-	void addHelpCommandMessage(String var1);
-
-	String getUsername();
-}
--- net/minecraft/src/PlayerController.java
+++ net/minecraft/src/PlayerController.java
@@ -59,10 +59,36 @@
 
 	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
 		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
+		int oldStackSize = var3 != null ? var3.stackSize : 0;
+		boolean result = var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true
+		: (var3 == null ? false
+		: var3.useItem(var1, var2, var4, var5, var6, var7));
+		if (var1.creative && var3 != null) {
+			var3.stackSize = oldStackSize;
+		}
+		return result;
+	}
+
+	public void attackEntity(EntityPlayer var1, Entity var2) {
+		var1.attackEntity(var2);
 	}
 
 	public EntityPlayer createPlayer(World var1) {
 		return new EntityPlayerSP(this.mc, var1, this.mc.session);
+	}
+
+	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
+		int var4 = var3.stackSize;
+		ItemStack var5 = var3.useItemRightClick(var2, var1);
+		if(var5 != var3 || var5 != null && var5.stackSize != var4) {
+			var1.inventory.mainInventory[var1.inventory.currentItem] = var5;
+			if(var5.stackSize == 0) {
+				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+			}
+
+			return true;
+		} else {
+			return false;
+		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/CreateWorldInfo.java
@@ -1,0 +1,28 @@
+package io.github.bluestaggo.mcdiverge;
+
+public class CreateWorldInfo {
+	public String name;
+	public long seed;
+	public WorldType worldType;
+	public boolean creative;
+
+	public CreateWorldInfo withName(String name) {
+		this.name = name;
+		return this;
+	}
+
+	public CreateWorldInfo withSeed(long seed) {
+		this.seed = seed;
+		return this;
+	}
+
+	public CreateWorldInfo withWorldType(WorldType worldType) {
+		this.worldType = worldType;
+		return this;
+	}
+
+	public CreateWorldInfo withCreative(boolean creative) {
+		this.creative = creative;
+		return this;
+	}
+}
--- net/minecraft/src/IAnimals.java
+++ /dev/null
@@ -1,4 +1,0 @@
-package net.minecraft.src;
-
-public interface IAnimals {
-}
--- net/minecraft/src/NetworkListenThread.java
+++ net/minecraft/src/NetworkListenThread.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class NetworkListenThread {
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -1,17 +1,26 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemSword extends Item {
-	private int weaponDamage;
+	private final int weaponDamage;
+	private final boolean silk;
 
 	public ItemSword(int var1, int var2) {
 		super(var1);
+		int strengthAbs = Math.abs(var2);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
-		if(var2 == 3) {
+		this.maxDamage = 32 << strengthAbs;
+		if(strengthAbs == 3 || var2 < 0) {
 			this.maxDamage *= 4;
 		}
 
-		this.weaponDamage = 4 + var2 * 2;
+		this.weaponDamage = 4 + strengthAbs * 2;
+		this.silk = var2 < 0;
+	}
+
+	public boolean isSilk() {
+		return this.silk;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
@@ -32,5 +41,14 @@
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				this.weaponDamage + " attack damage",
+				ItemTooltip.INFO_COL,
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/Packet17AddToInventory.java
+++ net/minecraft/src/Packet17AddToInventory.java
@@ -8,6 +8,7 @@
 	public int itemID;
 	public int count;
 	public int itemDamage;
+	public int itemMetadata;
 
 	public Packet17AddToInventory() {
 	}
@@ -16,12 +17,14 @@
 		this.itemID = var1.readShort();
 		this.count = var1.readByte();
 		this.itemDamage = var1.readShort();
+		this.itemMetadata = var1.readByte();
 	}
 
 	public void writePacket(DataOutputStream var1) throws IOException {
 		var1.writeShort(this.itemID);
 		var1.writeByte(this.count);
 		var1.writeShort(this.itemDamage);
+		var1.writeByte(this.itemMetadata);
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -29,16 +32,13 @@
 	}
 
 	public int getPacketSize() {
-		return 5;
+		return 6;
 	}
 
 	public Packet17AddToInventory(ItemStack var1, int var2) {
 		this.itemID = var1.itemID;
 		this.count = var2;
 		this.itemDamage = var1.itemDmg;
-		if(var2 == 0) {
-			boolean var3 = true;
-		}
-
+		this.itemMetadata = var1.itemMetadata;
 	}
 }
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -84,7 +84,7 @@
 
 	}
 
-	public void setEntityDead() {
+	public void onDeath(Entity var0) {
 		if(this.size > 1 && this.health == 0) {
 			for(int var1 = 0; var1 < 4; ++var1) {
 				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.size / 4.0F;
@@ -96,7 +96,7 @@
 			}
 		}
 
-		super.setEntityDead();
+		super.onDeath(var0);
 	}
 
 	public void onCollideWithPlayer(EntityPlayer var1) {
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -19,7 +20,7 @@
 		GL11.glPushMatrix();
 		if(var1.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var1.itemID].getRenderType())) {
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[var1.itemID]);
+			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[var1.itemID], Math.max(var1.itemMetadata, 0));
 		} else {
 			if(var1.itemID < 256) {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
@@ -131,7 +132,8 @@
 		GL11.glRotatef(var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var1, 0.0F, 1.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
-		float var4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ));
+		float var4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ))
+				   * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		GL11.glColor4f(var4, var4, var4, 1.0F);
 		float var5;
 		float var6;
@@ -183,7 +185,7 @@
 			RenderPlayer var10 = (RenderPlayer)var9;
 			var8 = 1.0F;
 			GL11.glScalef(var8, var8, var8);
-			var10.drawFirstPersonHand();
+			var10.drawFirstPersonHand(var3.blueStaggo);
 			GL11.glPopMatrix();
 		}
 
@@ -232,7 +234,7 @@
 		float var7 = -1.0F;
 		float var8 = 1.0F;
 		float var9 = -0.5F;
-		float var10 = 1.0F / 128.0F;
+		float var10 = 0.0078125F;
 		float var11 = (float)(var2 % 16) / 256.0F - var10;
 		float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
 		float var13 = (float)(var2 / 16) / 256.0F - var10;
@@ -249,7 +251,7 @@
 
 	private void renderWarpedTextureOverlay(float var1) {
 		Tessellator var2 = Tessellator.instance;
-		float var3 = this.mc.thePlayer.getBrightness(var1);
+		float var3 = this.mc.thePlayer.getBrightness(var1) * (1 - RenderGlobal.globalBrightness) + RenderGlobal.globalBrightness;
 		GL11.glColor4f(var3, var3, var3, 0.5F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -20,6 +20,13 @@
 		}
 	}
 
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? 0
+				: side == 0 ? 2
+				: 3;
+	}
+
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && var1.getBlockMaterial(var2, var3 + 1, var4).getCanBlockGrass()) {
 			if(var5.nextInt(4) != 0) {
@@ -31,7 +38,10 @@
 			int var6 = var2 + var5.nextInt(3) - 1;
 			int var7 = var3 + var5.nextInt(5) - 3;
 			int var8 = var4 + var5.nextInt(3) - 1;
-			if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && !var1.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
+			if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID
+					&& var1.getBlockMetadata(var6, var7, var8) != 1
+					&& var1.getBlockLightValue(var6, var7 + 1, var8) >= 4
+					&& !var1.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
 				var1.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
 			}
 		}
--- net/minecraft/src/RenderFallingSand.java
+++ net/minecraft/src/RenderFallingSand.java
@@ -16,7 +16,7 @@
 		Block var10 = Block.blocksList[var1.blockID];
 		World var11 = var1.getWorld();
 		GL11.glDisable(GL11.GL_LIGHTING);
-		this.sandRenderBlocks.renderBlockFallingSand(var10, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
+		this.sandRenderBlocks.renderBlockFallingSand(var10, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ), var1.blockMetadata);
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glPopMatrix();
 	}
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/GuiCreative.java
@@ -1,0 +1,198 @@
+package io.github.bluestaggo.mcdiverge;
+
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.src.GuiButton;
+import net.minecraft.src.GuiContainer;
+import net.minecraft.src.InventoryPlayer;
+import net.minecraft.src.SlotInventory;
+import net.minecraft.client.Minecraft;
+
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.Map;
+
+public class GuiCreative extends GuiContainer {
+	private final InventoryPlayer inventoryPlayer;
+	private InventoryReadonly inventory;
+	private int row = 0;
+	private int maxRow;
+	private GuiSliderGeneric rowSlider;
+
+	public GuiCreative(InventoryPlayer inventoryPlayer, Minecraft minecraft) {
+		this.xSize = 176;
+		this.ySize = 190;
+		this.inventoryPlayer = inventoryPlayer;
+		this.mc = minecraft;
+
+		this.inventory = this.mc.creativeDebugEnabled
+				? InventoryReadonly.generateCreativeInventory(true)
+				: InventoryReadonly.getCreativeInventory();
+		this.maxRow = this.inventory.getSizeInventory() / 8 - 7;
+	}
+
+	public void initGui() {
+		this.rowSlider = null;
+		this.controlList.clear();
+		this.setupItems();
+		this.setupControls();
+
+		if (this.mc.options.creativeDebug) {
+			this.controlList.add(new GuiButton(100, this.width - 150, this.height - 20, 150, 20,
+											   (this.mc.creativeDebugEnabled ? "Disable " : "Enable ") + "Debug ;)"));
+		}
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float var1) {
+		int bg = this.mc.renderEngine.getTexture("/gui/creative.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(bg);
+		int posX = (this.width - this.xSize) / 2;
+		int posY = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/creative.png"));
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		for (int i = 1; i < 9; i++) {
+			if (this.inventory.getLabel(i + row) != null) {
+				this.drawTexturedModalRect(posX + 7, posY + i * 18 - 1, 0, 238, 144, 18);
+			}
+		}
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString(this.mc.creativeDebugEnabled ? "Cheats" : "Creative", 8, 6, this.mc.options.getTextColor());
+		for (int i = 1; i < 9; i++) {
+			String label = this.inventory.getLabel(i + row);
+			if (label != null) {
+				this.fontRenderer.drawStringWithShadow(label, 12, i * 18 + 4, 0xFFFFFF);
+			}
+		}
+	}
+
+	private void setupItems() {
+		this.inventory.pickOne = this.mc.thePlayer.creative;
+
+		this.inventorySlots.clear();
+		for (int i = this.row * 8; i < 64 + this.row * 8; i++) {
+			this.inventorySlots.add(new SlotInventory(this, this.inventory, i, ((i - this.row * 8) % 8) * 18 + 8,
+					((i - this.row * 8) / 8) * 18 + 18));
+		}
+		for (int i = 0; i < 9; i++) {
+			this.inventorySlots.add(i, new SlotInventory(this, this.inventoryPlayer, i, (i % 9) * 18 + 8, 166));
+		}
+	}
+
+	private void setupControls() {
+		int posX = (this.width - this.xSize) / 2 + 151;
+		int posY = (this.height - this.ySize) / 2 + 17;
+
+//		this.controlList.add(new GuiButton(0, posX, posY, 18, 18, "^4"));
+//		this.controlList.add(new GuiButton(1, posX, posY + 18, 18, 18, "^1"));
+//		this.controlList.add(new GuiButton(2, posX, posY + 36, 18, 18, "v1"));
+//		this.controlList.add(new GuiButton(3, posX, posY + 54, 18, 18, "v4"));
+
+		if (this.mc.creativeDebugEnabled) {
+			this.controlList.add(new GuiButton(101, posX + 18, posY + 81, 18, 18, "FB"));
+			this.controlList.add(new GuiButton(102, posX + 18, posY + 99, 18, 18, "NC"));
+			this.controlList.add(new GuiButton(103, posX + 38, posY + 81, 64, 18, "Day"));
+			this.controlList.add(new GuiButton(104, posX + 38, posY + 99, 64, 18, "Night"));
+		}
+
+//		this.rowSlider = new GuiSliderGeneric(4, (this.width - this.xSize) / 2 + 97, (this.height - this.ySize) / 2 + 4, 72, 12, "Page", 0.0F, this.maxRow);
+		this.rowSlider = new GuiSliderGeneric(4, (this.width - this.xSize) / 2 + 151, (this.height - this.ySize) / 2 + 17, 18, 144, "Page", 0.0F, this.maxRow);
+		this.rowSlider.round = true;
+		this.rowSlider.vertical = true;
+		this.rowSlider.displayString = this.rowSlider.getDisplayString();
+		this.controlList.add(this.rowSlider);
+
+		if (this.inventory.labels != null) {
+			int y = 8;
+			for (Iterator<Map.Entry<Integer, String>> it = this.inventory.labels
+					.entrySet()
+					.stream()
+					.sorted(Comparator.comparingInt(Map.Entry::getKey))
+					.iterator(); it.hasNext(); ) {
+				Map.Entry<Integer, String> label = it.next();
+				this.controlList.add(new GuiTransparentButton(200 + label.getKey(), 8, y, (this.width - this.xSize) / 2, 12, label.getValue()));
+				y += 12;
+			}
+		}
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		switch (var1.id) {
+			case 0:
+				this.row = Math.max(this.row - 4, 0);
+				break;
+
+			case 1:
+				this.row = Math.max(this.row - 1, 0);
+				break;
+
+			case 2:
+				this.row = Math.min(this.row + 1, this.maxRow);
+				break;
+
+			case 3:
+				this.row = Math.min(this.row + 4, this.maxRow);
+				break;
+
+			case 100:
+				this.mc.creativeDebugEnabled = !this.mc.creativeDebugEnabled;
+
+				this.controlList.clear();
+				this.controlList.add(var1);
+				var1.displayString = (this.mc.creativeDebugEnabled ? "Disable " : "Enable ") + "Debug ;)";
+
+				this.inventory = this.mc.creativeDebugEnabled
+						? InventoryReadonly.generateCreativeInventory(true)
+						: InventoryReadonly.getCreativeInventory();
+				this.maxRow = this.inventory.getSizeInventory() / 8 - 7;
+				this.row = 0;
+
+				this.setupItems();
+				this.setupControls();
+				break;
+
+			case 101:
+				this.mc.renderGlobal.toggleFullbright();
+				break;
+
+			case 102:
+				this.mc.thePlayer.noClip = !this.mc.thePlayer.noClip;
+				break;
+
+			case 103:
+				this.mc.theWorld.worldTime = 1000;
+				break;
+
+			case 104:
+				this.mc.theWorld.worldTime = 14000;
+				break;
+		}
+
+		if (var1.id >= 200) {
+			this.row = var1.id - 201;
+			if (this.row > this.maxRow) {
+				this.row = this.maxRow;
+			}
+		}
+
+		setupItems();
+		if (var1.id != 4) {
+			this.rowSlider.sliderValue = row / rowSlider.multiplier;
+			this.rowSlider.displayString = this.rowSlider.getDisplayString();
+		}
+	}
+
+	public void updateScreen() {
+		if (this.rowSlider.dragging) {
+			int oldRow = this.row;
+			this.row = (int) this.rowSlider.getValue();
+			if (this.row != oldRow) {
+				setupItems();
+			}
+		}
+	}
+}
--- net/minecraft/src/CraftingRecipe.java
+++ net/minecraft/src/CraftingRecipe.java
@@ -4,25 +4,27 @@
 	private int width;
 	private int height;
 	private int[] ingredientMap;
+	private int[] metadataMap;
 	private ItemStack resultStack;
 	public final int resultId;
 
-	public CraftingRecipe(int var1, int var2, int[] var3, ItemStack var4) {
-		this.resultId = var4.itemID;
+	public CraftingRecipe(int var1, int var2, int[] var3, int[] var4, ItemStack var5) {
+		this.resultId = var5.itemID;
 		this.width = var1;
 		this.height = var2;
 		this.ingredientMap = var3;
-		this.resultStack = var4;
+		this.metadataMap = var4;
+		this.resultStack = var5;
 	}
 
-	public boolean matches(int[] var1) {
+	public boolean matches(int[] var1, int[] metadata) {
 		for(int var2 = 0; var2 <= 3 - this.width; ++var2) {
 			for(int var3 = 0; var3 <= 3 - this.height; ++var3) {
-				if(this.checkMatch(var1, var2, var3, true)) {
+				if(this.checkMatch(var1, var2, var3, metadata, true)) {
 					return true;
 				}
 
-				if(this.checkMatch(var1, var2, var3, false)) {
+				if(this.checkMatch(var1, var2, var3, metadata, false)) {
 					return true;
 				}
 			}
@@ -31,21 +33,24 @@
 		return false;
 	}
 
-	private boolean checkMatch(int[] var1, int var2, int var3, boolean var4) {
+	private boolean checkMatch(int[] var1, int var2, int var3, int[] metaMap, boolean var4) {
 		for(int var5 = 0; var5 < 3; ++var5) {
 			for(int var6 = 0; var6 < 3; ++var6) {
 				int var7 = var5 - var2;
 				int var8 = var6 - var3;
 				int var9 = -1;
+				int metadata = -1;
 				if(var7 >= 0 && var8 >= 0 && var7 < this.width && var8 < this.height) {
 					if(var4) {
 						var9 = this.ingredientMap[this.width - var7 - 1 + var8 * this.width];
+						metadata = this.metadataMap[this.width - var7 - 1 + var8 * this.width];
 					} else {
 						var9 = this.ingredientMap[var7 + var8 * this.width];
+						metadata = this.metadataMap[var7 + var8 * this.width];
 					}
 				}
 
-				if(var1[var5 + var6 * 3] != var9) {
+				if(var1[var5 + var6 * 3] != var9 || (metadata >= 0 && metaMap[var5 + var6 * 3] != metadata)) {
 					return false;
 				}
 			}
@@ -54,11 +59,25 @@
 		return true;
 	}
 
-	public ItemStack getCraftingResult(int[] var1) {
-		return new ItemStack(this.resultStack.itemID, this.resultStack.stackSize);
+	public ItemStack getCraftingResult() {
+		return new ItemStack(this.resultStack.itemID, this.resultStack.stackSize).withMetadata(this.resultStack.itemMetadata);
 	}
 
 	public int getRecipeSize() {
 		return this.width * this.height;
+	}
+
+	public ItemStack[] asItemStacks() {
+		ItemStack[] items = new ItemStack[10];
+		for (int y = 0; y < this.height; y++) {
+			for (int x = 0; x < this.width; x++) {
+				int item = this.ingredientMap[x + y * this.width];
+				if (item > 0) {
+					items[x + y * 3] = new ItemStack(item, 1).withMetadata(this.metadataMap[x + y * this.width]);
+				}
+			}
+		}
+		items[9] = this.resultStack;
+		return items;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/TileEntityRefabricatorRender.java
@@ -1,0 +1,19 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+import org.lwjgl.opengl.GL11;
+
+public class TileEntityRefabricatorRender extends TileEntitySpecialRenderer {
+	public void renderTileEntityRefabricatorAt(TileEntityRefabricator tileEntity1, double var2, double var4, double var6, float var8) {
+		EntityItem displayItem = tileEntity1.getDisplayItem();
+		if (displayItem != null && displayItem.item != null) {
+			float brightness = tileEntity1.worldObj.getBrightness(tileEntity1.xCoord, tileEntity1.yCoord + 1, tileEntity1.zCoord);
+			GL11.glColor3f(brightness, brightness, brightness);
+			RenderManager.instance.renderEntityWithPosYaw(displayItem, var2 + 0.5D, var4 + 1.2D, var6 + 0.5D, 0.0F, 0.0F);
+		}
+	}
+
+	public void renderTileEntityAt(TileEntity tileEntity1, double var2, double var4, double var6, float var8) {
+		this.renderTileEntityRefabricatorAt((TileEntityRefabricator) tileEntity1, var2, var4, var6, var8);
+	}
+}
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -1,47 +1,85 @@
 package net.minecraft.src;
 
+import java.util.List;
+import java.util.stream.Collectors;
+
 public class GuiControls extends GuiScreen {
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Controls";
 	private GameSettings options;
 	private int buttonId = -1;
+	private final int maxPages;
+	private int currentPage;
 
 	public GuiControls(GuiScreen var1, GameSettings var2) {
 		this.parentScreen = var1;
 		this.options = var2;
+		this.maxPages = Math.floorDiv(this.options.keyBindings.length, 10) + 1;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.keyBindings.length; ++var1) {
-			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBindingDescription(var1)));
-		}
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 132, "Done"));
+		this.controlList.add(new GuiButton(300, this.width / 2 - 140, this.height / 6 + 132, 20, 20, "<"));
+		this.controlList.add(new GuiButton(301, this.width / 2 + 120, this.height / 6 + 132, 20, 20, ">"));
+		initPage();
+	}
 
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
+	public void initPage() {
+		this.controlList = (List) this.controlList.stream().filter(button -> ((GuiButton) button).id >= 200).collect(Collectors.toList());
+		for(int var1 = 0; var1 < Math.min(this.options.keyBindings.length - currentPage * 10, 10); ++var1) {
+			int var11 = var1 + currentPage * 10;
+			this.controlList.add(new GuiSmallButton(var11, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBindingDescription(var11)));
+		}
 	}
 
 	protected void actionPerformed(GuiButton var1) {
-		for(int var2 = 0; var2 < this.options.keyBindings.length; ++var2) {
-			((GuiButton)this.controlList.get(var2)).displayString = this.options.getKeyBindingDescription(var2);
-		}
-
-		if(var1.id == 200) {
-			this.mc.displayGuiScreen(this.parentScreen);
-		} else {
+		if(var1.id < 200) {
 			this.buttonId = var1.id;
 			var1.displayString = "> " + this.options.getKeyBindingDescription(var1.id) + " <";
 		}
 
+		if(var1.id == 200) {
+			this.mc.displayGuiScreen(this.parentScreen);
+		}
+
+		if(var1.id == 300) {
+			this.currentPage--;
+			if (this.currentPage < 0) {
+				this.currentPage = maxPages - 1;
+			}
+			this.initPage();
+		}
+
+		if(var1.id == 301) {
+			this.currentPage++;
+			if (this.currentPage >= maxPages) {
+				this.currentPage = 0;
+			}
+			this.initPage();
+		}
+
+		for (int i = currentPage * 10; i < Math.min(currentPage * 10 + 1, this.mc.options.keyBindings.length); i++) {
+			int finalI = i;
+			((GuiButton) this.controlList
+					.stream()
+					.filter(o -> o instanceof GuiButton && ((GuiButton) o).id == finalI)
+					.findAny()
+					.get()).displayString = this.options.getKeyBindingDescription(i);
+		}
 	}
 
 	protected void keyTyped(char var1, int var2) {
 		if(this.buttonId >= 0) {
 			this.options.setKeyBinding(this.buttonId, var2);
-			((GuiButton)this.controlList.get(this.buttonId)).displayString = this.options.getKeyBindingDescription(this.buttonId);
+			((GuiButton)this.controlList
+					.stream()
+					.filter(o -> o instanceof GuiButton && ((GuiButton) o).id == this.buttonId)
+					.findAny()
+					.get()).displayString = this.options.getKeyBindingDescription(this.buttonId);
 			this.buttonId = -1;
 		} else {
 			super.keyTyped(var1, var2);
 		}
-
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -3,10 +3,14 @@
 import java.util.Random;
 
 public class BlockFurnace extends BlockContainer {
-	private final boolean isActive;
+	protected final boolean isActive;
 
 	protected BlockFurnace(int var1, boolean var2) {
-		super(var1, Material.rock);
+		this(var1, var2, Material.rock);
+	}
+
+	protected BlockFurnace(int var1, boolean var2, Material var3) {
+		super(var1, var3);
 		this.isActive = var2;
 		this.blockIndexInTexture = 45;
 	}
@@ -91,7 +95,7 @@
 		return true;
 	}
 
-	public static void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
+	public void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockMetadata(var2, var3, var4);
 		TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
 		if(var0) {
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.util.Random;
+
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
@@ -9,15 +10,25 @@
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
 
 public class SoundManager {
+	public enum MusicType {
+		NORMAL,
+		CAVE,
+		TITLE
+	}
+
 	private static SoundSystem sndSystem;
-	private SoundPool soundPoolSounds = new SoundPool();
-	private SoundPool soundPoolStreaming = new SoundPool();
-	private SoundPool soundPoolMusic = new SoundPool();
+	private final SoundPool soundPoolSounds = new SoundPool();
+	private final SoundPool soundPoolStreaming = new SoundPool();
+	private final SoundPool soundPoolMusic = new SoundPool();
+	private final SoundPool soundPoolCaveMusic = new SoundPool();
+	private final SoundPool soundPoolTitleMusic = new SoundPool();
 	private int playedSoundsCount = 0;
 	private GameSettings options;
 	private static boolean loaded = false;
 	private Random rand = new Random();
-	private int ticksBeforeMusic = this.rand.nextInt(12000);
+	private int ticksBeforeMusic = 0;
+	private int fadeOutTicks = 0;
+	private MusicType musicType = MusicType.TITLE;
 
 	public void loadSoundSettings(GameSettings var1) {
 		this.soundPoolStreaming.isGetRandomSound = false;
@@ -28,6 +39,10 @@
 
 	}
 
+	public MusicType getMusicType() {
+		return this.musicType;
+	}
+
 	private void tryToSetLibraryAndCodecs() {
 		try {
 			float var1 = this.options.soundVolume;
@@ -83,24 +98,84 @@
 		this.soundPoolMusic.addSound(var1, var2);
 	}
 
-	public void playRandomMusicIfReady() {
+	public void addCaveMusic(String var1, File var2) {
+		this.soundPoolCaveMusic.addSound(var1, var2);
+	}
+
+	public void addTitleMusic(String var1, File var2) {
+		this.soundPoolTitleMusic.addSound(var1, var2);
+	}
+
+	public void tickMusic() {
 		if(loaded && this.options.musicVolume != 0.0F) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
 				if(this.ticksBeforeMusic > 0) {
 					--this.ticksBeforeMusic;
+				}
+			}
+			if(this.fadeOutTicks > 0) {
+				--this.fadeOutTicks;
+			}
+		}
+	}
+
+	private void playRandomMusicFromPool(SoundPool soundPool, MusicType type) {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
+				if(this.ticksBeforeMusic > 0) {
 					return;
 				}
 
-				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
+				SoundPoolEntry var1 = soundPool.getRandomSound();
 				if(var1 != null) {
-					this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
+					this.ticksBeforeMusic = (int) ((this.rand.nextInt(12000) + 12000) * this.options.musicDelay);
 					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
 					sndSystem.setVolume("BgMusic", this.options.musicVolume);
 					sndSystem.play("BgMusic");
+					this.musicType = type;
 				}
 			}
-
-		}
+		}
+	}
+
+	public void playRandomMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolMusic, MusicType.NORMAL);
+	}
+
+	public void playRandomCaveMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolCaveMusic, MusicType.CAVE);
+	}
+
+	public void playRandomTitleMusicIfReady() {
+		playRandomMusicFromPool(this.soundPoolTitleMusic, MusicType.TITLE);
+		this.ticksBeforeMusic = 0;
+	}
+
+	public void fadeOutBackgroundMusic() {
+		if (!loaded || fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+			return;
+		}
+		sndSystem.fadeOut("BgMusic", null, 2500);
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 60;
+	}
+
+	public void fadeOutTitleMusic() {
+		if (!loaded || fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType != MusicType.TITLE) {
+			return;
+		}
+		sndSystem.fadeOut("BgMusic", null, 2500);
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 60;
+	}
+
+	public void stopBackgroundMusic() {
+		if (!loaded || !sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+			return;
+		}
+		sndSystem.stop("BgMusic");
+		this.ticksBeforeMusic = 0;
+		this.fadeOutTicks = 0;
 	}
 
 	public void setListener(EntityLiving var1, float var2) {
--- net/minecraft/src/GuiFurnace.java
+++ net/minecraft/src/GuiFurnace.java
@@ -3,7 +3,7 @@
 import org.lwjgl.opengl.GL11;
 
 public class GuiFurnace extends GuiContainer {
-	private TileEntityFurnace furnaceInventory;
+	private final TileEntityFurnace furnaceInventory;
 
 	public GuiFurnace(InventoryPlayer var1, TileEntityFurnace var2) {
 		this.furnaceInventory = var2;
@@ -25,8 +25,8 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Furnace", 60, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Furnace", 60, 6, this.mc.options.getTextColor());
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, this.mc.options.getTextColor());
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
--- net/minecraft/src/BlockReed.java
+++ net/minecraft/src/BlockReed.java
@@ -32,7 +32,12 @@
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
+		return var5 == this.blockID ? true
+			: (var5 != Block.grass.blockID && var5 != Block.dirt.blockID && var5 != Block.sand.blockID ? false
+			: (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true
+			: (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true
+			: (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true
+			: var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
--- net/minecraft/src/OSMapIsom.java
+++ /dev/null
@@ -1,28 +1,0 @@
-package net.minecraft.src;
-
-class OSMapIsom {
-	static final int[] osValues = new int[EnumOSIsom.values().length];
-
-	static {
-		try {
-			osValues[EnumOSIsom.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
-		}
-
-		try {
-			osValues[EnumOSIsom.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
-		}
-
-		try {
-			osValues[EnumOSIsom.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
-		}
-
-		try {
-			osValues[EnumOSIsom.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
-		}
-
-	}
-}
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -10,7 +10,6 @@
 		if(this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
-
 	}
 
 	protected void keyTyped(char var1, int var2) {
@@ -21,7 +20,7 @@
 		}
 
 		if(var1.id == 1) {
-			this.mc.respawn();
+			this.mc.thePlayer.respawnPlayer();
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 
@@ -38,7 +37,7 @@
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
 		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Score: " + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 
--- net/minecraft/src/ConsoleLogFormatter.java
+++ net/minecraft/src/ConsoleLogFormatter.java
@@ -12,7 +12,7 @@
 
 	public String format(LogRecord var1) {
 		StringBuilder var2 = new StringBuilder();
-		var2.append(this.dateFormat.format(Long.valueOf(var1.getMillis())));
+		var2.append(this.dateFormat.format(var1.getMillis()));
 		Level var3 = var1.getLevel();
 		if(var3 == Level.FINEST) {
 			var2.append(" [FINEST] ");
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -1,12 +1,15 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public class ItemTool extends Item {
-	private Block[] blocksEffectiveAgainst;
-	private float efficiencyOnProperMaterial = 4.0F;
-	private int damageVsEntity;
+	private final Block[] blocksEffectiveAgainst;
+	protected float efficiencyOnProperMaterial;
+	private final int damageVsEntity;
 	protected int toolMaterial;
+	private final boolean silk;
 
-	public ItemTool(int var1, int var2, int var3, Block[] var4) {
+	public ItemTool(int var1, int var2, int var3, Block[] var4, boolean silk) {
 		super(var1);
 		this.toolMaterial = var3;
 		this.blocksEffectiveAgainst = var4;
@@ -18,6 +21,7 @@
 
 		this.efficiencyOnProperMaterial = (float)((var3 + 1) * 2);
 		this.damageVsEntity = var2 + var3;
+		this.silk = silk;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
@@ -44,5 +48,29 @@
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public boolean isSilk() {
+		return this.silk;
+	}
+
+	public boolean effectiveAgainst(Block block) {
+		for (Block value : this.blocksEffectiveAgainst) {
+			if (value == block) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	public Object[] getDynamicTooltip() {
+		return new Object[] {
+				"x" + this.efficiencyOnProperMaterial + " efficiency",
+				ItemTooltip.INFO_COL,
+				this.damageVsEntity + " attack damage",
+				ItemTooltip.INFO_COL,
+				this.maxDamage + " max durability",
+				ItemTooltip.INFO_COL
+		};
 	}
 }
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -1,9 +1,13 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+import net.minecraft.server.MinecraftServer;
+
 import java.util.List;
 
 public class EntityLiving extends Entity {
 	public int heartsHalvesLife = 20;
+	public int healthRegen = 0;
 	public float unusedRotationPitch2;
 	public float unusedFloat;
 	public float unusedRotationPitch;
@@ -46,14 +50,15 @@
 	private double newPosZ;
 	private double newRotationYaw;
 	private double newRotationPitch;
-	float unusedFloat3 = 0.0F;
+	protected int prevDamage = 0;
 	protected int entityAge = 0;
 	protected float moveStrafing;
 	protected float moveForward;
 	protected float randomYawVelocity;
 	protected boolean isJumping = false;
 	protected float defaultPitch = 0.0F;
-	protected float moveSpeed = 0.7F;
+	public float moveSpeed = 0.7F;
+	public float runSpeed = 1.4F;
 	private Entity currentTarget;
 	private int numTicksToChaseTarget = 0;
 
@@ -294,41 +299,48 @@
 	}
 
 	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(this.worldObj.multiplayerWorld) {
-			var2 = 0;
+		if(!this.worldObj.canDoClientAction()) {
+			return false;
 		}
 
 		this.entityAge = 0;
 		if(this.health <= 0) {
 			return false;
 		} else {
+			boolean hurt = true;
+
 			this.limbYaw = 1.5F;
 			if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
-				if(this.prevHealth - var2 >= this.health) {
+				if(var2 <= this.prevDamage) {
 					return false;
 				}
 
-				this.health = this.prevHealth - var2;
+				this.damageEntity(var2 - this.prevDamage);
+				this.prevDamage = var2;
+				hurt = false;
 			} else {
 				this.prevHealth = this.health;
 				this.heartsLife = this.heartsHalvesLife;
-				this.health -= var2;
 				this.hurtTime = this.maxHurtTime = 10;
+				this.damageEntity(var2);
 			}
 
 			this.attackedAtYaw = 0.0F;
-			if(var1 != null) {
-				double var3 = var1.posX - this.posX;
-
-				double var5;
-				for(var5 = var1.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
-					var3 = (Math.random() - Math.random()) * 0.01D;
+			if(hurt) {
+				this.worldObj.sendTrackedEntityStatusUpdatePacket(this, (byte) 2);
+				if (var1 != null) {
+					double var3 = var1.posX - this.posX;
+
+					double var5;
+					for(var5 = var1.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
+						var3 = (Math.random() - Math.random()) * 0.01D;
+					}
+
+					this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - this.rotationYaw;
+					this.knockBack(var1, var2, var3, var5);
+				} else {
+					this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 				}
-
-				this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - this.rotationYaw;
-				this.knockBack(var1, var2, var3, var5);
-			} else {
-				this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 			}
 
 			if(this.health <= 0) {
@@ -358,15 +370,15 @@
 		return "random.hurt";
 	}
 
-	public void knockBack(Entity var1, int var2, double var3, double var5) {
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
+	public void knockBack(Entity var1, int var2, double y, double z) {
+		float var7 = MathHelper.sqrt_double(y * y + z * z);
 		float var8 = 0.4F;
 		this.motionX /= 2.0D;
 		this.motionY /= 2.0D;
 		this.motionZ /= 2.0D;
-		this.motionX -= var3 / (double)var7 * (double)var8;
+		this.motionX -= y / (double)var7 * (double)var8;
 		this.motionY += (double)0.4F;
-		this.motionZ -= var5 / (double)var7 * (double)var8;
+		this.motionZ -= z / (double)var7 * (double)var8;
 		if(this.motionY > (double)0.4F) {
 			this.motionY = (double)0.4F;
 		}
@@ -379,32 +391,46 @@
 		}
 
 		this.dead = true;
-		int var2 = this.getDropItemId();
-		if(var2 > 0) {
-			int var3 = this.rand.nextInt(3);
-
-			for(int var4 = 0; var4 < var3; ++var4) {
-				this.dropItem(var2, 1);
+		int[] items = this.getDropItems();
+
+		if (this.worldObj.canDoClientAction()) {
+			for (int var2 : items) {
+				if(var2 > 0) {
+					int var3 = this.rand.nextInt(3);
+
+					for(int var4 = 0; var4 < var3; ++var4) {
+						this.dropItem(var2, 1);
+					}
+				}
 			}
 		}
 
+		this.worldObj.sendTrackedEntityStatusUpdatePacket(this, (byte) 3);
 	}
 
 	protected int getDropItemId() {
 		return 0;
 	}
 
+	protected int[] getDropItems() {
+		return new int[] { getDropItemId() };
+	}
+
 	protected void fall(float var1) {
+		super.fall(var1);
 		int var2 = (int)Math.ceil((double)(var1 - 3.0F));
 		if(var2 > 0) {
 			this.attackEntityFrom((Entity)null, var2);
 			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
 			if(var3 > 0) {
 				StepSound var4 = Block.blocksList[var3].stepSound;
-				this.worldObj.playSoundAtEntity(this, var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
+				this.worldObj.playSoundAtEntity(this, var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * 0.75F);
 			}
 		}
+	}
 
+	protected void damageEntity(int var1) {
+		this.health -= var1;
 	}
 
 	public void moveEntityWithHeading(float var1, float var2) {
@@ -442,7 +468,7 @@
 			}
 
 			float var9 = 0.16277136F / (var8 * var8 * var8);
-			this.moveFlying(var1, var2, this.onGround ? 0.1F * var9 : 0.02F);
+			this.moveFlying(var1, var2, (this.onGround ? 0.1F : 0.02F) * (this.isRunning() ? this.runSpeed : 1.0F));
 			var8 = 0.91F;
 			if(this.onGround) {
 				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
@@ -491,6 +517,7 @@
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		var1.setShort("Health", (short)this.health);
+		var1.setShort("HealthRegen", (short)this.healthRegen);
 		var1.setShort("HurtTime", (short)this.hurtTime);
 		var1.setShort("DeathTime", (short)this.deathTime);
 		var1.setShort("AttackTime", (short)this.attackTime);
@@ -501,6 +528,7 @@
 		if(!var1.hasKey("Health")) {
 			this.health = 10;
 		}
+		this.healthRegen = var1.getShort("HealthRegen");
 
 		this.hurtTime = var1.getShort("HurtTime");
 		this.deathTime = var1.getShort("DeathTime");
@@ -725,5 +753,22 @@
 		Vec3D var5 = this.getLook(var3);
 		Vec3D var6 = var4.addVector(var5.xCoord * var1, var5.yCoord * var1, var5.zCoord * var1);
 		return this.worldObj.rayTraceBlocks(var4, var6);
+	}
+
+	public void handleHealthUpdate(byte var1) {
+		if(var1 == 2) {
+			this.limbYaw = 1.5F;
+			this.heartsLife = this.heartsHalvesLife;
+			this.hurtTime = this.maxHurtTime = 10;
+			this.attackedAtYaw = 0.0F;
+			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.attackEntityFrom((Entity)null, 0);
+		} else if(var1 == 3) {
+			this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.health = 0;
+			this.onDeath((Entity)null);
+		} else {
+			super.handleHealthUpdate(var1);
+		}
 	}
 }
--- net/minecraft/src/GuiStatsListener.java
+++ net/minecraft/src/GuiStatsListener.java
@@ -10,7 +10,7 @@
 		this.component = var1;
 	}
 
-	public void actionPerformed(ActionEvent var1) {
+	public void actionPerformed(ActionEvent actionEvent) {
 		GuiStatsComponent.update(this.component);
 	}
 }
--- net/minecraft/src/TexturedQuad.java
+++ net/minecraft/src/TexturedQuad.java
@@ -6,20 +6,24 @@
 	private boolean invertNormal;
 
 	public TexturedQuad(PositionTexureVertex[] var1) {
-		this.nVertices = 0;
 		this.invertNormal = false;
 		this.vertexPositions = var1;
 		this.nVertices = var1.length;
 	}
 
 	public TexturedQuad(PositionTexureVertex[] var1, int var2, int var3, int var4, int var5) {
+		this(var1, var2, var3, var4, var5, false);
+	}
+
+	public TexturedQuad(PositionTexureVertex[] var1, int var2, int var3, int var4, int var5, boolean bigTex) {
 		this(var1);
 		float var6 = 0.0015625F;
-		float var7 = 0.003125F;
-		var1[0] = var1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / 32.0F + var7);
-		var1[1] = var1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / 32.0F + var7);
-		var1[2] = var1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / 32.0F - var7);
-		var1[3] = var1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / 32.0F - var7);
+		float var7 = bigTex ? 0.0015625F : 0.003125F;
+		float var8 = bigTex ? 64.0F : 32.0F;
+		var1[0] = var1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / var8 + var7);
+		var1[1] = var1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / var8 + var7);
+		var1[2] = var1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / var8 - var7);
+		var1[3] = var1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / var8 - var7);
 	}
 
 	public void flipFace() {
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -32,7 +32,7 @@
 			}
 		} else {
 			this.currentlyDisplayedText = var1;
-			ScaledResolution var2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			ScaledResolution var2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 			int var3 = var2.getScaledWidth();
 			int var4 = var2.getScaledHeight();
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
@@ -67,7 +67,7 @@
 			long var2 = System.currentTimeMillis();
 			if(var2 - this.systemTime >= 20L) {
 				this.systemTime = var2;
-				ScaledResolution var4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+				ScaledResolution var4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.mc.options.guiScale);
 				int var5 = var4.getScaledWidth();
 				int var6 = var4.getScaledHeight();
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
--- net/minecraft/src/WorldManager.java
+++ net/minecraft/src/WorldManager.java
@@ -33,7 +33,7 @@
 		this.mcServer.configManager.markBlockNeedsUpdate(var1, var2, var3);
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
+	public void playRecord(String var1, int var2, int var3, int var4, String author) {
 	}
 
 	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
--- net/minecraft/src/EnumArt.java
+++ net/minecraft/src/EnumArt.java
@@ -24,7 +24,15 @@
 	Pointer("Pointer", 64, 64, 0, 192),
 	Pigscene("Pigscene", 64, 64, 64, 192),
 	Skeleton("Skeleton", 64, 48, 192, 64),
-	DonkeyKong("DonkeyKong", 64, 48, 192, 112);
+	DonkeyKong("DonkeyKong", 64, 48, 192, 112),
+	SuperbBird("SuperbBird", 32, 32, 160, 128),
+	Arid("Arid", 16, 16, 112, 0),
+	Tropical("Tropical", 32, 16, 160, 32),
+	Maple("Maple", 32, 16, 0, 48),
+	Winter("Winter", 16, 32, 32, 64),
+	PackPNG("PackPNG", 64, 64, 128, 192),
+	LaunchBase("LaunchBase", 32, 16, 32, 48),
+	ChaotixSpecial("ChaotixSpecial", 32, 32, 0, 160);
 
 	public final String title;
 	public final int sizeX;
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -1,9 +1,11 @@
 package net.minecraft.src;
 
 public class RecipesCrafting {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
-		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Block.chest), "###", "# #", "###", '#', Block.planks);
+		craftingManager.addRecipe(new ItemStack(Block.stoneOvenIdle), "###", "# #", "###", '#', Block.cobblestone);
+		craftingManager.addRecipe(new ItemStack(Block.workbench), "##", "##", '#', Block.planks);
+		craftingManager.addRecipe(new ItemStack(Block.blasterIdle), "###", "#X#", "###", '#', Item.ingotIron, 'X', Block.blockRuby);
+		craftingManager.addRecipe(new ItemStack(Block.refabricator), "xxx", "#S#", "#D#", 'x', Item.starDust, '#', Item.ingotGold, 'S', Block.blockSapphire, 'D', Block.blockDiamond);
 	}
 }
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -1,13 +1,39 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.BlockStoneType;
+
 import java.util.Random;
+import java.util.stream.IntStream;
 
 public class BlockStone extends Block {
-	public BlockStone(int var1, int var2) {
+	private final BlockStoneType type;
+
+	public BlockStone(int var1, int var2, BlockStoneType var3) {
 		super(var1, var2, Material.rock);
+		this.type = var3;
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return Block.cobblestone.blockID;
+		return type == BlockStoneType.STONE ? Block.cobblestone.blockID : this.blockID;
+	}
+
+	public int metadataDropped(int var1, Random var2) {
+		return var1;
+	}
+
+	public int[] availableMetadata() {
+		return IntStream.range(0, 4).toArray();
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		if (var2 == 0) {
+			return this.blockIndexInTexture;
+		}
+		if (this.type == BlockStoneType.STONE) return textureXY(8, 5 + var2);
+		if (this.type == BlockStoneType.COBBLESTONE) return textureXY(11, 5 + var2);
+		if (this.type == BlockStoneType.POLISHED) return textureXY(10, 5 + var2);
+		if (this.type == BlockStoneType.BRICK) return textureXY(13, 5 + var2);
+		if (this.type == BlockStoneType.MOSSY) return textureXY(12, 5 + var2);
+		return this.blockIndexInTexture;
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/BlockBlaster.java
@@ -1,0 +1,51 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.Random;
+
+import net.minecraft.src.*;
+
+public class BlockBlaster extends BlockFurnace {
+	public BlockBlaster(int var1, boolean var2) {
+		super(var1, var2, Material.iron);
+		this.blockIndexInTexture = textureXY(14, 2);
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Block.blasterIdle.blockID;
+	}
+
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if (var5 == 1) {
+			return Block.blockSteel.blockIndexInTexture - 16;
+		} else if (var5 == 0) {
+			return Block.blockSteel.blockIndexInTexture + 16;
+		} else {
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			return var5 != var6 ? Block.blockSteel.blockIndexInTexture
+					: (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+		}
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return var1 == 1 ? Block.blockSteel.blockIndexInTexture - 16
+				: (var1 == 0 ? Block.blockSteel.blockIndexInTexture + 16
+						: (var1 == 3 ? this.blockIndexInTexture : Block.blockSteel.blockIndexInTexture));
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityFurnace(50, 2);
+	}
+
+	public void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4);
+		TileEntity tileEntity6 = var1.getBlockTileEntity(var2, var3, var4);
+		if (var0) {
+			var1.setBlockWithNotify(var2, var3, var4, Block.blasterActive.blockID);
+		} else {
+			var1.setBlockWithNotify(var2, var3, var4, Block.blasterIdle.blockID);
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
+		var1.setBlockTileEntity(var2, var3, var4, tileEntity6);
+	}
+}
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -41,9 +41,6 @@
 			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
 			this.loadTexture("/terrain.png");
 			float var27 = 0.25F;
-			if(!Block.blocksList[var10.itemID].renderAsNormalBlock() && var10.itemID != Block.stairSingle.blockID) {
-				var27 = 0.5F;
-			}
 
 			GL11.glScalef(var27, var27, var27);
 
@@ -56,7 +53,7 @@
 					GL11.glTranslatef(var16, var17, var18);
 				}
 
-				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID]);
+				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID], Math.max(var10.itemMetadata, 0));
 				GL11.glPopMatrix();
 			}
 		} else {
@@ -109,14 +106,13 @@
 				var2.bindTexture(var2.getTexture("/terrain.png"));
 				Block var7 = Block.blocksList[var6];
 				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var4 - 2), (float)(var5 + 3), 0.0F);
+				GL11.glTranslatef((float)(var4 - 2), (float)(var5 + 3), -3.0F);
 				GL11.glScalef(10.0F, 10.0F, 10.0F);
-				GL11.glTranslatef(1.0F, 0.5F, 8.0F);
+				GL11.glTranslatef(1.0F, 0.5F, 1.0F);
+				GL11.glScalef(1.0F, 1.0F, -1.0F);
 				GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-				GL11.glScalef(1.0F, 1.0F, 1.0F);
-				this.itemRenderBlocks.renderBlockOnInventory(var7);
+				this.itemRenderBlocks.renderBlockOnInventory(var7, Math.max(var3.itemMetadata, 0));
 				GL11.glPopMatrix();
 			} else if(var3.getIconIndex() >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/FurnaceRecipe.java
@@ -1,0 +1,26 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.ItemStack;
+
+public class FurnaceRecipe {
+	private final ItemStack input, output;
+
+	public FurnaceRecipe(ItemStack input, ItemStack output) {
+		this.input = input;
+		this.output = output;
+	}
+
+	public ItemStack getInput() {
+		return input;
+	}
+
+	public ItemStack getOutput(ItemStack input) {
+		return output.itemMetadata == -1 ? output.copy().withMetadata(input.itemMetadata) : output;
+	}
+
+	public boolean canSmelt(ItemStack input) {
+		return this.input.itemID == input.itemID
+				&& (this.input.itemMetadata == -1
+					|| this.input.itemMetadata == input.itemMetadata);
+	}
+}
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -12,13 +12,25 @@
 	public int fuel;
 	public double pushX;
 	public double pushZ;
-	private static final int[][][] matrix = new int[][][]{{{0, 0, -1}, {0, 0, 1}}, {{-1, 0, 0}, {1, 0, 0}}, {{-1, -1, 0}, {1, 0, 0}}, {{-1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, {-1, 0, 0}}, {{0, 0, -1}, {-1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
+	private static final int[][][] matrix = new int[][][]{
+			{{0, 0, -1}, {0, 0, 1}},
+			{{-1, 0, 0}, {1, 0, 0}},
+			{{-1, -1, 0}, {1, 0, 0}},
+			{{-1, 0, 0}, {1, -1, 0}},
+			{{0, 0, -1}, {0, -1, 1}},
+			{{0, -1, -1}, {0, 0, 1}},
+			{{0, 0, 1}, {1, 0, 0}},
+			{{0, 0, 1}, {-1, 0, 0}},
+			{{0, 0, -1}, {-1, 0, 0}},
+			{{0, 0, -1}, {1, 0, 0}}
+	};
 	private int turnProgress;
 	private double minecartX;
 	private double minecartY;
 	private double minecartZ;
 	private double minecartYaw;
 	private double minecartPitch;
+	private double boost;
 
 	public EntityMinecart(World var1) {
 		super(var1);
@@ -113,7 +125,7 @@
 
 	public void onUpdate() {
 		double var7;
-		if(this.worldObj.multiplayerWorld) {
+		if(!this.worldObj.canDoClientAction()) {
 			if(this.turnProgress > 0) {
 				double var41 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
 				double var42 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
@@ -152,14 +164,14 @@
 			int var1 = MathHelper.floor_double(this.posX);
 			int var2 = MathHelper.floor_double(this.posY);
 			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
+			if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var1, var2 - 1, var3)) {
 				--var2;
 			}
 
 			double var4 = 0.4D;
 			boolean var6 = false;
-			var7 = 1.0D / 128.0D;
-			if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
+			var7 = 2.0D / 256D;
+			if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var1, var2, var3)) {
 				Vec3D var9 = this.getPos(this.posX, this.posY, this.posZ);
 				int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
 				this.posY = (double)var2;
@@ -183,6 +195,18 @@
 					this.motionZ -= var7;
 				}
 
+				if (this.worldObj.getBlockId(var1, var2, var3) == Block.boosterTrack.blockID) {
+					if (boost < 1.0D) {
+						this.playSound("diverge.boost", 0.25F, 1.0F);
+					}
+					boost = 1.0D;
+				} else if (boost > 0.0D) {
+					boost -= 0.1D;
+				}
+
+				this.motionX *= 1.0D + boost;
+				this.motionZ *= 1.0D + boost;
+
 				int[][] var11 = matrix[var10];
 				double var12 = (double)(var11[1][0] - var11[0][0]);
 				double var14 = (double)(var11[1][2] - var11[0][2]);
@@ -245,7 +269,7 @@
 					var34 = var4;
 				}
 
-				this.moveEntity(var32, 0.0D, var34);
+				this.moveEntity(var32 * 1.5D, 0.0D, var34 * 1.5D);
 				if(var11[0][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[0][0] && MathHelper.floor_double(this.posZ) - var3 == var11[0][2]) {
 					this.setPosition(this.posX, this.posY + (double)var11[0][1], this.posZ);
 				} else if(var11[1][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[1][0] && MathHelper.floor_double(this.posZ) - var3 == var11[1][2]) {
@@ -253,9 +277,11 @@
 				}
 
 				if(this.riddenByEntity != null) {
-					this.motionX *= (double)0.997F;
+					if (boost > 0.0D) {
+						this.motionX *= (double)0.997F;
+						this.motionZ *= (double)0.997F;
+					}
 					this.motionY *= 0.0D;
-					this.motionZ *= (double)0.997F;
 				} else {
 					if(this.minecartType == 2) {
 						var36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
@@ -400,11 +426,11 @@
 		int var9 = MathHelper.floor_double(var1);
 		int var10 = MathHelper.floor_double(var3);
 		int var11 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var9, var10 - 1, var11) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var9, var10 - 1, var11)) {
 			--var10;
 		}
 
-		if(this.worldObj.getBlockId(var9, var10, var11) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var9, var10, var11)) {
 			int var12 = this.worldObj.getBlockMetadata(var9, var10, var11);
 			var3 = (double)var10;
 			if(var12 >= 2 && var12 <= 5) {
@@ -435,11 +461,11 @@
 		int var7 = MathHelper.floor_double(var1);
 		int var8 = MathHelper.floor_double(var3);
 		int var9 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var7, var8 - 1, var9)) {
 			--var8;
 		}
 
-		if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
+		if(MinecartTrackLogic.isBlockMinecartTrack(this.worldObj, var7, var8, var9)) {
 			int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
 			var3 = (double)var8;
 			if(var10 >= 2 && var10 <= 5) {
@@ -493,6 +519,7 @@
 			var1.setDouble("PushX", this.pushX);
 			var1.setDouble("PushZ", this.pushZ);
 			var1.setShort("Fuel", (short)this.fuel);
+			var1.setDouble("Boost", this.boost);
 		} else if(this.minecartType == 1) {
 			NBTTagList var2 = new NBTTagList();
 
@@ -516,6 +543,7 @@
 			this.pushX = var1.getDouble("PushX");
 			this.pushZ = var1.getDouble("PushZ");
 			this.fuel = var1.getShort("Fuel");
+			this.boost = var1.getDouble("Boost");
 		} else if(this.minecartType == 1) {
 			NBTTagList var2 = var1.getTagList("Items");
 			this.cargoItems = new ItemStack[this.getSizeInventory()];
@@ -564,13 +592,13 @@
 				if(var1 instanceof EntityMinecart) {
 					double var10 = var1.motionX + this.motionX;
 					double var12 = var1.motionZ + this.motionZ;
-					if(((EntityMinecart)var1).minecartType == 2 && this.minecartType != 2) {
+					if(((EntityMinecart) var1).minecartType == 2 && this.minecartType != 2) {
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
 						this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
 						var1.motionX *= (double)0.7F;
 						var1.motionZ *= (double)0.7F;
-					} else if(((EntityMinecart)var1).minecartType != 2 && this.minecartType == 2) {
+					} else if(((EntityMinecart) var1).minecartType != 2 && this.minecartType == 2) {
 						var1.motionX *= (double)0.2F;
 						var1.motionZ *= (double)0.2F;
 						var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
--- net/minecraft/src/EntityTrackerEntry.java
+++ net/minecraft/src/EntityTrackerEntry.java
@@ -98,7 +98,13 @@
 			EntityPlayerMP var3 = (EntityPlayerMP)var2.next();
 			var3.playerNetServerHandler.sendPacket(var1);
 		}
+	}
 
+	public void sendPacketToTrackedPlayersAndTrackedEntity(Packet var1) {
+		this.sendPacketToTrackedPlayers(var1);
+		if(this.trackedEntity instanceof EntityPlayerMP) {
+			((EntityPlayerMP)this.trackedEntity).playerNetServerHandler.sendPacket(var1);
+		}
 	}
 
 	public void removeFromTrackedPlayers() {
@@ -110,7 +116,7 @@
 			double var2 = var1.posX - (double)(this.encodedPosX / 32);
 			double var4 = var1.posZ - (double)(this.encodedPosZ / 32);
 			if(var2 >= (double)(-this.trackingDistanceThreshold) && var2 <= (double)this.trackingDistanceThreshold && var4 >= (double)(-this.trackingDistanceThreshold) && var4 <= (double)this.trackingDistanceThreshold) {
-				if(!this.trackedPlayers.contains(var1)) {
+				if(!var1.dead && !this.trackedPlayers.contains(var1)) {
 					this.trackedPlayers.add(var1);
 					var1.playerNetServerHandler.sendPacket(this.getSpawnPacket());
 				}
@@ -160,11 +166,18 @@
 
 			if(this.trackedEntity instanceof EntityBoat) {
 				return new Packet23VehicleSpawn(this.trackedEntity, 1);
-			} else if(this.trackedEntity instanceof IAnimals) {
+			} else if(this.trackedEntity instanceof IAnimal) {
 				return new Packet24MobSpawn((EntityLiving)this.trackedEntity);
 			} else {
 				throw new IllegalArgumentException("Don\'t know how to add " + this.trackedEntity.getClass() + "!");
 			}
+		}
+	}
+
+	public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
+		if(this.trackedPlayers.contains(var1)) {
+			this.trackedPlayers.remove(var1);
+			var1.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(this.trackedEntity.entityID));
 		}
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/WorldType.java
@@ -1,0 +1,35 @@
+package io.github.bluestaggo.mcdiverge;
+
+public enum WorldType {
+	NORMAL,
+	CLASSIC,
+	WINTER(0x88e7ff, 0xc0fffc, 0xffffff),
+	ARID(0xfff988, 0xfff8bf, 0xffffff),
+	TROPICAL(0x80ffdb, 0xc2fff9, 0xffffff);
+
+	private final long skyColor;
+	private final long fogColor;
+	private final long cloudColor;
+
+	WorldType() {
+		this(8961023L, 12638463L, 16777215L);
+	}
+
+	WorldType(long skyColor, long fogColor, long cloudColor) {
+		this.skyColor = skyColor;
+		this.fogColor = fogColor;
+		this.cloudColor = cloudColor;
+	}
+
+	public long getSkyColor() {
+		return skyColor;
+	}
+
+	public long getFogColor() {
+		return fogColor;
+	}
+
+	public long getCloudColor() {
+		return cloudColor;
+	}
+}
--- net/minecraft/src/RenderSorter.java
+++ net/minecraft/src/RenderSorter.java
@@ -12,7 +12,11 @@
 	public int doCompare(WorldRenderer var1, WorldRenderer var2) {
 		boolean var3 = var1.isInFrustum;
 		boolean var4 = var2.isInFrustum;
-		return var3 && !var4 ? 1 : (var4 && !var3 ? -1 : (var1.distanceToEntitySquared(this.baseEntity) < var2.distanceToEntitySquared(this.baseEntity) ? 1 : -1));
+		return var3 && !var4
+			? 1
+			: (var4 && !var3
+				? -1
+				: (Float.compare(var2.distanceToEntitySquared(this.baseEntity), var1.distanceToEntitySquared(this.baseEntity))));
 	}
 
 	public int compare(Object var1, Object var2) {
--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -11,32 +11,13 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.ConsoleLogManager;
-import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.EntityTracker;
-import net.minecraft.src.ICommandListener;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.IUpdatePlayerListBox;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.NetworkListenThread;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.Packet4UpdateTime;
-import net.minecraft.src.PropertyManager;
-import net.minecraft.src.ServerCommand;
-import net.minecraft.src.ServerConfigurationManager;
-import net.minecraft.src.ServerGUI;
-import net.minecraft.src.ThreadCommandReader;
-import net.minecraft.src.ThreadServerApplication;
-import net.minecraft.src.ThreadSleepForeverServer;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.WorldManager;
-import net.minecraft.src.WorldServer;
-
-public class MinecraftServer implements ICommandListener, Runnable {
+
+import net.minecraft.src.*;
+
+public class MinecraftServer implements IListenToMyCommands, Runnable {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	public static HashMap playerList = new HashMap();
+	private static MinecraftServer instance;
 	public NetworkListenThread networkServer;
 	public PropertyManager propertyManagerObj;
 	public WorldServer worldMngr;
@@ -52,15 +33,20 @@
 	public boolean onlineMode;
 
 	public MinecraftServer() {
+		instance = this;
 		new ThreadSleepForeverServer(this);
 	}
 
+	public static MinecraftServer getInstance() {
+		return instance;
+	}
+
 	private boolean startServer() throws IOException {
-		ThreadCommandReader var1 = new ThreadCommandReader(this);
-		var1.setDaemon(true);
-		var1.start();
+		ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
+		threadCommandReader1.setDaemon(true);
+		threadCommandReader1.start();
 		ConsoleLogManager.init();
-		logger.info("Starting minecraft server version 0.2.1");
+		logger.info("Starting Minecraft Diverge server version 0.2.1");
 		if(Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
 			logger.warning("**** NOT ENOUGH RAM!");
 			logger.warning("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
@@ -70,19 +56,19 @@
 		this.propertyManagerObj = new PropertyManager(new File("server.properties"));
 		String var2 = this.propertyManagerObj.getStringProperty("server-ip", "");
 		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
-		InetAddress var3 = null;
+		InetAddress inetAddress3 = null;
 		if(var2.length() > 0) {
-			var3 = InetAddress.getByName(var2);
+			inetAddress3 = InetAddress.getByName(var2);
 		}
 
 		int var4 = this.propertyManagerObj.getIntProperty("server-port", 25565);
 		logger.info("Starting Minecraft server on " + (var2.length() == 0 ? "*" : var2) + ":" + var4);
 
 		try {
-			this.networkServer = new NetworkListenThread(this, var3, var4);
-		} catch (IOException var6) {
+			this.networkServer = new NetworkListenThread(this, inetAddress3, var4);
+		} catch (IOException iOException6) {
 			logger.warning("**** FAILED TO BIND TO PORT!");
-			logger.log(Level.WARNING, "The exception was: " + var6.toString());
+			logger.log(Level.WARNING, "The exception was: " + iOException6.toString());
 			logger.warning("Perhaps a server is already running on that port?");
 			return false;
 		}
@@ -103,9 +89,9 @@
 		return true;
 	}
 
-	private void initWorld(String var1) {
+	private void initWorld(String worldName) {
 		logger.info("Preparing start region");
-		this.worldMngr = new WorldServer(new File("."), var1, this.propertyManagerObj.getBooleanProperty("monsters", false));
+		this.worldMngr = new WorldServer(this, new File("."), worldName, this.propertyManagerObj.getBooleanProperty("monsters", true), this.propertyManagerObj.getCreateWorldInfo());
 		this.worldMngr.addWorldAccess(new WorldManager(this));
 		this.worldMngr.difficultySetting = 1;
 		this.configManager.setPlayerManager(this.worldMngr);
@@ -126,10 +112,10 @@
 		this.clearCurrentTask();
 	}
 
-	private void outputPercentRemaining(String var1, int var2) {
-		this.currentTask = var1;
-		this.percentDone = var2;
-		System.out.println(var1 + ": " + var2 + "%");
+	private void outputPercentRemaining(String currentTask, int percent) {
+		this.currentTask = currentTask;
+		this.percentDone = percent;
+		System.out.println(currentTask + ": " + percent + "%");
 	}
 
 	private void clearCurrentTask() {
@@ -168,7 +154,7 @@
 					long var5 = System.currentTimeMillis();
 					long var7 = var5 - var1;
 					if(var7 > 2000L) {
-						logger.warning("Can\'t keep up! Did the system time change, or is the server overloaded?");
+						logger.warning("Can't keep up! Did the system time change, or is the server overloaded?");
 						var7 = 2000L;
 					}
 
@@ -193,22 +179,22 @@
 
 					try {
 						Thread.sleep(10L);
-					} catch (InterruptedException var15) {
-						var15.printStackTrace();
+					} catch (InterruptedException interruptedException15) {
+						interruptedException15.printStackTrace();
 					}
 				}
 			}
-		} catch (Exception var16) {
-			var16.printStackTrace();
-			logger.log(Level.SEVERE, "Unexpected exception", var16);
+		} catch (Exception exception16) {
+			exception16.printStackTrace();
+			logger.log(Level.SEVERE, "Unexpected exception", exception16);
 
 			while(this.serverRunning) {
 				this.commandLineParser();
 
 				try {
 					Thread.sleep(10L);
-				} catch (InterruptedException var14) {
-					var14.printStackTrace();
+				} catch (InterruptedException interruptedException14) {
+					interruptedException14.printStackTrace();
 				}
 			}
 		} finally {
@@ -220,22 +206,23 @@
 	}
 
 	private void doTick() throws IOException {
-		ArrayList var1 = new ArrayList();
-		Iterator var2 = playerList.keySet().iterator();
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = playerList.keySet().iterator();
 
-		while(var2.hasNext()) {
-			String var3 = (String)var2.next();
+		while(iterator2.hasNext()) {
+			String var3 = (String)iterator2.next();
 			int var4 = ((Integer)playerList.get(var3)).intValue();
 			if(var4 > 0) {
-				playerList.put(var3, Integer.valueOf(var4 - 1));
+				playerList.put(var3, var4 - 1);
 			} else {
-				var1.add(var3);
+				arrayList1.add(var3);
 			}
 		}
 
 		int var6;
-		for(var6 = 0; var6 < var1.size(); ++var6) {
-			playerList.remove(var1.get(var6));
+		for(var6 = 0; var6 < arrayList1.size(); ++var6) {
+
+			playerList.remove(arrayList1.get(var6));
 		}
 
 		AxisAlignedBB.clearBoundingBoxPool();
@@ -261,21 +248,20 @@
 
 		try {
 			this.commandLineParser();
-		} catch (Exception var5) {
-			logger.log(Level.WARNING, "Unexpected exception while parsing console command", var5);
+		} catch (Exception exception5) {
+			logger.log(Level.WARNING, "Unexpected exception while parsing console command", exception5);
 		}
-
 	}
 
-	public void addCommand(String var1, ICommandListener var2) {
-		this.commands.add(new ServerCommand(var1, var2));
+	public void addCommand(String command, IListenToMyCommands commandListener) {
+		this.commands.add(new ServerCommand(command, commandListener));
 	}
 
 	public void commandLineParser() {
 		while(this.commands.size() > 0) {
 			ServerCommand var1 = (ServerCommand)this.commands.remove(0);
 			String var2 = var1.command;
-			ICommandListener var3 = var1.commandListener;
+			IListenToMyCommands var3 = var1.commandListener;
 			String var4 = var3.getUsername();
 			if(!var2.toLowerCase().startsWith("help") && !var2.toLowerCase().startsWith("?")) {
 				if(var2.toLowerCase().startsWith("list")) {
@@ -342,7 +328,7 @@
 								var12.playerNetServerHandler.kickPlayer("Kicked by admin");
 								this.print(var4, "Kicking " + var12.username);
 							} else {
-								var3.addHelpCommandMessage("Can\'t find user " + var11 + ". No kick.");
+								var3.addHelpCommandMessage("Can't find user " + var11 + ". No kick.");
 							}
 						} else {
 							String[] var5;
@@ -353,9 +339,9 @@
 									var12 = this.configManager.getPlayerEntity(var5[1]);
 									var7 = this.configManager.getPlayerEntity(var5[2]);
 									if(var12 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[1] + ". No tp.");
+										var3.addHelpCommandMessage("Can't find user " + var5[1] + ". No tp.");
 									} else if(var7 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[2] + ". No tp.");
+										var3.addHelpCommandMessage("Can't find user " + var5[2] + ". No tp.");
 									} else {
 										var12.playerNetServerHandler.teleportTo(var7.posX, var7.posY, var7.posZ, var7.rotationYaw, var7.rotationPitch);
 										this.print(var4, "Teleporting " + var5[1] + " to " + var5[2] + ".");
@@ -391,13 +377,13 @@
 
 											var7.dropPlayerItem(new ItemStack(var8, var9));
 										} else {
-											var3.addHelpCommandMessage("There\'s no item with id " + var8);
+											var3.addHelpCommandMessage("There's no item with id " + var8);
 										}
-									} catch (NumberFormatException var10) {
-										var3.addHelpCommandMessage("There\'s no item with id " + var5[2]);
+									} catch (NumberFormatException numberFormatException10) {
+										var3.addHelpCommandMessage("There's no item with id " + var5[2]);
 									}
 								} else {
-									var3.addHelpCommandMessage("Can\'t find user " + var6);
+									var3.addHelpCommandMessage("Can't find user " + var6);
 								}
 							} else if(var2.toLowerCase().startsWith("say ")) {
 								var2 = var2.substring(var2.indexOf(" ")).trim();
@@ -426,23 +412,23 @@
 				var3.addHelpCommandMessage("To run the server without a gui, start it like this:");
 				var3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
 				var3.addHelpCommandMessage("Console commands:");
-				var3.addHelpCommandMessage("   help  or  ?               shows this message");
-				var3.addHelpCommandMessage("   kick <player>             removes a player from the server");
-				var3.addHelpCommandMessage("   ban <player>              bans a player from the server");
-				var3.addHelpCommandMessage("   pardon <player>           pardons a banned player so that they can connect again");
-				var3.addHelpCommandMessage("   ban-ip <ip>               bans an IP address from the server");
-				var3.addHelpCommandMessage("   pardon-ip <ip>            pardons a banned IP address so that they can connect again");
-				var3.addHelpCommandMessage("   op <player>               turns a player into an op");
-				var3.addHelpCommandMessage("   deop <player>             removes op status from a player");
-				var3.addHelpCommandMessage("   tp <player1> <player2>    moves one player to the same location as another player");
+				var3.addHelpCommandMessage("   help  or  ?			   shows this message");
+				var3.addHelpCommandMessage("   kick <player>			 removes a player from the server");
+				var3.addHelpCommandMessage("   ban <player>			  bans a player from the server");
+				var3.addHelpCommandMessage("   pardon <player>		   pardons a banned player so that they can connect again");
+				var3.addHelpCommandMessage("   ban-ip <ip>			   bans an IP address from the server");
+				var3.addHelpCommandMessage("   pardon-ip <ip>			pardons a banned IP address so that they can connect again");
+				var3.addHelpCommandMessage("   op <player>			   turns a player into an op");
+				var3.addHelpCommandMessage("   deop <player>			 removes op status from a player");
+				var3.addHelpCommandMessage("   tp <player1> <player2>	moves one player to the same location as another player");
 				var3.addHelpCommandMessage("   give <player> <id> [num]  gives a player a resource");
 				var3.addHelpCommandMessage("   tell <player> <message>   sends a private message to a player");
-				var3.addHelpCommandMessage("   stop                      gracefully stops the server");
-				var3.addHelpCommandMessage("   save-all                  forces a server-wide level save");
-				var3.addHelpCommandMessage("   save-off                  disables terrain saving (useful for backup scripts)");
-				var3.addHelpCommandMessage("   save-on                   re-enables terrain saving");
-				var3.addHelpCommandMessage("   list                      lists all currently connected players");
-				var3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+				var3.addHelpCommandMessage("   stop					  gracefully stops the server");
+				var3.addHelpCommandMessage("   save-all				  forces a server-wide level save");
+				var3.addHelpCommandMessage("   save-off				  disables terrain saving (useful for backup scripts)");
+				var3.addHelpCommandMessage("   save-on				   re-enables terrain saving");
+				var3.addHelpCommandMessage("   list					  lists all currently connected players");
+				var3.addHelpCommandMessage("   say <message>			 broadcasts a message to all players");
 			}
 		}
 
@@ -454,45 +440,47 @@
 		logger.info(var3);
 	}
 
-	private int parseInt(String var1, int var2) {
+	private int parseInt(String string, int defaultValue) {
 		try {
-			return Integer.parseInt(var1);
-		} catch (NumberFormatException var4) {
-			return var2;
+			return Integer.parseInt(string);
+		} catch (NumberFormatException numberFormatException4) {
+			return defaultValue;
 		}
 	}
 
-	public void addToOnlinePlayerList(IUpdatePlayerListBox var1) {
-		this.playersOnline.add(var1);
+	public void addToOnlinePlayerList(IUpdatePlayerListBox playerListBox) {
+		this.playersOnline.add(playerListBox);
 	}
 
-	public static void main(String[] var0) {
+	public static void main(String[] args) {
 		try {
 			MinecraftServer var1 = new MinecraftServer();
-			if(!GraphicsEnvironment.isHeadless() && (var0.length <= 0 || !var0[0].equals("nogui"))) {
+			if(!GraphicsEnvironment.isHeadless() && (args.length <= 0 || !args[0].equals("nogui"))) {
 				ServerGUI.initGui(var1);
 			}
 
 			(new ThreadServerApplication("Server thread", var1)).start();
-		} catch (Exception var2) {
-			logger.log(Level.SEVERE, "Failed to start the minecraft server", var2);
+		} catch (Exception exception2) {
+			logger.log(Level.SEVERE, "Failed to start the minecraft server", exception2);
 		}
 
 	}
 
-	public File getFile(String var1) {
-		return new File(var1);
+	public File getFile(String fileName) {
+		return new File(fileName);
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		logger.info(var1);
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		logger.info(helpCommandMessage);
 	}
 
 	public String getUsername() {
 		return "CONSOLE";
 	}
 
-	public static boolean isServerRunning(MinecraftServer var0) {
-		return var0.serverRunning;
+	public static boolean isServerRunning(MinecraftServer mcServer) {
+		return mcServer.serverRunning;
 	}
+
+
 }
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -7,35 +7,55 @@
 import java.io.PrintWriter;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.Display;
 
 public class GameSettings {
 	private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
 	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+	private static final String[] GUI_SCALES = new String[]{"Auto", "Small", "Normal", "Large"};
 	public float musicVolume = 1.0F;
 	public float soundVolume = 1.0F;
+	public float musicDelay = 1.0F;
 	public float mouseSensitivity = 0.5F;
+	public float brightness = 0.5F;
+	public float fov = 70.0F;
+	public float fovEffects = 1.0F;
 	public boolean invertMouse = false;
 	public int renderDistance = 0;
 	public boolean viewBobbing = true;
 	public boolean anaglyph = false;
 	public boolean limitFramerate = false;
 	public boolean fancyGraphics = true;
-	public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
-	public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
-	public KeyBinding keyBindBack = new KeyBinding("Back", 31);
-	public KeyBinding keyBindRight = new KeyBinding("Right", 32);
-	public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
-	public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
-	public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
-	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-	public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public boolean caveSounds = false;
+	public boolean creativeDebug = false;
+	public boolean darkMode = false;
+	public boolean betacraftProxy = true;
+	public int guiScale = 0;
+	public KeyBinding keyBindForward = new KeyBinding("Forward", Keyboard.KEY_W);
+	public KeyBinding keyBindLeft = new KeyBinding("Left", Keyboard.KEY_A);
+	public KeyBinding keyBindBack = new KeyBinding("Back", Keyboard.KEY_S);
+	public KeyBinding keyBindRight = new KeyBinding("Right", Keyboard.KEY_D);
+	public KeyBinding keyBindJump = new KeyBinding("Jump", Keyboard.KEY_SPACE);
+	public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_E);
+	public KeyBinding keyBindDrop = new KeyBinding("Drop", Keyboard.KEY_Q);
+	public KeyBinding keyBindChat = new KeyBinding("Chat", Keyboard.KEY_T);
+	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", Keyboard.KEY_F);
+	public KeyBinding keyBindSneak = new KeyBinding("Sneak", Keyboard.KEY_LSHIFT);
+	public KeyBinding keyBindRun = new KeyBinding("Run", Keyboard.KEY_LCONTROL);
+	public KeyBinding keyBindCreative = new KeyBinding("Creative", Keyboard.KEY_C);
+	public KeyBinding keyBindRecipeGuide = new KeyBinding("Recipe guide", Keyboard.KEY_R);
+	public KeyBinding keyBindHideHud = new KeyBinding("Hide HUD", Keyboard.KEY_F1);
+	public KeyBinding keyBindZoom = new KeyBinding("Zoom", Keyboard.KEY_GRAVE);
+	public KeyBinding[] keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack,
+			this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory,
+			this.keyBindChat, this.keyBindToggleFog, this.keyBindRun, this.keyBindCreative, this.keyBindRecipeGuide,
+			this.keyBindHideHud, this.keyBindZoom };
 	protected Minecraft mc;
 	private File optionsFile;
-	public int numberOfOptions = 10;
+	public int numberOfOptions = 18;
 	public int difficulty = 2;
-	public boolean thirdPersonView = false;
+	public int thirdPersonView = 0;
+	public boolean debugMenu = false;
 
 	public GameSettings(Minecraft var1, File var2) {
 		this.mc = var1;
@@ -46,6 +66,10 @@
 	public GameSettings() {
 	}
 
+	public int getTextColor() {
+		return this.darkMode ? 14737632 : 4210752;
+	}
+
 	public String getKeyBindingDescription(int var1) {
 		return this.keyBindings[var1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[var1].keyCode);
 	}
@@ -56,131 +80,260 @@
 	}
 
 	public void setOptionFloatValue(int var1, float var2) {
-		if(var1 == 0) {
+		if (var1 == 0) {
 			this.musicVolume = var2;
 			this.mc.sndManager.onSoundOptionsChanged();
 		}
 
-		if(var1 == 1) {
+		if (var1 == 1) {
 			this.soundVolume = var2;
 			this.mc.sndManager.onSoundOptionsChanged();
 		}
 
-		if(var1 == 3) {
+		if (var1 == 3) {
 			this.mouseSensitivity = var2;
 		}
 
+		if (var1 == 11) {
+			this.brightness = var2;
+			RenderGlobal.globalBrightness = this.brightness * 0.2F;
+			this.mc.renderGlobal.loadRenderers();
+		}
+
+		if (var1 == 12) {
+			this.musicDelay = var2;
+		}
+
+		if (var1 == 14) {
+			this.fov = var2 * 90.0F + 30.0F;
+		}
+
+		if (var1 == 15) {
+			this.fovEffects = var2 * 2.0F;
+		}
 	}
 
 	public void setOptionValue(int var1, int var2) {
-		if(var1 == 2) {
+		if (var1 == 2) {
 			this.invertMouse = !this.invertMouse;
 		}
 
-		if(var1 == 4) {
+		if (var1 == 4) {
 			this.renderDistance = this.renderDistance + var2 & 3;
 		}
 
-		if(var1 == 5) {
+		if (var1 == 5) {
 			this.viewBobbing = !this.viewBobbing;
 		}
 
-		if(var1 == 6) {
+		if (var1 == 6) {
 			this.anaglyph = !this.anaglyph;
 			this.mc.renderEngine.refreshTextures();
 		}
 
-		if(var1 == 7) {
+		if (var1 == 7) {
 			this.limitFramerate = !this.limitFramerate;
+			Display.setVSyncEnabled(this.limitFramerate);
 		}
 
-		if(var1 == 8) {
+		if (var1 == 8) {
 			this.difficulty = this.difficulty + var2 & 3;
 		}
 
-		if(var1 == 9) {
+		if (var1 == 9) {
 			this.fancyGraphics = !this.fancyGraphics;
 			this.mc.renderGlobal.loadRenderers();
 		}
 
+		if (var1 == 10) {
+			this.caveSounds = !this.caveSounds;
+			if (this.caveSounds) {
+				this.mc.sndManager.playSoundFX("ambient.cave.cave", 1.0F, 1.0F);
+			}
+		}
+
+		if (var1 == 13) {
+			this.darkMode = !this.darkMode;
+		}
+
+		if (var1 == 16) {
+			this.betacraftProxy = !this.betacraftProxy;
+		}
+
+		if (var1 == 17) {
+			this.guiScale = (this.guiScale + var2) % GUI_SCALES.length;
+			if (this.mc.currentScreen != null) {
+				ScaledResolution scaledResolution2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight, this.guiScale);
+				int var3 = scaledResolution2.getScaledWidth();
+				int var4 = scaledResolution2.getScaledHeight();
+				this.mc.currentScreen.setWorldAndResolution(this.mc, var3, var4);
+			}
+		}
+
 		this.saveOptions();
 	}
 
 	public int isSlider(int var1) {
-		return var1 == 0 ? 1 : (var1 == 1 ? 1 : (var1 == 3 ? 1 : 0));
+		return var1 == 0 || var1 == 1 || var1 == 3 || var1 == 11 || var1 == 12 || var1 == 14 || var1 == 15 ? 1 : 0;
 	}
 
 	public float getOptionFloatValue(int var1) {
-		return var1 == 0 ? this.musicVolume : (var1 == 1 ? this.soundVolume : (var1 == 3 ? this.mouseSensitivity : 0.0F));
+		switch (var1) {
+			case 0: return this.musicVolume;
+			case 1: return this.soundVolume;
+			case 3: return this.mouseSensitivity;
+			case 11: return this.brightness;
+			case 12: return this.musicDelay;
+			case 14: return (this.fov - 30.0F) / 90.0F;
+			case 15: return this.fovEffects / 2.0F;
+			default: return 0.0F;
+		}
 	}
 
 	public String getOptionDisplayString(int var1) {
-		return var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+		switch (var1) {
+			case 0:
+				return "Music: " + (this.musicVolume > 0.0F ? (int) (this.musicVolume * 100.0F) + "%" : "OFF");
+			case 1:
+				return "Sound: " + (this.soundVolume > 0.0F ? (int) (this.soundVolume * 100.0F) + "%" : "OFF");
+			case 2:
+				return "Invert mouse: " + (this.invertMouse ? "ON" : "OFF");
+			case 3:
+				return (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*"
+						: (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!"
+								: "Sensitivity: " + (int) (this.mouseSensitivity * 200.0F) + "%"));
+			case 4:
+				return "Render distance: " + RENDER_DISTANCES[this.renderDistance];
+			case 5:
+				return "View bobbing: " + (this.viewBobbing ? "ON" : "OFF");
+			case 6:
+				return "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF");
+			case 7:
+				return "VSync: " + (this.limitFramerate ? "ON" : "OFF");
+			case 8:
+				return "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty];
+			case 9:
+				return "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST");
+			case 10:
+				return "Cave sounds: " + (this.caveSounds ? "ON" : "OFF");
+			case 11:
+				return "Brightness: " + (
+						this.brightness <= 0.0F ? "Moody"
+						: this.brightness >= 1.0F ? "Bright"
+						: (int) (this.brightness * 100.0F) + "%");
+			case 12:
+				float delay = (int) (this.musicDelay * 100.0F) / 10.0F;
+				return "Music Delay: " + delay + "-" + delay * 2.0F + " mins";
+			case 13:
+				return "Dark Mode: " + (this.darkMode ? "ON" : "OFF");
+			case 14:
+				return "FOV: " + (int) this.fov;
+			case 15:
+				return "FOV Effects: " + (this.fovEffects > 0.0F ? (int) (this.fovEffects * 100.0F) + "%" : "OFF");
+			case 16:
+				return "Betacraft Proxy: " + (this.betacraftProxy ? "ON" : "OFF");
+			case 17:
+				return "Gui Scale: " + GUI_SCALES[this.guiScale];
+			default:
+				return "NULL";
+		}
 	}
 
 	public void loadOptions() {
 		try {
-			if(!this.optionsFile.exists()) {
+			if (!this.optionsFile.exists()) {
 				return;
 			}
 
 			BufferedReader var1 = new BufferedReader(new FileReader(this.optionsFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
+			String var2;
+
+			while ((var2 = var1.readLine()) != null) {
 				String[] var3 = var2.split(":");
-				if(var3[0].equals("music")) {
+				if (var3[0].equals("music")) {
 					this.musicVolume = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("sound")) {
+				if (var3[0].equals("sound")) {
 					this.soundVolume = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("mouseSensitivity")) {
+				if (var3[0].equals("mouseSensitivity")) {
 					this.mouseSensitivity = this.parseFloat(var3[1]);
 				}
 
-				if(var3[0].equals("invertYMouse")) {
+				if (var3[0].equals("invertYMouse")) {
 					this.invertMouse = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("viewDistance")) {
+				if (var3[0].equals("viewDistance")) {
 					this.renderDistance = Integer.parseInt(var3[1]);
 				}
 
-				if(var3[0].equals("bobView")) {
+				if (var3[0].equals("bobView")) {
 					this.viewBobbing = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("anaglyph3d")) {
+				if (var3[0].equals("anaglyph3d")) {
 					this.anaglyph = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("limitFramerate")) {
+				if (var3[0].equals("limitFramerate")) {
 					this.limitFramerate = var3[1].equals("true");
 				}
 
-				if(var3[0].equals("difficulty")) {
+				if (var3[0].equals("difficulty")) {
 					this.difficulty = Integer.parseInt(var3[1]);
 				}
 
-				if(var3[0].equals("fancyGraphics")) {
+				if (var3[0].equals("fancyGraphics")) {
 					this.fancyGraphics = var3[1].equals("true");
 				}
 
-				for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
-					if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
+				if (var3[0].equals("caveSounds")) {
+					this.caveSounds = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("brightness")) {
+					this.brightness = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("musicDelay")) {
+					this.musicDelay = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("darkMode")) {
+					this.darkMode = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("fov")) {
+					this.fov = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("fovEffects")) {
+					this.fovEffects = this.parseFloat(var3[1]);
+				}
+
+				if (var3[0].equals("betacraftProxy")) {
+					this.betacraftProxy = var3[1].equals("true");
+				}
+
+				if (var3[0].equals("guiScale")) {
+					this.guiScale = Integer.parseInt(var3[1]);
+				}
+
+				for (int var4 = 0; var4 < this.keyBindings.length; ++var4) {
+					if (var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
 						this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
 					}
 				}
 			}
+
+			var1.close();
+
+			this.creativeDebug = Minecraft.developmentVersion;
+		} catch (RuntimeException e) {
+			throw e;
 		} catch (Exception var5) {
 			System.out.println("Failed to load options");
 			var5.printStackTrace();
@@ -194,27 +347,34 @@
 
 	public void saveOptions() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.optionsFile));
-			var1.println("music:" + this.musicVolume);
-			var1.println("sound:" + this.soundVolume);
-			var1.println("invertYMouse:" + this.invertMouse);
-			var1.println("mouseSensitivity:" + this.mouseSensitivity);
-			var1.println("viewDistance:" + this.renderDistance);
-			var1.println("bobView:" + this.viewBobbing);
-			var1.println("anaglyph3d:" + this.anaglyph);
-			var1.println("limitFramerate:" + this.limitFramerate);
-			var1.println("difficulty:" + this.difficulty);
-			var1.println("fancyGraphics:" + this.fancyGraphics);
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.optionsFile));
+			printWriter1.println("music:" + Math.floor(this.musicVolume * 100.0F) / 100.0F);
+			printWriter1.println("sound:" + Math.floor(this.soundVolume * 100.0F) / 100.0F);
+			printWriter1.println("invertYMouse:" + this.invertMouse);
+			printWriter1.println("mouseSensitivity:" + Math.floor(this.mouseSensitivity * 100.0F) / 100.0F);
+			printWriter1.println("viewDistance:" + this.renderDistance);
+			printWriter1.println("bobView:" + this.viewBobbing);
+			printWriter1.println("anaglyph3d:" + this.anaglyph);
+			printWriter1.println("limitFramerate:" + this.limitFramerate);
+			printWriter1.println("difficulty:" + this.difficulty);
+			printWriter1.println("fancyGraphics:" + this.fancyGraphics);
+			printWriter1.println("caveSounds:" + this.caveSounds);
+			printWriter1.println("brightness:" + Math.floor(this.brightness * 100.0F) / 100.0F);
+			printWriter1.println("darkMode:" + this.darkMode);
+			printWriter1.println("musicDelay:" + Math.floor(this.musicDelay * 100.0F) / 100.0F);
+			printWriter1.println("fov:" + Math.floor(this.fov));
+			printWriter1.println("fovEffects:" + Math.floor(this.fovEffects * 100.0F) / 100.0F);
+			printWriter1.println("betacraftProxy:" + this.betacraftProxy);
+			printWriter1.println("guiScale:" + this.guiScale);
 
-			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
-				var1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
+			for (int var2 = 0; var2 < this.keyBindings.length; ++var2) {
+				printWriter1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
 			}
 
-			var1.close();
+			printWriter1.close();
 		} catch (Exception var3) {
 			System.out.println("Failed to save options");
 			var3.printStackTrace();
 		}
-
 	}
 }
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/ItemWardingRing.java
@@ -1,0 +1,13 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.*;
+
+public class ItemWardingRing extends ItemCharm {
+	public ItemWardingRing(int id) {
+		super(id);
+	}
+
+	public void updateCharm(EntityPlayer player, ItemStack stack) {
+		player.slowHealing = true;
+	}
+}
--- net/minecraft/src/ServerWindowAdapter.java
+++ net/minecraft/src/ServerWindowAdapter.java
@@ -2,6 +2,7 @@
 
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+
 import net.minecraft.server.MinecraftServer;
 
 final class ServerWindowAdapter extends WindowAdapter {
--- /dev/null
+++ io/github/bluestaggo/mcdiverge/Packet19WorldType.java
@@ -1,0 +1,43 @@
+package io.github.bluestaggo.mcdiverge;
+
+import net.minecraft.src.NetHandler;
+import net.minecraft.src.Packet;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet19WorldType extends Packet {
+	public byte worldType;
+	public boolean creative;
+
+	public Packet19WorldType() {
+	}
+
+	public Packet19WorldType(WorldType worldType, boolean creative) {
+		this((byte) worldType.ordinal(), creative);
+	}
+
+	public Packet19WorldType(byte worldType, boolean creative) {
+		this.worldType = worldType;
+		this.creative = creative;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream1) throws IOException {
+		this.worldType = dataInputStream1.readByte();
+		this.creative = dataInputStream1.readBoolean();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream1) throws IOException {
+		dataOutputStream1.writeByte(this.worldType);
+		dataOutputStream1.writeBoolean(this.creative);
+	}
+
+	public void processPacket(NetHandler var1) {
+		var1.handleWorldType(this);
+	}
+
+	public int getPacketSize() {
+		return 2;
+	}
+}
--- net/minecraft/src/ItemInWorldManager.java
+++ net/minecraft/src/ItemInWorldManager.java
@@ -97,6 +97,27 @@
 
 	public boolean activeBlockOrUseItem(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
 		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
+		int oldStackSize = var3 != null ? var3.stackSize : 0;
+		boolean result = var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1)
+				|| (var3 != null && var3.useItem(var1, var2, var4, var5, var6, var7));
+		if (var1.creative && var3 != null) {
+			var3.stackSize = oldStackSize;
+		}
+		return result;
+	}
+
+	public boolean func_6154_a(EntityPlayer var1, World var2, ItemStack var3) {
+		int var4 = var3.stackSize;
+		ItemStack var5 = var3.useItemRightClick(var2, var1);
+		if(var5 != var3 || var5 != null && var5.stackSize != var4) {
+			var1.inventory.mainInventory[var1.inventory.currentItem] = var5;
+			if(var5.stackSize == 0) {
+				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+			}
+
+			return true;
+		} else {
+			return false;
+		}
 	}
 }
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -8,6 +8,18 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return var1.nextInt(3) + 2;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Item.shardGlass.shiftedIndex;
+	}
+
+	public int quantityDroppedSilk(Random var1) {
+		return 1;
+	}
+
+	public int idDroppedSilk(int var1, Random var2) {
+		return this.blockID;
 	}
 }
