--- a/net/minecraft/src/World.java
+++ b/net/minecraft/src/World.java
@@ -1,5 +1,8 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.CreateWorldInfo;
+import net.minecraft.client.Minecraft;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
@@ -54,6 +57,9 @@
     private int soundCounter;
     private List entitiesWithinAABBExcludingEntity;
     public boolean multiplayerWorld;
+    public String displayName;
+    public boolean creative;
+    public int starfallChance;
 
     public static NBTTagCompound getLevelData(File file, String world) {
         File file2 = new File(file, "saves");
@@ -97,7 +103,7 @@
     }
 
     public World(File file, String name) {
-        this(file, name, (new Random()).nextLong());
+        this(file, name, (new Random()).nextLong(), null);
     }
 
     public World(String name) {
@@ -130,11 +136,12 @@
         this.entitiesWithinAABBExcludingEntity = new ArrayList();
         this.multiplayerWorld = false;
         this.levelName = name;
+        this.displayName = name;
         this.chunkProvider = this.getChunkProvider(this.saveDirectory);
         this.calculateInitialSkylight();
     }
 
-    public World(File file, String name, long seed) {
+    public World(File file, String name, long seed, CreateWorldInfo info) {
         this.lightingToUpdate = new ArrayList();
         this.loadedEntityList = new ArrayList();
         this.unloadedEntityList = new ArrayList();
@@ -164,6 +171,7 @@
         this.entitiesWithinAABBExcludingEntity = new ArrayList();
         this.multiplayerWorld = false;
         this.levelName = name;
+        this.displayName = name;
         file.mkdirs();
         this.saveDirectory = new File(file, name);
         this.saveDirectory.mkdirs();
@@ -182,6 +190,8 @@
             throw new RuntimeException("Failed to check session lock, aborting");
         }
 
+        boolean z15 = false;
+
         file5 = new File(this.saveDirectory, "level.dat");
         this.isNewWorld = !file5.exists();
         if(file5.exists()) {
@@ -195,6 +205,12 @@
                 this.worldTime = nBTTagCompound7.getLong("Time");
                 this.sizeOnDisk = nBTTagCompound7.getLong("SizeOnDisk");
                 this.snowCovered = nBTTagCompound7.getBoolean("SnowCovered");
+                this.displayName = nBTTagCompound7.getString("DisplayName");
+                this.creative = nBTTagCompound7.getBoolean("Creative");
+                this.starfallChance = nBTTagCompound7.getInteger("StarfallChance");
+                if(this.displayName.isEmpty()) {
+                    this.displayName = name;
+                }
                 if(nBTTagCompound7.hasKey("Player")) {
                     this.nbtCompoundPlayer = nBTTagCompound7.getCompoundTag("Player");
                 }
@@ -202,10 +218,11 @@
                 exception11.printStackTrace();
             }
         } else {
-            this.snowCovered = this.rand.nextInt(4) == 0;
+//            this.snowCovered = this.rand.nextInt(4) == 0;
+            this.applyCreationInfo(info);
+            z15 = true;
         }
 
-        boolean z15 = false;
         if(this.randomSeed == 0L) {
             this.randomSeed = seed;
             z15 = true;
@@ -295,6 +312,9 @@
         nBTTagCompound1.setLong("Time", this.worldTime);
         nBTTagCompound1.setLong("SizeOnDisk", this.sizeOnDisk);
         nBTTagCompound1.setBoolean("SnowCovered", this.snowCovered);
+        nBTTagCompound1.setString("DisplayName", this.displayName);
+        nBTTagCompound1.setBoolean("Creative", this.creative);
+        nBTTagCompound1.setInteger("StarfallChance", this.starfallChance);
         nBTTagCompound1.setLong("LastPlayed", System.currentTimeMillis());
         EntityPlayer entityPlayer2 = null;
         if(this.playerEntities.size() > 0) {
@@ -543,7 +563,8 @@
             int i5;
             if(update) {
                 i5 = this.getBlockId(x, y, z);
-                if(i5 == Block.stairSingle.blockID || i5 == Block.tilledField.blockID) {
+                Block b = Block.blocksList[i5];
+                if((b instanceof BlockStep && !((BlockStep) b).blockType) || i5 == Block.tilledField.blockID) {
                     int i6 = this.getBlockLightValue_do(x, y + 1, z, false);
                     int i7 = this.getBlockLightValue_do(x + 1, y, z, false);
                     int i8 = this.getBlockLightValue_do(x - 1, y, z, false);
@@ -838,9 +859,9 @@
 
     }
 
-    public void playRecord(String record, int x, int y, int z) {
+    public void playRecord(String record, int x, int y, int z, String author) {
         for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
-            ((IWorldAccess)this.worldAccesses.get(i5)).playRecord(record, x, y, z);
+            ((IWorldAccess)this.worldAccesses.get(i5)).playRecord(record, x, y, z, author);
         }
 
     }
@@ -1501,11 +1522,11 @@
             }
 
             this.lightingToUpdate.add(new MetadataChunkBlock(skyBlock, minX, minY, minZ, maxX, maxY, maxZ));
-            if(this.lightingToUpdate.size() > 100000) {
-                while(this.lightingToUpdate.size() > 50000) {
-                    this.updatingLighting();
-                }
-            }
+//            if(this.lightingToUpdate.size() > 100000) {
+//                while(this.lightingToUpdate.size() > 50000) {
+//                    this.updatingLighting();
+//                }
+//            }
 
         }
     }
@@ -1534,6 +1555,7 @@
             this.saveWorld(false, (IProgressUpdate)null);
         }
 
+        this.miscUpdates();
         this.tickUpdates(false);
         this.updateBlocksAndPlayCaveSounds();
     }
@@ -1572,7 +1594,7 @@
             int i8;
             int i9;
             int i10;
-            if(this.soundCounter == 0) {
+            if(Minecraft.getOptions().caveSounds && this.soundCounter == 0) {
                 this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
                 i6 = this.updateLCG >> 2;
                 i7 = i6 & 15;
@@ -1970,6 +1992,42 @@
 
     }
 
+    public void applyCreationInfo(CreateWorldInfo info) {
+        this.displayName = info.name;
+        this.randomSeed = info.seed;
+        this.snowCovered = info.snowy;
+        this.creative = info.creative;
+    }
+
+    public boolean hasSolidCeiling(int x, int y, int z) {
+        for (; y < 128; y++) {
+            if (this.getBlockMaterial(x, y, z).isSolid()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void miscUpdates() {
+        if (this.worldTime % 24000 >= 13000 && this.worldTime % 24000 < 23000) {
+            for (EntityPlayer player : (List<EntityPlayer>)this.playerEntities) {
+                if (rand.nextInt(this.starfallChance) != 0) continue;
+
+                EntityItem star = new EntityItem(
+                        this,
+                        player.posX + (rand.nextDouble() * 512.0 - 256.0),
+                        200,
+                        player.posZ + (rand.nextDouble() * 512.0 - 256.0),
+                        new ItemStack(Item.starChunk)
+                );
+                this.spawnEntityInWorld(star);
+                star.age = 6000 - (23000 - ((int) this.worldTime % 24000));
+            }
+        } else if (this.worldTime % 24000 < 13000) {
+            this.starfallChance = rand.nextInt(750) + 250;
+        }
+    }
+
     static {
         float f0 = 0.05F;
 
@@ -1977,6 +2035,5 @@
             float f2 = 1.0F - (float)i1 / 15.0F;
             lightBrightnessTable[i1] = (1.0F - f2) / (f2 * 3.0F + 1.0F) * (1.0F - f0) + f0;
         }
-
     }
 }
