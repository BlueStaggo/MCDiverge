--- a/net/minecraft/src/EntitySnowball.java
+++ b/net/minecraft/src/EntitySnowball.java
@@ -12,6 +12,10 @@
     private EntityLiving thrower;
     private int ticksInGround;
     private int ticksInAir = 0;
+    public int iconIndex;
+    public int damage;
+    public int burn;
+    public float pierce;
 
     public EntitySnowball(World world1) {
         super(world1);
@@ -24,54 +28,67 @@
         return distance < d3 * d3;
     }
 
-    public EntitySnowball(World world1, EntityLiving entityLiving2) {
+    public EntitySnowball(World world1, EntityLiving entityLiving2, int iconIndex, int damage) {
+        this(world1, entityLiving2, iconIndex, damage, 0, 1.0F);
+    }
+
+    public EntitySnowball(World world1, EntityLiving entityLiving2, int iconIndex, int damage, int burn,
+                          float pierce) {
         super(world1);
         this.thrower = entityLiving2;
         this.setSize(0.25F, 0.25F);
-        this.setLocationAndAngles(entityLiving2.posX, entityLiving2.posY, entityLiving2.posZ, entityLiving2.rotationYaw, entityLiving2.rotationPitch);
-        this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.posY -= (double)0.1F;
-        this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+        this.setLocationAndAngles(entityLiving2.posX, entityLiving2.posY, entityLiving2.posZ, entityLiving2.rotationYaw,
+                entityLiving2.rotationPitch);
+        this.posX -= (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
+        this.posY -= (double) 0.1F;
+        this.posZ -= (double) (MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.yOffset = 0.0F;
         float f3 = 0.4F;
-        this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
-        this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
-        this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
+        this.motionX = (double) (-MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI)
+                * MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI) * f3);
+        this.motionZ = (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI)
+                * MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI) * f3);
+        this.motionY = (double) (-MathHelper.sin(this.rotationPitch / 180.0F * (float) Math.PI) * f3);
         this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+        this.iconIndex = iconIndex;
+        this.damage = damage;
+        this.burn = burn;
+        this.pierce = pierce;
     }
 
     public void setThrowableHeading(double d1, double d3, double d5, float f7, float f8) {
         float f9 = MathHelper.sqrt_double(d1 * d1 + d3 * d3 + d5 * d5);
-        d1 /= (double)f9;
-        d3 /= (double)f9;
-        d5 /= (double)f9;
-        d1 += this.rand.nextGaussian() * (double)0.0075F * (double)f8;
-        d3 += this.rand.nextGaussian() * (double)0.0075F * (double)f8;
-        d5 += this.rand.nextGaussian() * (double)0.0075F * (double)f8;
-        d1 *= (double)f7;
-        d3 *= (double)f7;
-        d5 *= (double)f7;
+        d1 /= (double) f9;
+        d3 /= (double) f9;
+        d5 /= (double) f9;
+        d1 += this.rand.nextGaussian() * (double) 0.0075F * (double) f8;
+        d3 += this.rand.nextGaussian() * (double) 0.0075F * (double) f8;
+        d5 += this.rand.nextGaussian() * (double) 0.0075F * (double) f8;
+        d1 *= (double) f7;
+        d3 *= (double) f7;
+        d5 *= (double) f7;
         this.motionX = d1;
         this.motionY = d3;
         this.motionZ = d5;
         float f10 = MathHelper.sqrt_double(d1 * d1 + d5 * d5);
-        this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(d1, d5) * 180.0D / (double)(float)Math.PI);
-        this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(d3, (double)f10) * 180.0D / (double)(float)Math.PI);
+        this.prevRotationYaw = this.rotationYaw = (float) (Math.atan2(d1, d5) * 180.0D / (double) (float) Math.PI);
+        this.prevRotationPitch = this.rotationPitch = (float) (Math.atan2(d3, (double) f10) * 180.0D
+                / (double) (float) Math.PI);
         this.ticksInGround = 0;
     }
 
     public void onUpdate() {
         super.onUpdate();
-        if(this.throwableShake > 0) {
+        if (this.throwableShake > 0) {
             --this.throwableShake;
         }
 
-        if(this.inGround) {
+        if (this.inGround) {
             int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-            if(i1 == this.inTile) {
+            if (i1 == this.inTile) {
                 ++this.ticksInGround;
-                if(this.ticksInGround == 1200) {
+                if (this.ticksInGround == 1200) {
                     this.setEntityDead();
                 }
 
@@ -79,9 +96,9 @@
             }
 
             this.inGround = false;
-            this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-            this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-            this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+            this.motionX *= (double) (this.rand.nextFloat() * 0.2F);
+            this.motionY *= (double) (this.rand.nextFloat() * 0.2F);
+            this.motionZ *= (double) (this.rand.nextFloat() * 0.2F);
             this.ticksInGround = 0;
             this.ticksInAir = 0;
         } else {
@@ -93,25 +110,27 @@
         MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
         vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
         vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-        if(movingObjectPosition3 != null) {
-            vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
+        if (movingObjectPosition3 != null) {
+            vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord,
+                    movingObjectPosition3.hitVec.zCoord);
         }
 
         Entity entity4 = null;
-        List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+        List<Entity> list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this,
+                this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
         double d6 = 0.0D;
 
         int i8;
         float f10;
-        for(i8 = 0; i8 < list5.size(); ++i8) {
-            Entity entity9 = (Entity)list5.get(i8);
-            if(entity9.canBeCollidedWith() && (entity9 != this.thrower || this.ticksInAir >= 5)) {
+        for (i8 = 0; i8 < list5.size(); ++i8) {
+            Entity entity9 = (Entity) list5.get(i8);
+            if (entity9.canBeCollidedWith() && (entity9 != this.thrower || this.ticksInAir >= 5)) {
                 f10 = 0.3F;
-                AxisAlignedBB axisAlignedBB11 = entity9.boundingBox.expand((double)f10, (double)f10, (double)f10);
+                AxisAlignedBB axisAlignedBB11 = entity9.boundingBox.expand((double) f10, (double) f10, (double) f10);
                 MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
-                if(movingObjectPosition12 != null) {
+                if (movingObjectPosition12 != null) {
                     double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
-                    if(d13 < d6 || d6 == 0.0D) {
+                    if (d13 < d6 || d6 == 0.0D) {
                         entity4 = entity9;
                         d6 = d13;
                     }
@@ -119,40 +138,74 @@
             }
         }
 
-        if(entity4 != null) {
+        if (entity4 != null) {
             movingObjectPosition3 = new MovingObjectPosition(entity4);
         }
 
-        if(movingObjectPosition3 != null) {
-            if(movingObjectPosition3.entityHit != null && movingObjectPosition3.entityHit.attackEntityFrom(this.thrower, 0)) {
-                ;
-            }
-
-            for(i8 = 0; i8 < 8; ++i8) {
-                this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
-            }
-
-            this.setEntityDead();
+        float cf16;
+        if (movingObjectPosition3 != null) {
+            if (movingObjectPosition3.entityHit != null) {
+                if (movingObjectPosition3.entityHit.attackEntityFrom(this.thrower, this.damage)) {
+                    // this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+                    // (this.rand.nextFloat() * 0.2F + 0.9F));
+                    if (this.burn > 0) {
+                        movingObjectPosition3.entityHit.fire = this.burn;
+                    }
+                    if (EntityLiving.class.isInstance(movingObjectPosition3.entityHit)) {
+                        ((EntityLiving) movingObjectPosition3.entityHit).hurtTime /= this.pierce;
+                        ((EntityLiving) movingObjectPosition3.entityHit).maxHurtTime /= this.pierce;
+                        ((EntityLiving) movingObjectPosition3.entityHit).heartsLife /= this.pierce;
+                    }
+                    this.setEntityDead();
+                } else {
+                    this.motionX *= -0.10000000149011612D;
+                    this.motionY *= -0.10000000149011612D;
+                    this.motionZ *= -0.10000000149011612D;
+                    this.rotationYaw += 180.0F;
+                    this.prevRotationYaw += 180.0F;
+                    this.ticksInAir = 0;
+                }
+            } else {
+                this.xTile = movingObjectPosition3.blockX;
+                this.yTile = movingObjectPosition3.blockY;
+                this.zTile = movingObjectPosition3.blockZ;
+                this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+                this.motionX = (double) ((float) (movingObjectPosition3.hitVec.xCoord - this.posX));
+                this.motionY = (double) ((float) (movingObjectPosition3.hitVec.yCoord - this.posY));
+                this.motionZ = (double) ((float) (movingObjectPosition3.hitVec.zCoord - this.posZ));
+                cf16 = MathHelper.sqrt_double(
+                        this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+                this.posX -= this.motionX / (double) cf16 * (double) 0.05F;
+                this.posY -= this.motionY / (double) cf16 * (double) 0.05F;
+                this.posZ -= this.motionZ / (double) cf16 * (double) 0.05F;
+                // this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F /
+                // (this.rand.nextFloat() * 0.2F + 0.9F));
+                this.inGround = true;
+                this.throwableShake = 7;
+                this.setEntityDead();
+            }
         }
 
         this.posX += this.motionX;
         this.posY += this.motionY;
         this.posZ += this.motionZ;
         float f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+        this.rotationYaw = (float) (Math.atan2(this.motionX, this.motionZ) * 180.0D / (double) (float) Math.PI);
 
-        for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+        for (this.rotationPitch = (float) (Math.atan2(this.motionY, (double) f16) * 180.0D
+                / (double) (float) Math.PI); this.rotationPitch
+                        - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
         }
 
-        while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+        while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
             this.prevRotationPitch += 360.0F;
         }
 
-        while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+        while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
             this.prevRotationYaw -= 360.0F;
         }
 
-        while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+        while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
             this.prevRotationYaw += 360.0F;
         }
 
@@ -160,29 +213,33 @@
         this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
         float f17 = 0.99F;
         f10 = 0.03F;
-        if(this.handleWaterMovement()) {
-            for(int i18 = 0; i18 < 4; ++i18) {
+        if (this.handleWaterMovement()) {
+            for (int i18 = 0; i18 < 4; ++i18) {
                 float f19 = 0.25F;
-                this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
+                this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double) f19,
+                        this.posY - this.motionY * (double) f19, this.posZ - this.motionZ * (double) f19, this.motionX,
+                        this.motionY, this.motionZ);
             }
 
             f17 = 0.8F;
         }
 
-        this.motionX *= (double)f17;
-        this.motionY *= (double)f17;
-        this.motionZ *= (double)f17;
-        this.motionY -= (double)f10;
+        this.motionX *= (double) f17;
+        this.motionY *= (double) f17;
+        this.motionZ *= (double) f17;
+        this.motionY -= (double) f10;
         this.setPosition(this.posX, this.posY, this.posZ);
     }
 
     public void writeEntityToNBT(NBTTagCompound compoundTag) {
-        compoundTag.setShort("xTile", (short)this.xTile);
-        compoundTag.setShort("yTile", (short)this.yTile);
-        compoundTag.setShort("zTile", (short)this.zTile);
-        compoundTag.setByte("inTile", (byte)this.inTile);
-        compoundTag.setByte("shake", (byte)this.throwableShake);
-        compoundTag.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+        compoundTag.setShort("xTile", (short) this.xTile);
+        compoundTag.setShort("yTile", (short) this.yTile);
+        compoundTag.setShort("zTile", (short) this.zTile);
+        compoundTag.setByte("inTile", (byte) this.inTile);
+        compoundTag.setByte("shake", (byte) this.throwableShake);
+        compoundTag.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+        compoundTag.setByte("itemIndex", (byte) this.iconIndex);
+        compoundTag.setByte("damage", (byte) this.damage);
     }
 
     public void readEntityFromNBT(NBTTagCompound compoundTag) {
@@ -192,15 +249,17 @@
         this.inTile = compoundTag.getByte("inTile") & 255;
         this.throwableShake = compoundTag.getByte("shake") & 255;
         this.inGround = compoundTag.getByte("inGround") == 1;
+        this.iconIndex = compoundTag.getByte("itemIndex");
+        this.damage = compoundTag.getByte("damage");
     }
 
     public void onCollideWithPlayer(EntityPlayer entityPlayer) {
-        if(this.inGround && this.thrower == entityPlayer && this.throwableShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
-            this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            entityPlayer.onItemPickup(this, 1);
+        if (this.inGround && this.thrower == entityPlayer && this.throwableShake <= 0
+                && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+            this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F,
+                    ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
             this.setEntityDead();
         }
-
     }
 
     public float getShadowSize() {
