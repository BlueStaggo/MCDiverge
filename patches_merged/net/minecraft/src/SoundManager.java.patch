--- a/net/minecraft/src/SoundManager.java
+++ b/net/minecraft/src/SoundManager.java
@@ -10,15 +10,25 @@
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
 
 public class SoundManager {
+    public enum MusicType {
+        NORMAL,
+        CAVE,
+        TITLE
+    }
+
     private static SoundSystem sndSystem;
-    private SoundPool soundPoolSounds = new SoundPool();
-    private SoundPool soundPoolStreaming = new SoundPool();
-    private SoundPool soundPoolMusic = new SoundPool();
+    private final SoundPool soundPoolSounds = new SoundPool();
+    private final SoundPool soundPoolStreaming = new SoundPool();
+    private final SoundPool soundPoolMusic = new SoundPool();
+    private final SoundPool soundPoolCaveMusic = new SoundPool();
+    private final SoundPool soundPoolTitleMusic = new SoundPool();
     private int playedSoundsCount = 0;
     private GameSettings options;
     private static boolean loaded = false;
     private Random rand = new Random();
-    private int ticksBeforeMusic = this.rand.nextInt(12000);
+    private int ticksBeforeMusic = 0;
+    private int fadeOutTicks = 0;
+    private MusicType musicType = MusicType.TITLE;
 
     public void loadSoundSettings(GameSettings settings) {
         this.soundPoolStreaming.isGetRandomSound = false;
@@ -29,6 +39,10 @@
 
     }
 
+    public MusicType getMusicType() {
+        return this.musicType;
+    }
+
     private void tryToSetLibraryAndCodecs() {
         try {
             float f1 = this.options.soundVolume;
@@ -84,24 +98,84 @@
         this.soundPoolMusic.addSound(name, file);
     }
 
-    public void playRandomMusicIfReady() {
+    public void addCaveMusic(String name, File file) {
+        this.soundPoolCaveMusic.addSound(name, file);
+    }
+
+    public void addTitleMusic(String name, File file) {
+        this.soundPoolTitleMusic.addSound(name, file);
+    }
+
+    public void tickMusic() {
         if(loaded && this.options.musicVolume != 0.0F) {
             if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
                 if(this.ticksBeforeMusic > 0) {
                     --this.ticksBeforeMusic;
+                }
+            }
+            if(this.fadeOutTicks > 0) {
+                --this.fadeOutTicks;
+            }
+        }
+    }
+
+    private void playRandomMusicFromPool(SoundPool soundPool, MusicType type) {
+        if(loaded && this.options.musicVolume != 0.0F) {
+            if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
+                if(this.ticksBeforeMusic > 0) {
                     return;
                 }
 
-                SoundPoolEntry soundPoolEntry1 = this.soundPoolMusic.getRandomSound();
+                SoundPoolEntry soundPoolEntry1 = soundPool.getRandomSound();
                 if(soundPoolEntry1 != null) {
-                    this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
+                    this.ticksBeforeMusic = (int) ((this.rand.nextInt(12000) + 12000) * this.options.musicDelay);
                     sndSystem.backgroundMusic("BgMusic", soundPoolEntry1.soundUrl, soundPoolEntry1.soundName, false);
                     sndSystem.setVolume("BgMusic", this.options.musicVolume);
                     sndSystem.play("BgMusic");
+                    this.musicType = type;
                 }
             }
-
-        }
+        }
+    }
+
+    public void playRandomMusicIfReady() {
+        playRandomMusicFromPool(this.soundPoolMusic, MusicType.NORMAL);
+    }
+
+    public void playRandomCaveMusicIfReady() {
+        playRandomMusicFromPool(this.soundPoolCaveMusic, MusicType.CAVE);
+    }
+
+    public void playRandomTitleMusicIfReady() {
+        playRandomMusicFromPool(this.soundPoolTitleMusic, MusicType.TITLE);
+        this.ticksBeforeMusic = 0;
+    }
+
+    public void fadeOutBackgroundMusic() {
+        if (fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+            return;
+        }
+        sndSystem.fadeOut("BgMusic", null, 2500);
+        this.ticksBeforeMusic = 0;
+        this.fadeOutTicks = 60;
+    }
+
+    public void fadeOutTitleMusic() {
+        if (fadeOutTicks > 0 || !sndSystem.playing("BgMusic") || this.musicType != MusicType.TITLE) {
+            return;
+        }
+        sndSystem.fadeOut("BgMusic", null, 2500);
+        this.ticksBeforeMusic = 0;
+        this.fadeOutTicks = 60;
+    }
+
+    public void stopBackgroundMusic() {
+        if (!sndSystem.playing("BgMusic") || this.musicType == MusicType.TITLE) {
+            return;
+        }
+        sndSystem.stop("BgMusic");
+        this.ticksBeforeMusic = 0;
+        this.fadeOutTicks = 0;
     }
 
     public void setListener(EntityLiving listener, float partialTick) {
