--- a/net/minecraft/src/ChunkProviderGenerate.java
+++ b/net/minecraft/src/ChunkProviderGenerate.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import io.github.bluestaggo.mcdiverge.WorldGenSpeleothems;
+
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
@@ -107,7 +109,7 @@
 
     }
 
-    public void replaceSurfaceBlocks(int chunkX, int chunkZ, byte[] blocks) {
+    public void replaceSurfaceBlocks(int chunkX, int chunkZ, byte[] blocks, NibbleArray metadata) {
         byte b4 = 64;
         double d5 = 8.0D / 256D;
         this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(chunkX * 16), (double)(chunkZ * 16), 0.0D, 16, 16, 1, d5, d5, 1.0D);
@@ -125,14 +127,16 @@
 
                 for(int i15 = 127; i15 >= 0; --i15) {
                     int i16 = (i7 * 16 + i8) * 128 + i15;
-                    if(i15 <= 0 + this.rand.nextInt(6) - 1) {
+                    if(i15 <= this.rand.nextInt(4)) {
                         blocks[i16] = (byte)Block.bedrock.blockID;
                     } else {
                         byte b17 = blocks[i16];
                         if(b17 == 0) {
                             i12 = -1;
                         } else if(b17 == Block.stone.blockID) {
-                            if(i12 == -1) {
+                            if(i15 <= 32 - this.rand.nextInt(8)) {
+                                metadata.set(i7, i15, i8, 2);
+                            } else if(i12 == -1) {
                                 if(i11 <= 0) {
                                     b13 = 0;
                                     b14 = (byte)Block.stone.blockID;
@@ -183,7 +187,7 @@
         byte[] b3 = new byte[32768];
         Chunk chunk4 = new Chunk(this.worldObj, b3, chunkX, chunkZ);
         this.generateTerrain(chunkX, chunkZ, b3);
-        this.replaceSurfaceBlocks(chunkX, chunkZ, b3);
+        this.replaceSurfaceBlocks(chunkX, chunkZ, b3, chunk4.data);
         this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, b3);
         chunk4.generateSkylightMap();
         return chunk4;
@@ -305,9 +309,10 @@
         int i13;
         int i14;
         int i15;
-        for(i12 = 0; i12 < 8; ++i12) {
+        int maxDungeons = this.rand.nextInt(2) + 1;
+        for(i12 = 0; i12 < maxDungeons; ++i12) {
             i13 = i4 + this.rand.nextInt(16) + 8;
-            i14 = this.rand.nextInt(128);
+            i14 = this.rand.nextInt(64);
             i15 = i5 + this.rand.nextInt(16) + 8;
             (new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15);
         }
@@ -333,39 +338,60 @@
             (new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
+        for (i12 = 0; i12 < 4; ++i12) {
+            i13 = i4 + this.rand.nextInt(16);
+            i14 = this.rand.nextInt(96) + 32;
+            i15 = i5 + this.rand.nextInt(16);
+            (new WorldGenMinable(Block.stone.blockID, 64, 1)).generate(this.worldObj, this.rand, i13, i14, i15);
+        }
+
         for(i12 = 0; i12 < 20; ++i12) {
             i13 = i4 + this.rand.nextInt(16);
             i14 = this.rand.nextInt(128);
             i15 = i5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, i13, i14, i15);
+            (new WorldGenMinable(Block.oreCoal.blockID, 16).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
         for(i12 = 0; i12 < 20; ++i12) {
             i13 = i4 + this.rand.nextInt(16);
             i14 = this.rand.nextInt(64);
             i15 = i5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, i13, i14, i15);
+            (new WorldGenMinable(Block.oreIron.blockID, 8).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
         for(i12 = 0; i12 < 2; ++i12) {
             i13 = i4 + this.rand.nextInt(16);
             i14 = this.rand.nextInt(32);
             i15 = i5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, i13, i14, i15);
+            (new WorldGenMinable(Block.oreGold.blockID, 8).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
         for(i12 = 0; i12 < 8; ++i12) {
             i13 = i4 + this.rand.nextInt(16);
             i14 = this.rand.nextInt(16);
             i15 = i5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, i13, i14, i15);
+            (new WorldGenMinable(Block.oreRedstone.blockID, 7).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
         for(i12 = 0; i12 < 1; ++i12) {
             i13 = i4 + this.rand.nextInt(16);
             i14 = this.rand.nextInt(16);
             i15 = i5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, i13, i14, i15);
+            (new WorldGenMinable(Block.oreDiamond.blockID, 7).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
+        }
+
+        for (i12 = 0; i12 < 2; ++i12) {
+            i13 = i4 + this.rand.nextInt(16);
+            i14 = this.rand.nextInt(32);
+            i15 = i5 + this.rand.nextInt(16);
+            (new WorldGenMinable(Block.oreRuby.blockID, 4).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
+        }
+
+        for (i12 = 0; i12 < 2; ++i12) {
+            i13 = i4 + this.rand.nextInt(16);
+            i14 = this.rand.nextInt(32);
+            i15 = i5 + this.rand.nextInt(16);
+            (new WorldGenMinable(Block.oreSapphire.blockID, 4).withSlateMetadata(1)).generate(this.worldObj, this.rand, i13, i14, i15);
         }
 
         d10 = 0.5D;
@@ -448,14 +474,31 @@
             (new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, i15, i16, i17);
         }
 
-        for(i14 = i4 + 8 + 0; i14 < i4 + 8 + 16; ++i14) {
-            for(i15 = i5 + 8 + 0; i15 < i5 + 8 + 16; ++i15) {
-                i16 = this.worldObj.getTopSolidOrLiquidBlock(i14, i15);
-                if(this.worldObj.snowCovered && i16 > 0 && i16 < 128 && this.worldObj.getBlockId(i14, i16, i15) == 0 && this.worldObj.getBlockMaterial(i14, i16 - 1, i15).getIsSolid() && this.worldObj.getBlockMaterial(i14, i16 - 1, i15) != Material.ice) {
-                    this.worldObj.setBlockWithNotify(i14, i16, i15, Block.snow.blockID);
+        for (i14 = 0; i14 < 64; ++i14) {
+            i15 = i4 + this.rand.nextInt(16) + 8;
+            i16 = this.rand.nextInt(64);
+            i17 = i5 + this.rand.nextInt(16) + 8;
+            (new WorldGenSpeleothems(Block.speleothem.blockID)).generate(this.worldObj, this.rand, i15, i16, i17);
+        }
+
+        if (this.worldObj.snowCovered) {
+            for(i14 = i4 + 8; i14 < i4 + 24; ++i14) {
+                for(i15 = i5 + 8; i15 < i5 + 24; ++i15) {
+                    i16 = this.worldObj.getTopSolidOrLiquidBlock(i14, i15);
+                    if(i16 > 0 && i16 < 128 && this.worldObj.getBlockId(i14, i16, i15) == 0 && this.worldObj.getBlockMaterial(i14, i16 - 1, i15).getIsSolid() && this.worldObj.getBlockMaterial(i14, i16 - 1, i15) != Material.ice) {
+                        this.worldObj.setBlockWithNotify(i14, i16, i15, Block.snow.blockID);
+                    }
                 }
             }
         }
+
+        for(i14 = i4 + 8; i14 < i4 + 24; ++i14)
+            for(i15 = i5 + 8; i15 < i5 + 24; ++i15)
+                for (int y = 0; y < 8; y++) {
+                    if (!this.worldObj.isBlockNormalCube(i14, y, i15)) {
+                        this.worldObj.setBlockWithNotify(i14, y, i15, Block.lavaStill.blockID);
+                    }
+                }
 
         BlockSand.fallInstantly = false;
     }
