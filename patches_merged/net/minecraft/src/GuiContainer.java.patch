--- a/net/minecraft/src/GuiContainer.java
+++ b/net/minecraft/src/GuiContainer.java
@@ -6,6 +6,8 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import io.github.bluestaggo.mcdiverge.ItemTooltip;
+
 public abstract class GuiContainer extends GuiScreen {
     private static RenderItem itemRenderer = new RenderItem();
     protected int xSize = 176;
@@ -17,6 +19,7 @@
         int i4 = (this.width - this.xSize) / 2;
         int i5 = (this.height - this.ySize) / 2;
         this.drawGuiContainerBackgroundLayer(renderPartialTick);
+        super.drawScreen(mouseX, mouseY, renderPartialTick);
         GL11.glPushMatrix();
         GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
         RenderHelper.enableStandardItemLighting();
@@ -52,6 +55,12 @@
         GL11.glDisable(GL11.GL_LIGHTING);
         GL11.glDisable(GL11.GL_DEPTH_TEST);
         this.drawGuiContainerForegroundLayer();
+        for (int i6 = 0; i6 < this.inventorySlots.size(); ++i6) {
+            SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(i6);
+            if (slotInventory4.getIsMouseOverSlot(mouseX, mouseY)) {
+                this.drawSlotTooltip(slotInventory4, mouseX, mouseY);
+            }
+        }
         GL11.glEnable(GL11.GL_LIGHTING);
         GL11.glEnable(GL11.GL_DEPTH_TEST);
         GL11.glPopMatrix();
@@ -83,6 +92,35 @@
         itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, itemStack6, i4, i5);
     }
 
+    private void drawSlotTooltip(SlotInventory slotInventory1, int x, int y) {
+        x -= (this.width - this.xSize) / 2;
+        y -= (this.height - this.ySize) / 2;
+        if (slotInventory1 == null || slotInventory1.getStack() == null) {
+            return;
+        }
+
+        ItemTooltip tooltip = slotInventory1.getTooltip();
+        if (tooltip != null) {
+            int tooltipWidth = 0;
+            for (String line : tooltip.lines) {
+                int newWidth = this.fontRenderer.getStringWidth(line);
+                if (newWidth > tooltipWidth) {
+                    tooltipWidth = newWidth;
+                }
+            }
+            if ((x + tooltipWidth + 48) > this.width) {
+                x -= tooltipWidth + 24;
+            }
+
+            int tooltipHeight = tooltip.size() * 9;
+            this.drawGradientRect(x + 8, y, x + tooltipWidth + 16, y + tooltipHeight + 8, tooltip.gradient.item0,
+                    tooltip.gradient.item1);
+            for (int i = 0; i < tooltip.size(); i++) {
+                this.drawString(this.fontRenderer, tooltip.lines.get(i), x + 12, y + 4 + i * 9, tooltip.colors.get(i));
+            }
+        }
+    }
+
     private Slot getSlotAtPosition(int i1, int i2) {
         for(int i3 = 0; i3 < this.inventorySlots.size(); ++i3) {
             SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(i3);
@@ -122,12 +160,12 @@
                         }
                     } else if(itemStack6 != null && inventoryPlayer5.draggedItemStack != null) {
                         if(slot4.isItemValid(inventoryPlayer5.draggedItemStack)) {
-                            if(itemStack6.itemID != inventoryPlayer5.draggedItemStack.itemID) {
+                            if(itemStack6.itemID != inventoryPlayer5.draggedItemStack.itemID || itemStack6.itemMetadata != inventoryPlayer5.draggedItemStack.itemMetadata) {
                                 if(inventoryPlayer5.draggedItemStack.stackSize <= slot4.inventory.getInventoryStackLimit()) {
                                     slot4.putStack(inventoryPlayer5.draggedItemStack);
                                     inventoryPlayer5.draggedItemStack = itemStack6;
                                 }
-                            } else if(itemStack6.itemID == inventoryPlayer5.draggedItemStack.itemID) {
+                            } else if(itemStack6.itemID == inventoryPlayer5.draggedItemStack.itemID && itemStack6.itemMetadata == inventoryPlayer5.draggedItemStack.itemMetadata) {
                                 if(i3 == 0) {
                                     i7 = inventoryPlayer5.draggedItemStack.stackSize;
                                     if(i7 > slot4.inventory.getInventoryStackLimit() - itemStack6.stackSize) {
@@ -162,7 +200,7 @@
                                     itemStack6.stackSize += i7;
                                 }
                             }
-                        } else if(itemStack6.itemID == inventoryPlayer5.draggedItemStack.itemID && inventoryPlayer5.draggedItemStack.getMaxStackSize() > 1) {
+                        } else if(itemStack6.itemID == inventoryPlayer5.draggedItemStack.itemID && itemStack6.itemMetadata == inventoryPlayer5.draggedItemStack.itemMetadata && inventoryPlayer5.draggedItemStack.getMaxStackSize() > 1) {
                             i7 = itemStack6.stackSize;
                             if(i7 > 0 && i7 + inventoryPlayer5.draggedItemStack.stackSize <= inventoryPlayer5.draggedItemStack.getMaxStackSize()) {
                                 inventoryPlayer5.draggedItemStack.stackSize += i7;
@@ -197,7 +235,7 @@
                 }
             }
         }
-
+        super.mouseClicked(i1, i2, i3);
     }
 
     protected void mouseMovedOrUp(int i1, int i2, int i3) {
