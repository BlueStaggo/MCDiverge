--- a/net/minecraft/src/GameSettings.java
+++ b/net/minecraft/src/GameSettings.java
@@ -9,35 +9,46 @@
 import net.minecraft.client.Minecraft;
 
 import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.Display;
 
 public class GameSettings {
-    private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
-    private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+    private static final String[] RENDER_DISTANCES = new String[] { "FAR", "NORMAL", "SHORT", "TINY" };
+    private static final String[] DIFFICULTY_LEVELS = new String[] { "Peaceful", "Easy", "Normal", "Hard" };
     public float musicVolume = 1.0F;
     public float soundVolume = 1.0F;
+    public float musicDelay = 1.0F;
     public float mouseSensitivity = 0.5F;
+    public float brightness = 0.5F;
     public boolean invertMouse = false;
     public int renderDistance = 0;
     public boolean viewBobbing = true;
     public boolean anaglyph = false;
     public boolean limitFramerate = false;
     public boolean fancyGraphics = true;
+    public boolean caveSounds = false;
+    public boolean creativeDebug = false;
     public KeyBinding keyBindForward = new KeyBinding("Forward", Keyboard.KEY_W);
     public KeyBinding keyBindLeft = new KeyBinding("Left", Keyboard.KEY_A);
     public KeyBinding keyBindBack = new KeyBinding("Back", Keyboard.KEY_S);
     public KeyBinding keyBindRight = new KeyBinding("Right", Keyboard.KEY_D);
     public KeyBinding keyBindJump = new KeyBinding("Jump", Keyboard.KEY_SPACE);
-    public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_I);
+    public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_E);
     public KeyBinding keyBindDrop = new KeyBinding("Drop", Keyboard.KEY_Q);
     public KeyBinding keyBindChat = new KeyBinding("Chat", Keyboard.KEY_T);
     public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", Keyboard.KEY_F);
     public KeyBinding keyBindSneak = new KeyBinding("Sneak", Keyboard.KEY_LSHIFT);
-    public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+    public KeyBinding keyBindRun = new KeyBinding("Run", Keyboard.KEY_LCONTROL);
+    public KeyBinding keyBindCreative = new KeyBinding("Creative", Keyboard.KEY_C);
+    public KeyBinding keyBindRecipeGuide = new KeyBinding("Recipe guide", Keyboard.KEY_R);
+    public KeyBinding[] keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack,
+            this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory,
+            this.keyBindChat, this.keyBindToggleFog, this.keyBindRun, this.keyBindCreative, this.keyBindRecipeGuide };
     protected Minecraft mc;
     private File optionsFile;
-    public int numberOfOptions = 10;
+    public int numberOfOptions = 13;
     public int difficulty = 2;
     public boolean thirdPersonView = false;
+    public boolean debugMenu = false;
 
     public GameSettings(Minecraft minecraft, File file) {
         this.mc = minecraft;
@@ -58,121 +69,196 @@
     }
 
     public void setOptionFloatValue(int i1, float f2) {
-        if(i1 == 0) {
+        if (i1 == 0) {
             this.musicVolume = f2;
             this.mc.sndManager.onSoundOptionsChanged();
         }
 
-        if(i1 == 1) {
+        if (i1 == 1) {
             this.soundVolume = f2;
             this.mc.sndManager.onSoundOptionsChanged();
         }
 
-        if(i1 == 3) {
+        if (i1 == 3) {
             this.mouseSensitivity = f2;
         }
 
+        if (i1 == 11) {
+            this.brightness = f2;
+            RenderGlobal.globalBrightness = this.brightness * 0.2F;
+            this.mc.renderGlobal.loadRenderers();
+        }
+
+        if (i1 == 12) {
+            this.musicDelay = f2;
+        }
     }
 
     public void setOptionValue(int i1, int i2) {
-        if(i1 == 2) {
+        if (i1 == 2) {
             this.invertMouse = !this.invertMouse;
         }
 
-        if(i1 == 4) {
+        if (i1 == 4) {
             this.renderDistance = this.renderDistance + i2 & 3;
         }
 
-        if(i1 == 5) {
+        if (i1 == 5) {
             this.viewBobbing = !this.viewBobbing;
         }
 
-        if(i1 == 6) {
+        if (i1 == 6) {
             this.anaglyph = !this.anaglyph;
             this.mc.renderEngine.refreshTextures();
         }
 
-        if(i1 == 7) {
+        if (i1 == 7) {
             this.limitFramerate = !this.limitFramerate;
+            Display.setVSyncEnabled(this.limitFramerate);
         }
 
-        if(i1 == 8) {
+        if (i1 == 8) {
             this.difficulty = this.difficulty + i2 & 3;
         }
 
-        if(i1 == 9) {
+        if (i1 == 9) {
             this.fancyGraphics = !this.fancyGraphics;
             this.mc.renderGlobal.loadRenderers();
         }
 
+        if (i1 == 10) {
+            this.caveSounds = !this.caveSounds;
+            if (this.caveSounds) {
+                this.mc.sndManager.playSoundFX("ambient.cave.cave", 1.0F, 1.0F);
+            }
+        }
+
         this.saveOptions();
     }
 
     public int isSlider(int i1) {
-        return i1 == 0 ? 1 : (i1 == 1 ? 1 : (i1 == 3 ? 1 : 0));
+        return i1 == 0 || i1 == 1 || i1 == 3 || i1 == 11 || i1 == 12 ? 1 : 0;
     }
 
     public float getOptionFloatValue(int i1) {
-        return i1 == 0 ? this.musicVolume : (i1 == 1 ? this.soundVolume : (i1 == 3 ? this.mouseSensitivity : 0.0F));
+        switch (i1) {
+            case 0: return this.musicVolume;
+            case 1: return this.soundVolume;
+            case 3: return this.mouseSensitivity;
+            case 11: return this.brightness;
+            case 12: return this.musicDelay;
+            default: return 0.0F;
+        }
     }
 
     public String getOptionDisplayString(int i1) {
-        return i1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (i1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (i1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (i1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (i1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (i1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (i1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (i1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (i1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (i1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+        switch (i1) {
+            case 0:
+                return "Music: " + (this.musicVolume > 0.0F ? (int) (this.musicVolume * 100.0F) + "%" : "OFF");
+            case 1:
+                return "Sound: " + (this.soundVolume > 0.0F ? (int) (this.soundVolume * 100.0F) + "%" : "OFF");
+            case 2:
+                return "Invert mouse: " + (this.invertMouse ? "ON" : "OFF");
+            case 3:
+                return (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*"
+                        : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!"
+                                : "Sensitivity: " + (int) (this.mouseSensitivity * 200.0F) + "%"));
+            case 4:
+                return "Render distance: " + RENDER_DISTANCES[this.renderDistance];
+            case 5:
+                return "View bobbing: " + (this.viewBobbing ? "ON" : "OFF");
+            case 6:
+                return "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF");
+            case 7:
+                return "VSync: " + (this.limitFramerate ? "ON" : "OFF");
+            case 8:
+                return "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty];
+            case 9:
+                return "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST");
+            case 10:
+                return "Cave sounds: " + (this.caveSounds ? "ON" : "OFF");
+            case 11:
+                return "Brightness: " + (
+                        this.brightness <= 0.0F ? "Moody"
+                        : this.brightness >= 1.0F ? "Bright"
+                        : (int) (this.brightness * 100.0F) + "%");
+            case 12:
+                float delay = (int) (this.musicDelay * 100.0F) / 10.0F;
+                return "Music Delay: " + delay + "-" + delay * 2.0F + " mins";
+            default:
+                return "NULL";
+        }
     }
 
     public void loadOptions() {
         try {
-            if(!this.optionsFile.exists()) {
+            if (!this.optionsFile.exists()) {
                 return;
             }
 
             BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.optionsFile));
-            String string2 = "";
+            String string2;
 
-            while((string2 = bufferedReader1.readLine()) != null) {
+            while ((string2 = bufferedReader1.readLine()) != null) {
                 String[] string3 = string2.split(":");
-                if(string3[0].equals("music")) {
+                if (string3[0].equals("music")) {
                     this.musicVolume = this.parseFloat(string3[1]);
                 }
 
-                if(string3[0].equals("sound")) {
+                if (string3[0].equals("sound")) {
                     this.soundVolume = this.parseFloat(string3[1]);
                 }
 
-                if(string3[0].equals("mouseSensitivity")) {
+                if (string3[0].equals("mouseSensitivity")) {
                     this.mouseSensitivity = this.parseFloat(string3[1]);
                 }
 
-                if(string3[0].equals("invertYMouse")) {
+                if (string3[0].equals("invertYMouse")) {
                     this.invertMouse = string3[1].equals("true");
                 }
 
-                if(string3[0].equals("viewDistance")) {
+                if (string3[0].equals("viewDistance")) {
                     this.renderDistance = Integer.parseInt(string3[1]);
                 }
 
-                if(string3[0].equals("bobView")) {
+                if (string3[0].equals("bobView")) {
                     this.viewBobbing = string3[1].equals("true");
                 }
 
-                if(string3[0].equals("anaglyph3d")) {
+                if (string3[0].equals("anaglyph3d")) {
                     this.anaglyph = string3[1].equals("true");
                 }
 
-                if(string3[0].equals("limitFramerate")) {
+                if (string3[0].equals("limitFramerate")) {
                     this.limitFramerate = string3[1].equals("true");
                 }
 
-                if(string3[0].equals("difficulty")) {
+                if (string3[0].equals("difficulty")) {
                     this.difficulty = Integer.parseInt(string3[1]);
                 }
 
-                if(string3[0].equals("fancyGraphics")) {
+                if (string3[0].equals("fancyGraphics")) {
                     this.fancyGraphics = string3[1].equals("true");
                 }
 
-                for(int i4 = 0; i4 < this.keyBindings.length; ++i4) {
-                    if(string3[0].equals("key_" + this.keyBindings[i4].keyDescription)) {
+                if (string3[0].equals("caveSounds")) {
+                    this.caveSounds = string3[1].equals("true");
+                }
+
+                if (string3[0].equals("brightness")) {
+                    this.brightness = this.parseFloat(string3[1]);
+                }
+
+                if (string3[0].equals("musicDelay")) {
+                    this.musicDelay = this.parseFloat(string3[1]);
+                }
+
+                if (string3[0].equals("creativeDebug")) {
+                    this.creativeDebug = string3[1].equals("true");
+                }
+
+                for (int i4 = 0; i4 < this.keyBindings.length; ++i4) {
+                    if (string3[0].equals("key_" + this.keyBindings[i4].keyDescription)) {
                         this.keyBindings[i4].keyCode = Integer.parseInt(string3[1]);
                     }
                 }
@@ -193,18 +279,24 @@
     public void saveOptions() {
         try {
             PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.optionsFile));
-            printWriter1.println("music:" + this.musicVolume);
-            printWriter1.println("sound:" + this.soundVolume);
+            printWriter1.println("music:" + Math.floor(this.musicVolume * 100.0F) / 100.0F);
+            printWriter1.println("sound:" + Math.floor(this.soundVolume * 100.0F) / 100.0F);
             printWriter1.println("invertYMouse:" + this.invertMouse);
-            printWriter1.println("mouseSensitivity:" + this.mouseSensitivity);
+            printWriter1.println("mouseSensitivity:" + Math.floor(this.mouseSensitivity * 100.0F) / 100.0F);
             printWriter1.println("viewDistance:" + this.renderDistance);
             printWriter1.println("bobView:" + this.viewBobbing);
             printWriter1.println("anaglyph3d:" + this.anaglyph);
             printWriter1.println("limitFramerate:" + this.limitFramerate);
             printWriter1.println("difficulty:" + this.difficulty);
             printWriter1.println("fancyGraphics:" + this.fancyGraphics);
+            printWriter1.println("caveSounds:" + this.caveSounds);
+            printWriter1.println("brightness:" + Math.floor(this.brightness * 100.0F) / 100.0F);
+            printWriter1.println("musicDelay:" + Math.floor(this.musicDelay * 100.0F) / 100.0F);
+            if (this.creativeDebug) {
+                printWriter1.println("creativeDebug:true");
+            }
 
-            for(int i2 = 0; i2 < this.keyBindings.length; ++i2) {
+            for (int i2 = 0; i2 < this.keyBindings.length; ++i2) {
                 printWriter1.println("key_" + this.keyBindings[i2].keyDescription + ":" + this.keyBindings[i2].keyCode);
             }
 
@@ -213,6 +305,5 @@
             System.out.println("Failed to save options");
             exception3.printStackTrace();
         }
-
     }
 }
