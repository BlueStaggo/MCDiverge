--- a/net/minecraft/src/ThreadDownloadResources.java
+++ b/net/minecraft/src/ThreadDownloadResources.java
@@ -1,11 +1,8 @@
 package net.minecraft.src;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.*;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
@@ -55,11 +52,33 @@
                     }
                 }
             }
+
+            InputStream customResStream = this.getClass().getResourceAsStream("/customres.txt");
+            assert customResStream != null;
+            BufferedReader customResReader = new BufferedReader(new InputStreamReader(customResStream));
+            String customResLine;
+
+            while ((customResLine = customResReader.readLine()) != null) {
+                this.unpackCustomResource(customResLine);
+            }
+
+            this.loadResource(this.resourcesFolder, "");
         } catch (Exception exception13) {
             this.loadResource(this.resourcesFolder, "");
             exception13.printStackTrace();
         }
+    }
 
+    private void unpackCustomResource(String path) throws IOException {
+        if (!path.equals("")) {
+            InputStream resStream = this.getClass().getResourceAsStream(path);
+            if (resStream == null) {
+                throw new IOException("Resource " + path + " is invalid.");
+            }
+            File res = new File(System.getProperty("user.dir") + path);
+            res.mkdirs();
+            Files.copy(resStream, Paths.get(System.getProperty("user.dir") + path), StandardCopyOption.REPLACE_EXISTING);
+        }
     }
 
     public void reloadResources() {
