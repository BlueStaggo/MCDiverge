--- /dev/null
+++ b/io/github/bluestaggo/mcdiverge/GuiRecipeGuide.java
@@ -1,0 +1,134 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.src.*;
+
+public class GuiRecipeGuide extends GuiContainer {
+    private final List<ItemStack[]> recipes = new ArrayList<>();
+    private int currentRecipe = 0;
+    private final ItemStack filterItem;
+    private final String filterItemName;
+
+    public GuiRecipeGuide() {
+        this(null);
+    }
+
+    public GuiRecipeGuide(ItemStack filterItem) {
+        this.xSize = 176;
+        this.ySize = 90;
+        this.filterItem = filterItem;
+
+        String name = "Crafting";
+        if (filterItem != null) {
+            ItemTooltip tooltip = this.filterItem.getTooltip();
+            if (tooltip != null) {
+                name = tooltip.lines.get(0);
+            }
+        }
+        filterItemName = name;
+
+        this.setupRecipes();
+        this.setupCurrentRecipe();
+    }
+
+    private void setupRecipes() {
+        this.recipes.clear();
+        int r;
+        for (r = 0; r < CraftingManager.getInstance().count(); r++) {
+            ItemStack[] recipe = CraftingManager.getInstance().getRecipeAsItems(r);
+            if (showRecipe(recipe)) {
+                recipes.add(recipe);
+            }
+        }
+        for (r = 0; r < FurnaceRecipeManager.getInstance().count(); r++) {
+            ItemStack[] recipe = FurnaceRecipeManager.getInstance().getRecipeAsItems(r);
+            if (showRecipe(recipe)) {
+                recipes.add(recipe);
+            }
+        }
+    }
+
+    private boolean showRecipe(ItemStack[] recipe) {
+        Stream<ItemStack> filterStream = Arrays.stream(recipe).filter(Objects::nonNull);
+        return filterItem == null
+                || filterItem.itemID == 0
+                || filterStream.anyMatch(i ->
+                    i.itemID == filterItem.itemID
+                    && (i.itemMetadata == -1
+                        || i.itemMetadata == filterItem.itemMetadata));
+    }
+
+    protected void drawGuiContainerBackgroundLayer(float f1) {
+        int bg = this.mc.renderEngine.getTexture("/gui/guide.png");
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        this.mc.renderEngine.bindTexture(bg);
+        int posX = (this.width - this.xSize) / 2;
+        int posY = (this.height - this.ySize) / 2;
+        this.drawTexturedModalRect(posX, posY, 0, 0, this.xSize, this.ySize);
+    }
+
+    public void initGui() {
+        int posX = (this.width - this.xSize) / 2;
+        int posY = (this.height - this.ySize) / 2;
+        this.controlList.clear();
+        this.controlList.add(new GuiButton(0, 5 + posX, 67 + posY, 18, 18, "<"));
+        this.controlList.add(new GuiButton(1, 153 + posX, 67 + posY, 18, 18, ">"));
+    }
+
+    private void setupCurrentRecipe() {
+        this.inventorySlots.clear();
+        if (this.recipes.size() == 0) {
+            return;
+        }
+        ItemStack[] items = recipes.get(this.currentRecipe);
+        InventoryReadonly inventory = new InventoryReadonly(items);
+        for (int i = 0; i < 9; i++) {
+            this.inventorySlots.add(new SlotInventory(this, inventory, i, 30 + (i % 3) * 18, 17 + (i / 3) * 18));
+        }
+        this.inventorySlots.add(new SlotInventory(this, inventory, 9, 124, 35));
+    }
+
+    protected void drawGuiContainerForegroundLayer() {
+        if (this.recipes.size() > 0) {
+            String title = (this.currentRecipe + 1) +
+                " / " +
+                this.recipes.size() +
+                " " +
+                this.filterItemName +
+                " recipes";
+
+            this.drawString(this.fontRenderer, title, 5, 5, 0xFFFFFF);
+        } else {
+            this.drawString(this.fontRenderer, "No recipes", 5, 5, 0xFFFFFF);
+            this.drawString(this.fontRenderer, "Discover more items!", 29, 76, 0xFFFFFF);
+        }
+    }
+
+    protected void actionPerformed(GuiButton guiButton1) {
+        switch (guiButton1.id) {
+            case 0:
+                if (this.currentRecipe > 0) {
+                    this.currentRecipe--;
+                } else {
+                    this.currentRecipe = this.recipes.size() - 1;
+                }
+                break;
+
+            case 1:
+                if (this.currentRecipe < this.recipes.size() - 1) {
+                    this.currentRecipe++;
+                } else {
+                    this.currentRecipe = 0;
+                }
+                break;
+        }
+        this.setupCurrentRecipe();
+    }
+}
