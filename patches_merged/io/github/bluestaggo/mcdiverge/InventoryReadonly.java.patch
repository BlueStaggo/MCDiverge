--- /dev/null
+++ b/io/github/bluestaggo/mcdiverge/InventoryReadonly.java
@@ -1,0 +1,128 @@
+package io.github.bluestaggo.mcdiverge;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import net.minecraft.src.*;
+import org.lwjgl.input.Keyboard;
+
+public class InventoryReadonly implements IInventory {
+    private final ItemStack[] items;
+    private final boolean pickable;
+    public boolean pickOne;
+
+    public InventoryReadonly(ItemStack[] items) {
+        this(items, false);
+    }
+
+    public InventoryReadonly(ItemStack[] items, boolean pickable) {
+        this.items = items;
+        this.pickable = pickable;
+    }
+
+    public static InventoryReadonly generateCreativeInventory(boolean debug) {
+        List<ItemStack> items = new ArrayList<>();
+        for (int i = 0; i < Item.itemsList.length; i++) {
+            if (i < 256) {
+                if (Block.blocksList[i] == null) {
+                    continue;
+                }
+                for (int m : Block.blocksList[i].availableMetadata()) {
+                    ItemStack stack = new ItemStack(i, 1).withMetadata(m);
+                    if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+                        items.add(stack);
+                    }
+                }
+            } else {
+                ItemStack stack = new ItemStack(i, 1);
+                if (stack.getItem() != null && (debug || !stack.getTooltip().gradient.equals(ItemTooltip.INVALID_GRAD))) {
+                    items.add(stack);
+                }
+            }
+        }
+        ItemStack[] itemArray = new ItemStack[items.size()];
+        items.toArray(itemArray);
+        return new InventoryReadonly(itemArray, true);
+    }
+
+    public static InventoryReadonly getCreativeInventory() {
+        try {
+            List<String> ids = new ArrayList<>();
+            BufferedReader reader = new BufferedReader(
+                    new InputStreamReader(
+                            InventoryReadonly.class.getResourceAsStream("/gui/creative_items.txt")));
+
+            String line;
+            while ((line = reader.readLine()) != null) {
+                if (!line.startsWith("--")) {
+                    ids.addAll(Arrays.asList(line.trim().split(" +")));
+                }
+            }
+
+            List<ItemStack> items = new ArrayList<>();
+            for (String id : ids) {
+                String[] idSplit = id.split("#");
+                if (idSplit.length < 2) {
+                    items.add(null);
+                    continue;
+                }
+
+                int itemID = Integer.parseInt(idSplit[0], 10);
+                int itemMetadata = Integer.parseInt(idSplit[1], 16);
+
+                if (itemID <= 0 || itemMetadata < 0) {
+                    items.add(null);
+                    continue;
+                }
+
+                ItemStack item = new ItemStack(itemID, 1).withMetadata(itemMetadata);
+                items.add(item);
+            }
+
+            ItemStack[] itemArray = new ItemStack[items.size()];
+            items.toArray(itemArray);
+
+            return new InventoryReadonly(itemArray, true);
+        } catch (Exception e) {
+            System.out.println("Could not get creative inventory!");
+            e.printStackTrace();
+            System.out.println("Generating creative inventory instead...");
+            return generateCreativeInventory(false);
+        }
+    }
+
+    public int getSizeInventory() {
+        return items.length;
+    }
+
+    public ItemStack getStackInSlot(int i1) {
+        return i1 < items.length
+            ? items[i1] == null
+                ? null
+                : items[i1].copy()
+            : null;
+    }
+
+    public ItemStack decrStackSize(int i1, int i2) {
+        return this.pickable ? new ItemStack(items[i1].itemID,
+                                             this.pickOne && !Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 1 : items[i1].getMaxStackSize(),
+                                             items[i1].itemDmg).withMetadata(items[i1].itemMetadata) : null;
+    }
+
+    public void setInventorySlotContents(int i1, ItemStack itemStack2) {
+    }
+
+    public String getInvName() {
+        return "Readonly Inventory";
+    }
+
+    public int getInventoryStackLimit() {
+        return 64;
+    }
+
+    public void onInventoryChanged() {
+    }
+}
